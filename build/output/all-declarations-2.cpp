#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "all-declarations-2.h"


//---------------------------------------------------------------------------------------------------------------------*

cMapElement_pic_31__38__5F_dataMap::cMapElement_pic_31__38__5F_dataMap (const GALGAS_lstring & inKey,
                                                                        const GALGAS_uintlist & in_mData
                                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mData (in_mData) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_pic_31__38__5F_dataMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mData.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_pic_31__38__5F_dataMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_pic_31__38__5F_dataMap (mAttribute_lkey, mAttribute_mData COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_pic_31__38__5F_dataMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mData" ":" ;
  mAttribute_mData.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_pic_31__38__5F_dataMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_pic_31__38__5F_dataMap * operand = (cMapElement_pic_31__38__5F_dataMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mData.objectCompare (operand->mAttribute_mData) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap::GALGAS_pic_31__38__5F_dataMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap::GALGAS_pic_31__38__5F_dataMap (const GALGAS_pic_31__38__5F_dataMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap & GALGAS_pic_31__38__5F_dataMap::operator = (const GALGAS_pic_31__38__5F_dataMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap GALGAS_pic_31__38__5F_dataMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap GALGAS_pic_31__38__5F_dataMap::constructor_mapWithMapToOverride (const GALGAS_pic_31__38__5F_dataMap & inMapToOverride
                                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap GALGAS_pic_31__38__5F_dataMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_pic_31__38__5F_dataMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                         const GALGAS_uintlist & inArgument0,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataMap * p = NULL ;
  macroMyNew (p, cMapElement_pic_31__38__5F_dataMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@pic_31__38__5F_dataMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataMap::modifier_insertKey (GALGAS_lstring inKey,
                                                        GALGAS_uintlist inArgument0,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataMap * p = NULL ;
  macroMyNew (p, cMapElement_pic_31__38__5F_dataMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' data is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_pic_31__38__5F_dataMap_searchKey = "the '%K' data is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataMap::method_searchKey (GALGAS_lstring inKey,
                                                      GALGAS_uintlist & outArgument0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataMap * p = (const cMapElement_pic_31__38__5F_dataMap *) performSearch (inKey,
                                                                                                               inCompiler,
                                                                                                               kSearchErrorMessage_pic_31__38__5F_dataMap_searchKey
                                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataMap) ;
    outArgument0 = p->mAttribute_mData ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_pic_31__38__5F_dataMap::reader_mDataForKey (const GALGAS_string & inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_pic_31__38__5F_dataMap * p = (const cMapElement_pic_31__38__5F_dataMap *) attributes ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataMap) ;
    result = p->mAttribute_mData ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataMap::modifier_setMDataForKey (GALGAS_uintlist inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_pic_31__38__5F_dataMap * p = (cMapElement_pic_31__38__5F_dataMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataMap) ;
    p->mAttribute_mData = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_pic_31__38__5F_dataMap * GALGAS_pic_31__38__5F_dataMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                       const GALGAS_string & inKey
                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataMap * result = (cMapElement_pic_31__38__5F_dataMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_pic_31__38__5F_dataMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_pic_31__38__5F_dataMap::cEnumerator_pic_31__38__5F_dataMap (const GALGAS_pic_31__38__5F_dataMap & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap_2D_element cEnumerator_pic_31__38__5F_dataMap::current (LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataMap * p = (const cMapElement_pic_31__38__5F_dataMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataMap) ;
  return GALGAS_pic_31__38__5F_dataMap_2D_element (p->mAttribute_lkey, p->mAttribute_mData) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_pic_31__38__5F_dataMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_pic_31__38__5F_dataMap::current_mData (LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataMap * p = (const cMapElement_pic_31__38__5F_dataMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataMap) ;
  return p->mAttribute_mData ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @pic18_dataMap type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_pic_31__38__5F_dataMap ("pic18_dataMap",
                                               NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_pic_31__38__5F_dataMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_pic_31__38__5F_dataMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_pic_31__38__5F_dataMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_pic_31__38__5F_dataMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataMap GALGAS_pic_31__38__5F_dataMap::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataMap result ;
  const GALGAS_pic_31__38__5F_dataMap * p = (const GALGAS_pic_31__38__5F_dataMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_pic_31__38__5F_dataMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("pic18_dataMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Class for element of '@ipic_31__38_SequentialInstructionList' list                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_ipic_31__38_SequentialInstructionList : public cCollectionElement {
  public : GALGAS_ipic_31__38_SequentialInstructionList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_ipic_31__38_SequentialInstructionList (const GALGAS_ipic_31__38_SequentialInstruction & in_mInstruction
                                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_ipic_31__38_SequentialInstructionList::cCollectionElement_ipic_31__38_SequentialInstructionList (const GALGAS_ipic_31__38_SequentialInstruction & in_mInstruction
                                                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mInstruction) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_ipic_31__38_SequentialInstructionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_ipic_31__38_SequentialInstructionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_ipic_31__38_SequentialInstructionList (mObject.mAttribute_mInstruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_ipic_31__38_SequentialInstructionList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstruction" ":" ;
  mObject.mAttribute_mInstruction.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_ipic_31__38_SequentialInstructionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_ipic_31__38_SequentialInstructionList * operand = (cCollectionElement_ipic_31__38_SequentialInstructionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList::GALGAS_ipic_31__38_SequentialInstructionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList::GALGAS_ipic_31__38_SequentialInstructionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_ipic_31__38_SequentialInstructionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::constructor_listWithValue (const GALGAS_ipic_31__38_SequentialInstruction & inOperand0
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38_SequentialInstructionList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_ipic_31__38_SequentialInstructionList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                              const GALGAS_ipic_31__38_SequentialInstruction & in_mInstruction
                                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = NULL ;
  macroMyNew (p, cCollectionElement_ipic_31__38_SequentialInstructionList (in_mInstruction COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::addAssign_operation (const GALGAS_ipic_31__38_SequentialInstruction & inOperand0
                                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ipic_31__38_SequentialInstructionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::modifier_insertAtIndex (const GALGAS_ipic_31__38_SequentialInstruction inOperand0,
                                                                           const GALGAS_uint inInsertionIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ipic_31__38_SequentialInstructionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::modifier_removeAtIndex (GALGAS_ipic_31__38_SequentialInstruction & outOperand0,
                                                                           const GALGAS_uint inRemoveIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
      outOperand0 = p->mObject.mAttribute_mInstruction ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::modifier_popFirst (GALGAS_ipic_31__38_SequentialInstruction & outOperand0,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::modifier_popLast (GALGAS_ipic_31__38_SequentialInstruction & outOperand0,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::method_first (GALGAS_ipic_31__38_SequentialInstruction & outOperand0,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::method_last (GALGAS_ipic_31__38_SequentialInstruction & outOperand0,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::operator_concat (const GALGAS_ipic_31__38_SequentialInstructionList & inOperand
                                                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_SequentialInstructionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::add_operation (const GALGAS_ipic_31__38_SequentialInstructionList & inOperand,
                                                                                                          C_Compiler * /* inCompiler */
                                                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_SequentialInstructionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                                    C_Compiler * inCompiler
                                                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_SequentialInstructionList result = GALGAS_ipic_31__38_SequentialInstructionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                                    C_Compiler * inCompiler
                                                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_SequentialInstructionList result = GALGAS_ipic_31__38_SequentialInstructionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_SequentialInstructionList::dotAssign_operation (const GALGAS_ipic_31__38_SequentialInstructionList inOperand
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstruction GALGAS_ipic_31__38_SequentialInstructionList::reader_mInstructionAtIndex (const GALGAS_uint & inIndex,
                                                                                                                   C_Compiler * inCompiler
                                                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_SequentialInstructionList * p = (cCollectionElement_ipic_31__38_SequentialInstructionList *) attributes.ptr () ;
  GALGAS_ipic_31__38_SequentialInstruction result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
    result = p->mObject.mAttribute_mInstruction ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_ipic_31__38_SequentialInstructionList::cEnumerator_ipic_31__38_SequentialInstructionList (const GALGAS_ipic_31__38_SequentialInstructionList & inEnumeratedObject,
                                                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList_2D_element cEnumerator_ipic_31__38_SequentialInstructionList::current (LOCATION_ARGS) const {
  const cCollectionElement_ipic_31__38_SequentialInstructionList * p = (const cCollectionElement_ipic_31__38_SequentialInstructionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstruction cEnumerator_ipic_31__38_SequentialInstructionList::current_mInstruction (LOCATION_ARGS) const {
  const cCollectionElement_ipic_31__38_SequentialInstructionList * p = (const cCollectionElement_ipic_31__38_SequentialInstructionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_ipic_31__38_SequentialInstructionList) ;
  return p->mObject.mAttribute_mInstruction ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        @ipic18SequentialInstructionList type                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ipic_31__38_SequentialInstructionList ("ipic18SequentialInstructionList",
                                                              NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ipic_31__38_SequentialInstructionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ipic_31__38_SequentialInstructionList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ipic_31__38_SequentialInstructionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ipic_31__38_SequentialInstructionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstructionList GALGAS_ipic_31__38_SequentialInstructionList::extractObject (const GALGAS_object & inObject,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38_SequentialInstructionList result ;
  const GALGAS_ipic_31__38_SequentialInstructionList * p = (const GALGAS_ipic_31__38_SequentialInstructionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ipic_31__38_SequentialInstructionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ipic18SequentialInstructionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 Class for element of '@ipic_31__38_BlockList' list                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_ipic_31__38_BlockList : public cCollectionElement {
  public : GALGAS_ipic_31__38_BlockList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_ipic_31__38_BlockList (const GALGAS_ipic_31__38_Block & in_mBlock
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_ipic_31__38_BlockList::cCollectionElement_ipic_31__38_BlockList (const GALGAS_ipic_31__38_Block & in_mBlock
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBlock) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_ipic_31__38_BlockList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_ipic_31__38_BlockList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_ipic_31__38_BlockList (mObject.mAttribute_mBlock COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_ipic_31__38_BlockList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBlock" ":" ;
  mObject.mAttribute_mBlock.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_ipic_31__38_BlockList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_ipic_31__38_BlockList * operand = (cCollectionElement_ipic_31__38_BlockList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_ipic_31__38_BlockList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList::GALGAS_ipic_31__38_BlockList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList::GALGAS_ipic_31__38_BlockList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_ipic_31__38_BlockList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::constructor_listWithValue (const GALGAS_ipic_31__38_Block & inOperand0
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38_BlockList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_ipic_31__38_BlockList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_ipic_31__38_Block & in_mBlock
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_ipic_31__38_BlockList * p = NULL ;
  macroMyNew (p, cCollectionElement_ipic_31__38_BlockList (in_mBlock COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::addAssign_operation (const GALGAS_ipic_31__38_Block & inOperand0
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ipic_31__38_BlockList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::modifier_insertAtIndex (const GALGAS_ipic_31__38_Block inOperand0,
                                                           const GALGAS_uint inInsertionIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ipic_31__38_BlockList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::modifier_removeAtIndex (GALGAS_ipic_31__38_Block & outOperand0,
                                                           const GALGAS_uint inRemoveIndex,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
      outOperand0 = p->mObject.mAttribute_mBlock ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::modifier_popFirst (GALGAS_ipic_31__38_Block & outOperand0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
    outOperand0 = p->mObject.mAttribute_mBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::modifier_popLast (GALGAS_ipic_31__38_Block & outOperand0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
    outOperand0 = p->mObject.mAttribute_mBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::method_first (GALGAS_ipic_31__38_Block & outOperand0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
    outOperand0 = p->mObject.mAttribute_mBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::method_last (GALGAS_ipic_31__38_Block & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
    outOperand0 = p->mObject.mAttribute_mBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::operator_concat (const GALGAS_ipic_31__38_BlockList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_BlockList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::add_operation (const GALGAS_ipic_31__38_BlockList & inOperand,
                                                                          C_Compiler * /* inCompiler */
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_BlockList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_BlockList result = GALGAS_ipic_31__38_BlockList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_ipic_31__38_BlockList result = GALGAS_ipic_31__38_BlockList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_BlockList::dotAssign_operation (const GALGAS_ipic_31__38_BlockList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block GALGAS_ipic_31__38_BlockList::reader_mBlockAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_ipic_31__38_BlockList * p = (cCollectionElement_ipic_31__38_BlockList *) attributes.ptr () ;
  GALGAS_ipic_31__38_Block result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
    result = p->mObject.mAttribute_mBlock ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_ipic_31__38_BlockList::cEnumerator_ipic_31__38_BlockList (const GALGAS_ipic_31__38_BlockList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList_2D_element cEnumerator_ipic_31__38_BlockList::current (LOCATION_ARGS) const {
  const cCollectionElement_ipic_31__38_BlockList * p = (const cCollectionElement_ipic_31__38_BlockList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block cEnumerator_ipic_31__38_BlockList::current_mBlock (LOCATION_ARGS) const {
  const cCollectionElement_ipic_31__38_BlockList * p = (const cCollectionElement_ipic_31__38_BlockList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_ipic_31__38_BlockList) ;
  return p->mObject.mAttribute_mBlock ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @ipic18BlockList type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ipic_31__38_BlockList ("ipic18BlockList",
                                              NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ipic_31__38_BlockList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ipic_31__38_BlockList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ipic_31__38_BlockList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ipic_31__38_BlockList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_ipic_31__38_BlockList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38_BlockList result ;
  const GALGAS_ipic_31__38_BlockList * p = (const GALGAS_ipic_31__38_BlockList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ipic_31__38_BlockList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ipic18BlockList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_conditionalBranchMode::GALGAS_conditionalBranchMode (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_conditionalBranchMode GALGAS_conditionalBranchMode::constructor_native (UNUSED_LOCATION_ARGS) {
  GALGAS_conditionalBranchMode result ;
  result.mEnum = kEnum_native ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_conditionalBranchMode GALGAS_conditionalBranchMode::constructor_ipicBRA (UNUSED_LOCATION_ARGS) {
  GALGAS_conditionalBranchMode result ;
  result.mEnum = kEnum_ipicBRA ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_conditionalBranchMode GALGAS_conditionalBranchMode::constructor_ipicGOTO (UNUSED_LOCATION_ARGS) {
  GALGAS_conditionalBranchMode result ;
  result.mEnum = kEnum_ipicGOTO ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_conditionalBranchMode [4] = {
  "(not built)",
  "native",
  "ipicBRA",
  "ipicGOTO"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_conditionalBranchMode::reader_isNative (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_native == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_conditionalBranchMode::reader_isIpicBRA (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_ipicBRA == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_conditionalBranchMode::reader_isIpicGOTO (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_ipicGOTO == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_conditionalBranchMode::description (C_String & ioString,
                                                const int32_t /* inIndentation */) const {
  ioString << "<enum @conditionalBranchMode: " << gEnumNameArrayFor_conditionalBranchMode [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_conditionalBranchMode::objectCompare (const GALGAS_conditionalBranchMode & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @conditionalBranchMode type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_conditionalBranchMode ("conditionalBranchMode",
                                              NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_conditionalBranchMode::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_conditionalBranchMode ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_conditionalBranchMode::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_conditionalBranchMode (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_conditionalBranchMode GALGAS_conditionalBranchMode::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_conditionalBranchMode result ;
  const GALGAS_conditionalBranchMode * p = (const GALGAS_conditionalBranchMode *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_conditionalBranchMode *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("conditionalBranchMode", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_RegisterComparison::GALGAS_ipic_31__38_RegisterComparison (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_RegisterComparison GALGAS_ipic_31__38_RegisterComparison::constructor_registerEqualsToW (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38_RegisterComparison result ;
  result.mEnum = kEnum_registerEqualsToW ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_RegisterComparison GALGAS_ipic_31__38_RegisterComparison::constructor_registerGreaterThanW (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38_RegisterComparison result ;
  result.mEnum = kEnum_registerGreaterThanW ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_RegisterComparison GALGAS_ipic_31__38_RegisterComparison::constructor_registerLowerThanW (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38_RegisterComparison result ;
  result.mEnum = kEnum_registerLowerThanW ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_ipic_31__38_RegisterComparison [4] = {
  "(not built)",
  "registerEqualsToW",
  "registerGreaterThanW",
  "registerLowerThanW"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38_RegisterComparison::reader_isRegisterEqualsToW (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_registerEqualsToW == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38_RegisterComparison::reader_isRegisterGreaterThanW (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_registerGreaterThanW == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38_RegisterComparison::reader_isRegisterLowerThanW (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_registerLowerThanW == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38_RegisterComparison::description (C_String & ioString,
                                                         const int32_t /* inIndentation */) const {
  ioString << "<enum @ipic18RegisterComparison: " << gEnumNameArrayFor_ipic_31__38_RegisterComparison [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_ipic_31__38_RegisterComparison::objectCompare (const GALGAS_ipic_31__38_RegisterComparison & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           @ipic18RegisterComparison type                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ipic_31__38_RegisterComparison ("ipic18RegisterComparison",
                                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ipic_31__38_RegisterComparison::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ipic_31__38_RegisterComparison ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ipic_31__38_RegisterComparison::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ipic_31__38_RegisterComparison (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_RegisterComparison GALGAS_ipic_31__38_RegisterComparison::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38_RegisterComparison result ;
  const GALGAS_ipic_31__38_RegisterComparison * p = (const GALGAS_ipic_31__38_RegisterComparison *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ipic_31__38_RegisterComparison *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ipic18RegisterComparison", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::constructor_CLRF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CLRF ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::constructor_MOVWF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_MOVWF ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::constructor_MULWF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_MULWF ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::constructor_NEGF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_NEGF ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::constructor_SETF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_SETF ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_FA_5F_sequential_5F_instruction_5F_base_5F_code [6] = {
  "(not built)",
  "CLRF",
  "MOVWF",
  "MULWF",
  "NEGF",
  "SETF"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::reader_isCLRF (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_CLRF == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::reader_isMOVWF (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_MOVWF == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::reader_isMULWF (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_MULWF == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::reader_isNEGF (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_NEGF == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::reader_isSETF (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_SETF == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::description (C_String & ioString,
                                                                          const int32_t /* inIndentation */) const {
  ioString << "<enum @FA_sequential_instruction_base_code: " << gEnumNameArrayFor_FA_5F_sequential_5F_instruction_5F_base_5F_code [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::objectCompare (const GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      @FA_sequential_instruction_base_code type                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code ("FA_sequential_instruction_base_code",
                                                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code::extractObject (const GALGAS_object & inObject,
                                                                                                                              C_Compiler * inCompiler
                                                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code result ;
  const GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code * p = (const GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_FA_5F_sequential_5F_instruction_5F_base_5F_code *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("FA_sequential_instruction_base_code", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::constructor_CPFSEQ (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSEQ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::constructor_CPFSGT (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSGT ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::constructor_CPFSLT (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSLT ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::constructor_TSTFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_TSTFSZ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code [5] = {
  "(not built)",
  "CPFSEQ",
  "CPFSGT",
  "CPFSLT",
  "TSTFSZ"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::reader_isCPFSEQ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_CPFSEQ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::reader_isCPFSGT (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_CPFSGT == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::reader_isCPFSLT (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_CPFSLT == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::reader_isTSTFSZ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_TSTFSZ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::description (C_String & ioString,
                                                                                             const int32_t /* inIndentation */) const {
  ioString << "<enum @ipic18_compare_register_instruction_base_code: " << gEnumNameArrayFor_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::objectCompare (const GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 @ipic18_compare_register_instruction_base_code type                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code ("ipic18_compare_register_instruction_base_code",
                                                                                           NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code::extractObject (const GALGAS_object & inObject,
                                                                                                                                                                    C_Compiler * inCompiler
                                                                                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code result ;
  const GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code * p = (const GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ipic_31__38__5F_compare_5F_register_5F_instruction_5F_base_5F_code *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ipic18_compare_register_instruction_base_code", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::constructor_DECFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_DECFSZ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::constructor_DCFSNZ (UNUSED_LOCATION_ARGS) {
  GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_DCFSNZ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::constructor_INCFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_INCFSZ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::constructor_INFSNZ (UNUSED_LOCATION_ARGS) {
  GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_INFSNZ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_skip_5F_instruction_5F_FDA_5F_base_5F_code [5] = {
  "(not built)",
  "DECFSZ",
  "DCFSNZ",
  "INCFSZ",
  "INFSNZ"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::reader_isDECFSZ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_DECFSZ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::reader_isDCFSNZ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_DCFSNZ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::reader_isINCFSZ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_INCFSZ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::reader_isINFSNZ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_INFSNZ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::description (C_String & ioString,
                                                                     const int32_t /* inIndentation */) const {
  ioString << "<enum @skip_instruction_FDA_base_code: " << gEnumNameArrayFor_skip_5F_instruction_5F_FDA_5F_base_5F_code [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::objectCompare (const GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        @skip_instruction_FDA_base_code type                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code ("skip_instruction_FDA_base_code",
                                                                   NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code::extractObject (const GALGAS_object & inObject,
                                                                                                                    C_Compiler * inCompiler
                                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code result ;
  const GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code * p = (const GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_skip_5F_instruction_5F_FDA_5F_base_5F_code *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("skip_instruction_FDA_base_code", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForBlockOptimization::cMapElement_symbolTableForBlockOptimization (const GALGAS_lstring & inKey,
                                                                                          const GALGAS_uint & in_mDefinitionBlockIndex
                                                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mDefinitionBlockIndex (in_mDefinitionBlockIndex) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_symbolTableForBlockOptimization::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mDefinitionBlockIndex.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_symbolTableForBlockOptimization::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_symbolTableForBlockOptimization (mAttribute_lkey, mAttribute_mDefinitionBlockIndex COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_symbolTableForBlockOptimization::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefinitionBlockIndex" ":" ;
  mAttribute_mDefinitionBlockIndex.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_symbolTableForBlockOptimization::compare (const cCollectionElement * inOperand) const {
  cMapElement_symbolTableForBlockOptimization * operand = (cMapElement_symbolTableForBlockOptimization *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mDefinitionBlockIndex.objectCompare (operand->mAttribute_mDefinitionBlockIndex) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization::GALGAS_symbolTableForBlockOptimization (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization::GALGAS_symbolTableForBlockOptimization (const GALGAS_symbolTableForBlockOptimization & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization & GALGAS_symbolTableForBlockOptimization::operator = (const GALGAS_symbolTableForBlockOptimization & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization GALGAS_symbolTableForBlockOptimization::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_symbolTableForBlockOptimization result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization GALGAS_symbolTableForBlockOptimization::constructor_mapWithMapToOverride (const GALGAS_symbolTableForBlockOptimization & inMapToOverride
                                                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForBlockOptimization result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization GALGAS_symbolTableForBlockOptimization::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_symbolTableForBlockOptimization result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForBlockOptimization::addAssign_operation (const GALGAS_lstring & inKey,
                                                                  const GALGAS_uint & inArgument0,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForBlockOptimization * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForBlockOptimization (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@symbolTableForBlockOptimization insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForBlockOptimization::modifier_insertKey (GALGAS_lstring inKey,
                                                                 GALGAS_uint inArgument0,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForBlockOptimization * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForBlockOptimization (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' label is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_symbolTableForBlockOptimization_searchKey = "the '%K' label is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForBlockOptimization::method_searchKey (GALGAS_lstring inKey,
                                                               GALGAS_uint & outArgument0,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  const cMapElement_symbolTableForBlockOptimization * p = (const cMapElement_symbolTableForBlockOptimization *) performSearch (inKey,
                                                                                                                                 inCompiler,
                                                                                                                                 kSearchErrorMessage_symbolTableForBlockOptimization_searchKey
                                                                                                                                 COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_symbolTableForBlockOptimization) ;
    outArgument0 = p->mAttribute_mDefinitionBlockIndex ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_symbolTableForBlockOptimization::reader_mDefinitionBlockIndexForKey (const GALGAS_string & inKey,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_symbolTableForBlockOptimization * p = (const cMapElement_symbolTableForBlockOptimization *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForBlockOptimization) ;
    result = p->mAttribute_mDefinitionBlockIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForBlockOptimization::modifier_setMDefinitionBlockIndexForKey (GALGAS_uint inAttributeValue,
                                                                                      GALGAS_string inKey,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForBlockOptimization * p = (cMapElement_symbolTableForBlockOptimization *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForBlockOptimization) ;
    p->mAttribute_mDefinitionBlockIndex = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForBlockOptimization * GALGAS_symbolTableForBlockOptimization::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                         const GALGAS_string & inKey
                                                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForBlockOptimization * result = (cMapElement_symbolTableForBlockOptimization *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_symbolTableForBlockOptimization) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_symbolTableForBlockOptimization::cEnumerator_symbolTableForBlockOptimization (const GALGAS_symbolTableForBlockOptimization & inEnumeratedObject,
                                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization_2D_element cEnumerator_symbolTableForBlockOptimization::current (LOCATION_ARGS) const {
  const cMapElement_symbolTableForBlockOptimization * p = (const cMapElement_symbolTableForBlockOptimization *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForBlockOptimization) ;
  return GALGAS_symbolTableForBlockOptimization_2D_element (p->mAttribute_lkey, p->mAttribute_mDefinitionBlockIndex) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_symbolTableForBlockOptimization::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_symbolTableForBlockOptimization::current_mDefinitionBlockIndex (LOCATION_ARGS) const {
  const cMapElement_symbolTableForBlockOptimization * p = (const cMapElement_symbolTableForBlockOptimization *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForBlockOptimization) ;
  return p->mAttribute_mDefinitionBlockIndex ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        @symbolTableForBlockOptimization type                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_symbolTableForBlockOptimization ("symbolTableForBlockOptimization",
                                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_symbolTableForBlockOptimization::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_symbolTableForBlockOptimization ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_symbolTableForBlockOptimization::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_symbolTableForBlockOptimization (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForBlockOptimization GALGAS_symbolTableForBlockOptimization::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForBlockOptimization result ;
  const GALGAS_symbolTableForBlockOptimization * p = (const GALGAS_symbolTableForBlockOptimization *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_symbolTableForBlockOptimization *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("symbolTableForBlockOptimization", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForClusterOrdering::cMapElement_symbolTableForClusterOrdering (const GALGAS_lstring & inKey,
                                                                                      const GALGAS_uint & in_mCluster
                                                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mCluster (in_mCluster) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_symbolTableForClusterOrdering::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mCluster.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_symbolTableForClusterOrdering::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_symbolTableForClusterOrdering (mAttribute_lkey, mAttribute_mCluster COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_symbolTableForClusterOrdering::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCluster" ":" ;
  mAttribute_mCluster.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_symbolTableForClusterOrdering::compare (const cCollectionElement * inOperand) const {
  cMapElement_symbolTableForClusterOrdering * operand = (cMapElement_symbolTableForClusterOrdering *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCluster.objectCompare (operand->mAttribute_mCluster) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering::GALGAS_symbolTableForClusterOrdering (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering::GALGAS_symbolTableForClusterOrdering (const GALGAS_symbolTableForClusterOrdering & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering & GALGAS_symbolTableForClusterOrdering::operator = (const GALGAS_symbolTableForClusterOrdering & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering GALGAS_symbolTableForClusterOrdering::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_symbolTableForClusterOrdering result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering GALGAS_symbolTableForClusterOrdering::constructor_mapWithMapToOverride (const GALGAS_symbolTableForClusterOrdering & inMapToOverride
                                                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForClusterOrdering result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering GALGAS_symbolTableForClusterOrdering::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_symbolTableForClusterOrdering result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForClusterOrdering::addAssign_operation (const GALGAS_lstring & inKey,
                                                                const GALGAS_uint & inArgument0,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForClusterOrdering * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForClusterOrdering (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@symbolTableForClusterOrdering insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForClusterOrdering::modifier_insertKey (GALGAS_lstring inKey,
                                                               GALGAS_uint inArgument0,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForClusterOrdering * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForClusterOrdering (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' label is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_symbolTableForClusterOrdering_searchKey = "the '%K' label is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForClusterOrdering::method_searchKey (GALGAS_lstring inKey,
                                                             GALGAS_uint & outArgument0,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_symbolTableForClusterOrdering * p = (const cMapElement_symbolTableForClusterOrdering *) performSearch (inKey,
                                                                                                                             inCompiler,
                                                                                                                             kSearchErrorMessage_symbolTableForClusterOrdering_searchKey
                                                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_symbolTableForClusterOrdering) ;
    outArgument0 = p->mAttribute_mCluster ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_symbolTableForClusterOrdering::reader_mClusterForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_symbolTableForClusterOrdering * p = (const cMapElement_symbolTableForClusterOrdering *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForClusterOrdering) ;
    result = p->mAttribute_mCluster ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForClusterOrdering::modifier_setMClusterForKey (GALGAS_uint inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForClusterOrdering * p = (cMapElement_symbolTableForClusterOrdering *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForClusterOrdering) ;
    p->mAttribute_mCluster = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForClusterOrdering * GALGAS_symbolTableForClusterOrdering::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                     const GALGAS_string & inKey
                                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForClusterOrdering * result = (cMapElement_symbolTableForClusterOrdering *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_symbolTableForClusterOrdering) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_symbolTableForClusterOrdering::cEnumerator_symbolTableForClusterOrdering (const GALGAS_symbolTableForClusterOrdering & inEnumeratedObject,
                                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering_2D_element cEnumerator_symbolTableForClusterOrdering::current (LOCATION_ARGS) const {
  const cMapElement_symbolTableForClusterOrdering * p = (const cMapElement_symbolTableForClusterOrdering *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForClusterOrdering) ;
  return GALGAS_symbolTableForClusterOrdering_2D_element (p->mAttribute_lkey, p->mAttribute_mCluster) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_symbolTableForClusterOrdering::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_symbolTableForClusterOrdering::current_mCluster (LOCATION_ARGS) const {
  const cMapElement_symbolTableForClusterOrdering * p = (const cMapElement_symbolTableForClusterOrdering *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForClusterOrdering) ;
  return p->mAttribute_mCluster ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         @symbolTableForClusterOrdering type                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_symbolTableForClusterOrdering ("symbolTableForClusterOrdering",
                                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_symbolTableForClusterOrdering::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_symbolTableForClusterOrdering ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_symbolTableForClusterOrdering::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_symbolTableForClusterOrdering (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForClusterOrdering GALGAS_symbolTableForClusterOrdering::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForClusterOrdering result ;
  const GALGAS_symbolTableForClusterOrdering * p = (const GALGAS_symbolTableForClusterOrdering *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_symbolTableForClusterOrdering *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("symbolTableForClusterOrdering", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForRelativesResolution::cMapElement_symbolTableForRelativesResolution (const GALGAS_lstring & inKey,
                                                                                              const GALGAS_uint & in_mLabelAddress
                                                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mLabelAddress (in_mLabelAddress) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_symbolTableForRelativesResolution::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mLabelAddress.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_symbolTableForRelativesResolution::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_symbolTableForRelativesResolution (mAttribute_lkey, mAttribute_mLabelAddress COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_symbolTableForRelativesResolution::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLabelAddress" ":" ;
  mAttribute_mLabelAddress.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_symbolTableForRelativesResolution::compare (const cCollectionElement * inOperand) const {
  cMapElement_symbolTableForRelativesResolution * operand = (cMapElement_symbolTableForRelativesResolution *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mLabelAddress.objectCompare (operand->mAttribute_mLabelAddress) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution::GALGAS_symbolTableForRelativesResolution (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution::GALGAS_symbolTableForRelativesResolution (const GALGAS_symbolTableForRelativesResolution & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution & GALGAS_symbolTableForRelativesResolution::operator = (const GALGAS_symbolTableForRelativesResolution & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution GALGAS_symbolTableForRelativesResolution::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_symbolTableForRelativesResolution result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution GALGAS_symbolTableForRelativesResolution::constructor_mapWithMapToOverride (const GALGAS_symbolTableForRelativesResolution & inMapToOverride
                                                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForRelativesResolution result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution GALGAS_symbolTableForRelativesResolution::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_symbolTableForRelativesResolution result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForRelativesResolution::addAssign_operation (const GALGAS_lstring & inKey,
                                                                    const GALGAS_uint & inArgument0,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForRelativesResolution * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForRelativesResolution (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@symbolTableForRelativesResolution insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForRelativesResolution::modifier_insertKey (GALGAS_lstring inKey,
                                                                   GALGAS_uint inArgument0,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForRelativesResolution * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForRelativesResolution (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' label is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_symbolTableForRelativesResolution_searchKey = "the '%K' label is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForRelativesResolution::method_searchKey (GALGAS_lstring inKey,
                                                                 GALGAS_uint & outArgument0,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_symbolTableForRelativesResolution * p = (const cMapElement_symbolTableForRelativesResolution *) performSearch (inKey,
                                                                                                                                     inCompiler,
                                                                                                                                     kSearchErrorMessage_symbolTableForRelativesResolution_searchKey
                                                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_symbolTableForRelativesResolution) ;
    outArgument0 = p->mAttribute_mLabelAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_symbolTableForRelativesResolution::reader_mLabelAddressForKey (const GALGAS_string & inKey,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_symbolTableForRelativesResolution * p = (const cMapElement_symbolTableForRelativesResolution *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForRelativesResolution) ;
    result = p->mAttribute_mLabelAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_symbolTableForRelativesResolution::modifier_setMLabelAddressForKey (GALGAS_uint inAttributeValue,
                                                                                GALGAS_string inKey,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForRelativesResolution * p = (cMapElement_symbolTableForRelativesResolution *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForRelativesResolution) ;
    p->mAttribute_mLabelAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_symbolTableForRelativesResolution * GALGAS_symbolTableForRelativesResolution::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                             const GALGAS_string & inKey
                                                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForRelativesResolution * result = (cMapElement_symbolTableForRelativesResolution *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_symbolTableForRelativesResolution) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_symbolTableForRelativesResolution::cEnumerator_symbolTableForRelativesResolution (const GALGAS_symbolTableForRelativesResolution & inEnumeratedObject,
                                                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution_2D_element cEnumerator_symbolTableForRelativesResolution::current (LOCATION_ARGS) const {
  const cMapElement_symbolTableForRelativesResolution * p = (const cMapElement_symbolTableForRelativesResolution *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForRelativesResolution) ;
  return GALGAS_symbolTableForRelativesResolution_2D_element (p->mAttribute_lkey, p->mAttribute_mLabelAddress) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_symbolTableForRelativesResolution::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_symbolTableForRelativesResolution::current_mLabelAddress (LOCATION_ARGS) const {
  const cMapElement_symbolTableForRelativesResolution * p = (const cMapElement_symbolTableForRelativesResolution *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_symbolTableForRelativesResolution) ;
  return p->mAttribute_mLabelAddress ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       @symbolTableForRelativesResolution type                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_symbolTableForRelativesResolution ("symbolTableForRelativesResolution",
                                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_symbolTableForRelativesResolution::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_symbolTableForRelativesResolution ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_symbolTableForRelativesResolution::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_symbolTableForRelativesResolution (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_symbolTableForRelativesResolution GALGAS_symbolTableForRelativesResolution::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForRelativesResolution result ;
  const GALGAS_symbolTableForRelativesResolution * p = (const GALGAS_symbolTableForRelativesResolution *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_symbolTableForRelativesResolution *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("symbolTableForRelativesResolution", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Class for element of '@codeList' list                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_codeList : public cCollectionElement {
  public : GALGAS_codeList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_codeList (const GALGAS_string & in_mAssemblyCode,
                                        const GALGAS_uintlist & in_mBinaryCode
                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_codeList::cCollectionElement_codeList (const GALGAS_string & in_mAssemblyCode,
                                                          const GALGAS_uintlist & in_mBinaryCode
                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mAssemblyCode, in_mBinaryCode) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_codeList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_codeList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_codeList (mObject.mAttribute_mAssemblyCode, mObject.mAttribute_mBinaryCode COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_codeList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAssemblyCode" ":" ;
  mObject.mAttribute_mAssemblyCode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBinaryCode" ":" ;
  mObject.mAttribute_mBinaryCode.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_codeList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_codeList * operand = (cCollectionElement_codeList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_codeList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList::GALGAS_codeList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList::GALGAS_codeList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_codeList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                            const GALGAS_uintlist & inOperand1
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_codeList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_codeList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                 const GALGAS_string & in_mAssemblyCode,
                                                 const GALGAS_uintlist & in_mBinaryCode
                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement_codeList * p = NULL ;
  macroMyNew (p, cCollectionElement_codeList (in_mAssemblyCode,
                                              in_mBinaryCode COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::addAssign_operation (const GALGAS_string & inOperand0,
                                           const GALGAS_uintlist & inOperand1
                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_codeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::modifier_insertAtIndex (const GALGAS_string inOperand0,
                                              const GALGAS_uintlist inOperand1,
                                              const GALGAS_uint inInsertionIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_codeList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::modifier_removeAtIndex (GALGAS_string & outOperand0,
                                              GALGAS_uintlist & outOperand1,
                                              const GALGAS_uint inRemoveIndex,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_codeList) ;
      outOperand0 = p->mObject.mAttribute_mAssemblyCode ;
      outOperand1 = p->mObject.mAttribute_mBinaryCode ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::modifier_popFirst (GALGAS_string & outOperand0,
                                         GALGAS_uintlist & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    outOperand0 = p->mObject.mAttribute_mAssemblyCode ;
    outOperand1 = p->mObject.mAttribute_mBinaryCode ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::modifier_popLast (GALGAS_string & outOperand0,
                                        GALGAS_uintlist & outOperand1,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    outOperand0 = p->mObject.mAttribute_mAssemblyCode ;
    outOperand1 = p->mObject.mAttribute_mBinaryCode ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::method_first (GALGAS_string & outOperand0,
                                    GALGAS_uintlist & outOperand1,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    outOperand0 = p->mObject.mAttribute_mAssemblyCode ;
    outOperand1 = p->mObject.mAttribute_mBinaryCode ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::method_last (GALGAS_string & outOperand0,
                                   GALGAS_uintlist & outOperand1,
                                   C_Compiler * inCompiler
                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    outOperand0 = p->mObject.mAttribute_mAssemblyCode ;
    outOperand1 = p->mObject.mAttribute_mBinaryCode ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::operator_concat (const GALGAS_codeList & inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_codeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::add_operation (const GALGAS_codeList & inOperand,
                                                C_Compiler * /* inCompiler */
                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_codeList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::reader_subListWithRange (const GALGAS_range & inRange,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_codeList result = GALGAS_codeList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_codeList result = GALGAS_codeList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeList::dotAssign_operation (const GALGAS_codeList inOperand
                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_codeList::reader_mAssemblyCodeAtIndex (const GALGAS_uint & inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    result = p->mObject.mAttribute_mAssemblyCode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_codeList::reader_mBinaryCodeAtIndex (const GALGAS_uint & inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_codeList * p = (cCollectionElement_codeList *) attributes.ptr () ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_codeList) ;
    result = p->mObject.mAttribute_mBinaryCode ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_codeList::cEnumerator_codeList (const GALGAS_codeList & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList_2D_element cEnumerator_codeList::current (LOCATION_ARGS) const {
  const cCollectionElement_codeList * p = (const cCollectionElement_codeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_codeList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_codeList::current_mAssemblyCode (LOCATION_ARGS) const {
  const cCollectionElement_codeList * p = (const cCollectionElement_codeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_codeList) ;
  return p->mObject.mAttribute_mAssemblyCode ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_codeList::current_mBinaryCode (LOCATION_ARGS) const {
  const cCollectionElement_codeList * p = (const cCollectionElement_codeList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_codeList) ;
  return p->mObject.mAttribute_mBinaryCode ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   @codeList type                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_codeList ("codeList",
                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_codeList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_codeList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_codeList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_codeList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_codeList::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  GALGAS_codeList result ;
  const GALGAS_codeList * p = (const GALGAS_codeList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_codeList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("codeList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_pic_31__38__5F_dataAddressMap::cMapElement_pic_31__38__5F_dataAddressMap (const GALGAS_lstring & inKey,
                                                                                      const GALGAS_uint & in_mDataAddress
                                                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mDataAddress (in_mDataAddress) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_pic_31__38__5F_dataAddressMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mDataAddress.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_pic_31__38__5F_dataAddressMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_pic_31__38__5F_dataAddressMap (mAttribute_lkey, mAttribute_mDataAddress COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_pic_31__38__5F_dataAddressMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDataAddress" ":" ;
  mAttribute_mDataAddress.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_pic_31__38__5F_dataAddressMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_pic_31__38__5F_dataAddressMap * operand = (cMapElement_pic_31__38__5F_dataAddressMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mDataAddress.objectCompare (operand->mAttribute_mDataAddress) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap::GALGAS_pic_31__38__5F_dataAddressMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap::GALGAS_pic_31__38__5F_dataAddressMap (const GALGAS_pic_31__38__5F_dataAddressMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap & GALGAS_pic_31__38__5F_dataAddressMap::operator = (const GALGAS_pic_31__38__5F_dataAddressMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap GALGAS_pic_31__38__5F_dataAddressMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataAddressMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap GALGAS_pic_31__38__5F_dataAddressMap::constructor_mapWithMapToOverride (const GALGAS_pic_31__38__5F_dataAddressMap & inMapToOverride
                                                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataAddressMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap GALGAS_pic_31__38__5F_dataAddressMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_pic_31__38__5F_dataAddressMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataAddressMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                                const GALGAS_uint & inArgument0,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataAddressMap * p = NULL ;
  macroMyNew (p, cMapElement_pic_31__38__5F_dataAddressMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@pic_31__38__5F_dataAddressMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataAddressMap::modifier_insertKey (GALGAS_lstring inKey,
                                                               GALGAS_uint inArgument0,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataAddressMap * p = NULL ;
  macroMyNew (p, cMapElement_pic_31__38__5F_dataAddressMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' data is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_pic_31__38__5F_dataAddressMap_searchKey = "the '%K' data is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataAddressMap::method_searchKey (GALGAS_lstring inKey,
                                                             GALGAS_uint & outArgument0,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataAddressMap * p = (const cMapElement_pic_31__38__5F_dataAddressMap *) performSearch (inKey,
                                                                                                                             inCompiler,
                                                                                                                             kSearchErrorMessage_pic_31__38__5F_dataAddressMap_searchKey
                                                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataAddressMap) ;
    outArgument0 = p->mAttribute_mDataAddress ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_pic_31__38__5F_dataAddressMap::reader_mDataAddressForKey (const GALGAS_string & inKey,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_pic_31__38__5F_dataAddressMap * p = (const cMapElement_pic_31__38__5F_dataAddressMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataAddressMap) ;
    result = p->mAttribute_mDataAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_pic_31__38__5F_dataAddressMap::modifier_setMDataAddressForKey (GALGAS_uint inAttributeValue,
                                                                           GALGAS_string inKey,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_pic_31__38__5F_dataAddressMap * p = (cMapElement_pic_31__38__5F_dataAddressMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataAddressMap) ;
    p->mAttribute_mDataAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_pic_31__38__5F_dataAddressMap * GALGAS_pic_31__38__5F_dataAddressMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                     const GALGAS_string & inKey
                                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_pic_31__38__5F_dataAddressMap * result = (cMapElement_pic_31__38__5F_dataAddressMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_pic_31__38__5F_dataAddressMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_pic_31__38__5F_dataAddressMap::cEnumerator_pic_31__38__5F_dataAddressMap (const GALGAS_pic_31__38__5F_dataAddressMap & inEnumeratedObject,
                                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap_2D_element cEnumerator_pic_31__38__5F_dataAddressMap::current (LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataAddressMap * p = (const cMapElement_pic_31__38__5F_dataAddressMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataAddressMap) ;
  return GALGAS_pic_31__38__5F_dataAddressMap_2D_element (p->mAttribute_lkey, p->mAttribute_mDataAddress) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_pic_31__38__5F_dataAddressMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_pic_31__38__5F_dataAddressMap::current_mDataAddress (LOCATION_ARGS) const {
  const cMapElement_pic_31__38__5F_dataAddressMap * p = (const cMapElement_pic_31__38__5F_dataAddressMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_pic_31__38__5F_dataAddressMap) ;
  return p->mAttribute_mDataAddress ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @pic18_dataAddressMap type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_pic_31__38__5F_dataAddressMap ("pic18_dataAddressMap",
                                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_pic_31__38__5F_dataAddressMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_pic_31__38__5F_dataAddressMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_pic_31__38__5F_dataAddressMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_pic_31__38__5F_dataAddressMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38__5F_dataAddressMap GALGAS_pic_31__38__5F_dataAddressMap::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_pic_31__38__5F_dataAddressMap result ;
  const GALGAS_pic_31__38__5F_dataAddressMap * p = (const GALGAS_pic_31__38__5F_dataAddressMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_pic_31__38__5F_dataAddressMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("pic18_dataAddressMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_declaredRoutineMap::cMapElement_declaredRoutineMap (const GALGAS_lstring & inKey,
                                                                const GALGAS_luint & in_mRequiredBank,
                                                                const GALGAS_luint & in_mReturnedBank,
                                                                const GALGAS_bool & in_mPreservesBank,
                                                                const GALGAS_bool & in_mIsNoReturn,
                                                                const GALGAS_pic_31__38_InstructionList & in_mInstructionList
                                                                COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRequiredBank (in_mRequiredBank),
mAttribute_mReturnedBank (in_mReturnedBank),
mAttribute_mPreservesBank (in_mPreservesBank),
mAttribute_mIsNoReturn (in_mIsNoReturn),
mAttribute_mInstructionList (in_mInstructionList) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_declaredRoutineMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRequiredBank.isValid () && mAttribute_mReturnedBank.isValid () && mAttribute_mPreservesBank.isValid () && mAttribute_mIsNoReturn.isValid () && mAttribute_mInstructionList.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_declaredRoutineMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredRoutineMap (mAttribute_lkey, mAttribute_mRequiredBank, mAttribute_mReturnedBank, mAttribute_mPreservesBank, mAttribute_mIsNoReturn, mAttribute_mInstructionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_declaredRoutineMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredBank" ":" ;
  mAttribute_mRequiredBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mReturnedBank" ":" ;
  mAttribute_mReturnedBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreservesBank" ":" ;
  mAttribute_mPreservesBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsNoReturn" ":" ;
  mAttribute_mIsNoReturn.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionList" ":" ;
  mAttribute_mInstructionList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredRoutineMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredRoutineMap * operand = (cMapElement_declaredRoutineMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRequiredBank.objectCompare (operand->mAttribute_mRequiredBank) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mReturnedBank.objectCompare (operand->mAttribute_mReturnedBank) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreservesBank.objectCompare (operand->mAttribute_mPreservesBank) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsNoReturn.objectCompare (operand->mAttribute_mIsNoReturn) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionList.objectCompare (operand->mAttribute_mInstructionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap::GALGAS_declaredRoutineMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap::GALGAS_declaredRoutineMap (const GALGAS_declaredRoutineMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap & GALGAS_declaredRoutineMap::operator = (const GALGAS_declaredRoutineMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::constructor_mapWithMapToOverride (const GALGAS_declaredRoutineMap & inMapToOverride
                                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  GALGAS_declaredRoutineMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                     const GALGAS_luint & inArgument0,
                                                     const GALGAS_luint & inArgument1,
                                                     const GALGAS_bool & inArgument2,
                                                     const GALGAS_bool & inArgument3,
                                                     const GALGAS_pic_31__38_InstructionList & inArgument4,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cMapElement_declaredRoutineMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredRoutineMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@declaredRoutineMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_insertKey (GALGAS_lstring inKey,
                                                    GALGAS_luint inArgument0,
                                                    GALGAS_luint inArgument1,
                                                    GALGAS_bool inArgument2,
                                                    GALGAS_bool inArgument3,
                                                    GALGAS_pic_31__38_InstructionList inArgument4,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_declaredRoutineMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredRoutineMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3, inArgument4 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' routine is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_declaredRoutineMap_searchKey = "the '%K' routine is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::method_searchKey (GALGAS_lstring inKey,
                                                  GALGAS_luint & outArgument0,
                                                  GALGAS_luint & outArgument1,
                                                  GALGAS_bool & outArgument2,
                                                  GALGAS_bool & outArgument3,
                                                  GALGAS_pic_31__38_InstructionList & outArgument4,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) performSearch (inKey,
                                                                                                       inCompiler,
                                                                                                       kSearchErrorMessage_declaredRoutineMap_searchKey
                                                                                                       COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
    outArgument4.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    outArgument0 = p->mAttribute_mRequiredBank ;
    outArgument1 = p->mAttribute_mReturnedBank ;
    outArgument2 = p->mAttribute_mPreservesBank ;
    outArgument3 = p->mAttribute_mIsNoReturn ;
    outArgument4 = p->mAttribute_mInstructionList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_declaredRoutineMap::reader_mRequiredBankForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    result = p->mAttribute_mRequiredBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_declaredRoutineMap::reader_mReturnedBankForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    result = p->mAttribute_mReturnedBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_declaredRoutineMap::reader_mPreservesBankForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    result = p->mAttribute_mPreservesBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_declaredRoutineMap::reader_mIsNoReturnForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    result = p->mAttribute_mIsNoReturn ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38_InstructionList GALGAS_declaredRoutineMap::reader_mInstructionListForKey (const GALGAS_string & inKey,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) attributes ;
  GALGAS_pic_31__38_InstructionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    result = p->mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_setMRequiredBankForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * p = (cMapElement_declaredRoutineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    p->mAttribute_mRequiredBank = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_setMReturnedBankForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * p = (cMapElement_declaredRoutineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    p->mAttribute_mReturnedBank = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_setMPreservesBankForKey (GALGAS_bool inAttributeValue,
                                                                  GALGAS_string inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * p = (cMapElement_declaredRoutineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    p->mAttribute_mPreservesBank = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_setMIsNoReturnForKey (GALGAS_bool inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * p = (cMapElement_declaredRoutineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    p->mAttribute_mIsNoReturn = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_setMInstructionListForKey (GALGAS_pic_31__38_InstructionList inAttributeValue,
                                                                    GALGAS_string inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * p = (cMapElement_declaredRoutineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
    p->mAttribute_mInstructionList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_declaredRoutineMap * GALGAS_declaredRoutineMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                               const GALGAS_string & inKey
                                                                                               COMMA_LOCATION_ARGS) {
  cMapElement_declaredRoutineMap * result = (cMapElement_declaredRoutineMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_declaredRoutineMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_declaredRoutineMap::cEnumerator_declaredRoutineMap (const GALGAS_declaredRoutineMap & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2D_element cEnumerator_declaredRoutineMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return GALGAS_declaredRoutineMap_2D_element (p->mAttribute_lkey, p->mAttribute_mRequiredBank, p->mAttribute_mReturnedBank, p->mAttribute_mPreservesBank, p->mAttribute_mIsNoReturn, p->mAttribute_mInstructionList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredRoutineMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_declaredRoutineMap::current_mRequiredBank (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return p->mAttribute_mRequiredBank ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_declaredRoutineMap::current_mReturnedBank (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return p->mAttribute_mReturnedBank ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_declaredRoutineMap::current_mPreservesBank (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return p->mAttribute_mPreservesBank ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool cEnumerator_declaredRoutineMap::current_mIsNoReturn (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return p->mAttribute_mIsNoReturn ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38_InstructionList cEnumerator_declaredRoutineMap::current_mInstructionList (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredRoutineMap) ;
  return p->mAttribute_mInstructionList ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              @declaredRoutineMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredRoutineMap ("declaredRoutineMap",
                                           NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredRoutineMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredRoutineMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredRoutineMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredRoutineMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  const GALGAS_declaredRoutineMap * p = (const GALGAS_declaredRoutineMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredRoutineMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredRoutineMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_caseConstantMap::cMapElement_caseConstantMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_caseConstantMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_caseConstantMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_caseConstantMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_caseConstantMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_caseConstantMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_caseConstantMap * operand = (cMapElement_caseConstantMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap::GALGAS_caseConstantMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap::GALGAS_caseConstantMap (const GALGAS_caseConstantMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap & GALGAS_caseConstantMap::operator = (const GALGAS_caseConstantMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap GALGAS_caseConstantMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_caseConstantMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap GALGAS_caseConstantMap::constructor_mapWithMapToOverride (const GALGAS_caseConstantMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_caseConstantMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap GALGAS_caseConstantMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_caseConstantMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_caseConstantMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_caseConstantMap * p = NULL ;
  macroMyNew (p, cMapElement_caseConstantMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@caseConstantMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_caseConstantMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_caseConstantMap * p = NULL ;
  macroMyNew (p, cMapElement_caseConstantMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constant is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_caseConstantMap * GALGAS_caseConstantMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                         const GALGAS_string & inKey
                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_caseConstantMap * result = (cMapElement_caseConstantMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_caseConstantMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_caseConstantMap::cEnumerator_caseConstantMap (const GALGAS_caseConstantMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap_2D_element cEnumerator_caseConstantMap::current (LOCATION_ARGS) const {
  const cMapElement_caseConstantMap * p = (const cMapElement_caseConstantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_caseConstantMap) ;
  return GALGAS_caseConstantMap_2D_element (p->mAttribute_lkey) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_caseConstantMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @caseConstantMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_caseConstantMap ("caseConstantMap",
                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_caseConstantMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_caseConstantMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_caseConstantMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_caseConstantMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_caseConstantMap GALGAS_caseConstantMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_caseConstantMap result ;
  const GALGAS_caseConstantMap * p = (const GALGAS_caseConstantMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_caseConstantMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("caseConstantMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockInstructionBlockMap::cMapElement_blockInstructionBlockMap (const GALGAS_lstring & inKey,
                                                                            const GALGAS_pic_31__38_InstructionList & in_mInstructionList,
                                                                            const GALGAS_abstractBlockTerminationForBlockInstruction & in_mBlockTerminaisonForBlockInstruction,
                                                                            const GALGAS_location & in_mEndOfBlock
                                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mInstructionList (in_mInstructionList),
mAttribute_mBlockTerminaisonForBlockInstruction (in_mBlockTerminaisonForBlockInstruction),
mAttribute_mEndOfBlock (in_mEndOfBlock) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_blockInstructionBlockMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mInstructionList.isValid () && mAttribute_mBlockTerminaisonForBlockInstruction.isValid () && mAttribute_mEndOfBlock.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_blockInstructionBlockMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_blockInstructionBlockMap (mAttribute_lkey, mAttribute_mInstructionList, mAttribute_mBlockTerminaisonForBlockInstruction, mAttribute_mEndOfBlock COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_blockInstructionBlockMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionList" ":" ;
  mAttribute_mInstructionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBlockTerminaisonForBlockInstruction" ":" ;
  mAttribute_mBlockTerminaisonForBlockInstruction.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEndOfBlock" ":" ;
  mAttribute_mEndOfBlock.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_blockInstructionBlockMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_blockInstructionBlockMap * operand = (cMapElement_blockInstructionBlockMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionList.objectCompare (operand->mAttribute_mInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBlockTerminaisonForBlockInstruction.objectCompare (operand->mAttribute_mBlockTerminaisonForBlockInstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfBlock.objectCompare (operand->mAttribute_mEndOfBlock) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap::GALGAS_blockInstructionBlockMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap::GALGAS_blockInstructionBlockMap (const GALGAS_blockInstructionBlockMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap & GALGAS_blockInstructionBlockMap::operator = (const GALGAS_blockInstructionBlockMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap GALGAS_blockInstructionBlockMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_blockInstructionBlockMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap GALGAS_blockInstructionBlockMap::constructor_mapWithMapToOverride (const GALGAS_blockInstructionBlockMap & inMapToOverride
                                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_blockInstructionBlockMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap GALGAS_blockInstructionBlockMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_blockInstructionBlockMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                           const GALGAS_pic_31__38_InstructionList & inArgument0,
                                                           const GALGAS_abstractBlockTerminationForBlockInstruction & inArgument1,
                                                           const GALGAS_location & inArgument2,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cMapElement_blockInstructionBlockMap * p = NULL ;
  macroMyNew (p, cMapElement_blockInstructionBlockMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@blockInstructionBlockMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::modifier_insertKey (GALGAS_lstring inKey,
                                                          GALGAS_pic_31__38_InstructionList inArgument0,
                                                          GALGAS_abstractBlockTerminationForBlockInstruction inArgument1,
                                                          GALGAS_location inArgument2,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cMapElement_blockInstructionBlockMap * p = NULL ;
  macroMyNew (p, cMapElement_blockInstructionBlockMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' block is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_blockInstructionBlockMap_searchKey = "the '%K' block is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::method_searchKey (GALGAS_lstring inKey,
                                                        GALGAS_pic_31__38_InstructionList & outArgument0,
                                                        GALGAS_abstractBlockTerminationForBlockInstruction & outArgument1,
                                                        GALGAS_location & outArgument2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) const {
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) performSearch (inKey,
                                                                                                                   inCompiler,
                                                                                                                   kSearchErrorMessage_blockInstructionBlockMap_searchKey
                                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    outArgument0 = p->mAttribute_mInstructionList ;
    outArgument1 = p->mAttribute_mBlockTerminaisonForBlockInstruction ;
    outArgument2 = p->mAttribute_mEndOfBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38_InstructionList GALGAS_blockInstructionBlockMap::reader_mInstructionListForKey (const GALGAS_string & inKey,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) attributes ;
  GALGAS_pic_31__38_InstructionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    result = p->mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractBlockTerminationForBlockInstruction GALGAS_blockInstructionBlockMap::reader_mBlockTerminaisonForBlockInstructionForKey (const GALGAS_string & inKey,
                                                                                                                                       C_Compiler * inCompiler
                                                                                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) attributes ;
  GALGAS_abstractBlockTerminationForBlockInstruction result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    result = p->mAttribute_mBlockTerminaisonForBlockInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_location GALGAS_blockInstructionBlockMap::reader_mEndOfBlockForKey (const GALGAS_string & inKey,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) attributes ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    result = p->mAttribute_mEndOfBlock ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::modifier_setMInstructionListForKey (GALGAS_pic_31__38_InstructionList inAttributeValue,
                                                                          GALGAS_string inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockInstructionBlockMap * p = (cMapElement_blockInstructionBlockMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    p->mAttribute_mInstructionList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::modifier_setMBlockTerminaisonForBlockInstructionForKey (GALGAS_abstractBlockTerminationForBlockInstruction inAttributeValue,
                                                                                              GALGAS_string inKey,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockInstructionBlockMap * p = (cMapElement_blockInstructionBlockMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    p->mAttribute_mBlockTerminaisonForBlockInstruction = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInstructionBlockMap::modifier_setMEndOfBlockForKey (GALGAS_location inAttributeValue,
                                                                     GALGAS_string inKey,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockInstructionBlockMap * p = (cMapElement_blockInstructionBlockMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
    p->mAttribute_mEndOfBlock = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockInstructionBlockMap * GALGAS_blockInstructionBlockMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                           const GALGAS_string & inKey
                                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_blockInstructionBlockMap * result = (cMapElement_blockInstructionBlockMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_blockInstructionBlockMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_blockInstructionBlockMap::cEnumerator_blockInstructionBlockMap (const GALGAS_blockInstructionBlockMap & inEnumeratedObject,
                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap_2D_element cEnumerator_blockInstructionBlockMap::current (LOCATION_ARGS) const {
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
  return GALGAS_blockInstructionBlockMap_2D_element (p->mAttribute_lkey, p->mAttribute_mInstructionList, p->mAttribute_mBlockTerminaisonForBlockInstruction, p->mAttribute_mEndOfBlock) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_blockInstructionBlockMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_pic_31__38_InstructionList cEnumerator_blockInstructionBlockMap::current_mInstructionList (LOCATION_ARGS) const {
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
  return p->mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_abstractBlockTerminationForBlockInstruction cEnumerator_blockInstructionBlockMap::current_mBlockTerminaisonForBlockInstruction (LOCATION_ARGS) const {
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
  return p->mAttribute_mBlockTerminaisonForBlockInstruction ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_location cEnumerator_blockInstructionBlockMap::current_mEndOfBlock (LOCATION_ARGS) const {
  const cMapElement_blockInstructionBlockMap * p = (const cMapElement_blockInstructionBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInstructionBlockMap) ;
  return p->mAttribute_mEndOfBlock ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           @blockInstructionBlockMap type                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_blockInstructionBlockMap ("blockInstructionBlockMap",
                                                 NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_blockInstructionBlockMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_blockInstructionBlockMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_blockInstructionBlockMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_blockInstructionBlockMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInstructionBlockMap GALGAS_blockInstructionBlockMap::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_blockInstructionBlockMap result ;
  const GALGAS_blockInstructionBlockMap * p = (const GALGAS_blockInstructionBlockMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_blockInstructionBlockMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("blockInstructionBlockMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockInitialBankSelectionMap::cMapElement_blockInitialBankSelectionMap (const GALGAS_lstring & inKey,
                                                                                    const GALGAS_uint & in_mInitialBankSelection,
                                                                                    const GALGAS_string & in_mSourceBlock
                                                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mInitialBankSelection (in_mInitialBankSelection),
mAttribute_mSourceBlock (in_mSourceBlock) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_blockInitialBankSelectionMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mInitialBankSelection.isValid () && mAttribute_mSourceBlock.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_blockInitialBankSelectionMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_blockInitialBankSelectionMap (mAttribute_lkey, mAttribute_mInitialBankSelection, mAttribute_mSourceBlock COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_blockInitialBankSelectionMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInitialBankSelection" ":" ;
  mAttribute_mInitialBankSelection.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSourceBlock" ":" ;
  mAttribute_mSourceBlock.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_blockInitialBankSelectionMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_blockInitialBankSelectionMap * operand = (cMapElement_blockInitialBankSelectionMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInitialBankSelection.objectCompare (operand->mAttribute_mInitialBankSelection) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSourceBlock.objectCompare (operand->mAttribute_mSourceBlock) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap::GALGAS_blockInitialBankSelectionMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap::GALGAS_blockInitialBankSelectionMap (const GALGAS_blockInitialBankSelectionMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap & GALGAS_blockInitialBankSelectionMap::operator = (const GALGAS_blockInitialBankSelectionMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap GALGAS_blockInitialBankSelectionMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_blockInitialBankSelectionMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap GALGAS_blockInitialBankSelectionMap::constructor_mapWithMapToOverride (const GALGAS_blockInitialBankSelectionMap & inMapToOverride
                                                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_blockInitialBankSelectionMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap GALGAS_blockInitialBankSelectionMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_blockInitialBankSelectionMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInitialBankSelectionMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                               const GALGAS_uint & inArgument0,
                                                               const GALGAS_string & inArgument1,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cMapElement_blockInitialBankSelectionMap * p = NULL ;
  macroMyNew (p, cMapElement_blockInitialBankSelectionMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@blockInitialBankSelectionMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInitialBankSelectionMap::modifier_insertKey (GALGAS_lstring inKey,
                                                              GALGAS_uint inArgument0,
                                                              GALGAS_string inArgument1,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_blockInitialBankSelectionMap * p = NULL ;
  macroMyNew (p, cMapElement_blockInitialBankSelectionMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' block is already declared (internal error)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_blockInitialBankSelectionMap_searchKey = "the '%K' block is not declared (internal error)" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInitialBankSelectionMap::method_searchKey (GALGAS_lstring inKey,
                                                            GALGAS_uint & outArgument0,
                                                            GALGAS_string & outArgument1,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) performSearch (inKey,
                                                                                                                           inCompiler,
                                                                                                                           kSearchErrorMessage_blockInitialBankSelectionMap_searchKey
                                                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
    outArgument0 = p->mAttribute_mInitialBankSelection ;
    outArgument1 = p->mAttribute_mSourceBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_blockInitialBankSelectionMap::reader_mInitialBankSelectionForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
    result = p->mAttribute_mInitialBankSelection ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_blockInitialBankSelectionMap::reader_mSourceBlockForKey (const GALGAS_string & inKey,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
    result = p->mAttribute_mSourceBlock ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInitialBankSelectionMap::modifier_setMInitialBankSelectionForKey (GALGAS_uint inAttributeValue,
                                                                                   GALGAS_string inKey,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockInitialBankSelectionMap * p = (cMapElement_blockInitialBankSelectionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
    p->mAttribute_mInitialBankSelection = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInitialBankSelectionMap::modifier_setMSourceBlockForKey (GALGAS_string inAttributeValue,
                                                                          GALGAS_string inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockInitialBankSelectionMap * p = (cMapElement_blockInitialBankSelectionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
    p->mAttribute_mSourceBlock = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockInitialBankSelectionMap * GALGAS_blockInitialBankSelectionMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                   const GALGAS_string & inKey
                                                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_blockInitialBankSelectionMap * result = (cMapElement_blockInitialBankSelectionMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_blockInitialBankSelectionMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_blockInitialBankSelectionMap::cEnumerator_blockInitialBankSelectionMap (const GALGAS_blockInitialBankSelectionMap & inEnumeratedObject,
                                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap_2D_element cEnumerator_blockInitialBankSelectionMap::current (LOCATION_ARGS) const {
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
  return GALGAS_blockInitialBankSelectionMap_2D_element (p->mAttribute_lkey, p->mAttribute_mInitialBankSelection, p->mAttribute_mSourceBlock) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_blockInitialBankSelectionMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_blockInitialBankSelectionMap::current_mInitialBankSelection (LOCATION_ARGS) const {
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
  return p->mAttribute_mInitialBankSelection ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_blockInitialBankSelectionMap::current_mSourceBlock (LOCATION_ARGS) const {
  const cMapElement_blockInitialBankSelectionMap * p = (const cMapElement_blockInitialBankSelectionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockInitialBankSelectionMap) ;
  return p->mAttribute_mSourceBlock ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         @blockInitialBankSelectionMap type                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_blockInitialBankSelectionMap ("blockInitialBankSelectionMap",
                                                     NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_blockInitialBankSelectionMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_blockInitialBankSelectionMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_blockInitialBankSelectionMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_blockInitialBankSelectionMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInitialBankSelectionMap GALGAS_blockInitialBankSelectionMap::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_blockInitialBankSelectionMap result ;
  const GALGAS_blockInitialBankSelectionMap * p = (const GALGAS_blockInitialBankSelectionMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_blockInitialBankSelectionMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("blockInitialBankSelectionMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            '@blockInvocationGraph' graph                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInvocationGraph::GALGAS_blockInvocationGraph (void) :
AC_GALGAS_graph () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInvocationGraph GALGAS_blockInvocationGraph::constructor_emptyGraph (LOCATION_ARGS) {
  GALGAS_blockInvocationGraph result ;
  result.makeNewEmptyGraph (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::modifier_addNode (GALGAS_lstring inKey,
                                                    GALGAS_string inArgument_0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  GALGAS_stringlist::makeAttributesFromObjects (attributes, inArgument_0 COMMA_THERE) ;
  const char * kErrorMessage = "the '%K' label is already declared at %L" ;
  internalAddNode (inKey, kErrorMessage, attributes, inCompiler COMMA_THERE) ;
}


//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::method_topologicalSort (GALGAS_stringlist & outSortedList,
                                                          GALGAS_lstringlist & outSortedKeyList,
                                                          GALGAS_stringlist & outUnsortedList,
                                                          GALGAS_lstringlist & outUnsortedKeyList,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_stringlist (sortedList) ;
  outUnsortedList = GALGAS_stringlist (unsortedList) ;
  GALGAS_stringlist::detachSharedList (sortedList) ;
  GALGAS_stringlist::detachSharedList (unsortedList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::method_depthFirstTopologicalSort (GALGAS_stringlist & outSortedList,
                                                                    GALGAS_lstringlist & outSortedKeyList,
                                                                    GALGAS_stringlist & outUnsortedList,
                                                                    GALGAS_lstringlist & outUnsortedKeyList,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  cSharedList * sortedList = NULL ;
  cSharedList * unsortedList = NULL ;
  internalDepthFirstTopologicalSort (sortedList, outSortedKeyList, unsortedList, outUnsortedKeyList, inCompiler COMMA_THERE) ;
  outSortedList = GALGAS_stringlist (sortedList) ;
  outUnsortedList = GALGAS_stringlist (unsortedList) ;
  GALGAS_stringlist::detachSharedList (sortedList) ;
  GALGAS_stringlist::detachSharedList (unsortedList) ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInvocationGraph GALGAS_blockInvocationGraph::reader_reversedGraph (LOCATION_ARGS) const {
  GALGAS_blockInvocationGraph result ;
  result.reversedGraphFromGraph (*this COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::method_circularities (GALGAS_stringlist & outInfoList,
                                                        GALGAS_lstringlist & outKeyList
                                                        COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalFindCircularities (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_stringlist (infoList) ;
  GALGAS_stringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::method_nodesWithNoSuccessor (GALGAS_stringlist & outInfoList,
                                                               GALGAS_lstringlist & outKeyList
                                                               COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoSuccessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_stringlist (infoList) ;
  GALGAS_stringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockInvocationGraph::method_nodesWithNoPredecessor (GALGAS_stringlist & outInfoList,
                                                                 GALGAS_lstringlist & outKeyList
                                                                 COMMA_LOCATION_ARGS) const {
  cSharedList * infoList = NULL ;
  internalNodesWithNoPredecessor (infoList, outKeyList COMMA_THERE) ;
  outInfoList = GALGAS_stringlist (infoList) ;
  GALGAS_stringlist::detachSharedList (infoList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInvocationGraph GALGAS_blockInvocationGraph::reader_subgraphFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                   const GALGAS_stringset & inKeysToExclude,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_blockInvocationGraph result ;
  subGraph (result, inStartKeyList, inKeysToExclude, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_blockInvocationGraph::reader_accessibleNodesFromNodes (const GALGAS_lstringlist & inStartKeyList,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  GALGAS_blockInvocationGraph resultingGraph ;
  subGraph (resultingGraph,
            inStartKeyList,
            GALGAS_stringset::constructor_emptySet (HERE),
            inCompiler
            COMMA_THERE) ;
  if (resultingGraph.isValid ()) {
    result = resultingGraph.reader_lkeyList (THERE) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @blockInvocationGraph type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_blockInvocationGraph ("blockInvocationGraph",
                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_blockInvocationGraph::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_blockInvocationGraph ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_blockInvocationGraph::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_blockInvocationGraph (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockInvocationGraph GALGAS_blockInvocationGraph::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_blockInvocationGraph result ;
  const GALGAS_blockInvocationGraph * p = (const GALGAS_blockInvocationGraph *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_blockInvocationGraph *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("blockInvocationGraph", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Class for element of '@clusterList' list                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_clusterList : public cCollectionElement {
  public : GALGAS_clusterList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_clusterList (const GALGAS_ipic_31__38_BlockList & in_mBlockList
                                           COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_clusterList::cCollectionElement_clusterList (const GALGAS_ipic_31__38_BlockList & in_mBlockList
                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mBlockList) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_clusterList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_clusterList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_clusterList (mObject.mAttribute_mBlockList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_clusterList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBlockList" ":" ;
  mObject.mAttribute_mBlockList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_clusterList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_clusterList * operand = (cCollectionElement_clusterList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_clusterList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList::GALGAS_clusterList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList::GALGAS_clusterList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_clusterList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::constructor_listWithValue (const GALGAS_ipic_31__38_BlockList & inOperand0
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_clusterList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_clusterList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                    const GALGAS_ipic_31__38_BlockList & in_mBlockList
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_clusterList * p = NULL ;
  macroMyNew (p, cCollectionElement_clusterList (in_mBlockList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::addAssign_operation (const GALGAS_ipic_31__38_BlockList & inOperand0
                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_clusterList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::modifier_insertAtIndex (const GALGAS_ipic_31__38_BlockList inOperand0,
                                                 const GALGAS_uint inInsertionIndex,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_clusterList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::modifier_removeAtIndex (GALGAS_ipic_31__38_BlockList & outOperand0,
                                                 const GALGAS_uint inRemoveIndex,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_clusterList) ;
      outOperand0 = p->mObject.mAttribute_mBlockList ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::modifier_popFirst (GALGAS_ipic_31__38_BlockList & outOperand0,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_clusterList) ;
    outOperand0 = p->mObject.mAttribute_mBlockList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::modifier_popLast (GALGAS_ipic_31__38_BlockList & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_clusterList) ;
    outOperand0 = p->mObject.mAttribute_mBlockList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::method_first (GALGAS_ipic_31__38_BlockList & outOperand0,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_clusterList) ;
    outOperand0 = p->mObject.mAttribute_mBlockList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::method_last (GALGAS_ipic_31__38_BlockList & outOperand0,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_clusterList) ;
    outOperand0 = p->mObject.mAttribute_mBlockList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::operator_concat (const GALGAS_clusterList & inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_clusterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::add_operation (const GALGAS_clusterList & inOperand,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_clusterList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_clusterList result = GALGAS_clusterList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_clusterList result = GALGAS_clusterList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_clusterList::dotAssign_operation (const GALGAS_clusterList inOperand
                                              COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList GALGAS_clusterList::reader_mBlockListAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_clusterList * p = (cCollectionElement_clusterList *) attributes.ptr () ;
  GALGAS_ipic_31__38_BlockList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_clusterList) ;
    result = p->mObject.mAttribute_mBlockList ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_clusterList::cEnumerator_clusterList (const GALGAS_clusterList & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList_2D_element cEnumerator_clusterList::current (LOCATION_ARGS) const {
  const cCollectionElement_clusterList * p = (const cCollectionElement_clusterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_clusterList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_BlockList cEnumerator_clusterList::current_mBlockList (LOCATION_ARGS) const {
  const cCollectionElement_clusterList * p = (const cCollectionElement_clusterList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_clusterList) ;
  return p->mObject.mAttribute_mBlockList ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  @clusterList type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_clusterList ("clusterList",
                                    NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_clusterList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_clusterList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_clusterList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_clusterList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_clusterList GALGAS_clusterList::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_clusterList result ;
  const GALGAS_clusterList * p = (const GALGAS_clusterList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_clusterList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("clusterList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_neededConversionForClusterOrder::cMapElement_neededConversionForClusterOrder (const GALGAS_lstring & inKey,
                                                                                          const GALGAS_uint & in_mConversions
                                                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mConversions (in_mConversions) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_neededConversionForClusterOrder::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mConversions.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_neededConversionForClusterOrder::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_neededConversionForClusterOrder (mAttribute_lkey, mAttribute_mConversions COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_neededConversionForClusterOrder::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mConversions" ":" ;
  mAttribute_mConversions.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_neededConversionForClusterOrder::compare (const cCollectionElement * inOperand) const {
  cMapElement_neededConversionForClusterOrder * operand = (cMapElement_neededConversionForClusterOrder *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mConversions.objectCompare (operand->mAttribute_mConversions) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder::GALGAS_neededConversionForClusterOrder (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder::GALGAS_neededConversionForClusterOrder (const GALGAS_neededConversionForClusterOrder & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder & GALGAS_neededConversionForClusterOrder::operator = (const GALGAS_neededConversionForClusterOrder & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder GALGAS_neededConversionForClusterOrder::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_neededConversionForClusterOrder result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder GALGAS_neededConversionForClusterOrder::constructor_mapWithMapToOverride (const GALGAS_neededConversionForClusterOrder & inMapToOverride
                                                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_neededConversionForClusterOrder result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder GALGAS_neededConversionForClusterOrder::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_neededConversionForClusterOrder result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_neededConversionForClusterOrder::addAssign_operation (const GALGAS_lstring & inKey,
                                                                  const GALGAS_uint & inArgument0,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  cMapElement_neededConversionForClusterOrder * p = NULL ;
  macroMyNew (p, cMapElement_neededConversionForClusterOrder (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@neededConversionForClusterOrder insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_neededConversionForClusterOrder::modifier_insertKey (GALGAS_lstring inKey,
                                                                 GALGAS_uint inArgument0,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_neededConversionForClusterOrder * p = NULL ;
  macroMyNew (p, cMapElement_neededConversionForClusterOrder (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' key is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_neededConversionForClusterOrder_searchKey = "the '%K' key is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_neededConversionForClusterOrder::method_searchKey (GALGAS_lstring inKey,
                                                               GALGAS_uint & outArgument0,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  const cMapElement_neededConversionForClusterOrder * p = (const cMapElement_neededConversionForClusterOrder *) performSearch (inKey,
                                                                                                                                 inCompiler,
                                                                                                                                 kSearchErrorMessage_neededConversionForClusterOrder_searchKey
                                                                                                                                 COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_neededConversionForClusterOrder) ;
    outArgument0 = p->mAttribute_mConversions ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_neededConversionForClusterOrder::reader_mConversionsForKey (const GALGAS_string & inKey,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_neededConversionForClusterOrder * p = (const cMapElement_neededConversionForClusterOrder *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_neededConversionForClusterOrder) ;
    result = p->mAttribute_mConversions ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_neededConversionForClusterOrder::modifier_setMConversionsForKey (GALGAS_uint inAttributeValue,
                                                                             GALGAS_string inKey,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_neededConversionForClusterOrder * p = (cMapElement_neededConversionForClusterOrder *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_neededConversionForClusterOrder) ;
    p->mAttribute_mConversions = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_neededConversionForClusterOrder * GALGAS_neededConversionForClusterOrder::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                         const GALGAS_string & inKey
                                                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_neededConversionForClusterOrder * result = (cMapElement_neededConversionForClusterOrder *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_neededConversionForClusterOrder) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_neededConversionForClusterOrder::cEnumerator_neededConversionForClusterOrder (const GALGAS_neededConversionForClusterOrder & inEnumeratedObject,
                                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder_2D_element cEnumerator_neededConversionForClusterOrder::current (LOCATION_ARGS) const {
  const cMapElement_neededConversionForClusterOrder * p = (const cMapElement_neededConversionForClusterOrder *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_neededConversionForClusterOrder) ;
  return GALGAS_neededConversionForClusterOrder_2D_element (p->mAttribute_lkey, p->mAttribute_mConversions) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_neededConversionForClusterOrder::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_neededConversionForClusterOrder::current_mConversions (LOCATION_ARGS) const {
  const cMapElement_neededConversionForClusterOrder * p = (const cMapElement_neededConversionForClusterOrder *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_neededConversionForClusterOrder) ;
  return p->mAttribute_mConversions ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        @neededConversionForClusterOrder type                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_neededConversionForClusterOrder ("neededConversionForClusterOrder",
                                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_neededConversionForClusterOrder::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_neededConversionForClusterOrder ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_neededConversionForClusterOrder::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_neededConversionForClusterOrder (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_neededConversionForClusterOrder GALGAS_neededConversionForClusterOrder::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_neededConversionForClusterOrder result ;
  const GALGAS_neededConversionForClusterOrder * p = (const GALGAS_neededConversionForClusterOrder *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_neededConversionForClusterOrder *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("neededConversionForClusterOrder", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_generatedCodeMap::cMapElement_generatedCodeMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_codeList & in_mCode,
                                                            const GALGAS_ipic_31__38_SequentialInstruction & in_mInstruction
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mCode (in_mCode),
mAttribute_mInstruction (in_mInstruction) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_generatedCodeMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mCode.isValid () && mAttribute_mInstruction.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_generatedCodeMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_generatedCodeMap (mAttribute_lkey, mAttribute_mCode, mAttribute_mInstruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_generatedCodeMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCode" ":" ;
  mAttribute_mCode.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstruction" ":" ;
  mAttribute_mInstruction.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_generatedCodeMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_generatedCodeMap * operand = (cMapElement_generatedCodeMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCode.objectCompare (operand->mAttribute_mCode) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstruction.objectCompare (operand->mAttribute_mInstruction) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap::GALGAS_generatedCodeMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap::GALGAS_generatedCodeMap (const GALGAS_generatedCodeMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap & GALGAS_generatedCodeMap::operator = (const GALGAS_generatedCodeMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap GALGAS_generatedCodeMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_generatedCodeMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap GALGAS_generatedCodeMap::constructor_mapWithMapToOverride (const GALGAS_generatedCodeMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_generatedCodeMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap GALGAS_generatedCodeMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_generatedCodeMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generatedCodeMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                   const GALGAS_codeList & inArgument0,
                                                   const GALGAS_ipic_31__38_SequentialInstruction & inArgument1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_generatedCodeMap * p = NULL ;
  macroMyNew (p, cMapElement_generatedCodeMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@generatedCodeMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generatedCodeMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_codeList inArgument0,
                                                  GALGAS_ipic_31__38_SequentialInstruction inArgument1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_generatedCodeMap * p = NULL ;
  macroMyNew (p, cMapElement_generatedCodeMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' entry is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_generatedCodeMap_searchKey = "the '%K' entry is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generatedCodeMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_codeList & outArgument0,
                                                GALGAS_ipic_31__38_SequentialInstruction & outArgument1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_generatedCodeMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
    outArgument0 = p->mAttribute_mCode ;
    outArgument1 = p->mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList GALGAS_generatedCodeMap::reader_mCodeForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) attributes ;
  GALGAS_codeList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
    result = p->mAttribute_mCode ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstruction GALGAS_generatedCodeMap::reader_mInstructionForKey (const GALGAS_string & inKey,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) attributes ;
  GALGAS_ipic_31__38_SequentialInstruction result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
    result = p->mAttribute_mInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generatedCodeMap::modifier_setMCodeForKey (GALGAS_codeList inAttributeValue,
                                                       GALGAS_string inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_generatedCodeMap * p = (cMapElement_generatedCodeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
    p->mAttribute_mCode = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_generatedCodeMap::modifier_setMInstructionForKey (GALGAS_ipic_31__38_SequentialInstruction inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_generatedCodeMap * p = (cMapElement_generatedCodeMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
    p->mAttribute_mInstruction = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_generatedCodeMap * GALGAS_generatedCodeMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                           const GALGAS_string & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_generatedCodeMap * result = (cMapElement_generatedCodeMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_generatedCodeMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_generatedCodeMap::cEnumerator_generatedCodeMap (const GALGAS_generatedCodeMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap_2D_element cEnumerator_generatedCodeMap::current (LOCATION_ARGS) const {
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
  return GALGAS_generatedCodeMap_2D_element (p->mAttribute_lkey, p->mAttribute_mCode, p->mAttribute_mInstruction) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_generatedCodeMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeList cEnumerator_generatedCodeMap::current_mCode (LOCATION_ARGS) const {
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
  return p->mAttribute_mCode ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_SequentialInstruction cEnumerator_generatedCodeMap::current_mInstruction (LOCATION_ARGS) const {
  const cMapElement_generatedCodeMap * p = (const cMapElement_generatedCodeMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_generatedCodeMap) ;
  return p->mAttribute_mInstruction ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @generatedCodeMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_generatedCodeMap ("generatedCodeMap",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_generatedCodeMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_generatedCodeMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_generatedCodeMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_generatedCodeMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_generatedCodeMap GALGAS_generatedCodeMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_generatedCodeMap result ;
  const GALGAS_generatedCodeMap * p = (const GALGAS_generatedCodeMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_generatedCodeMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("generatedCodeMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockMapForStackComputation::cMapElement_blockMapForStackComputation (const GALGAS_lstring & inKey,
                                                                                  const GALGAS_ipic_31__38_Block & in_mBlock
                                                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mBlock (in_mBlock) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_blockMapForStackComputation::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mBlock.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_blockMapForStackComputation::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_blockMapForStackComputation (mAttribute_lkey, mAttribute_mBlock COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_blockMapForStackComputation::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBlock" ":" ;
  mAttribute_mBlock.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_blockMapForStackComputation::compare (const cCollectionElement * inOperand) const {
  cMapElement_blockMapForStackComputation * operand = (cMapElement_blockMapForStackComputation *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBlock.objectCompare (operand->mAttribute_mBlock) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation::GALGAS_blockMapForStackComputation (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation::GALGAS_blockMapForStackComputation (const GALGAS_blockMapForStackComputation & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation & GALGAS_blockMapForStackComputation::operator = (const GALGAS_blockMapForStackComputation & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation GALGAS_blockMapForStackComputation::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_blockMapForStackComputation result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation GALGAS_blockMapForStackComputation::constructor_mapWithMapToOverride (const GALGAS_blockMapForStackComputation & inMapToOverride
                                                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_blockMapForStackComputation result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation GALGAS_blockMapForStackComputation::reader_overriddenMap (C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_blockMapForStackComputation result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForStackComputation::addAssign_operation (const GALGAS_lstring & inKey,
                                                              const GALGAS_ipic_31__38_Block & inArgument0,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForStackComputation * p = NULL ;
  macroMyNew (p, cMapElement_blockMapForStackComputation (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@blockMapForStackComputation insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForStackComputation::modifier_insertKey (GALGAS_lstring inKey,
                                                             GALGAS_ipic_31__38_Block inArgument0,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForStackComputation * p = NULL ;
  macroMyNew (p, cMapElement_blockMapForStackComputation (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' block is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_blockMapForStackComputation_searchKey = "the '%K' block is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForStackComputation::method_searchKey (GALGAS_lstring inKey,
                                                           GALGAS_ipic_31__38_Block & outArgument0,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cMapElement_blockMapForStackComputation * p = (const cMapElement_blockMapForStackComputation *) performSearch (inKey,
                                                                                                                         inCompiler,
                                                                                                                         kSearchErrorMessage_blockMapForStackComputation_searchKey
                                                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_blockMapForStackComputation) ;
    outArgument0 = p->mAttribute_mBlock ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block GALGAS_blockMapForStackComputation::reader_mBlockForKey (const GALGAS_string & inKey,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockMapForStackComputation * p = (const cMapElement_blockMapForStackComputation *) attributes ;
  GALGAS_ipic_31__38_Block result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForStackComputation) ;
    result = p->mAttribute_mBlock ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForStackComputation::modifier_setMBlockForKey (GALGAS_ipic_31__38_Block inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockMapForStackComputation * p = (cMapElement_blockMapForStackComputation *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForStackComputation) ;
    p->mAttribute_mBlock = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockMapForStackComputation * GALGAS_blockMapForStackComputation::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                 const GALGAS_string & inKey
                                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForStackComputation * result = (cMapElement_blockMapForStackComputation *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_blockMapForStackComputation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_blockMapForStackComputation::cEnumerator_blockMapForStackComputation (const GALGAS_blockMapForStackComputation & inEnumeratedObject,
                                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation_2D_element cEnumerator_blockMapForStackComputation::current (LOCATION_ARGS) const {
  const cMapElement_blockMapForStackComputation * p = (const cMapElement_blockMapForStackComputation *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockMapForStackComputation) ;
  return GALGAS_blockMapForStackComputation_2D_element (p->mAttribute_lkey, p->mAttribute_mBlock) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_blockMapForStackComputation::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block cEnumerator_blockMapForStackComputation::current_mBlock (LOCATION_ARGS) const {
  const cMapElement_blockMapForStackComputation * p = (const cMapElement_blockMapForStackComputation *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockMapForStackComputation) ;
  return p->mAttribute_mBlock ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          @blockMapForStackComputation type                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_blockMapForStackComputation ("blockMapForStackComputation",
                                                    NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_blockMapForStackComputation::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_blockMapForStackComputation ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_blockMapForStackComputation::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_blockMapForStackComputation (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForStackComputation GALGAS_blockMapForStackComputation::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_blockMapForStackComputation result ;
  const GALGAS_blockMapForStackComputation * p = (const GALGAS_blockMapForStackComputation *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_blockMapForStackComputation *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("blockMapForStackComputation", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_routineCallMap::cMapElement_routineCallMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_stringset & in_mCalledRoutineSet
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mCalledRoutineSet (in_mCalledRoutineSet) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_routineCallMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mCalledRoutineSet.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_routineCallMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_routineCallMap (mAttribute_lkey, mAttribute_mCalledRoutineSet COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_routineCallMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCalledRoutineSet" ":" ;
  mAttribute_mCalledRoutineSet.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_routineCallMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_routineCallMap * operand = (cMapElement_routineCallMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCalledRoutineSet.objectCompare (operand->mAttribute_mCalledRoutineSet) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap::GALGAS_routineCallMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap::GALGAS_routineCallMap (const GALGAS_routineCallMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap & GALGAS_routineCallMap::operator = (const GALGAS_routineCallMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap GALGAS_routineCallMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_routineCallMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap GALGAS_routineCallMap::constructor_mapWithMapToOverride (const GALGAS_routineCallMap & inMapToOverride
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_routineCallMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap GALGAS_routineCallMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_routineCallMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineCallMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                 const GALGAS_stringset & inArgument0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_routineCallMap * p = NULL ;
  macroMyNew (p, cMapElement_routineCallMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@routineCallMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineCallMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_stringset inArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_routineCallMap * p = NULL ;
  macroMyNew (p, cMapElement_routineCallMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' entry is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset GALGAS_routineCallMap::reader_mCalledRoutineSetForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineCallMap * p = (const cMapElement_routineCallMap *) attributes ;
  GALGAS_stringset result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineCallMap) ;
    result = p->mAttribute_mCalledRoutineSet ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineCallMap::modifier_setMCalledRoutineSetForKey (GALGAS_stringset inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineCallMap * p = (cMapElement_routineCallMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineCallMap) ;
    p->mAttribute_mCalledRoutineSet = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_routineCallMap * GALGAS_routineCallMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                       const GALGAS_string & inKey
                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_routineCallMap * result = (cMapElement_routineCallMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_routineCallMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_routineCallMap::cEnumerator_routineCallMap (const GALGAS_routineCallMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap_2D_element cEnumerator_routineCallMap::current (LOCATION_ARGS) const {
  const cMapElement_routineCallMap * p = (const cMapElement_routineCallMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_routineCallMap) ;
  return GALGAS_routineCallMap_2D_element (p->mAttribute_lkey, p->mAttribute_mCalledRoutineSet) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_routineCallMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset cEnumerator_routineCallMap::current_mCalledRoutineSet (LOCATION_ARGS) const {
  const cMapElement_routineCallMap * p = (const cMapElement_routineCallMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_routineCallMap) ;
  return p->mAttribute_mCalledRoutineSet ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @routineCallMap type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineCallMap ("routineCallMap",
                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineCallMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineCallMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineCallMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineCallMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineCallMap GALGAS_routineCallMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_routineCallMap result ;
  const GALGAS_routineCallMap * p = (const GALGAS_routineCallMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineCallMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("routineCallMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_routineStackRequirementMap::cMapElement_routineStackRequirementMap (const GALGAS_lstring & inKey,
                                                                                const GALGAS_uint & in_mLevels
                                                                                COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mLevels (in_mLevels) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_routineStackRequirementMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mLevels.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_routineStackRequirementMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_routineStackRequirementMap (mAttribute_lkey, mAttribute_mLevels COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_routineStackRequirementMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLevels" ":" ;
  mAttribute_mLevels.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_routineStackRequirementMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_routineStackRequirementMap * operand = (cMapElement_routineStackRequirementMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mLevels.objectCompare (operand->mAttribute_mLevels) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap::GALGAS_routineStackRequirementMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap::GALGAS_routineStackRequirementMap (const GALGAS_routineStackRequirementMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap & GALGAS_routineStackRequirementMap::operator = (const GALGAS_routineStackRequirementMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap GALGAS_routineStackRequirementMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_routineStackRequirementMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap GALGAS_routineStackRequirementMap::constructor_mapWithMapToOverride (const GALGAS_routineStackRequirementMap & inMapToOverride
                                                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_routineStackRequirementMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap GALGAS_routineStackRequirementMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                           COMMA_LOCATION_ARGS) const {
  GALGAS_routineStackRequirementMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineStackRequirementMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                             const GALGAS_uint & inArgument0,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_routineStackRequirementMap * p = NULL ;
  macroMyNew (p, cMapElement_routineStackRequirementMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@routineStackRequirementMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineStackRequirementMap::modifier_insertKey (GALGAS_lstring inKey,
                                                            GALGAS_uint inArgument0,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cMapElement_routineStackRequirementMap * p = NULL ;
  macroMyNew (p, cMapElement_routineStackRequirementMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' entry is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_routineStackRequirementMap_searchKey = "the '%K' entry is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineStackRequirementMap::method_searchKey (GALGAS_lstring inKey,
                                                          GALGAS_uint & outArgument0,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cMapElement_routineStackRequirementMap * p = (const cMapElement_routineStackRequirementMap *) performSearch (inKey,
                                                                                                                       inCompiler,
                                                                                                                       kSearchErrorMessage_routineStackRequirementMap_searchKey
                                                                                                                       COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_routineStackRequirementMap) ;
    outArgument0 = p->mAttribute_mLevels ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_routineStackRequirementMap::reader_mLevelsForKey (const GALGAS_string & inKey,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineStackRequirementMap * p = (const cMapElement_routineStackRequirementMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineStackRequirementMap) ;
    result = p->mAttribute_mLevels ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_routineStackRequirementMap::modifier_setMLevelsForKey (GALGAS_uint inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineStackRequirementMap * p = (cMapElement_routineStackRequirementMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineStackRequirementMap) ;
    p->mAttribute_mLevels = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_routineStackRequirementMap * GALGAS_routineStackRequirementMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                               const GALGAS_string & inKey
                                                                                                               COMMA_LOCATION_ARGS) {
  cMapElement_routineStackRequirementMap * result = (cMapElement_routineStackRequirementMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_routineStackRequirementMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_routineStackRequirementMap::cEnumerator_routineStackRequirementMap (const GALGAS_routineStackRequirementMap & inEnumeratedObject,
                                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap_2D_element cEnumerator_routineStackRequirementMap::current (LOCATION_ARGS) const {
  const cMapElement_routineStackRequirementMap * p = (const cMapElement_routineStackRequirementMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_routineStackRequirementMap) ;
  return GALGAS_routineStackRequirementMap_2D_element (p->mAttribute_lkey, p->mAttribute_mLevels) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_routineStackRequirementMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_routineStackRequirementMap::current_mLevels (LOCATION_ARGS) const {
  const cMapElement_routineStackRequirementMap * p = (const cMapElement_routineStackRequirementMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_routineStackRequirementMap) ;
  return p->mAttribute_mLevels ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          @routineStackRequirementMap type                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineStackRequirementMap ("routineStackRequirementMap",
                                                   NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineStackRequirementMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineStackRequirementMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineStackRequirementMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineStackRequirementMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_routineStackRequirementMap GALGAS_routineStackRequirementMap::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_routineStackRequirementMap result ;
  const GALGAS_routineStackRequirementMap * p = (const GALGAS_routineStackRequirementMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineStackRequirementMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("routineStackRequirementMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockMapForDurationComputation::cMapElement_blockMapForDurationComputation (const GALGAS_lstring & inKey,
                                                                                        const GALGAS_ipic_31__38_Block & in_mBlock,
                                                                                        const GALGAS_string & in_mNextLabel
                                                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mBlock (in_mBlock),
mAttribute_mNextLabel (in_mNextLabel) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_blockMapForDurationComputation::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mBlock.isValid () && mAttribute_mNextLabel.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_blockMapForDurationComputation::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_blockMapForDurationComputation (mAttribute_lkey, mAttribute_mBlock, mAttribute_mNextLabel COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_blockMapForDurationComputation::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBlock" ":" ;
  mAttribute_mBlock.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNextLabel" ":" ;
  mAttribute_mNextLabel.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_blockMapForDurationComputation::compare (const cCollectionElement * inOperand) const {
  cMapElement_blockMapForDurationComputation * operand = (cMapElement_blockMapForDurationComputation *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mBlock.objectCompare (operand->mAttribute_mBlock) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNextLabel.objectCompare (operand->mAttribute_mNextLabel) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation::GALGAS_blockMapForDurationComputation (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation::GALGAS_blockMapForDurationComputation (const GALGAS_blockMapForDurationComputation & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation & GALGAS_blockMapForDurationComputation::operator = (const GALGAS_blockMapForDurationComputation & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation GALGAS_blockMapForDurationComputation::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_blockMapForDurationComputation result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation GALGAS_blockMapForDurationComputation::constructor_mapWithMapToOverride (const GALGAS_blockMapForDurationComputation & inMapToOverride
                                                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_blockMapForDurationComputation result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation GALGAS_blockMapForDurationComputation::reader_overriddenMap (C_Compiler * inCompiler
                                                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_blockMapForDurationComputation result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForDurationComputation::addAssign_operation (const GALGAS_lstring & inKey,
                                                                 const GALGAS_ipic_31__38_Block & inArgument0,
                                                                 const GALGAS_string & inArgument1,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForDurationComputation * p = NULL ;
  macroMyNew (p, cMapElement_blockMapForDurationComputation (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@blockMapForDurationComputation insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForDurationComputation::modifier_insertKey (GALGAS_lstring inKey,
                                                                GALGAS_ipic_31__38_Block inArgument0,
                                                                GALGAS_string inArgument1,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForDurationComputation * p = NULL ;
  macroMyNew (p, cMapElement_blockMapForDurationComputation (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' block is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_blockMapForDurationComputation_searchKey = "the '%K' block is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForDurationComputation::method_searchKey (GALGAS_lstring inKey,
                                                              GALGAS_ipic_31__38_Block & outArgument0,
                                                              GALGAS_string & outArgument1,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) performSearch (inKey,
                                                                                                                               inCompiler,
                                                                                                                               kSearchErrorMessage_blockMapForDurationComputation_searchKey
                                                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
    outArgument0 = p->mAttribute_mBlock ;
    outArgument1 = p->mAttribute_mNextLabel ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block GALGAS_blockMapForDurationComputation::reader_mBlockForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) attributes ;
  GALGAS_ipic_31__38_Block result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
    result = p->mAttribute_mBlock ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_blockMapForDurationComputation::reader_mNextLabelForKey (const GALGAS_string & inKey,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
    result = p->mAttribute_mNextLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForDurationComputation::modifier_setMBlockForKey (GALGAS_ipic_31__38_Block inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockMapForDurationComputation * p = (cMapElement_blockMapForDurationComputation *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
    p->mAttribute_mBlock = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_blockMapForDurationComputation::modifier_setMNextLabelForKey (GALGAS_string inAttributeValue,
                                                                          GALGAS_string inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_blockMapForDurationComputation * p = (cMapElement_blockMapForDurationComputation *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
    p->mAttribute_mNextLabel = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_blockMapForDurationComputation * GALGAS_blockMapForDurationComputation::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                                       const GALGAS_string & inKey
                                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement_blockMapForDurationComputation * result = (cMapElement_blockMapForDurationComputation *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_blockMapForDurationComputation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_blockMapForDurationComputation::cEnumerator_blockMapForDurationComputation (const GALGAS_blockMapForDurationComputation & inEnumeratedObject,
                                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation_2D_element cEnumerator_blockMapForDurationComputation::current (LOCATION_ARGS) const {
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
  return GALGAS_blockMapForDurationComputation_2D_element (p->mAttribute_lkey, p->mAttribute_mBlock, p->mAttribute_mNextLabel) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_blockMapForDurationComputation::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ipic_31__38_Block cEnumerator_blockMapForDurationComputation::current_mBlock (LOCATION_ARGS) const {
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
  return p->mAttribute_mBlock ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_blockMapForDurationComputation::current_mNextLabel (LOCATION_ARGS) const {
  const cMapElement_blockMapForDurationComputation * p = (const cMapElement_blockMapForDurationComputation *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_blockMapForDurationComputation) ;
  return p->mAttribute_mNextLabel ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        @blockMapForDurationComputation type                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_blockMapForDurationComputation ("blockMapForDurationComputation",
                                                       NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_blockMapForDurationComputation::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_blockMapForDurationComputation ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_blockMapForDurationComputation::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_blockMapForDurationComputation (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_blockMapForDurationComputation GALGAS_blockMapForDurationComputation::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_blockMapForDurationComputation result ;
  const GALGAS_blockMapForDurationComputation * p = (const GALGAS_blockMapForDurationComputation *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_blockMapForDurationComputation *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("blockMapForDurationComputation", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_exploredBlockMap::cMapElement_exploredBlockMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_uint & in_mMinDuration,
                                                            const GALGAS_uint & in_mMaxDuration
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mMinDuration (in_mMinDuration),
mAttribute_mMaxDuration (in_mMaxDuration) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_exploredBlockMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mMinDuration.isValid () && mAttribute_mMaxDuration.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_exploredBlockMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_exploredBlockMap (mAttribute_lkey, mAttribute_mMinDuration, mAttribute_mMaxDuration COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_exploredBlockMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMinDuration" ":" ;
  mAttribute_mMinDuration.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaxDuration" ":" ;
  mAttribute_mMaxDuration.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_exploredBlockMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_exploredBlockMap * operand = (cMapElement_exploredBlockMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMinDuration.objectCompare (operand->mAttribute_mMinDuration) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMaxDuration.objectCompare (operand->mAttribute_mMaxDuration) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap::GALGAS_exploredBlockMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap::GALGAS_exploredBlockMap (const GALGAS_exploredBlockMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap & GALGAS_exploredBlockMap::operator = (const GALGAS_exploredBlockMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap GALGAS_exploredBlockMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_exploredBlockMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap GALGAS_exploredBlockMap::constructor_mapWithMapToOverride (const GALGAS_exploredBlockMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_exploredBlockMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap GALGAS_exploredBlockMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_exploredBlockMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_exploredBlockMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                   const GALGAS_uint & inArgument0,
                                                   const GALGAS_uint & inArgument1,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_exploredBlockMap * p = NULL ;
  macroMyNew (p, cMapElement_exploredBlockMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@exploredBlockMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_exploredBlockMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_uint inArgument0,
                                                  GALGAS_uint inArgument1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_exploredBlockMap * p = NULL ;
  macroMyNew (p, cMapElement_exploredBlockMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' entry is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_exploredBlockMap_searchKey = "the '%K' entry is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_exploredBlockMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_uint & outArgument0,
                                                GALGAS_uint & outArgument1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_exploredBlockMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
    outArgument0 = p->mAttribute_mMinDuration ;
    outArgument1 = p->mAttribute_mMaxDuration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_exploredBlockMap::reader_mMinDurationForKey (const GALGAS_string & inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
    result = p->mAttribute_mMinDuration ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_exploredBlockMap::reader_mMaxDurationForKey (const GALGAS_string & inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
    result = p->mAttribute_mMaxDuration ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_exploredBlockMap::modifier_setMMinDurationForKey (GALGAS_uint inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_exploredBlockMap * p = (cMapElement_exploredBlockMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
    p->mAttribute_mMinDuration = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_exploredBlockMap::modifier_setMMaxDurationForKey (GALGAS_uint inAttributeValue,
                                                              GALGAS_string inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_exploredBlockMap * p = (cMapElement_exploredBlockMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
    p->mAttribute_mMaxDuration = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_exploredBlockMap * GALGAS_exploredBlockMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                           const GALGAS_string & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_exploredBlockMap * result = (cMapElement_exploredBlockMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_exploredBlockMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_exploredBlockMap::cEnumerator_exploredBlockMap (const GALGAS_exploredBlockMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap_2D_element cEnumerator_exploredBlockMap::current (LOCATION_ARGS) const {
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
  return GALGAS_exploredBlockMap_2D_element (p->mAttribute_lkey, p->mAttribute_mMinDuration, p->mAttribute_mMaxDuration) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_exploredBlockMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_exploredBlockMap::current_mMinDuration (LOCATION_ARGS) const {
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
  return p->mAttribute_mMinDuration ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_exploredBlockMap::current_mMaxDuration (LOCATION_ARGS) const {
  const cMapElement_exploredBlockMap * p = (const cMapElement_exploredBlockMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_exploredBlockMap) ;
  return p->mAttribute_mMaxDuration ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @exploredBlockMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_exploredBlockMap ("exploredBlockMap",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_exploredBlockMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_exploredBlockMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_exploredBlockMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_exploredBlockMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_exploredBlockMap GALGAS_exploredBlockMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_exploredBlockMap result ;
  const GALGAS_exploredBlockMap * p = (const GALGAS_exploredBlockMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_exploredBlockMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("exploredBlockMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                Class for element of '@codeWithDuration' sorted list                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cSortedListElement_codeWithDuration : public cSortedListElement {
  public : GALGAS_codeWithDuration_2D_element mObject ;

//--- Constructor
  public : cSortedListElement_codeWithDuration (const GALGAS_uint & in_mAddress,
                                                const GALGAS_string & in_mAssembly,
                                                const GALGAS_uint & in_mMinDuration,
                                                const GALGAS_uint & in_mMaxDuration
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cSortedListElement * copy (void) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;

//--- Virtual method that comparing element for sorting
  public : virtual typeComparisonResult compareForSorting (const cSortedListElement * inOperand) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cSortedListElement_codeWithDuration::cSortedListElement_codeWithDuration (const GALGAS_uint & in_mAddress,
                                                                          const GALGAS_string & in_mAssembly,
                                                                          const GALGAS_uint & in_mMinDuration,
                                                                          const GALGAS_uint & in_mMaxDuration
                                                                          COMMA_LOCATION_ARGS) :
cSortedListElement (THERE),
mObject (in_mAddress, in_mAssembly, in_mMinDuration, in_mMaxDuration) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cSortedListElement_codeWithDuration::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cSortedListElement * cSortedListElement_codeWithDuration::copy (void) {
  cSortedListElement * result = NULL ;
  macroMyNew (result, cSortedListElement_codeWithDuration (mObject.mAttribute_mAddress, mObject.mAttribute_mAssembly, mObject.mAttribute_mMinDuration, mObject.mAttribute_mMaxDuration COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cSortedListElement_codeWithDuration::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAddress" ":" ;
  mObject.mAttribute_mAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAssembly" ":" ;
  mObject.mAttribute_mAssembly.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMinDuration" ":" ;
  mObject.mAttribute_mMinDuration.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaxDuration" ":" ;
  mObject.mAttribute_mMaxDuration.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_codeWithDuration::compare (const cCollectionElement * inOperand) const {
  cSortedListElement_codeWithDuration * operand = (cSortedListElement_codeWithDuration *) inOperand ;
  macroValidSharedObject (operand, cSortedListElement_codeWithDuration) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration::GALGAS_codeWithDuration (void) :
AC_GALGAS_sortedlist () {
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_codeWithDuration::compareForSorting (const cSortedListElement * inOperand) const {
  typeComparisonResult result = kOperandEqual ;
  const cSortedListElement_codeWithDuration * operand = (const cSortedListElement_codeWithDuration *) inOperand ;
  macroValidSharedObject (operand, cSortedListElement_codeWithDuration) ;
  if (result == kOperandEqual) {
    result = mObject.mAttribute_mAddress.objectCompare (operand->mObject.mAttribute_mAddress) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration GALGAS_codeWithDuration::constructor_emptySortedList (LOCATION_ARGS) {
  GALGAS_codeWithDuration result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration GALGAS_codeWithDuration::constructor_sortedListWithValue (const GALGAS_uint & inOperand0,
                                                                                  const GALGAS_string & inOperand1,
                                                                                  const GALGAS_uint & inOperand2,
                                                                                  const GALGAS_uint & inOperand3
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_codeWithDuration result = constructor_emptySortedList (THERE) ;
  cSortedListElement * p = NULL ;
  macroMyNew (p, cSortedListElement_codeWithDuration (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  result.addObject (attributes) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::addAssign_operation (const GALGAS_uint & inOperand0,
                                                   const GALGAS_string & inOperand1,
                                                   const GALGAS_uint & inOperand2,
                                                   const GALGAS_uint & inOperand3
                                                   COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = NULL ;
    macroMyNew (p, cSortedListElement_codeWithDuration (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::dotAssign_operation (const GALGAS_codeWithDuration inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()) {
    appendSortedList (inOperand) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration GALGAS_codeWithDuration::operator_concat (const GALGAS_codeWithDuration & inOperand
                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_codeWithDuration result ;
  if (isValid () && inOperand.isValid ()) {
    result = constructor_emptySortedList (THERE) ;
    result = *this ;
    result.appendSortedList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::modifier_popSmallest (GALGAS_uint & outOperand0,
                                                    GALGAS_string & outOperand1,
                                                    GALGAS_uint & outOperand2,
                                                    GALGAS_uint & outOperand3,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeSmallestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_codeWithDuration * p = (cSortedListElement_codeWithDuration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
    outOperand0 = p->mObject.mAttribute_mAddress ;
    outOperand1 = p->mObject.mAttribute_mAssembly ;
    outOperand2 = p->mObject.mAttribute_mMinDuration ;
    outOperand3 = p->mObject.mAttribute_mMaxDuration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::modifier_popGreatest (GALGAS_uint & outOperand0,
                                                    GALGAS_string & outOperand1,
                                                    GALGAS_uint & outOperand2,
                                                    GALGAS_uint & outOperand3,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeGreatestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_codeWithDuration * p = (cSortedListElement_codeWithDuration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
    outOperand0 = p->mObject.mAttribute_mAddress ;
    outOperand1 = p->mObject.mAttribute_mAssembly ;
    outOperand2 = p->mObject.mAttribute_mMinDuration ;
    outOperand3 = p->mObject.mAttribute_mMaxDuration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::method_smallest (GALGAS_uint & outOperand0,
                                               GALGAS_string & outOperand1,
                                               GALGAS_uint & outOperand2,
                                               GALGAS_uint & outOperand3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  smallestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_codeWithDuration * p = (cSortedListElement_codeWithDuration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
    outOperand0 = p->mObject.mAttribute_mAddress ;
    outOperand1 = p->mObject.mAttribute_mAssembly ;
    outOperand2 = p->mObject.mAttribute_mMinDuration ;
    outOperand3 = p->mObject.mAttribute_mMaxDuration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_codeWithDuration::method_greatest (GALGAS_uint & outOperand0,
                                               GALGAS_string & outOperand1,
                                               GALGAS_uint & outOperand2,
                                               GALGAS_uint & outOperand3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  greatestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_codeWithDuration * p = (cSortedListElement_codeWithDuration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
    outOperand0 = p->mObject.mAttribute_mAddress ;
    outOperand1 = p->mObject.mAttribute_mAssembly ;
    outOperand2 = p->mObject.mAttribute_mMinDuration ;
    outOperand3 = p->mObject.mAttribute_mMaxDuration ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_codeWithDuration::cEnumerator_codeWithDuration (const GALGAS_codeWithDuration & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration_2D_element cEnumerator_codeWithDuration::current (LOCATION_ARGS) const {
  const cSortedListElement_codeWithDuration * p = (const cSortedListElement_codeWithDuration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
  return p->mObject ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_codeWithDuration::current_mAddress (LOCATION_ARGS) const {
  const cSortedListElement_codeWithDuration * p = (const cSortedListElement_codeWithDuration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
  return p->mObject.mAttribute_mAddress ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_codeWithDuration::current_mAssembly (LOCATION_ARGS) const {
  const cSortedListElement_codeWithDuration * p = (const cSortedListElement_codeWithDuration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
  return p->mObject.mAttribute_mAssembly ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_codeWithDuration::current_mMinDuration (LOCATION_ARGS) const {
  const cSortedListElement_codeWithDuration * p = (const cSortedListElement_codeWithDuration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
  return p->mObject.mAttribute_mMinDuration ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_codeWithDuration::current_mMaxDuration (LOCATION_ARGS) const {
  const cSortedListElement_codeWithDuration * p = (const cSortedListElement_codeWithDuration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_codeWithDuration) ;
  return p->mObject.mAttribute_mMaxDuration ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @codeWithDuration type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_codeWithDuration ("codeWithDuration",
                                         NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_codeWithDuration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_codeWithDuration ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_codeWithDuration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_codeWithDuration (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_codeWithDuration GALGAS_codeWithDuration::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_codeWithDuration result ;
  const GALGAS_codeWithDuration * p = (const GALGAS_codeWithDuration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_codeWithDuration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("codeWithDuration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//     L E X I Q U E                                                                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

#include "strings/unicode_character_cpp.h"
#include "galgas2/scanner_actions.h"

//---------------------------------------------------------------------------------------------------------------------*

cTokenFor_piccoloDevice_5F_lexique::cTokenFor_piccoloDevice_5F_lexique (void) :
mLexicalAttribute_charValue (),
mLexicalAttribute_identifierString (),
mLexicalAttribute_tokenString (),
mLexicalAttribute_uint_33__32_value () {
}

//---------------------------------------------------------------------------------------------------------------------*

C_Lexique_piccoloDevice_5F_lexique::C_Lexique_piccoloDevice_5F_lexique (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*

C_Lexique_piccoloDevice_5F_lexique::C_Lexique_piccoloDevice_5F_lexique (C_Compiler * inCallerCompiler,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*
//                 I N D E X I N G    D I R E C T O R Y                                                                *
//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::indexingDirectory (void) const {
  return "" ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                        Lexical error message list                                                                   *
//---------------------------------------------------------------------------------------------------------------------*

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_ASCIIcodeTooLargeError [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('I'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('>'),
  TO_UNICODE (' '),
  TO_UNICODE ('2'),
  TO_UNICODE ('5'),
  TO_UNICODE ('5'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_decimalNumberTooLarge [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_hexNumberTooLarge [] = {
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_incorrectCharConstant [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_incorrectStringEnd [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\"'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

static const utf32 gLexicalMessage_piccoloDevice_5F_lexique_internalError [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------------------------------------------------*
//          Syntax error messages, for every terminal symbol                                                           *
//---------------------------------------------------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_identifier [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$integer$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_integer [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$string$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_string [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\"'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_comment [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$controller$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_controller [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$processor$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_processor [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$romsize$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_romsize [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$eepromsize$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_eepromsize [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bank$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_bank [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$unusedregister$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_unusedregister [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mirrorat$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_mirrorat [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ram$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_ram [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$register$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_register [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$at$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_at [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$to$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_to [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$configuration$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_configuration [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$width$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_width [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$description$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_description [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mask$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_mask [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$illegal$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_illegal [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$message$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_message [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$setting$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique_setting [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__3C_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$>$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__3E_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__2C_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__2D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$/$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__2F_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('/'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__3B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__3A_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__5B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__5D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__7B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage_piccoloDevice_5F_lexique__7D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                getMessageForTerminal                                                                                *
//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::getMessageForTerminal (const int16_t inTerminalIndex) const {
  static const utf32 * syntaxErrorMessageArray [34] = {kEndOfSourceLexicalErrorMessage,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_identifier,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_integer,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_string,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_comment,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_controller,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_processor,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_romsize,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_eepromsize,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_bank,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_unusedregister,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_mirrorat,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_ram,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_register,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_at,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_to,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_configuration,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_width,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_description,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_mask,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_illegal,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_message,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique_setting,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__3C_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__3E_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__2C_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__2D_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__2F_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__3B_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__3A_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__5B_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__5D_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__7B_,
    gSyntaxErrorMessage_piccoloDevice_5F_lexique__7D_} ;
  return syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                      U N I C O D E    S T R I N G S                                                                 *
//---------------------------------------------------------------------------------------------------------------------*

//--- Unicode string for '$_2C_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2D_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_2F_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_30_x$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__30_x [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3A_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3B_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3C_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__3C_ [] = {
  TO_UNICODE ('<'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_3E_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__3E_ [] = {
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_5B_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_5D_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$at$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_at [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$bank$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_bank [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$configuration$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_configuration [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$controller$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_controller [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$description$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_description [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$eepromsize$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_eepromsize [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$illegal$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_illegal [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$mask$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_mask [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$message$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_message [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$mirrorat$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_mirrorat [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$processor$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_processor [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$ram$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_ram [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$register$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_register [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$romsize$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_romsize [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$setting$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_setting [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$to$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_to [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$unusedregister$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_unusedregister [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$width$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique_width [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_7B_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ;

//--- Unicode string for '$_7D_$'
static const utf32 kUnicodeString_piccoloDevice_5F_lexique__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------------------------------------------------*
//             Key words table 'controlKeyWordList'                            *
//---------------------------------------------------------------------------------------------------------------------*

static const int32_t ktable_size_piccoloDevice_5F_lexique_controlKeyWordList = 18 ;

static const C_unicode_lexique_table_entry ktable_for_piccoloDevice_5F_lexique_controlKeyWordList [ktable_size_piccoloDevice_5F_lexique_controlKeyWordList] = {
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_at, 2, C_Lexique_piccoloDevice_5F_lexique::kToken_at),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_to, 2, C_Lexique_piccoloDevice_5F_lexique::kToken_to),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_ram, 3, C_Lexique_piccoloDevice_5F_lexique::kToken_ram),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_bank, 4, C_Lexique_piccoloDevice_5F_lexique::kToken_bank),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_mask, 4, C_Lexique_piccoloDevice_5F_lexique::kToken_mask),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_width, 5, C_Lexique_piccoloDevice_5F_lexique::kToken_width),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_illegal, 7, C_Lexique_piccoloDevice_5F_lexique::kToken_illegal),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_message, 7, C_Lexique_piccoloDevice_5F_lexique::kToken_message),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_romsize, 7, C_Lexique_piccoloDevice_5F_lexique::kToken_romsize),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_setting, 7, C_Lexique_piccoloDevice_5F_lexique::kToken_setting),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_mirrorat, 8, C_Lexique_piccoloDevice_5F_lexique::kToken_mirrorat),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_register, 8, C_Lexique_piccoloDevice_5F_lexique::kToken_register),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_processor, 9, C_Lexique_piccoloDevice_5F_lexique::kToken_processor),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_controller, 10, C_Lexique_piccoloDevice_5F_lexique::kToken_controller),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_eepromsize, 10, C_Lexique_piccoloDevice_5F_lexique::kToken_eepromsize),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_description, 11, C_Lexique_piccoloDevice_5F_lexique::kToken_description),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_configuration, 13, C_Lexique_piccoloDevice_5F_lexique::kToken_configuration),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique_unusedregister, 14, C_Lexique_piccoloDevice_5F_lexique::kToken_unusedregister)
} ;

int16_t C_Lexique_piccoloDevice_5F_lexique::search_into_controlKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_piccoloDevice_5F_lexique_controlKeyWordList, ktable_size_piccoloDevice_5F_lexique_controlKeyWordList) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//             Key words table 'delimitorsList'                            *
//---------------------------------------------------------------------------------------------------------------------*

static const int32_t ktable_size_piccoloDevice_5F_lexique_delimitorsList = 11 ;

static const C_unicode_lexique_table_entry ktable_for_piccoloDevice_5F_lexique_delimitorsList [ktable_size_piccoloDevice_5F_lexique_delimitorsList] = {
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__2C_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__2C_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__2D_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__2D_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__2F_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__2F_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__3A_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__3A_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__3B_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__3B_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__3C_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__3C_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__3E_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__3E_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__5B_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__5B_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__5D_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__5D_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__7B_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__7B_),
  C_unicode_lexique_table_entry (kUnicodeString_piccoloDevice_5F_lexique__7D_, 1, C_Lexique_piccoloDevice_5F_lexique::kToken__7D_)
} ;

int16_t C_Lexique_piccoloDevice_5F_lexique::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_piccoloDevice_5F_lexique_delimitorsList, ktable_size_piccoloDevice_5F_lexique_delimitorsList) ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                          getCurrentTokenString                                                                      *
//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::getCurrentTokenString (const cToken * inTokenPtr) const {
  const cTokenFor_piccoloDevice_5F_lexique * ptr = (const cTokenFor_piccoloDevice_5F_lexique *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s.appendCString("$$") ;
  }else{
    switch (ptr->mTokenCode) {
    case kToken_:
      s.appendCString("$$") ;
      break ;
    case kToken_identifier:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("identifier") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_tokenString) ;
      break ;
    case kToken_integer:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("integer") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendUnsigned (ptr->mLexicalAttribute_uint_33__32_value) ;
      break ;
    case kToken_string:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("string") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;
      s.appendCLiteralStringConstant (ptr->mLexicalAttribute_tokenString) ;
      break ;
    case kToken_comment:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("comment") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_controller:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("controller") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_processor:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("processor") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_romsize:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("romsize") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_eepromsize:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("eepromsize") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_bank:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("bank") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_unusedregister:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("unusedregister") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_mirrorat:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("mirrorat") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_ram:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("ram") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_register:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("register") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_at:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("at") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_to:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("to") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_configuration:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("configuration") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_width:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("width") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_description:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("description") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_mask:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("mask") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_illegal:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("illegal") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_message:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("message") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken_setting:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("setting") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3C_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("<") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3E_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (">") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2C_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (",") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("-") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__2F_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("/") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (";") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__3A_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString (":") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__5B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("[") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__5D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("]") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__7B_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("{") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    case kToken__7D_:
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      s.appendCString ("}") ;
      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;
      break ;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                           Template Delimiters                                                                       *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                           Template Replacements                                                                     *
//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//            Terminal Symbols as end of script in template mark                                                       *
//---------------------------------------------------------------------------------------------------------------------*



//---------------------------------------------------------------------------------------------------------------------*
//               P A R S E    L E X I C A L    T O K E N                                                               *
//---------------------------------------------------------------------------------------------------------------------*

bool C_Lexique_piccoloDevice_5F_lexique::parseLexicalToken (void) {
  cTokenFor_piccoloDevice_5F_lexique token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.mLexicalAttribute_charValue = TO_UNICODE (0) ;
    token.mLexicalAttribute_identifierString.setLengthToZero () ;
    token.mLexicalAttribute_tokenString.setLengthToZero () ;
    token.mLexicalAttribute_uint_33__32_value = 0 ;
    mTokenStartLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_identifierString, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) || testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) || testForInputUTF32Char (TO_UNICODE ('_')) || testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_controlKeyWordList (token.mLexicalAttribute_identifierString) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = kToken_identifier ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__30_x, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint_33__32_value, gLexicalMessage_piccoloDevice_5F_lexique_hexNumberTooLarge, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint_33__32_value, gLexicalMessage_piccoloDevice_5F_lexique_hexNumberTooLarge, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint_33__32_value, gLexicalMessage_piccoloDevice_5F_lexique_hexNumberTooLarge, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = kToken_integer ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint_33__32_value, gLexicalMessage_piccoloDevice_5F_lexique_decimalNumberTooLarge, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint_33__32_value, gLexicalMessage_piccoloDevice_5F_lexique_decimalNumberTooLarge, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = kToken_integer ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__7D_, 1, true)) {
        token.mTokenCode = kToken__7D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__7B_, 1, true)) {
        token.mTokenCode = kToken__7B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__5D_, 1, true)) {
        token.mTokenCode = kToken__5D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__5B_, 1, true)) {
        token.mTokenCode = kToken__5B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__3E_, 1, true)) {
        token.mTokenCode = kToken__3E_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__3C_, 1, true)) {
        token.mTokenCode = kToken__3C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__3B_, 1, true)) {
        token.mTokenCode = kToken__3B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__3A_, 1, true)) {
        token.mTokenCode = kToken__3A_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__2F_, 1, true)) {
        token.mTokenCode = kToken__2F_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__2D_, 1, true)) {
        token.mTokenCode = kToken__2D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString_piccoloDevice_5F_lexique__2C_, 1, true)) {
        token.mTokenCode = kToken__2C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
            if (testForInputUTF32Char (TO_UNICODE ('f'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\f')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('n'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\n')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('r'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\r')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('t'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\t')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('v'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\v')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\\')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('0'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\0')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\"')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\''))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\'')) ;
            }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              do {
                ::scanner_routine_enterHexDigitIntoASCIIcharacter (*this, token.mLexicalAttribute_charValue, previousChar (), gLexicalMessage_piccoloDevice_5F_lexique_ASCIIcodeTooLargeError, gLexicalMessage_piccoloDevice_5F_lexique_internalError) ;
                if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
                }else{
                  mLoop = false ;
                }
              }while (mLoop) ;
              mLoop = true ;
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, token.mLexicalAttribute_charValue) ;
            }else{
              lexicalError (gLexicalMessage_piccoloDevice_5F_lexique_incorrectCharConstant COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputUTF32Char (TO_UNICODE (' ')) || testForInputUTF32Char (TO_UNICODE ('!')) || testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = kToken_string ;
          enterToken (token) ;
        }else{
          lexicalError (gLexicalMessage_piccoloDevice_5F_lexique_incorrectStringEnd COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) || testForInputUTF32Char (TO_UNICODE ('\v')) || testForInputUTF32Char (TO_UNICODE ('\f')) || testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        enterDroppedTerminal (kToken_comment) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = kToken_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                         E N T E R    T O K E N                                                                      *
//---------------------------------------------------------------------------------------------------------------------*

void C_Lexique_piccoloDevice_5F_lexique::enterToken (const cTokenFor_piccoloDevice_5F_lexique & inToken) {
  cTokenFor_piccoloDevice_5F_lexique * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_piccoloDevice_5F_lexique ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mStartLocation = mTokenStartLocation ;
  ptr->mEndLocation = mTokenEndLocation ;
  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;
  ptr->mLexicalAttribute_charValue = inToken.mLexicalAttribute_charValue ;
  ptr->mLexicalAttribute_identifierString = inToken.mLexicalAttribute_identifierString ;
  ptr->mLexicalAttribute_tokenString = inToken.mLexicalAttribute_tokenString ;
  ptr->mLexicalAttribute_uint_33__32_value = inToken.mLexicalAttribute_uint_33__32_value ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//               A T T R I B U T E   A C C E S S                                                                       *
//---------------------------------------------------------------------------------------------------------------------*

utf32 C_Lexique_piccoloDevice_5F_lexique::attributeValue_charValue (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_charValue ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::attributeValue_identifierString (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_identifierString ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::attributeValue_tokenString (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_tokenString ;
}

//---------------------------------------------------------------------------------------------------------------------*

uint32_t C_Lexique_piccoloDevice_5F_lexique::attributeValue_uint_33__32_value (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_uint_33__32_value ;
}

//---------------------------------------------------------------------------------------------------------------------*
//         A S S I G N    F R O M    A T T R I B U T E                                                                 *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lchar C_Lexique_piccoloDevice_5F_lexique::synthetizedAttribute_charValue (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  macroValidSharedObject (ptr, cTokenFor_piccoloDevice_5F_lexique) ;
  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;
  GALGAS_char value (ptr->mLexicalAttribute_charValue) ;
  GALGAS_lchar result (value, currentLocation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring C_Lexique_piccoloDevice_5F_lexique::synthetizedAttribute_identifierString (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  macroValidSharedObject (ptr, cTokenFor_piccoloDevice_5F_lexique) ;
  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;
  GALGAS_string value (ptr->mLexicalAttribute_identifierString) ;
  GALGAS_lstring result (value, currentLocation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring C_Lexique_piccoloDevice_5F_lexique::synthetizedAttribute_tokenString (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  macroValidSharedObject (ptr, cTokenFor_piccoloDevice_5F_lexique) ;
  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;
  GALGAS_string value (ptr->mLexicalAttribute_tokenString) ;
  GALGAS_lstring result (value, currentLocation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint C_Lexique_piccoloDevice_5F_lexique::synthetizedAttribute_uint_33__32_value (void) const {
  cTokenFor_piccoloDevice_5F_lexique * ptr = (cTokenFor_piccoloDevice_5F_lexique *) mCurrentTokenPtr ;
  macroValidSharedObject (ptr, cTokenFor_piccoloDevice_5F_lexique) ;
  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;
  GALGAS_uint value (ptr->mLexicalAttribute_uint_33__32_value) ;
  GALGAS_luint result (value, currentLocation) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                         I N T R O S P E C T I O N                                                                   *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringlist C_Lexique_piccoloDevice_5F_lexique::symbols (LOCATION_ARGS) {
  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;
  result.addAssign_operation (GALGAS_string ("identifier") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("integer") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("string") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("comment") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("controller") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("processor") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("romsize") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("eepromsize") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("bank") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("unusedregister") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("mirrorat") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("ram") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("register") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("at") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("to") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("configuration") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("width") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("description") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("mask") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("illegal") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("message") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("setting") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("<") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string (">") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string (",") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("-") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("/") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string (";") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string (":") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("[") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("]") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("{") COMMA_THERE) ;
  result.addAssign_operation (GALGAS_string ("}") COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//   S T Y L E   I N D E X    F O R    T E R M I N A L                                                                 *
//---------------------------------------------------------------------------------------------------------------------*

uint32_t C_Lexique_piccoloDevice_5F_lexique::styleIndexForTerminal (const int32_t inTerminalIndex) const {
  static const uint32_t kTerminalSymbolStyles [34] = {0,
    0 /* piccoloDevice_lexique_1_identifier */,
    4 /* piccoloDevice_lexique_1_integer */,
    5 /* piccoloDevice_lexique_1_string */,
    6 /* piccoloDevice_lexique_1_comment */,
    1 /* piccoloDevice_lexique_1_controller */,
    1 /* piccoloDevice_lexique_1_processor */,
    1 /* piccoloDevice_lexique_1_romsize */,
    1 /* piccoloDevice_lexique_1_eepromsize */,
    1 /* piccoloDevice_lexique_1_bank */,
    1 /* piccoloDevice_lexique_1_unusedregister */,
    1 /* piccoloDevice_lexique_1_mirrorat */,
    1 /* piccoloDevice_lexique_1_ram */,
    1 /* piccoloDevice_lexique_1_register */,
    1 /* piccoloDevice_lexique_1_at */,
    1 /* piccoloDevice_lexique_1_to */,
    1 /* piccoloDevice_lexique_1_configuration */,
    1 /* piccoloDevice_lexique_1_width */,
    1 /* piccoloDevice_lexique_1_description */,
    1 /* piccoloDevice_lexique_1_mask */,
    1 /* piccoloDevice_lexique_1_illegal */,
    1 /* piccoloDevice_lexique_1_message */,
    1 /* piccoloDevice_lexique_1_setting */,
    3 /* piccoloDevice_lexique_1__3C_ */,
    3 /* piccoloDevice_lexique_1__3E_ */,
    3 /* piccoloDevice_lexique_1__2C_ */,
    3 /* piccoloDevice_lexique_1__2D_ */,
    3 /* piccoloDevice_lexique_1__2F_ */,
    3 /* piccoloDevice_lexique_1__3B_ */,
    3 /* piccoloDevice_lexique_1__3A_ */,
    3 /* piccoloDevice_lexique_1__5B_ */,
    3 /* piccoloDevice_lexique_1__5D_ */,
    3 /* piccoloDevice_lexique_1__7B_ */,
    3 /* piccoloDevice_lexique_1__7D_ */
  } ;
  return (inTerminalIndex >= 0) ? kTerminalSymbolStyles [inTerminalIndex] : 0 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//   S T Y L E   N A M E    F O R    S T Y L E    I N D E X                                                            *
//---------------------------------------------------------------------------------------------------------------------*

C_String C_Lexique_piccoloDevice_5F_lexique::styleNameForIndex (const uint32_t inStyleIndex) const {
  C_String result ;
  if (inStyleIndex < 7) {
    static const char * kStyleArray [7] = {
      "",
      "keywordStyle",
      "instructionStyle",
      "delimitersStyle",
      "integerStyle",
      "stringStyle",
      "commentStyle"
    } ;
    result = kStyleArray [inStyleIndex] ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_declaredByteMap::cMapElement_declaredByteMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_declaredByteMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_declaredByteMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredByteMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_declaredByteMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredByteMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredByteMap * operand = (cMapElement_declaredByteMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap::GALGAS_declaredByteMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap::GALGAS_declaredByteMap (const GALGAS_declaredByteMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap & GALGAS_declaredByteMap::operator = (const GALGAS_declaredByteMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::constructor_mapWithMapToOverride (const GALGAS_declaredByteMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_declaredByteMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredByteMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_declaredByteMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredByteMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@declaredByteMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredByteMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_declaredByteMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredByteMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' byte is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_declaredByteMap_searchKey = "the '%K' byte is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_declaredByteMap::method_searchKey (GALGAS_lstring inKey,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  const cMapElement_declaredByteMap * p = (const cMapElement_declaredByteMap *) performSearch (inKey,
                                                                                                 inCompiler,
                                                                                                 kSearchErrorMessage_declaredByteMap_searchKey
                                                                                                 COMMA_THERE) ;
  if (NULL == p) {
  }else{
    macroValidSharedObject (p, cMapElement_declaredByteMap) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_declaredByteMap * GALGAS_declaredByteMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                         const GALGAS_string & inKey
                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_declaredByteMap * result = (cMapElement_declaredByteMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_declaredByteMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_declaredByteMap::cEnumerator_declaredByteMap (const GALGAS_declaredByteMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap_2D_element cEnumerator_declaredByteMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredByteMap * p = (const cMapElement_declaredByteMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredByteMap) ;
  return GALGAS_declaredByteMap_2D_element (p->mAttribute_lkey) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredByteMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @declaredByteMap type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredByteMap ("declaredByteMap",
                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredByteMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredByteMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredByteMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredByteMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  const GALGAS_declaredByteMap * p = (const GALGAS_declaredByteMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredByteMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredByteMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerTable::cMapElement_registerTable (const GALGAS_lstring & inKey,
                                                      const GALGAS_uintlist & in_mRegisterAddressList,
                                                      const GALGAS_uint & in_mSize,
                                                      const GALGAS_bitSliceTable & in_mBitSliceTable,
                                                      const GALGAS_string & in_mBitDefinitionString
                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterAddressList (in_mRegisterAddressList),
mAttribute_mSize (in_mSize),
mAttribute_mBitSliceTable (in_mBitSliceTable),
mAttribute_mBitDefinitionString (in_mBitDefinitionString) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_registerTable::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddressList.isValid () && mAttribute_mSize.isValid () && mAttribute_mBitSliceTable.isValid () && mAttribute_mBitDefinitionString.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_registerTable::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerTable (mAttribute_lkey, mAttribute_mRegisterAddressList, mAttribute_mSize, mAttribute_mBitSliceTable, mAttribute_mBitDefinitionString COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_registerTable::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddressList" ":" ;
  mAttribute_mRegisterAddressList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSize" ":" ;
  mAttribute_mSize.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitSliceTable" ":" ;
  mAttribute_mBitSliceTable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitDefinitionString" ":" ;
  mAttribute_mBitDefinitionString.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerTable::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerTable * operand = (cMapElement_registerTable *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddressList.objectCompare (operand->mAttribute_mRegisterAddressList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSize.objectCompare (operand->mAttribute_mSize) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitSliceTable.objectCompare (operand->mAttribute_mBitSliceTable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitDefinitionString.objectCompare (operand->mAttribute_mBitDefinitionString) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable::GALGAS_registerTable (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable::GALGAS_registerTable (const GALGAS_registerTable & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable & GALGAS_registerTable::operator = (const GALGAS_registerTable & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerTable result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::constructor_mapWithMapToOverride (const GALGAS_registerTable & inMapToOverride
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_registerTable result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::reader_overriddenMap (C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_registerTable result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::addAssign_operation (const GALGAS_lstring & inKey,
                                                const GALGAS_uintlist & inArgument0,
                                                const GALGAS_uint & inArgument1,
                                                const GALGAS_bitSliceTable & inArgument2,
                                                const GALGAS_string & inArgument3,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_registerTable * p = NULL ;
  macroMyNew (p, cMapElement_registerTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@registerTable insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_insertKey (GALGAS_lstring inKey,
                                               GALGAS_uintlist inArgument0,
                                               GALGAS_uint inArgument1,
                                               GALGAS_bitSliceTable inArgument2,
                                               GALGAS_string inArgument3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_registerTable * p = NULL ;
  macroMyNew (p, cMapElement_registerTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' register is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerTable_searchKey = "the '%K' register is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::method_searchKey (GALGAS_lstring inKey,
                                             GALGAS_uintlist & outArgument0,
                                             GALGAS_uint & outArgument1,
                                             GALGAS_bitSliceTable & outArgument2,
                                             GALGAS_string & outArgument3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) performSearch (inKey,
                                                                                             inCompiler,
                                                                                             kSearchErrorMessage_registerTable_searchKey
                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_registerTable) ;
    outArgument0 = p->mAttribute_mRegisterAddressList ;
    outArgument1 = p->mAttribute_mSize ;
    outArgument2 = p->mAttribute_mBitSliceTable ;
    outArgument3 = p->mAttribute_mBitDefinitionString ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_registerTable::reader_mRegisterAddressListForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    result = p->mAttribute_mRegisterAddressList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_registerTable::reader_mSizeForKey (const GALGAS_string & inKey,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    result = p->mAttribute_mSize ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_registerTable::reader_mBitSliceTableForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_bitSliceTable result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    result = p->mAttribute_mBitSliceTable ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_registerTable::reader_mBitDefinitionStringForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    result = p->mAttribute_mBitDefinitionString ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMRegisterAddressListForKey (GALGAS_uintlist inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mRegisterAddressList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMSizeForKey (GALGAS_uint inAttributeValue,
                                                    GALGAS_string inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mSize = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMBitSliceTableForKey (GALGAS_bitSliceTable inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mBitSliceTable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMBitDefinitionStringForKey (GALGAS_string inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mBitDefinitionString = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_registerTable * GALGAS_registerTable::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                     const GALGAS_string & inKey
                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_registerTable * result = (cMapElement_registerTable *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_registerTable) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_registerTable::cEnumerator_registerTable (const GALGAS_registerTable & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable_2D_element cEnumerator_registerTable::current (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerTable) ;
  return GALGAS_registerTable_2D_element (p->mAttribute_lkey, p->mAttribute_mRegisterAddressList, p->mAttribute_mSize, p->mAttribute_mBitSliceTable, p->mAttribute_mBitDefinitionString) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerTable::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_registerTable::current_mRegisterAddressList (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerTable) ;
  return p->mAttribute_mRegisterAddressList ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_registerTable::current_mSize (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerTable) ;
  return p->mAttribute_mSize ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bitSliceTable cEnumerator_registerTable::current_mBitSliceTable (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerTable) ;
  return p->mAttribute_mBitSliceTable ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_registerTable::current_mBitDefinitionString (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_registerTable) ;
  return p->mAttribute_mBitDefinitionString ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @registerTable type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerTable ("registerTable",
                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerTable::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerTable ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerTable::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerTable (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_registerTable result ;
  const GALGAS_registerTable * p = (const GALGAS_registerTable *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerTable *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerTable", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_ramBankTable::cMapElement_ramBankTable (const GALGAS_lstring & inKey,
                                                    const GALGAS_uint & in_mFirstAddress,
                                                    const GALGAS_uint & in_mFirstFreeAddress,
                                                    const GALGAS_uint & in_mLastAddressPlusOne,
                                                    const GALGAS_uintlist & in_mMirrorOffsetList
                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mFirstAddress (in_mFirstAddress),
mAttribute_mFirstFreeAddress (in_mFirstFreeAddress),
mAttribute_mLastAddressPlusOne (in_mLastAddressPlusOne),
mAttribute_mMirrorOffsetList (in_mMirrorOffsetList) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_ramBankTable::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mFirstAddress.isValid () && mAttribute_mFirstFreeAddress.isValid () && mAttribute_mLastAddressPlusOne.isValid () && mAttribute_mMirrorOffsetList.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_ramBankTable::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_ramBankTable (mAttribute_lkey, mAttribute_mFirstAddress, mAttribute_mFirstFreeAddress, mAttribute_mLastAddressPlusOne, mAttribute_mMirrorOffsetList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_ramBankTable::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFirstAddress" ":" ;
  mAttribute_mFirstAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFirstFreeAddress" ":" ;
  mAttribute_mFirstFreeAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLastAddressPlusOne" ":" ;
  mAttribute_mLastAddressPlusOne.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMirrorOffsetList" ":" ;
  mAttribute_mMirrorOffsetList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_ramBankTable::compare (const cCollectionElement * inOperand) const {
  cMapElement_ramBankTable * operand = (cMapElement_ramBankTable *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mFirstAddress.objectCompare (operand->mAttribute_mFirstAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFirstFreeAddress.objectCompare (operand->mAttribute_mFirstFreeAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mLastAddressPlusOne.objectCompare (operand->mAttribute_mLastAddressPlusOne) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMirrorOffsetList.objectCompare (operand->mAttribute_mMirrorOffsetList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable::GALGAS_ramBankTable (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable::GALGAS_ramBankTable (const GALGAS_ramBankTable & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable & GALGAS_ramBankTable::operator = (const GALGAS_ramBankTable & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::constructor_mapWithMapToOverride (const GALGAS_ramBankTable & inMapToOverride
                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::reader_overriddenMap (C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_ramBankTable result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::addAssign_operation (const GALGAS_lstring & inKey,
                                               const GALGAS_uint & inArgument0,
                                               const GALGAS_uint & inArgument1,
                                               const GALGAS_uint & inArgument2,
                                               const GALGAS_uintlist & inArgument3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_ramBankTable * p = NULL ;
  macroMyNew (p, cMapElement_ramBankTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@ramBankTable insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_insertKey (GALGAS_lstring inKey,
                                              GALGAS_uint inArgument0,
                                              GALGAS_uint inArgument1,
                                              GALGAS_uint inArgument2,
                                              GALGAS_uintlist inArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  cMapElement_ramBankTable * p = NULL ;
  macroMyNew (p, cMapElement_ramBankTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' bank ram is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_ramBankTable_searchKey = "the '%K' bank ram is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::method_searchKey (GALGAS_lstring inKey,
                                            GALGAS_uint & outArgument0,
                                            GALGAS_uint & outArgument1,
                                            GALGAS_uint & outArgument2,
                                            GALGAS_uintlist & outArgument3,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) performSearch (inKey,
                                                                                           inCompiler,
                                                                                           kSearchErrorMessage_ramBankTable_searchKey
                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    outArgument0 = p->mAttribute_mFirstAddress ;
    outArgument1 = p->mAttribute_mFirstFreeAddress ;
    outArgument2 = p->mAttribute_mLastAddressPlusOne ;
    outArgument3 = p->mAttribute_mMirrorOffsetList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mFirstAddressForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    result = p->mAttribute_mFirstAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mFirstFreeAddressForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    result = p->mAttribute_mFirstFreeAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mLastAddressPlusOneForKey (const GALGAS_string & inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    result = p->mAttribute_mLastAddressPlusOne ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_ramBankTable::reader_mMirrorOffsetListForKey (const GALGAS_string & inKey,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    result = p->mAttribute_mMirrorOffsetList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMFirstAddressForKey (GALGAS_uint inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mFirstAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMFirstFreeAddressForKey (GALGAS_uint inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mFirstFreeAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMLastAddressPlusOneForKey (GALGAS_uint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mLastAddressPlusOne = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMMirrorOffsetListForKey (GALGAS_uintlist inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mMirrorOffsetList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_ramBankTable * GALGAS_ramBankTable::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & inKey
                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_ramBankTable * result = (cMapElement_ramBankTable *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_ramBankTable) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_ramBankTable::cEnumerator_ramBankTable (const GALGAS_ramBankTable & inEnumeratedObject,
                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable_2D_element cEnumerator_ramBankTable::current (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_ramBankTable) ;
  return GALGAS_ramBankTable_2D_element (p->mAttribute_lkey, p->mAttribute_mFirstAddress, p->mAttribute_mFirstFreeAddress, p->mAttribute_mLastAddressPlusOne, p->mAttribute_mMirrorOffsetList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_ramBankTable::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mFirstAddress (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_ramBankTable) ;
  return p->mAttribute_mFirstAddress ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mFirstFreeAddress (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_ramBankTable) ;
  return p->mAttribute_mFirstFreeAddress ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mLastAddressPlusOne (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_ramBankTable) ;
  return p->mAttribute_mLastAddressPlusOne ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_ramBankTable::current_mMirrorOffsetList (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_ramBankTable) ;
  return p->mAttribute_mMirrorOffsetList ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @ramBankTable type                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ramBankTable ("ramBankTable",
                                     NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ramBankTable::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ramBankTable ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ramBankTable::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ramBankTable (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  const GALGAS_ramBankTable * p = (const GALGAS_ramBankTable *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ramBankTable *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ramBankTable", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType::GALGAS_processorType (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_pic_31__38__5F__36__30_ (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_pic_31__38__5F__36__30_ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_pic_31__38__5F__38__30_ (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_pic_31__38__5F__38__30_ ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_midrange (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_midrange ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_baseline (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_baseline ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_processorType [5] = {
  "(not built)",
  "pic18_60",
  "pic18_80",
  "midrange",
  "baseline"
} ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_processorType::reader_isPic_31__38__5F__36__30_ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_pic_31__38__5F__36__30_ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_processorType::reader_isPic_31__38__5F__38__30_ (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_pic_31__38__5F__38__30_ == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_processorType::reader_isMidrange (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_midrange == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool GALGAS_processorType::reader_isBaseline (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (kNotBuilt != mEnum, kEnum_baseline == mEnum) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_processorType::description (C_String & ioString,
                                        const int32_t /* inIndentation */) const {
  ioString << "<enum @processorType: " << gEnumNameArrayFor_processorType [mEnum] ;
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_processorType::objectCompare (const GALGAS_processorType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 @processorType type                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_processorType ("processorType",
                                      NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_processorType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_processorType ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_processorType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_processorType (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_processorType result ;
  const GALGAS_processorType * p = (const GALGAS_processorType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_processorType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("processorType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Class for element of '@illegalMaskList' list                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cCollectionElement_illegalMaskList : public cCollectionElement {
  public : GALGAS_illegalMaskList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_illegalMaskList (const GALGAS_luint & in_mIllegalValue,
                                               const GALGAS_luint & in_mIllegalMask,
                                               const GALGAS_lstring & in_mDescription
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement_illegalMaskList::cCollectionElement_illegalMaskList (const GALGAS_luint & in_mIllegalValue,
                                                                        const GALGAS_luint & in_mIllegalMask,
                                                                        const GALGAS_lstring & in_mDescription
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mIllegalValue, in_mIllegalMask, in_mDescription) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cCollectionElement_illegalMaskList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_illegalMaskList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_illegalMaskList (mObject.mAttribute_mIllegalValue, mObject.mAttribute_mIllegalMask, mObject.mAttribute_mDescription COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cCollectionElement_illegalMaskList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalValue" ":" ;
  mObject.mAttribute_mIllegalValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalMask" ":" ;
  mObject.mAttribute_mIllegalMask.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mObject.mAttribute_mDescription.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_illegalMaskList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_illegalMaskList * operand = (cCollectionElement_illegalMaskList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_illegalMaskList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList::GALGAS_illegalMaskList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList::GALGAS_illegalMaskList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::constructor_listWithValue (const GALGAS_luint & inOperand0,
                                                                          const GALGAS_luint & inOperand1,
                                                                          const GALGAS_lstring & inOperand2
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_illegalMaskList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                        const GALGAS_luint & in_mIllegalValue,
                                                        const GALGAS_luint & in_mIllegalMask,
                                                        const GALGAS_lstring & in_mDescription
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_illegalMaskList * p = NULL ;
  macroMyNew (p, cCollectionElement_illegalMaskList (in_mIllegalValue,
                                                     in_mIllegalMask,
                                                     in_mDescription COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::addAssign_operation (const GALGAS_luint & inOperand0,
                                                  const GALGAS_luint & inOperand1,
                                                  const GALGAS_lstring & inOperand2
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_illegalMaskList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_insertAtIndex (const GALGAS_luint inOperand0,
                                                     const GALGAS_luint inOperand1,
                                                     const GALGAS_lstring inOperand2,
                                                     const GALGAS_uint inInsertionIndex,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_illegalMaskList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_removeAtIndex (GALGAS_luint & outOperand0,
                                                     GALGAS_luint & outOperand1,
                                                     GALGAS_lstring & outOperand2,
                                                     const GALGAS_uint inRemoveIndex,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
      outOperand0 = p->mObject.mAttribute_mIllegalValue ;
      outOperand1 = p->mObject.mAttribute_mIllegalMask ;
      outOperand2 = p->mObject.mAttribute_mDescription ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_popFirst (GALGAS_luint & outOperand0,
                                                GALGAS_luint & outOperand1,
                                                GALGAS_lstring & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_popLast (GALGAS_luint & outOperand0,
                                               GALGAS_luint & outOperand1,
                                               GALGAS_lstring & outOperand2,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::method_first (GALGAS_luint & outOperand0,
                                           GALGAS_luint & outOperand1,
                                           GALGAS_lstring & outOperand2,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::method_last (GALGAS_luint & outOperand0,
                                          GALGAS_luint & outOperand1,
                                          GALGAS_lstring & outOperand2,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::operator_concat (const GALGAS_illegalMaskList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::add_operation (const GALGAS_illegalMaskList & inOperand,
                                                              C_Compiler * /* inCompiler */
                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result = GALGAS_illegalMaskList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result = GALGAS_illegalMaskList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_illegalMaskList::dotAssign_operation (const GALGAS_illegalMaskList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList::reader_mIllegalValueAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mIllegalValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList::reader_mIllegalMaskAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mIllegalMask ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_illegalMaskList::reader_mDescriptionAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mDescription ;
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_illegalMaskList::cEnumerator_illegalMaskList (const GALGAS_illegalMaskList & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList_2D_element cEnumerator_illegalMaskList::current (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_illegalMaskList::current_mIllegalValue (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mIllegalValue ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_illegalMaskList::current_mIllegalMask (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mIllegalMask ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_illegalMaskList::current_mDescription (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mDescription ;
}




//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                @illegalMaskList type                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_illegalMaskList ("illegalMaskList",
                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_illegalMaskList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_illegalMaskList ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_illegalMaskList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_illegalMaskList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  const GALGAS_illegalMaskList * p = (const GALGAS_illegalMaskList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_illegalMaskList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("illegalMaskList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_configRegisterMaskMap::cMapElement_configRegisterMaskMap (const GALGAS_lstring & inKey,
                                                                      const GALGAS_luint & in_mMaskValue,
                                                                      const GALGAS_lstring & in_mDescription,
                                                                      const GALGAS_fieldSettingMap & in_mFieldSettingMap
                                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mMaskValue (in_mMaskValue),
mAttribute_mDescription (in_mDescription),
mAttribute_mFieldSettingMap (in_mFieldSettingMap) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_configRegisterMaskMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_configRegisterMaskMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configRegisterMaskMap (mAttribute_lkey, mAttribute_mMaskValue, mAttribute_mDescription, mAttribute_mFieldSettingMap COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_configRegisterMaskMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaskValue" ":" ;
  mAttribute_mMaskValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mAttribute_mDescription.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldSettingMap" ":" ;
  mAttribute_mFieldSettingMap.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_configRegisterMaskMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configRegisterMaskMap * operand = (cMapElement_configRegisterMaskMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMaskValue.objectCompare (operand->mAttribute_mMaskValue) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDescription.objectCompare (operand->mAttribute_mDescription) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFieldSettingMap.objectCompare (operand->mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap::GALGAS_configRegisterMaskMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap::GALGAS_configRegisterMaskMap (const GALGAS_configRegisterMaskMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap & GALGAS_configRegisterMaskMap::operator = (const GALGAS_configRegisterMaskMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::constructor_mapWithMapToOverride (const GALGAS_configRegisterMaskMap & inMapToOverride
                                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_configRegisterMaskMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                        const GALGAS_luint & inArgument0,
                                                        const GALGAS_lstring & inArgument1,
                                                        const GALGAS_fieldSettingMap & inArgument2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMaskMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMaskMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@configRegisterMaskMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_insertKey (GALGAS_lstring inKey,
                                                       GALGAS_luint inArgument0,
                                                       GALGAS_lstring inArgument1,
                                                       GALGAS_fieldSettingMap inArgument2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMaskMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMaskMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register mask is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_configRegisterMaskMap_searchKey = "the '%K' configuration register mask is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::method_searchKey (GALGAS_lstring inKey,
                                                     GALGAS_luint & outArgument0,
                                                     GALGAS_lstring & outArgument1,
                                                     GALGAS_fieldSettingMap & outArgument2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) performSearch (inKey,
                                                                                                             inCompiler,
                                                                                                             kSearchErrorMessage_configRegisterMaskMap_searchKey
                                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    outArgument0 = p->mAttribute_mMaskValue ;
    outArgument1 = p->mAttribute_mDescription ;
    outArgument2 = p->mAttribute_mFieldSettingMap ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMaskMap::reader_mMaskValueForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mMaskValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configRegisterMaskMap::reader_mDescriptionForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mDescription ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configRegisterMaskMap::reader_mFieldSettingMapForKey (const GALGAS_string & inKey,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_fieldSettingMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mFieldSettingMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMMaskValueForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mMaskValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMDescriptionForKey (GALGAS_lstring inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mDescription = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMFieldSettingMapForKey (GALGAS_fieldSettingMap inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mFieldSettingMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_configRegisterMaskMap * GALGAS_configRegisterMaskMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                     const GALGAS_string & inKey
                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMaskMap * result = (cMapElement_configRegisterMaskMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMaskMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_configRegisterMaskMap::cEnumerator_configRegisterMaskMap (const GALGAS_configRegisterMaskMap & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2D_element cEnumerator_configRegisterMaskMap::current (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
  return GALGAS_configRegisterMaskMap_2D_element (p->mAttribute_lkey, p->mAttribute_mMaskValue, p->mAttribute_mDescription, p->mAttribute_mFieldSettingMap) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMaskMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMaskMap::current_mMaskValue (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mMaskValue ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMaskMap::current_mDescription (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mDescription ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_fieldSettingMap cEnumerator_configRegisterMaskMap::current_mFieldSettingMap (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mFieldSettingMap ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @configRegisterMaskMap type                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMaskMap ("configRegisterMaskMap",
                                              NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMaskMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMaskMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMaskMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMaskMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  const GALGAS_configRegisterMaskMap * p = (const GALGAS_configRegisterMaskMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMaskMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMaskMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_configRegisterMap::cMapElement_configRegisterMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_luint & in_mRegisterAddress,
                                                              const GALGAS_luint & in_mRegisterWidth,
                                                              const GALGAS_configRegisterMaskMap & in_mConfigRegisterMaskMap,
                                                              const GALGAS_illegalMaskList & in_mIllegalMaskList
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterAddress (in_mRegisterAddress),
mAttribute_mRegisterWidth (in_mRegisterWidth),
mAttribute_mConfigRegisterMaskMap (in_mConfigRegisterMaskMap),
mAttribute_mIllegalMaskList (in_mIllegalMaskList) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_configRegisterMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddress.isValid () && mAttribute_mRegisterWidth.isValid () && mAttribute_mConfigRegisterMaskMap.isValid () && mAttribute_mIllegalMaskList.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_configRegisterMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configRegisterMap (mAttribute_lkey, mAttribute_mRegisterAddress, mAttribute_mRegisterWidth, mAttribute_mConfigRegisterMaskMap, mAttribute_mIllegalMaskList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_configRegisterMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddress" ":" ;
  mAttribute_mRegisterAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterWidth" ":" ;
  mAttribute_mRegisterWidth.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mConfigRegisterMaskMap" ":" ;
  mAttribute_mConfigRegisterMaskMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalMaskList" ":" ;
  mAttribute_mIllegalMaskList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_configRegisterMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configRegisterMap * operand = (cMapElement_configRegisterMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddress.objectCompare (operand->mAttribute_mRegisterAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterWidth.objectCompare (operand->mAttribute_mRegisterWidth) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mConfigRegisterMaskMap.objectCompare (operand->mAttribute_mConfigRegisterMaskMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIllegalMaskList.objectCompare (operand->mAttribute_mIllegalMaskList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap::GALGAS_configRegisterMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap::GALGAS_configRegisterMap (const GALGAS_configRegisterMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap & GALGAS_configRegisterMap::operator = (const GALGAS_configRegisterMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::constructor_mapWithMapToOverride (const GALGAS_configRegisterMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_configRegisterMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_luint & inArgument0,
                                                    const GALGAS_luint & inArgument1,
                                                    const GALGAS_configRegisterMaskMap & inArgument2,
                                                    const GALGAS_illegalMaskList & inArgument3,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@configRegisterMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_luint inArgument0,
                                                   GALGAS_luint inArgument1,
                                                   GALGAS_configRegisterMaskMap inArgument2,
                                                   GALGAS_illegalMaskList inArgument3,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_configRegisterMap_searchKey = "the '%K' configuration register is not declared" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_luint & outArgument0,
                                                 GALGAS_luint & outArgument1,
                                                 GALGAS_configRegisterMaskMap & outArgument2,
                                                 GALGAS_illegalMaskList & outArgument3,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_configRegisterMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    outArgument0 = p->mAttribute_mRegisterAddress ;
    outArgument1 = p->mAttribute_mRegisterWidth ;
    outArgument2 = p->mAttribute_mConfigRegisterMaskMap ;
    outArgument3 = p->mAttribute_mIllegalMaskList ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap::reader_mRegisterAddressForKey (const GALGAS_string & inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    result = p->mAttribute_mRegisterAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap::reader_mRegisterWidthForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    result = p->mAttribute_mRegisterWidth ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMap::reader_mConfigRegisterMaskMapForKey (const GALGAS_string & inKey,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_configRegisterMaskMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    result = p->mAttribute_mConfigRegisterMaskMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_configRegisterMap::reader_mIllegalMaskListForKey (const GALGAS_string & inKey,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_illegalMaskList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    result = p->mAttribute_mIllegalMaskList ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMRegisterAddressForKey (GALGAS_luint inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mRegisterAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMRegisterWidthForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mRegisterWidth = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMConfigRegisterMaskMapForKey (GALGAS_configRegisterMaskMap inAttributeValue,
                                                                         GALGAS_string inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mConfigRegisterMaskMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMIllegalMaskListForKey (GALGAS_illegalMaskList inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mIllegalMaskList = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_configRegisterMap * GALGAS_configRegisterMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMap * result = (cMapElement_configRegisterMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_configRegisterMap::cEnumerator_configRegisterMap (const GALGAS_configRegisterMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap_2D_element cEnumerator_configRegisterMap::current (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMap) ;
  return GALGAS_configRegisterMap_2D_element (p->mAttribute_lkey, p->mAttribute_mRegisterAddress, p->mAttribute_mRegisterWidth, p->mAttribute_mConfigRegisterMaskMap, p->mAttribute_mIllegalMaskList) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMap::current_mRegisterAddress (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMap) ;
  return p->mAttribute_mRegisterAddress ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMap::current_mRegisterWidth (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMap) ;
  return p->mAttribute_mRegisterWidth ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap cEnumerator_configRegisterMap::current_mConfigRegisterMaskMap (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMap) ;
  return p->mAttribute_mConfigRegisterMaskMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_illegalMaskList cEnumerator_configRegisterMap::current_mIllegalMaskList (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_configRegisterMap) ;
  return p->mAttribute_mIllegalMaskList ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               @configRegisterMap type                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMap ("configRegisterMap",
                                          NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  const GALGAS_configRegisterMap * p = (const GALGAS_configRegisterMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}



//---------------------------------------------------------------------------------------------------------------------*

void cParser_piccoloDevice_5F_syntax::rule_piccoloDevice_5F_syntax_start_5F_symbol_i0_ (GALGAS_piccoloDeviceModel & outArgument_outPiccoloDeviceModel,
                                                                                        C_Lexique_piccoloDevice_5F_lexique * inCompiler) {
  outArgument_outPiccoloDeviceModel.drop () ; // Release 'out' argument
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_controller) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 12)) ;
  GALGAS_lstring var_deviceName = inCompiler->synthetizedAttribute_tokenString () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 13)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 14)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_processor) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 15)) ;
  GALGAS_processorType var_processorType ;
  GALGAS_lstring var_processorName = inCompiler->synthetizedAttribute_tokenString () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 17)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 18)).objectCompare (GALGAS_string ("pic18_60"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_processorType = GALGAS_processorType::constructor_pic_31__38__5F__36__30_ (SOURCE_FILE ("piccoloDevice_syntax.galgas", 19)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 20)).objectCompare (GALGAS_string ("pic18_80"))).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_processorType = GALGAS_processorType::constructor_pic_31__38__5F__38__30_ (SOURCE_FILE ("piccoloDevice_syntax.galgas", 21)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 22)).objectCompare (GALGAS_string ("mid-range"))).boolEnum () ;
      if (kBoolTrue == test_2) {
        var_processorType = GALGAS_processorType::constructor_midrange (SOURCE_FILE ("piccoloDevice_syntax.galgas", 23)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 24)).objectCompare (GALGAS_string ("baseline"))).boolEnum () ;
        if (kBoolTrue == test_3) {
          var_processorType = GALGAS_processorType::constructor_baseline (SOURCE_FILE ("piccoloDevice_syntax.galgas", 25)) ;
        }else if (kBoolFalse == test_3) {
          inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 27)), GALGAS_string ("The '").add_operation (var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 27)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 27)).add_operation (GALGAS_string ("' processor is not handled"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 27))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 27)) ;
          var_processorType.drop () ; // Release error dropped variable
        }
      }
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 29)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_romsize) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 30)) ;
  GALGAS_luint var_romSize = inCompiler->synthetizedAttribute_uint_33__32_value () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 31)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 32)) ;
  GALGAS_uint var_eepromSize ;
  GALGAS_uint var_eepromAddress ;
  switch (select_piccoloDevice_5F_syntax_0 (inCompiler)) {
  case 1: {
    var_eepromSize = GALGAS_uint ((uint32_t) 0U) ;
    var_eepromAddress = GALGAS_uint ((uint32_t) 0U) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_eepromsize) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 39)) ;
    GALGAS_luint var_l_5F_eepromSize = inCompiler->synthetizedAttribute_uint_33__32_value () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 40)) ;
    var_eepromSize = var_l_5F_eepromSize.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 41)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 42)) ;
    GALGAS_luint var_l_5F_eepromAddress = inCompiler->synthetizedAttribute_uint_33__32_value () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 43)) ;
    var_eepromAddress = var_l_5F_eepromAddress.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 44)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 45)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_bank) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 47)) ;
  GALGAS_luint var_bankCount = inCompiler->synthetizedAttribute_uint_33__32_value () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 48)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 49)) ;
  bool repeatFlag_4 = true ;
  while (repeatFlag_4) {
    switch (select_piccoloDevice_5F_syntax_1 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_unusedregister) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 52)) ;
      GALGAS_luint var_unusedRegisterStart = inCompiler->synthetizedAttribute_uint_33__32_value () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 53)) ;
      switch (select_piccoloDevice_5F_syntax_2 (inCompiler)) {
      case 1: {
      } break ;
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_to) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 56)) ;
        GALGAS_luint var_unusedRegisterEnd = inCompiler->synthetizedAttribute_uint_33__32_value () ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 57)) ;
      } break ;
      default:
        break ;
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 59)) ;
    } break ;
    default:
      repeatFlag_4 = false ;
      break ;
    }
  }
  GALGAS_ramBankTable var_ramBankTable = GALGAS_ramBankTable::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 61)) ;
  bool repeatFlag_5 = true ;
  while (repeatFlag_5) {
    switch (select_piccoloDevice_5F_syntax_3 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_ram) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 64)) ;
      GALGAS_lstring var_ramName = inCompiler->synthetizedAttribute_tokenString () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 65)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 66)) ;
      GALGAS_luint var_ramStart = inCompiler->synthetizedAttribute_uint_33__32_value () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 67)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_to) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 68)) ;
      GALGAS_luint var_ramEnd = inCompiler->synthetizedAttribute_uint_33__32_value () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 69)) ;
      GALGAS_uintlist var_mirrorOffsetList = GALGAS_uintlist::constructor_emptyList (SOURCE_FILE ("piccoloDevice_syntax.galgas", 70)) ;
      switch (select_piccoloDevice_5F_syntax_4 (inCompiler)) {
      case 1: {
      } break ;
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mirrorat) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 73)) ;
        bool repeatFlag_6 = true ;
        while (repeatFlag_6) {
          GALGAS_luint var_mirrorStartAddress = inCompiler->synthetizedAttribute_uint_33__32_value () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 75)) ;
          var_mirrorOffsetList.addAssign_operation (var_mirrorStartAddress.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 76)).substract_operation (var_ramStart.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 76)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 76))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 76)) ;
          switch (select_piccoloDevice_5F_syntax_5 (inCompiler)) {
          case 2: {
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 78)) ;
          } break ;
          default:
            repeatFlag_6 = false ;
            break ;
          }
        }
      } break ;
      default:
        break ;
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 81)) ;
      {
      var_ramBankTable.modifier_insertKey (var_ramName, var_ramStart.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 84)), var_ramStart.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 85)), var_ramEnd.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 86)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 86)), var_mirrorOffsetList, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 82)) ;
      }
    } break ;
    default:
      repeatFlag_5 = false ;
      break ;
    }
  }
  GALGAS_registerTable var_registerTable = GALGAS_registerTable::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 90)) ;
  bool repeatFlag_7 = true ;
  while (repeatFlag_7) {
    switch (select_piccoloDevice_5F_syntax_6 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_register) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 93)) ;
      GALGAS_lstring var_registerName = inCompiler->synthetizedAttribute_tokenString () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 94)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 95)) ;
      GALGAS_uintlist var_registerAddressList = GALGAS_uintlist::constructor_emptyList (SOURCE_FILE ("piccoloDevice_syntax.galgas", 96)) ;
      bool repeatFlag_8 = true ;
      while (repeatFlag_8) {
        GALGAS_luint var_registerAddress = inCompiler->synthetizedAttribute_uint_33__32_value () ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 98)) ;
        var_registerAddressList.addAssign_operation (var_registerAddress.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 99))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 99)) ;
        switch (select_piccoloDevice_5F_syntax_7 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 101)) ;
        } break ;
        default:
          repeatFlag_8 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 103)) ;
      GALGAS_uint var_sliceIndex = GALGAS_uint ((uint32_t) 8U) ;
      GALGAS_bitSliceTable var_bitSliceTable = GALGAS_bitSliceTable::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 105)) ;
      GALGAS_string var_bitDefinitionString = GALGAS_string (" <") ;
      bool repeatFlag_9 = true ;
      while (repeatFlag_9) {
        switch (select_piccoloDevice_5F_syntax_9 (inCompiler)) {
        case 1: {
          GALGAS_uint var_sliceWidth = GALGAS_uint ((uint32_t) 0U) ;
          bool repeatFlag_10 = true ;
          while (repeatFlag_10) {
            GALGAS_uint var_sliceBase = var_sliceIndex ;
            GALGAS_lstring var_sliceName = inCompiler->synthetizedAttribute_tokenString () ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 112)) ;
            switch (select_piccoloDevice_5F_syntax_11 (inCompiler)) {
            case 1: {
              const enumGalgasBool test_11 = GALGAS_bool (kIsNotEqual, var_sliceWidth.objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (GALGAS_bool (kIsNotEqual, var_sliceWidth.objectCompare (GALGAS_uint ((uint32_t) 1U))) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 114)).boolEnum () ;
              if (kBoolTrue == test_11) {
                GALGAS_location location_12 (var_sliceName.reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_12, GALGAS_string ("a slice of 1 bit is expected for '").add_operation (var_sliceName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 115)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 115)).add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 115))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 115)) ;
              }
              var_sliceWidth = GALGAS_uint ((uint32_t) 1U) ;
              var_bitDefinitionString.dotAssign_operation (var_sliceName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 118))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 118)) ;
            } break ;
            case 2: {
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 120)) ;
              GALGAS_luint var_sliceSize = inCompiler->synthetizedAttribute_uint_33__32_value () ;
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 121)) ;
              const enumGalgasBool test_13 = GALGAS_bool (kIsNotEqual, var_sliceWidth.objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (GALGAS_bool (kIsNotEqual, var_sliceWidth.objectCompare (var_sliceSize.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 122)))) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 122)).boolEnum () ;
              if (kBoolTrue == test_13) {
                GALGAS_location location_14 (var_sliceName.reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_14, GALGAS_string ("a slice of ").add_operation (var_sliceWidth.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)).add_operation (GALGAS_string (" bits is expected for '"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)).add_operation (var_sliceName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)).add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 123))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 123)) ;
              }
              var_sliceWidth = var_sliceSize.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 125)) ;
              var_sliceBase = var_sliceBase.add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 126)).substract_operation (var_sliceSize.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 126)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 126)) ;
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 127)) ;
              var_bitDefinitionString.dotAssign_operation (var_sliceName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)).add_operation (GALGAS_string ("["), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)).add_operation (var_sliceSize.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)).reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)).add_operation (GALGAS_string ("]"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 128))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 128)) ;
            } break ;
            default:
              break ;
            }
            {
            var_bitSliceTable.modifier_insertKey (var_sliceName, var_sliceIndex.substract_operation (var_sliceWidth, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 130)), var_sliceWidth, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 130)) ;
            }
            switch (select_piccoloDevice_5F_syntax_10 (inCompiler)) {
            case 2: {
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2F_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 132)) ;
              var_bitDefinitionString.dotAssign_operation (GALGAS_string ("/")  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 133)) ;
            } break ;
            default:
              repeatFlag_10 = false ;
              break ;
            }
          }
          var_sliceIndex = var_sliceIndex.substract_operation (var_sliceWidth, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 135)) ;
        } break ;
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 137)) ;
          var_bitDefinitionString.dotAssign_operation (GALGAS_string ("-")  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 138)) ;
          var_sliceIndex.decrement_operation (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 139)) ;
        } break ;
        default:
          break ;
        }
        switch (select_piccoloDevice_5F_syntax_8 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 142)) ;
          var_bitDefinitionString.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 143)) ;
        } break ;
        default:
          repeatFlag_9 = false ;
          break ;
        }
      }
      const enumGalgasBool test_15 = GALGAS_bool (kIsNotEqual, var_sliceIndex.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_15) {
        GALGAS_location location_16 (var_registerName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_16, GALGAS_string ("Incorrect bit definition for register '").add_operation (var_registerName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 146)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 146)).add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 146))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 146)) ;
      }
      var_bitDefinitionString.dotAssign_operation (GALGAS_string (">")  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 148)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3E_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 149)) ;
      {
      var_registerTable.modifier_insertKey (var_registerName, var_registerAddressList, GALGAS_uint ((uint32_t) 1U), var_bitSliceTable, var_bitDefinitionString, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 150)) ;
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 151)) ;
    } break ;
    default:
      repeatFlag_7 = false ;
      break ;
    }
  }
  GALGAS_configRegisterMap var_configRegisterMap = GALGAS_configRegisterMap::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 153)) ;
  bool repeatFlag_17 = true ;
  while (repeatFlag_17) {
    switch (select_piccoloDevice_5F_syntax_12 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_configuration) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 156)) ;
      GALGAS_lstring var_configRegisterName = inCompiler->synthetizedAttribute_tokenString () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 157)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 158)) ;
      GALGAS_luint var_configRegisterAddress = inCompiler->synthetizedAttribute_uint_33__32_value () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 159)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_width) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 160)) ;
      GALGAS_luint var_configRegisterWidth = inCompiler->synthetizedAttribute_uint_33__32_value () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 161)) ;
      GALGAS_illegalMaskList var_illegalMaskList = GALGAS_illegalMaskList::constructor_emptyList (SOURCE_FILE ("piccoloDevice_syntax.galgas", 162)) ;
      bool repeatFlag_18 = true ;
      while (repeatFlag_18) {
        switch (select_piccoloDevice_5F_syntax_13 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_illegal) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 165)) ;
          GALGAS_luint var_illegalValue = inCompiler->synthetizedAttribute_uint_33__32_value () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 166)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 167)) ;
          GALGAS_luint var_illegalMask = inCompiler->synthetizedAttribute_uint_33__32_value () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 168)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_message) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 169)) ;
          GALGAS_lstring var_illegalDescriptionString = inCompiler->synthetizedAttribute_tokenString () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 170)) ;
          var_illegalMaskList.addAssign_operation (var_illegalValue, var_illegalMask, var_illegalDescriptionString  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 171)) ;
        } break ;
        default:
          repeatFlag_18 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 173)) ;
      GALGAS_configRegisterMaskMap var_configRegisterMaskMap = GALGAS_configRegisterMaskMap::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 174)) ;
      GALGAS_stringset var_settingNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("piccoloDevice_syntax.galgas", 175)) ;
      bool repeatFlag_19 = true ;
      while (repeatFlag_19) {
        switch (select_piccoloDevice_5F_syntax_14 (inCompiler)) {
        case 2: {
          GALGAS_lstring var_maskName = inCompiler->synthetizedAttribute_tokenString () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 178)) ;
          const enumGalgasBool test_20 = var_settingNameSet.reader_hasKey (var_maskName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 179)) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 179)).boolEnum () ;
          if (kBoolTrue == test_20) {
            GALGAS_location location_21 (var_maskName.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_21, GALGAS_string ("The '").add_operation (var_maskName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 180)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 180)).add_operation (GALGAS_string ("' setting is already defined"), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 180))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 180)) ;
          }
          var_settingNameSet.addAssign_operation (var_maskName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 182))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 182)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 183)) ;
          GALGAS_luint var_maskValue = inCompiler->synthetizedAttribute_uint_33__32_value () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 184)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_description) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 185)) ;
          GALGAS_lstring var_maskDescriptionString = inCompiler->synthetizedAttribute_tokenString () ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 186)) ;
          GALGAS_fieldSettingMap var_fieldSettingMap = GALGAS_fieldSettingMap::constructor_emptyMap (SOURCE_FILE ("piccoloDevice_syntax.galgas", 187)) ;
          bool repeatFlag_22 = true ;
          while (repeatFlag_22) {
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_setting) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 189)) ;
            GALGAS_luint var_value = inCompiler->synthetizedAttribute_uint_33__32_value () ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 190)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 191)) ;
            GALGAS_luint var_mask = inCompiler->synthetizedAttribute_uint_33__32_value () ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 192)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_description) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 193)) ;
            GALGAS_lstring var_descriptionString = inCompiler->synthetizedAttribute_tokenString () ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 194)) ;
            {
            var_fieldSettingMap.modifier_insertKey (var_descriptionString, var_value.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 195)), var_mask.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 195)), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 195)) ;
            }
            switch (select_piccoloDevice_5F_syntax_15 (inCompiler)) {
            case 2: {
            } break ;
            default:
              repeatFlag_22 = false ;
              break ;
            }
          }
          {
          var_configRegisterMaskMap.modifier_insertKey (var_maskName, var_maskValue, var_maskDescriptionString, var_fieldSettingMap, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 198)) ;
          }
        } break ;
        default:
          repeatFlag_19 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 200)) ;
      {
      var_configRegisterMap.modifier_insertKey (var_configRegisterName, var_configRegisterAddress, var_configRegisterWidth, var_configRegisterMaskMap, var_illegalMaskList, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 201)) ;
      }
    } break ;
    default:
      repeatFlag_17 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 209)) ;
  const enumGalgasBool test_23 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 211)).objectCompare (GALGAS_string ("pic18_60"))).operator_or (GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 211)).objectCompare (GALGAS_string ("pic18_80"))) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 211)).boolEnum () ;
  if (kBoolTrue == test_23) {
    GALGAS_uintlist joker_6149_4 ; // Joker input parameter
    GALGAS_uint joker_6149_3 ; // Joker input parameter
    GALGAS_bitSliceTable joker_6149_2 ; // Joker input parameter
    GALGAS_string joker_6149_1 ; // Joker input parameter
    var_registerTable.method_searchKey (GALGAS_lstring::constructor_new (GALGAS_string ("BSR"), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 212))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 212)), joker_6149_4, joker_6149_3, joker_6149_2, joker_6149_1, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 212)) ;
    GALGAS_uintlist joker_6225_4 ; // Joker input parameter
    GALGAS_uint joker_6225_3 ; // Joker input parameter
    GALGAS_bitSliceTable joker_6225_2 ; // Joker input parameter
    GALGAS_string joker_6225_1 ; // Joker input parameter
    var_registerTable.method_searchKey (GALGAS_lstring::constructor_new (GALGAS_string ("TOSL"), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 213))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 213)), joker_6225_4, joker_6225_3, joker_6225_2, joker_6225_1, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 213)) ;
    GALGAS_uintlist joker_6301_4 ; // Joker input parameter
    GALGAS_uint joker_6301_3 ; // Joker input parameter
    GALGAS_bitSliceTable joker_6301_2 ; // Joker input parameter
    GALGAS_string joker_6301_1 ; // Joker input parameter
    var_registerTable.method_searchKey (GALGAS_lstring::constructor_new (GALGAS_string ("TOSH"), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 214))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 214)), joker_6301_4, joker_6301_3, joker_6301_2, joker_6301_1, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 214)) ;
    GALGAS_uintlist joker_6377_4 ; // Joker input parameter
    GALGAS_uint joker_6377_3 ; // Joker input parameter
    GALGAS_bitSliceTable joker_6377_2 ; // Joker input parameter
    GALGAS_string joker_6377_1 ; // Joker input parameter
    var_registerTable.method_searchKey (GALGAS_lstring::constructor_new (GALGAS_string ("TOSU"), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 215))  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 215)), joker_6377_4, joker_6377_3, joker_6377_2, joker_6377_1, inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 215)) ;
  }
  GALGAS_string var_sharedBankName = GALGAS_string::makeEmptyString () ;
  const enumGalgasBool test_24 = GALGAS_bool (kIsEqual, var_processorName.reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 219)).objectCompare (GALGAS_string ("mid-range"))).boolEnum () ;
  if (kBoolTrue == test_24) {
    cEnumerator_ramBankTable enumerator_6563 (var_ramBankTable, kEnumeration_up) ;
    bool bool_25 = GALGAS_bool (kIsEqual, var_sharedBankName.objectCompare (GALGAS_string::makeEmptyString ())).isValidAndTrue () ;
    if (enumerator_6563.hasCurrentObject () && bool_25) {
      while (enumerator_6563.hasCurrentObject () && bool_25) {
        GALGAS_uint var_bankAccessibility = GALGAS_uint ((uint32_t) 1U).left_shift_operation (enumerator_6563.current_mFirstFreeAddress (HERE).right_shift_operation (GALGAS_uint ((uint32_t) 7U) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 221)) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 221)) ;
        cEnumerator_uintlist enumerator_6691 (enumerator_6563.current_mMirrorOffsetList (HERE), kEnumeration_up) ;
        while (enumerator_6691.hasCurrentObject ()) {
          var_bankAccessibility = var_bankAccessibility.operator_or (GALGAS_uint ((uint32_t) 1U).left_shift_operation (enumerator_6563.current_mFirstFreeAddress (HERE).add_operation (enumerator_6691.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 223)).right_shift_operation (GALGAS_uint ((uint32_t) 7U) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 223)) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 223)) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 223)) ;
          enumerator_6691.gotoNextObject () ;
        }
        const enumGalgasBool test_26 = GALGAS_bool (kIsEqual, GALGAS_uint ((uint32_t) 1U).left_shift_operation (var_bankCount.reader_uint (SOURCE_FILE ("piccoloDevice_syntax.galgas", 225)) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 225)).objectCompare (var_bankAccessibility.add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 225)))).boolEnum () ;
        if (kBoolTrue == test_26) {
          var_sharedBankName = enumerator_6563.current_lkey (HERE).reader_string (SOURCE_FILE ("piccoloDevice_syntax.galgas", 226)) ;
        }
        enumerator_6563.gotoNextObject () ;
        if (enumerator_6563.hasCurrentObject ()) {
          bool_25 = GALGAS_bool (kIsEqual, var_sharedBankName.objectCompare (GALGAS_string::makeEmptyString ())).isValidAndTrue () ;
        }
      }
    }
  }
  outArgument_outPiccoloDeviceModel = GALGAS_piccoloDeviceModel::constructor_new (var_deviceName, var_processorType, var_romSize, var_bankCount, var_registerTable, var_ramBankTable, var_eepromSize, var_eepromAddress, var_configRegisterMap, var_sharedBankName  COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 231)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_piccoloDevice_5F_syntax::rule_piccoloDevice_5F_syntax_start_5F_symbol_i0_parse (C_Lexique_piccoloDevice_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_controller) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 12)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 13)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 14)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_processor) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 15)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 17)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 29)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_romsize) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 30)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 31)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 32)) ;
  switch (select_piccoloDevice_5F_syntax_0 (inCompiler)) {
  case 1: {
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_eepromsize) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 39)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 40)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 42)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 43)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 45)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_bank) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 47)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 48)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 49)) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_piccoloDevice_5F_syntax_1 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_unusedregister) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 52)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 53)) ;
      switch (select_piccoloDevice_5F_syntax_2 (inCompiler)) {
      case 1: {
      } break ;
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_to) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 56)) ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 57)) ;
      } break ;
      default:
        break ;
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 59)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  bool repeatFlag_1 = true ;
  while (repeatFlag_1) {
    switch (select_piccoloDevice_5F_syntax_3 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_ram) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 64)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 65)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 66)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 67)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_to) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 68)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 69)) ;
      switch (select_piccoloDevice_5F_syntax_4 (inCompiler)) {
      case 1: {
      } break ;
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mirrorat) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 73)) ;
        bool repeatFlag_2 = true ;
        while (repeatFlag_2) {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 75)) ;
          switch (select_piccoloDevice_5F_syntax_5 (inCompiler)) {
          case 2: {
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 78)) ;
          } break ;
          default:
            repeatFlag_2 = false ;
            break ;
          }
        }
      } break ;
      default:
        break ;
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 81)) ;
    } break ;
    default:
      repeatFlag_1 = false ;
      break ;
    }
  }
  bool repeatFlag_3 = true ;
  while (repeatFlag_3) {
    switch (select_piccoloDevice_5F_syntax_6 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_register) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 93)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 94)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 95)) ;
      bool repeatFlag_4 = true ;
      while (repeatFlag_4) {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 98)) ;
        switch (select_piccoloDevice_5F_syntax_7 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 101)) ;
        } break ;
        default:
          repeatFlag_4 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 103)) ;
      bool repeatFlag_5 = true ;
      while (repeatFlag_5) {
        switch (select_piccoloDevice_5F_syntax_9 (inCompiler)) {
        case 1: {
          bool repeatFlag_6 = true ;
          while (repeatFlag_6) {
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 112)) ;
            switch (select_piccoloDevice_5F_syntax_11 (inCompiler)) {
            case 1: {
            } break ;
            case 2: {
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 120)) ;
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 121)) ;
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 127)) ;
            } break ;
            default:
              break ;
            }
            switch (select_piccoloDevice_5F_syntax_10 (inCompiler)) {
            case 2: {
              inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2F_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 132)) ;
            } break ;
            default:
              repeatFlag_6 = false ;
              break ;
            }
          }
        } break ;
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 137)) ;
        } break ;
        default:
          break ;
        }
        switch (select_piccoloDevice_5F_syntax_8 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 142)) ;
        } break ;
        default:
          repeatFlag_5 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3E_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 149)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 151)) ;
    } break ;
    default:
      repeatFlag_3 = false ;
      break ;
    }
  }
  bool repeatFlag_7 = true ;
  while (repeatFlag_7) {
    switch (select_piccoloDevice_5F_syntax_12 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_configuration) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 156)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 157)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_at) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 158)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 159)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_width) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 160)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 161)) ;
      bool repeatFlag_8 = true ;
      while (repeatFlag_8) {
        switch (select_piccoloDevice_5F_syntax_13 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_illegal) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 165)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 166)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 167)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 168)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_message) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 169)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 170)) ;
        } break ;
        default:
          repeatFlag_8 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 173)) ;
      bool repeatFlag_9 = true ;
      while (repeatFlag_9) {
        switch (select_piccoloDevice_5F_syntax_14 (inCompiler)) {
        case 2: {
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 178)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 183)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 184)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_description) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 185)) ;
          inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 186)) ;
          bool repeatFlag_10 = true ;
          while (repeatFlag_10) {
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_setting) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 189)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 190)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_mask) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 191)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_integer) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 192)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_description) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 193)) ;
            inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 194)) ;
            switch (select_piccoloDevice_5F_syntax_15 (inCompiler)) {
            case 2: {
            } break ;
            default:
              repeatFlag_10 = false ;
              break ;
            }
          }
        } break ;
        default:
          repeatFlag_9 = false ;
          break ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 200)) ;
    } break ;
    default:
      repeatFlag_7 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccoloDevice_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("piccoloDevice_syntax.galgas", 209)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       N O N    T E R M I N A L    N A M E S                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const char * gNonTerminalNames_baseline_include_grammar [65] = {
  "<configuration_definition>",// Index 0
  "<ram_definition>",// Index 1
  "<constant_definition>",// Index 2
  "<register_parsing>",// Index 3
  "<optional_w_as_dest>",// Index 4
  "<bit_number_parsing>",// Index 5
  "<immediate_expression>",// Index 6
  "<section_list>",// Index 7
  "<baseline_instruction_list>",// Index 8
  "<baseline_routine_definition>",// Index 9
  "<baseline_structured_instruction>",// Index 10
  "<baseline_structured_if_instruction>",// Index 11
  "<baseline_simple_instruction>",// Index 12
  "<baseline_condition_factor>",// Index 13
  "<baseline_condition_expression>",// Index 14
  "<baseline_condition_term>",// Index 15
  "<declaration_in_ram>",// Index 16
  "<immediate_bitwise_term>",// Index 17
  "<immediate_bitwise_factor>",// Index 18
  "<immediate_term>",// Index 19
  "<immediate_factor>",// Index 20
  "<immediate_primary>",// Index 21
  "<select_baseline_5F_syntax_0>",// Index 22
  "<select_baseline_5F_syntax_1>",// Index 23
  "<select_baseline_5F_syntax_2>",// Index 24
  "<select_baseline_5F_syntax_3>",// Index 25
  "<select_baseline_5F_syntax_4>",// Index 26
  "<select_baseline_5F_syntax_5>",// Index 27
  "<select_baseline_5F_syntax_6>",// Index 28
  "<select_baseline_5F_syntax_7>",// Index 29
  "<select_baseline_5F_syntax_8>",// Index 30
  "<select_baseline_5F_syntax_9>",// Index 31
  "<select_baseline_5F_syntax_10>",// Index 32
  "<select_baseline_5F_syntax_11>",// Index 33
  "<select_baseline_5F_syntax_12>",// Index 34
  "<select_baseline_5F_syntax_13>",// Index 35
  "<select_baseline_5F_syntax_14>",// Index 36
  "<select_baseline_5F_syntax_15>",// Index 37
  "<select_baseline_5F_syntax_16>",// Index 38
  "<select_baseline_5F_syntax_17>",// Index 39
  "<select_baseline_5F_syntax_18>",// Index 40
  "<select_baseline_5F_syntax_19>",// Index 41
  "<select_baseline_5F_syntax_20>",// Index 42
  "<select_baseline_5F_syntax_21>",// Index 43
  "<select_communs_0>",// Index 44
  "<select_communs_1>",// Index 45
  "<select_communs_2>",// Index 46
  "<select_communs_3>",// Index 47
  "<select_communs_4>",// Index 48
  "<select_communs_5>",// Index 49
  "<select_communs_6>",// Index 50
  "<select_communs_7>",// Index 51
  "<select_communs_8>",// Index 52
  "<select_communs_9>",// Index 53
  "<select_communs_10>",// Index 54
  "<select_communs_11>",// Index 55
  "<select_communs_12>",// Index 56
  "<select_communs_13>",// Index 57
  "<select_communs_14>",// Index 58
  "<select_communs_15>",// Index 59
  "<select_communs_16>",// Index 60
  "<select_communs_17>",// Index 61
  "<select_communs_18>",// Index 62
  "<select_communs_19>",// Index 63
  "<>"// Index 64
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                S L R    A N A L Y Z E R    A C T I O N    T A B L E                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable_baseline_include_grammar [] = {
// State S0 (index = 0)
  C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S1 (index = 17)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_string, SHIFT (14)
, END
// State S2 (index = 20)
, C_Lexique_piccolo_5F_lexique::kToken_byte, SHIFT (15)
, C_Lexique_piccolo_5F_lexique::kToken_routine, SHIFT (16)
, END
// State S3 (index = 25)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (42)
, END
// State S4 (index = 28)
, C_Lexique_piccolo_5F_lexique::kToken__7B_, SHIFT (17)
, END
// State S5 (index = 31)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (18)
, END
// State S6 (index = 34)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (19)
, END
// State S7 (index = 37)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S8 (index = 54)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S9 (index = 71)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S10 (index = 88)
, C_Lexique_piccolo_5F_lexique::kToken_, ACCEPT
, END
// State S11 (index = 91)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S12 (index = 108)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (0)
, END
// State S13 (index = 111)
, C_Lexique_piccolo_5F_lexique::kToken_routine, SHIFT (24)
, END
// State S14 (index = 114)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S15 (index = 131)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (26)
, END
// State S16 (index = 134)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (27)
, END
// State S17 (index = 137)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (28)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (107)
, END
// State S18 (index = 142)
, C_Lexique_piccolo_5F_lexique::kToken__7B_, SHIFT (30)
, END
// State S19 (index = 145)
, C_Lexique_piccolo_5F_lexique::kToken__3D_, SHIFT (31)
, END
// State S20 (index = 148)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (30)
, END
// State S21 (index = 151)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (31)
, END
// State S22 (index = 154)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (32)
, END
// State S23 (index = 157)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (33)
, END
// State S24 (index = 160)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (32)
, END
// State S25 (index = 163)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (27)
, END
// State S26 (index = 166)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (33)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (34)
, END
// State S27 (index = 185)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (35)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (36)
, END
// State S28 (index = 204)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (37)
, END
// State S29 (index = 207)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, SHIFT (38)
, END
// State S30 (index = 210)
, C_Lexique_piccolo_5F_lexique::kToken_byte, SHIFT (39)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (123)
, END
// State S31 (index = 215)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S32 (index = 230)
, C_Lexique_piccolo_5F_lexique::kToken_page, SHIFT (56)
, C_Lexique_piccolo_5F_lexique::kToken__7B_, REDUCE (43)
, END
// State S33 (index = 235)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (58)
, END
// State S34 (index = 238)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S35 (index = 255)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (60)
, END
// State S36 (index = 258)
, C_Lexique_piccolo_5F_lexique::kToken_mark, SHIFT (1)
, C_Lexique_piccolo_5F_lexique::kToken_unused, SHIFT (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (41)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, SHIFT (3)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, SHIFT (4)
, C_Lexique_piccolo_5F_lexique::kToken_ram, SHIFT (5)
, C_Lexique_piccolo_5F_lexique::kToken_const, SHIFT (6)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (26)
, END
// State S37 (index = 275)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_string, SHIFT (62)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (63)
, END
// State S38 (index = 280)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (11)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (11)
, END
// State S39 (index = 297)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (65)
, END
// State S40 (index = 300)
, C_Lexique_piccolo_5F_lexique::kToken_byte, SHIFT (39)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (123)
, END
// State S41 (index = 305)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, SHIFT (67)
, END
// State S42 (index = 308)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (68)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (153)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (153)
, END
// State S43 (index = 445)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (148)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (148)
, END
// State S44 (index = 580)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S45 (index = 595)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S46 (index = 610)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S47 (index = 625)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (149)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (149)
, END
// State S48 (index = 760)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (73)
, END
// State S49 (index = 763)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (14)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (14)
, END
// State S50 (index = 780)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, SHIFT (74)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, SHIFT (75)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (125)
, END
// State S51 (index = 887)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__26_, SHIFT (77)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (128)
, END
// State S52 (index = 996)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, SHIFT (79)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, SHIFT (80)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (130)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, SHIFT (81)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, SHIFT (82)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, SHIFT (83)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, SHIFT (84)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (130)
, END
// State S53 (index = 1117)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (86)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, SHIFT (87)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, SHIFT (88)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, SHIFT (89)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (137)
, END
// State S54 (index = 1246)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (91)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, SHIFT (92)
, C_Lexique_piccolo_5F_lexique::kToken__25_, SHIFT (93)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (142)
, END
// State S55 (index = 1381)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (20)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (20)
, END
// State S56 (index = 1516)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (95)
, END
// State S57 (index = 1519)
, C_Lexique_piccolo_5F_lexique::kToken__7B_, SHIFT (96)
, END
// State S58 (index = 1522)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (33)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (34)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (34)
, END
// State S59 (index = 1541)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (28)
, END
// State S60 (index = 1544)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (35)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (36)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (36)
, END
// State S61 (index = 1563)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (29)
, END
// State S62 (index = 1566)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (110)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (110)
, END
// State S63 (index = 1571)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (109)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (109)
, END
// State S64 (index = 1576)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (28)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (107)
, END
// State S65 (index = 1581)
, C_Lexique_piccolo_5F_lexique::kToken_byte, REDUCE (111)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (111)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (100)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (111)
, END
// State S66 (index = 1590)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (124)
, END
// State S67 (index = 1593)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (13)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (13)
, END
// State S68 (index = 1610)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S69 (index = 1625)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (150)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (150)
, END
// State S70 (index = 1760)
, C_Lexique_piccolo_5F_lexique::kToken__29_, SHIFT (103)
, END
// State S71 (index = 1763)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (146)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (146)
, END
// State S72 (index = 1898)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (147)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (147)
, END
// State S73 (index = 2033)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (104)
, END
// State S74 (index = 2036)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S75 (index = 2051)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S76 (index = 2066)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (15)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (15)
, END
// State S77 (index = 2169)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S78 (index = 2184)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (16)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (16)
, END
// State S79 (index = 2291)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S80 (index = 2306)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S81 (index = 2321)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S82 (index = 2336)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S83 (index = 2351)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S84 (index = 2366)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S85 (index = 2381)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (17)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (17)
, END
// State S86 (index = 2490)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S87 (index = 2505)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S88 (index = 2520)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S89 (index = 2535)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S90 (index = 2550)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (18)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (18)
, END
// State S91 (index = 2671)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S92 (index = 2686)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S93 (index = 2701)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S94 (index = 2716)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (19)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (19)
, END
// State S95 (index = 2845)
, C_Lexique_piccolo_5F_lexique::kToken__7B_, REDUCE (44)
, END
// State S96 (index = 2848)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S97 (index = 2927)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (35)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (35)
, END
// State S98 (index = 2944)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (37)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (37)
, END
// State S99 (index = 2961)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (108)
, END
// State S100 (index = 2964)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (165)
, END
// State S101 (index = 2967)
, C_Lexique_piccolo_5F_lexique::kToken_byte, REDUCE (113)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (113)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, SHIFT (166)
, END
// State S102 (index = 2974)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, SHIFT (168)
, END
// State S103 (index = 2977)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (151)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (151)
, END
// State S104 (index = 3112)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (169)
, END
// State S105 (index = 3115)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, SHIFT (74)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, SHIFT (75)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (125)
, END
// State S106 (index = 3222)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, SHIFT (74)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (125)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, SHIFT (75)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (125)
, END
// State S107 (index = 3329)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__26_, SHIFT (77)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (128)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (128)
, END
// State S108 (index = 3438)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (136)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (136)
, END
// State S109 (index = 3547)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (135)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (135)
, END
// State S110 (index = 3656)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (131)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (131)
, END
// State S111 (index = 3765)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (132)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (132)
, END
// State S112 (index = 3874)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (133)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (133)
, END
// State S113 (index = 3983)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (134)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (134)
, END
// State S114 (index = 4092)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (86)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, SHIFT (87)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, SHIFT (88)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, SHIFT (89)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (137)
, END
// State S115 (index = 4221)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (86)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, SHIFT (87)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, SHIFT (88)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, SHIFT (89)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (137)
, END
// State S116 (index = 4350)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (86)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, SHIFT (87)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, SHIFT (88)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, SHIFT (89)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (137)
, END
// State S117 (index = 4479)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (86)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (137)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, SHIFT (87)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, SHIFT (88)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, SHIFT (89)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (137)
, END
// State S118 (index = 4608)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (91)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, SHIFT (92)
, C_Lexique_piccolo_5F_lexique::kToken__25_, SHIFT (93)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (142)
, END
// State S119 (index = 4743)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (91)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, SHIFT (92)
, C_Lexique_piccolo_5F_lexique::kToken__25_, SHIFT (93)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (142)
, END
// State S120 (index = 4878)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (91)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (142)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, SHIFT (92)
, C_Lexique_piccolo_5F_lexique::kToken__25_, SHIFT (93)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (142)
, END
// State S121 (index = 5013)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (180)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S122 (index = 5094)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (182)
, END
// State S123 (index = 5097)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (183)
, END
// State S124 (index = 5100)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S125 (index = 5179)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, C_Lexique_piccolo_5F_lexique::kToken__21_, SHIFT (187)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (188)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (189)
, END
// State S126 (index = 5190)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (80)
, END
// State S127 (index = 5193)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (81)
, END
// State S128 (index = 5196)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (195)
, END
// State S129 (index = 5199)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (77)
, END
// State S130 (index = 5202)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (78)
, END
// State S131 (index = 5205)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (79)
, END
// State S132 (index = 5208)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (82)
, END
// State S133 (index = 5211)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (83)
, END
// State S134 (index = 5214)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (84)
, END
// State S135 (index = 5217)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (85)
, END
// State S136 (index = 5220)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (86)
, END
// State S137 (index = 5223)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (87)
, END
// State S138 (index = 5226)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (88)
, END
// State S139 (index = 5229)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (89)
, END
// State S140 (index = 5232)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (90)
, END
// State S141 (index = 5235)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (91)
, END
// State S142 (index = 5238)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (92)
, END
// State S143 (index = 5241)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (196)
, END
// State S144 (index = 5244)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (197)
, END
// State S145 (index = 5247)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (70)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (70)
, END
// State S146 (index = 5326)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (71)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (71)
, END
// State S147 (index = 5405)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (72)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (72)
, END
// State S148 (index = 5484)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (73)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (73)
, END
// State S149 (index = 5563)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (74)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (74)
, END
// State S150 (index = 5642)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (198)
, END
// State S151 (index = 5645)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken_integer, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken__28_, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, REDUCE (93)
, C_Lexique_piccolo_5F_lexique::kToken__40_, REDUCE (93)
, END
// State S152 (index = 5660)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken_integer, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken__28_, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, REDUCE (94)
, C_Lexique_piccolo_5F_lexique::kToken__40_, REDUCE (94)
, END
// State S153 (index = 5675)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken_integer, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken__28_, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, REDUCE (95)
, C_Lexique_piccolo_5F_lexique::kToken__40_, REDUCE (95)
, END
// State S154 (index = 5690)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken_integer, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken__28_, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, REDUCE (96)
, C_Lexique_piccolo_5F_lexique::kToken__40_, REDUCE (96)
, END
// State S155 (index = 5705)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, SHIFT (199)
, END
// State S156 (index = 5708)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S157 (index = 5787)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S158 (index = 5866)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (1)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (1)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (1)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (1)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (1)
, END
// State S159 (index = 5877)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (3)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (3)
, END
// State S160 (index = 5956)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (5)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (5)
, END
// State S161 (index = 6035)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S162 (index = 6038)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S163 (index = 6041)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S164 (index = 6044)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S165 (index = 6059)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, SHIFT (206)
, END
// State S166 (index = 6062)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (207)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (208)
, END
// State S167 (index = 6067)
, C_Lexique_piccolo_5F_lexique::kToken_byte, REDUCE (12)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (12)
, END
// State S168 (index = 6072)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (154)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (154)
, END
// State S169 (index = 6207)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (210)
, END
// State S170 (index = 6210)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (126)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (126)
, END
// State S171 (index = 6313)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (127)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (127)
, END
// State S172 (index = 6416)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (129)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (129)
, END
// State S173 (index = 6523)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (139)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (139)
, END
// State S174 (index = 6644)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (138)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (138)
, END
// State S175 (index = 6765)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (140)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (140)
, END
// State S176 (index = 6886)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (141)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (141)
, END
// State S177 (index = 7007)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (145)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (145)
, END
// State S178 (index = 7136)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (143)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (143)
, END
// State S179 (index = 7265)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (144)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (144)
, END
// State S180 (index = 7394)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (211)
, END
// State S181 (index = 7397)
, C_Lexique_piccolo_5F_lexique::kToken_while, SHIFT (212)
, END
// State S182 (index = 7400)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (46)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (46)
, END
// State S183 (index = 7479)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (47)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (47)
, END
// State S184 (index = 7558)
, C_Lexique_piccolo_5F_lexique::kToken_end, SHIFT (213)
, END
// State S185 (index = 7561)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (157)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (214)
, END
// State S186 (index = 7648)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, C_Lexique_piccolo_5F_lexique::kToken__21_, SHIFT (216)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (217)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (218)
, END
// State S187 (index = 7659)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S188 (index = 7662)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (56)
, END
// State S189 (index = 7665)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (57)
, END
// State S190 (index = 7668)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, SHIFT (226)
, END
// State S191 (index = 7671)
, C_Lexique_piccolo_5F_lexique::kToken_end, SHIFT (227)
, END
// State S192 (index = 7674)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S193 (index = 7753)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (229)
, END
// State S194 (index = 7756)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S195 (index = 7759)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (53)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (53)
, END
// State S196 (index = 7838)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (68)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (68)
, END
// State S197 (index = 7917)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (69)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (69)
, END
// State S198 (index = 7996)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (75)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (75)
, END
// State S199 (index = 8075)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (2)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (2)
, END
// State S200 (index = 8092)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (40)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (40)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (40)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (40)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (40)
, END
// State S201 (index = 8103)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (39)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (39)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (39)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (39)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (39)
, END
// State S202 (index = 8114)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (231)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (161)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (161)
, END
// State S203 (index = 8195)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (66)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (66)
, END
// State S204 (index = 8274)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, SHIFT (234)
, END
// State S205 (index = 8277)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (76)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (76)
, END
// State S206 (index = 8356)
, C_Lexique_piccolo_5F_lexique::kToken_byte, REDUCE (112)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (112)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (112)
, END
// State S207 (index = 8363)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (121)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (235)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (121)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (121)
, END
// State S208 (index = 8372)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (118)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (118)
, END
// State S209 (index = 8377)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (237)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (115)
, END
// State S210 (index = 8382)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S211 (index = 8397)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (240)
, END
// State S212 (index = 8400)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, END
// State S213 (index = 8403)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (48)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (48)
, END
// State S214 (index = 8482)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S215 (index = 8497)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (21)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (21)
, END
// State S216 (index = 8582)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, C_Lexique_piccolo_5F_lexique::kToken__21_, SHIFT (216)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (217)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (218)
, END
// State S217 (index = 8593)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (100)
, END
// State S218 (index = 8596)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (99)
, END
// State S219 (index = 8599)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, SHIFT (244)
, END
// State S220 (index = 8602)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (105)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (105)
, C_Lexique_piccolo_5F_lexique::kToken__26_, SHIFT (245)
, END
// State S221 (index = 8609)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (7)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (7)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (7)
, END
// State S222 (index = 8616)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (103)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, SHIFT (247)
, END
// State S223 (index = 8621)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (8)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (8)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (8)
, END
// State S224 (index = 8628)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, END
// State S225 (index = 8631)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, SHIFT (250)
, END
// State S226 (index = 8634)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (251)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (252)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (253)
, END
// State S227 (index = 8641)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (51)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (51)
, END
// State S228 (index = 8720)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (62)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, SHIFT (255)
, C_Lexique_piccolo_5F_lexique::kToken_else, SHIFT (256)
, END
// State S229 (index = 8727)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S230 (index = 8784)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (58)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (259)
, END
// State S231 (index = 8789)
, C_Lexique_piccolo_5F_lexique::kToken_w, SHIFT (261)
, END
// State S232 (index = 8792)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (65)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (65)
, END
// State S233 (index = 8871)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (25)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (25)
, END
// State S234 (index = 8950)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (251)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (252)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (253)
, END
// State S235 (index = 8957)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (263)
, END
// State S236 (index = 8960)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (119)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (264)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (119)
, END
// State S237 (index = 8967)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (207)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (208)
, END
// State S238 (index = 8972)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, SHIFT (267)
, END
// State S239 (index = 8975)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (268)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (155)
, END
// State S240 (index = 8980)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S241 (index = 8995)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S242 (index = 9074)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, SHIFT (272)
, END
// State S243 (index = 9077)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (6)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (6)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (6)
, END
// State S244 (index = 9084)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (251)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (252)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (253)
, END
// State S245 (index = 9091)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, C_Lexique_piccolo_5F_lexique::kToken__21_, SHIFT (216)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (217)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (218)
, END
// State S246 (index = 9102)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (10)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (10)
, END
// State S247 (index = 9107)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (185)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, C_Lexique_piccolo_5F_lexique::kToken__21_, SHIFT (216)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (217)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (218)
, END
// State S248 (index = 9118)
, C_Lexique_piccolo_5F_lexique::kToken__29_, SHIFT (276)
, END
// State S249 (index = 9121)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (101)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (277)
, END
// State S250 (index = 9126)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (251)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (252)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (253)
, END
// State S251 (index = 9133)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (159)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (280)
, END
// State S252 (index = 9222)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (23)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (23)
, END
// State S253 (index = 9309)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S254 (index = 9324)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (55)
, END
// State S255 (index = 9327)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, END
// State S256 (index = 9330)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S257 (index = 9409)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (4)
, END
// State S258 (index = 9412)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (49)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (49)
, END
// State S259 (index = 9491)
, C_Lexique_piccolo_5F_lexique::kToken_w, SHIFT (285)
, END
// State S260 (index = 9494)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (286)
, END
// State S261 (index = 9497)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (162)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (162)
, END
// State S262 (index = 9576)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (67)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (67)
, END
// State S263 (index = 9655)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, SHIFT (287)
, END
// State S264 (index = 9658)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (288)
, END
// State S265 (index = 9661)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (117)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (117)
, END
// State S266 (index = 9666)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (237)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (115)
, END
// State S267 (index = 9671)
, C_Lexique_piccolo_5F_lexique::kToken_byte, REDUCE (114)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (114)
, END
// State S268 (index = 9676)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (290)
, END
// State S269 (index = 9679)
, C_Lexique_piccolo_5F_lexique::kToken__29_, SHIFT (291)
, END
// State S270 (index = 9682)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, SHIFT (292)
, END
// State S271 (index = 9685)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (60)
, C_Lexique_piccolo_5F_lexique::kToken_while, SHIFT (293)
, END
// State S272 (index = 9690)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken__2E_, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (158)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (158)
, END
// State S273 (index = 9775)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (98)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (98)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (98)
, END
// State S274 (index = 9782)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (105)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (105)
, C_Lexique_piccolo_5F_lexique::kToken__26_, SHIFT (245)
, END
// State S275 (index = 9789)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (103)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, SHIFT (247)
, END
// State S276 (index = 9794)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (9)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (9)
, END
// State S277 (index = 9877)
, C_Lexique_piccolo_5F_lexique::kToken_w, SHIFT (297)
, END
// State S278 (index = 9880)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (298)
, END
// State S279 (index = 9883)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (54)
, END
// State S280 (index = 9886)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (299)
, END
// State S281 (index = 9889)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (22)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (22)
, END
// State S282 (index = 9976)
, C_Lexique_piccolo_5F_lexique::kToken__29_, SHIFT (300)
, END
// State S283 (index = 9979)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (63)
, END
// State S284 (index = 9982)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (64)
, END
// State S285 (index = 9985)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (59)
, END
// State S286 (index = 9988)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (301)
, END
// State S287 (index = 9991)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (122)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (122)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (122)
, END
// State S288 (index = 9998)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (121)
, C_Lexique_piccolo_5F_lexique::kToken__5B_, SHIFT (235)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (121)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (121)
, END
// State S289 (index = 10007)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (116)
, END
// State S290 (index = 10010)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, SHIFT (303)
, END
// State S291 (index = 10013)
, C_Lexique_piccolo_5F_lexique::kToken_mark, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_unused, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_routine, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_noreturn, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2E__2E__2E_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_configuration, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3C_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_ram, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_const, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__5E_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3D__3D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__21__3D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3D_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2B_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3C__3C_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__3E__3E_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__2A_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken__25_, REDUCE (152)
, C_Lexique_piccolo_5F_lexique::kToken_, REDUCE (152)
, END
// State S292 (index = 10148)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S293 (index = 10163)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (186)
, END
// State S294 (index = 10166)
, C_Lexique_piccolo_5F_lexique::kToken_end, SHIFT (306)
, END
// State S295 (index = 10169)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (106)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (106)
, END
// State S296 (index = 10174)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (104)
, END
// State S297 (index = 10177)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, REDUCE (102)
, END
// State S298 (index = 10180)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (97)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (97)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (97)
, END
// State S299 (index = 10187)
, C_Lexique_piccolo_5F_lexique::kToken__5D_, SHIFT (307)
, END
// State S300 (index = 10190)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (24)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (24)
, END
// State S301 (index = 10277)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S302 (index = 10334)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (119)
, C_Lexique_piccolo_5F_lexique::kToken__2F_, SHIFT (264)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (119)
, END
// State S303 (index = 10341)
, C_Lexique_piccolo_5F_lexique::kToken_identifier, SHIFT (42)
, C_Lexique_piccolo_5F_lexique::kToken_integer, SHIFT (43)
, C_Lexique_piccolo_5F_lexique::kToken__28_, SHIFT (44)
, C_Lexique_piccolo_5F_lexique::kToken__2D_, SHIFT (45)
, C_Lexique_piccolo_5F_lexique::kToken__7E_, SHIFT (46)
, C_Lexique_piccolo_5F_lexique::kToken_literal_5F_char, SHIFT (47)
, C_Lexique_piccolo_5F_lexique::kToken__40_, SHIFT (48)
, END
// State S304 (index = 10356)
, C_Lexique_piccolo_5F_lexique::kToken__29_, SHIFT (311)
, END
// State S305 (index = 10359)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S306 (index = 10438)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (52)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (52)
, END
// State S307 (index = 10517)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken__3A_, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken__7C_, REDUCE (160)
, C_Lexique_piccolo_5F_lexique::kToken__26_, REDUCE (160)
, END
// State S308 (index = 10604)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (50)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (50)
, END
// State S309 (index = 10683)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, REDUCE (120)
, C_Lexique_piccolo_5F_lexique::kToken__3E_, REDUCE (120)
, END
// State S310 (index = 10688)
, C_Lexique_piccolo_5F_lexique::kToken__2C_, SHIFT (268)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (155)
, END
// State S311 (index = 10693)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_do, SHIFT (121)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_jump, SHIFT (122)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, SHIFT (123)
, C_Lexique_piccolo_5F_lexique::kToken_forever, SHIFT (124)
, C_Lexique_piccolo_5F_lexique::kToken_if, SHIFT (125)
, C_Lexique_piccolo_5F_lexique::kToken_decf, SHIFT (126)
, C_Lexique_piccolo_5F_lexique::kToken_incf, SHIFT (127)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, SHIFT (128)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (38)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, SHIFT (129)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, SHIFT (130)
, C_Lexique_piccolo_5F_lexique::kToken_comf, SHIFT (131)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, SHIFT (132)
, C_Lexique_piccolo_5F_lexique::kToken_movf, SHIFT (133)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, SHIFT (134)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, SHIFT (135)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, SHIFT (136)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, SHIFT (137)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, SHIFT (138)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, SHIFT (139)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, SHIFT (140)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, SHIFT (141)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, SHIFT (142)
, C_Lexique_piccolo_5F_lexique::kToken_goto, SHIFT (143)
, C_Lexique_piccolo_5F_lexique::kToken_call, SHIFT (144)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, SHIFT (145)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, SHIFT (146)
, C_Lexique_piccolo_5F_lexique::kToken_nop, SHIFT (147)
, C_Lexique_piccolo_5F_lexique::kToken_option, SHIFT (148)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, SHIFT (149)
, C_Lexique_piccolo_5F_lexique::kToken_tris, SHIFT (150)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, SHIFT (151)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, SHIFT (152)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, SHIFT (153)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, SHIFT (154)
, END
// State S312 (index = 10772)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (60)
, C_Lexique_piccolo_5F_lexique::kToken_while, SHIFT (293)
, END
// State S313 (index = 10777)
, C_Lexique_piccolo_5F_lexique::kToken__29_, REDUCE (156)
, END
// State S314 (index = 10780)
, C_Lexique_piccolo_5F_lexique::kToken_end, SHIFT (316)
, END
// State S315 (index = 10783)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (61)
, END
// State S316 (index = 10786)
, C_Lexique_piccolo_5F_lexique::kToken__7D_, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_do, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_end, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_jump, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_jsr, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_forever, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_if, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_decf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_incf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_while, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_mnop, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_elsif, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_else, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_addwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_andwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_comf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_iorwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_movf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_rlf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_rrf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_subwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_swapf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_xorwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_clrf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_movwf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_bcf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_bsf, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_goto, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_call, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_clrw, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_clrwdt, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_nop, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_option, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_sleep, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_tris, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_andlw, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_iorlw, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_movlw, REDUCE (45)
, C_Lexique_piccolo_5F_lexique::kToken_xorlw, REDUCE (45)
, END} ;

static const uint32_t gActionTableIndex_baseline_include_grammar [317] = {
  0  // S0
, 17  // S1
, 20  // S2
, 25  // S3
, 28  // S4
, 31  // S5
, 34  // S6
, 37  // S7
, 54  // S8
, 71  // S9
, 88  // S10
, 91  // S11
, 108  // S12
, 111  // S13
, 114  // S14
, 131  // S15
, 134  // S16
, 137  // S17
, 142  // S18
, 145  // S19
, 148  // S20
, 151  // S21
, 154  // S22
, 157  // S23
, 160  // S24
, 163  // S25
, 166  // S26
, 185  // S27
, 204  // S28
, 207  // S29
, 210  // S30
, 215  // S31
, 230  // S32
, 235  // S33
, 238  // S34
, 255  // S35
, 258  // S36
, 275  // S37
, 280  // S38
, 297  // S39
, 300  // S40
, 305  // S41
, 308  // S42
, 445  // S43
, 580  // S44
, 595  // S45
, 610  // S46
, 625  // S47
, 760  // S48
, 763  // S49
, 780  // S50
, 887  // S51
, 996  // S52
, 1117  // S53
, 1246  // S54
, 1381  // S55
, 1516  // S56
, 1519  // S57
, 1522  // S58
, 1541  // S59
, 1544  // S60
, 1563  // S61
, 1566  // S62
, 1571  // S63
, 1576  // S64
, 1581  // S65
, 1590  // S66
, 1593  // S67
, 1610  // S68
, 1625  // S69
, 1760  // S70
, 1763  // S71
, 1898  // S72
, 2033  // S73
, 2036  // S74
, 2051  // S75
, 2066  // S76
, 2169  // S77
, 2184  // S78
, 2291  // S79
, 2306  // S80
, 2321  // S81
, 2336  // S82
, 2351  // S83
, 2366  // S84
, 2381  // S85
, 2490  // S86
, 2505  // S87
, 2520  // S88
, 2535  // S89
, 2550  // S90
, 2671  // S91
, 2686  // S92
, 2701  // S93
, 2716  // S94
, 2845  // S95
, 2848  // S96
, 2927  // S97
, 2944  // S98
, 2961  // S99
, 2964  // S100
, 2967  // S101
, 2974  // S102
, 2977  // S103
, 3112  // S104
, 3115  // S105
, 3222  // S106
, 3329  // S107
, 3438  // S108
, 3547  // S109
, 3656  // S110
, 3765  // S111
, 3874  // S112
, 3983  // S113
, 4092  // S114
, 4221  // S115
, 4350  // S116
, 4479  // S117
, 4608  // S118
, 4743  // S119
, 4878  // S120
, 5013  // S121
, 5094  // S122
, 5097  // S123
, 5100  // S124
, 5179  // S125
, 5190  // S126
, 5193  // S127
, 5196  // S128
, 5199  // S129
, 5202  // S130
, 5205  // S131
, 5208  // S132
, 5211  // S133
, 5214  // S134
, 5217  // S135
, 5220  // S136
, 5223  // S137
, 5226  // S138
, 5229  // S139
, 5232  // S140
, 5235  // S141
, 5238  // S142
, 5241  // S143
, 5244  // S144
, 5247  // S145
, 5326  // S146
, 5405  // S147
, 5484  // S148
, 5563  // S149
, 5642  // S150
, 5645  // S151
, 5660  // S152
, 5675  // S153
, 5690  // S154
, 5705  // S155
, 5708  // S156
, 5787  // S157
, 5866  // S158
, 5877  // S159
, 5956  // S160
, 6035  // S161
, 6038  // S162
, 6041  // S163
, 6044  // S164
, 6059  // S165
, 6062  // S166
, 6067  // S167
, 6072  // S168
, 6207  // S169
, 6210  // S170
, 6313  // S171
, 6416  // S172
, 6523  // S173
, 6644  // S174
, 6765  // S175
, 6886  // S176
, 7007  // S177
, 7136  // S178
, 7265  // S179
, 7394  // S180
, 7397  // S181
, 7400  // S182
, 7479  // S183
, 7558  // S184
, 7561  // S185
, 7648  // S186
, 7659  // S187
, 7662  // S188
, 7665  // S189
, 7668  // S190
, 7671  // S191
, 7674  // S192
, 7753  // S193
, 7756  // S194
, 7759  // S195
, 7838  // S196
, 7917  // S197
, 7996  // S198
, 8075  // S199
, 8092  // S200
, 8103  // S201
, 8114  // S202
, 8195  // S203
, 8274  // S204
, 8277  // S205
, 8356  // S206
, 8363  // S207
, 8372  // S208
, 8377  // S209
, 8382  // S210
, 8397  // S211
, 8400  // S212
, 8403  // S213
, 8482  // S214
, 8497  // S215
, 8582  // S216
, 8593  // S217
, 8596  // S218
, 8599  // S219
, 8602  // S220
, 8609  // S221
, 8616  // S222
, 8621  // S223
, 8628  // S224
, 8631  // S225
, 8634  // S226
, 8641  // S227
, 8720  // S228
, 8727  // S229
, 8784  // S230
, 8789  // S231
, 8792  // S232
, 8871  // S233
, 8950  // S234
, 8957  // S235
, 8960  // S236
, 8967  // S237
, 8972  // S238
, 8975  // S239
, 8980  // S240
, 8995  // S241
, 9074  // S242
, 9077  // S243
, 9084  // S244
, 9091  // S245
, 9102  // S246
, 9107  // S247
, 9118  // S248
, 9121  // S249
, 9126  // S250
, 9133  // S251
, 9222  // S252
, 9309  // S253
, 9324  // S254
, 9327  // S255
, 9330  // S256
, 9409  // S257
, 9412  // S258
, 9491  // S259
, 9494  // S260
, 9497  // S261
, 9576  // S262
, 9655  // S263
, 9658  // S264
, 9661  // S265
, 9666  // S266
, 9671  // S267
, 9676  // S268
, 9679  // S269
, 9682  // S270
, 9685  // S271
, 9690  // S272
, 9775  // S273
, 9782  // S274
, 9789  // S275
, 9794  // S276
, 9877  // S277
, 9880  // S278
, 9883  // S279
, 9886  // S280
, 9889  // S281
, 9976  // S282
, 9979  // S283
, 9982  // S284
, 9985  // S285
, 9988  // S286
, 9991  // S287
, 9998  // S288
, 10007  // S289
, 10010  // S290
, 10013  // S291
, 10148  // S292
, 10163  // S293
, 10166  // S294
, 10169  // S295
, 10174  // S296
, 10177  // S297
, 10180  // S298
, 10187  // S299
, 10190  // S300
, 10277  // S301
, 10334  // S302
, 10341  // S303
, 10356  // S304
, 10359  // S305
, 10438  // S306
, 10517  // S307
, 10604  // S308
, 10683  // S309
, 10688  // S310
, 10693  // S311
, 10772  // S312
, 10777  // S313
, 10780  // S314
, 10783  // S315
, 10786  // S316
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            SLR states successors table                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable_baseline_include_grammar_0 [15] = {0, 7,
  1, 8,
  2, 9,
  7, 10,
  9, 11,
  22, 12,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_7 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 20,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_8 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 21,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_9 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 22,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_11 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 23,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_14 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 25,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_17 [3] = {44, 29, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_26 [3] = {23, 34, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_27 [3] = {24, 36, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_30 [5] = {16, 40,
  52, 41, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_31 [15] = {6, 49,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_32 [3] = {27, 57, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_34 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 59,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_36 [13] = {0, 7,
  1, 8,
  2, 9,
  9, 11,
  22, 61,
  26, 13, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_37 [3] = {45, 64, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_40 [5] = {16, 40,
  52, 66, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_42 [3] = {59, 69, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_44 [15] = {6, 70,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_45 [5] = {21, 71,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_46 [5] = {21, 72,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_50 [3] = {53, 76, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_51 [3] = {54, 78, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_52 [3] = {55, 85, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_53 [3] = {56, 90, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_54 [3] = {57, 94, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_58 [3] = {23, 97, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_60 [3] = {24, 98, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_64 [3] = {44, 99, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_65 [3] = {46, 101, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_68 [15] = {6, 102,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_74 [13] = {17, 105,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_75 [13] = {17, 106,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_77 [11] = {18, 107,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_79 [9] = {19, 108,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_80 [9] = {19, 109,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_81 [9] = {19, 110,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_82 [9] = {19, 111,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_83 [9] = {19, 112,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_84 [9] = {19, 113,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_86 [7] = {20, 114,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_87 [7] = {20, 115,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_88 [7] = {20, 116,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_89 [7] = {20, 117,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_91 [5] = {21, 118,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_92 [5] = {21, 119,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_93 [5] = {21, 120,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_96 [21] = {8, 155,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_101 [3] = {47, 167, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_105 [3] = {53, 170, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_106 [3] = {53, 171, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_107 [3] = {54, 172, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_114 [3] = {56, 173, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_115 [3] = {56, 174, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_116 [3] = {56, 175, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_117 [3] = {56, 176, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_118 [3] = {57, 177, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_119 [3] = {57, 178, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_120 [3] = {57, 179, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_121 [21] = {8, 181,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_124 [21] = {8, 184,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_125 [11] = {3, 190,
  11, 191,
  14, 192,
  29, 193,
  30, 194, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_156 [19] = {10, 156,
  12, 157,
  25, 200,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_157 [19] = {10, 156,
  12, 157,
  25, 201,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_161 [3] = {3, 202, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_162 [3] = {3, 203, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_163 [3] = {3, 204, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_164 [15] = {6, 205,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_166 [3] = {49, 209, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_185 [3] = {61, 215, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_186 [13] = {3, 219,
  13, 220,
  14, 221,
  15, 222,
  39, 223,
  40, 224, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_187 [3] = {3, 225, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_192 [21] = {8, 228,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_194 [3] = {3, 230, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_202 [5] = {4, 232,
  63, 233, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_207 [3] = {51, 236, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_209 [3] = {48, 238, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_210 [15] = {6, 239,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_212 [3] = {14, 241, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_214 [15] = {6, 242,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_216 [11] = {3, 219,
  13, 243,
  14, 221,
  39, 223,
  40, 224, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_220 [3] = {43, 246, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_222 [3] = {42, 248, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_224 [3] = {3, 249, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_226 [3] = {5, 254, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_228 [3] = {33, 257, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_229 [13] = {12, 258,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_230 [3] = {31, 260, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_234 [3] = {5, 262, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_236 [3] = {50, 265, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_237 [3] = {49, 266, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_239 [3] = {60, 269, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_240 [15] = {6, 270,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_241 [21] = {8, 271,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_244 [3] = {5, 273, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_245 [11] = {3, 219,
  13, 274,
  14, 221,
  39, 223,
  40, 224, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_247 [13] = {3, 219,
  13, 220,
  14, 221,
  15, 275,
  39, 223,
  40, 224, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_249 [3] = {41, 278, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_250 [3] = {5, 279, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_251 [3] = {62, 281, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_253 [15] = {6, 282,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_255 [5] = {11, 283,
  14, 192, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_256 [21] = {8, 284,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_266 [3] = {48, 289, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_271 [3] = {32, 294, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_274 [3] = {43, 295, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_275 [3] = {42, 296, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_288 [3] = {51, 302, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_292 [15] = {6, 304,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_293 [3] = {14, 305, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_301 [13] = {12, 308,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_302 [3] = {50, 309, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_303 [15] = {6, 310,
  17, 50,
  18, 51,
  19, 52,
  20, 53,
  21, 54,
  58, 55, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_305 [21] = {8, 312,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_310 [3] = {60, 313, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_311 [21] = {8, 314,
  10, 156,
  12, 157,
  25, 158,
  28, 159,
  34, 160,
  35, 161,
  36, 162,
  37, 163,
  38, 164, -1} ;

static const int16_t gSuccessorTable_baseline_include_grammar_312 [3] = {32, 315, -1} ;

static const int16_t * gSuccessorTable_baseline_include_grammar [317] = {
gSuccessorTable_baseline_include_grammar_0, NULL, NULL, NULL, 
  NULL, NULL, NULL, gSuccessorTable_baseline_include_grammar_7, 
  gSuccessorTable_baseline_include_grammar_8, gSuccessorTable_baseline_include_grammar_9, NULL, gSuccessorTable_baseline_include_grammar_11, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_14, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_17, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_26, gSuccessorTable_baseline_include_grammar_27, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_30, gSuccessorTable_baseline_include_grammar_31, 
  gSuccessorTable_baseline_include_grammar_32, NULL, gSuccessorTable_baseline_include_grammar_34, NULL, 
  gSuccessorTable_baseline_include_grammar_36, gSuccessorTable_baseline_include_grammar_37, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_40, NULL, gSuccessorTable_baseline_include_grammar_42, NULL, 
  gSuccessorTable_baseline_include_grammar_44, gSuccessorTable_baseline_include_grammar_45, gSuccessorTable_baseline_include_grammar_46, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_50, gSuccessorTable_baseline_include_grammar_51, 
  gSuccessorTable_baseline_include_grammar_52, gSuccessorTable_baseline_include_grammar_53, gSuccessorTable_baseline_include_grammar_54, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_58, NULL, 
  gSuccessorTable_baseline_include_grammar_60, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_64, gSuccessorTable_baseline_include_grammar_65, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_68, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_74, gSuccessorTable_baseline_include_grammar_75, 
  NULL, gSuccessorTable_baseline_include_grammar_77, NULL, gSuccessorTable_baseline_include_grammar_79, 
  gSuccessorTable_baseline_include_grammar_80, gSuccessorTable_baseline_include_grammar_81, gSuccessorTable_baseline_include_grammar_82, gSuccessorTable_baseline_include_grammar_83, 
  gSuccessorTable_baseline_include_grammar_84, NULL, gSuccessorTable_baseline_include_grammar_86, gSuccessorTable_baseline_include_grammar_87, 
  gSuccessorTable_baseline_include_grammar_88, gSuccessorTable_baseline_include_grammar_89, NULL, gSuccessorTable_baseline_include_grammar_91, 
  gSuccessorTable_baseline_include_grammar_92, gSuccessorTable_baseline_include_grammar_93, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_96, NULL, NULL, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_101, NULL, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_105, gSuccessorTable_baseline_include_grammar_106, gSuccessorTable_baseline_include_grammar_107, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_114, gSuccessorTable_baseline_include_grammar_115, 
  gSuccessorTable_baseline_include_grammar_116, gSuccessorTable_baseline_include_grammar_117, gSuccessorTable_baseline_include_grammar_118, gSuccessorTable_baseline_include_grammar_119, 
  gSuccessorTable_baseline_include_grammar_120, gSuccessorTable_baseline_include_grammar_121, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_124, gSuccessorTable_baseline_include_grammar_125, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_156, gSuccessorTable_baseline_include_grammar_157, NULL, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_161, gSuccessorTable_baseline_include_grammar_162, gSuccessorTable_baseline_include_grammar_163, 
  gSuccessorTable_baseline_include_grammar_164, NULL, gSuccessorTable_baseline_include_grammar_166, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_185, gSuccessorTable_baseline_include_grammar_186, gSuccessorTable_baseline_include_grammar_187, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_192, NULL, gSuccessorTable_baseline_include_grammar_194, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_202, NULL, 
  NULL, NULL, NULL, gSuccessorTable_baseline_include_grammar_207, 
  NULL, gSuccessorTable_baseline_include_grammar_209, gSuccessorTable_baseline_include_grammar_210, NULL, 
  gSuccessorTable_baseline_include_grammar_212, NULL, gSuccessorTable_baseline_include_grammar_214, NULL, 
  gSuccessorTable_baseline_include_grammar_216, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_220, NULL, gSuccessorTable_baseline_include_grammar_222, NULL, 
  gSuccessorTable_baseline_include_grammar_224, NULL, gSuccessorTable_baseline_include_grammar_226, NULL, 
  gSuccessorTable_baseline_include_grammar_228, gSuccessorTable_baseline_include_grammar_229, gSuccessorTable_baseline_include_grammar_230, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_234, NULL, 
  gSuccessorTable_baseline_include_grammar_236, gSuccessorTable_baseline_include_grammar_237, NULL, gSuccessorTable_baseline_include_grammar_239, 
  gSuccessorTable_baseline_include_grammar_240, gSuccessorTable_baseline_include_grammar_241, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_244, gSuccessorTable_baseline_include_grammar_245, NULL, gSuccessorTable_baseline_include_grammar_247, 
  NULL, gSuccessorTable_baseline_include_grammar_249, gSuccessorTable_baseline_include_grammar_250, gSuccessorTable_baseline_include_grammar_251, 
  NULL, gSuccessorTable_baseline_include_grammar_253, NULL, gSuccessorTable_baseline_include_grammar_255, 
  gSuccessorTable_baseline_include_grammar_256, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_266, NULL, 
  NULL, NULL, NULL, gSuccessorTable_baseline_include_grammar_271, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_274, gSuccessorTable_baseline_include_grammar_275, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_288, NULL, NULL, NULL, 
  gSuccessorTable_baseline_include_grammar_292, gSuccessorTable_baseline_include_grammar_293, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable_baseline_include_grammar_301, gSuccessorTable_baseline_include_grammar_302, gSuccessorTable_baseline_include_grammar_303, 
  NULL, gSuccessorTable_baseline_include_grammar_305, NULL, NULL, 
  NULL, NULL, gSuccessorTable_baseline_include_grammar_310, gSuccessorTable_baseline_include_grammar_311, 
  gSuccessorTable_baseline_include_grammar_312, NULL, NULL, NULL, 
  NULL} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Production rules infos (left non terminal, size of right string)                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionsTable_baseline_include_grammar [164 * 2] = {
  7, 1,
  8, 1,
  9, 7,
  10, 1,
  11, 3,
  12, 1,
  13, 2,
  13, 1,
  13, 1,
  14, 4,
  15, 2,
  0, 4,
  16, 4,
  1, 5,
  2, 4,
  6, 2,
  17, 2,
  18, 2,
  19, 2,
  20, 2,
  21, 1,
  3, 2,
  5, 2,
  5, 1,
  5, 3,
  4, 1,
  22, 0,
  22, 3,
  22, 5,
  22, 5,
  22, 2,
  22, 2,
  22, 2,
  22, 2,
  23, 0,
  23, 3,
  24, 0,
  24, 3,
  25, 0,
  25, 2,
  25, 2,
  26, 0,
  26, 1,
  27, 0,
  27, 2,
  28, 10,
  28, 2,
  28, 2,
  28, 3,
  28, 4,
  28, 7,
  28, 3,
  28, 7,
  28, 2,
  29, 4,
  29, 3,
  30, 1,
  30, 1,
  31, 0,
  31, 2,
  32, 0,
  32, 4,
  33, 0,
  33, 2,
  33, 2,
  34, 3,
  34, 2,
  34, 4,
  34, 2,
  34, 2,
  34, 1,
  34, 1,
  34, 1,
  34, 1,
  34, 1,
  34, 2,
  34, 2,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  35, 1,
  36, 1,
  36, 1,
  37, 1,
  37, 1,
  38, 1,
  38, 1,
  38, 1,
  38, 1,
  39, 4,
  39, 3,
  40, 1,
  40, 1,
  41, 0,
  41, 2,
  42, 0,
  42, 3,
  43, 0,
  43, 3,
  44, 0,
  44, 4,
  45, 1,
  45, 1,
  46, 0,
  46, 3,
  47, 0,
  47, 4,
  48, 0,
  48, 3,
  49, 3,
  49, 1,
  50, 0,
  50, 4,
  51, 0,
  51, 3,
  52, 0,
  52, 2,
  53, 0,
  53, 3,
  53, 3,
  54, 0,
  54, 3,
  55, 0,
  55, 2,
  55, 2,
  55, 2,
  55, 2,
  55, 2,
  55, 2,
  56, 0,
  56, 3,
  56, 3,
  56, 3,
  56, 3,
  57, 0,
  57, 3,
  57, 3,
  57, 3,
  58, 2,
  58, 2,
  58, 1,
  58, 1,
  58, 2,
  58, 3,
  58, 8,
  59, 0,
  59, 3,
  60, 0,
  60, 5,
  61, 0,
  61, 3,
  62, 0,
  62, 3,
  63, 0,
  63, 2,
  64, 1
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'configuration_definition' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_configuration_5F_definition_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_communs_configuration_5F_definition_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_configuration_5F_definition_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_communs_configuration_5F_definition_i0_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_configuration_5F_definition_ (GALGAS_configDefinitionList &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 11 :
      rule_communs_configuration_5F_definition_i0_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'ram_definition' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_ram_5F_definition_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_communs_ram_5F_definition_i2_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_ram_5F_definition_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_communs_ram_5F_definition_i2_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_ram_5F_definition_ (GALGAS_ramDefinitionList &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 13 :
      rule_communs_ram_5F_definition_i2_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'constant_definition' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_constant_5F_definition_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_communs_constant_5F_definition_i3_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_constant_5F_definition_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_communs_constant_5F_definition_i3_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_constant_5F_definition_ (GALGAS_constantDefinitionList &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 14 :
      rule_communs_constant_5F_definition_i3_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'register_parsing' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_register_5F_parsing_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_communs_register_5F_parsing_i10_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_register_5F_parsing_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_communs_register_5F_parsing_i10_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_register_5F_parsing_ (GALGAS_registerExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 21 :
      rule_communs_register_5F_parsing_i10_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'optional_w_as_dest' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_optional_5F_w_5F_as_5F_dest_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_communs_optional_5F_w_5F_as_5F_dest_i14_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_optional_5F_w_5F_as_5F_dest_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_communs_optional_5F_w_5F_as_5F_dest_i14_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_optional_5F_w_5F_as_5F_dest_ (GALGAS_bool &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 25 :
      rule_communs_optional_5F_w_5F_as_5F_dest_i14_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'bit_number_parsing' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_bit_5F_number_5F_parsing_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_communs_bit_5F_number_5F_parsing_i11_parse(inLexique) ;
    break ;
  case 23 :
      rule_communs_bit_5F_number_5F_parsing_i12_parse(inLexique) ;
    break ;
  case 24 :
      rule_communs_bit_5F_number_5F_parsing_i13_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_bit_5F_number_5F_parsing_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_communs_bit_5F_number_5F_parsing_i11_indexing(inLexique) ;
    break ;
  case 23 :
      rule_communs_bit_5F_number_5F_parsing_i12_indexing(inLexique) ;
    break ;
  case 24 :
      rule_communs_bit_5F_number_5F_parsing_i13_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_bit_5F_number_5F_parsing_ (GALGAS_bitNumberExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 22 :
      rule_communs_bit_5F_number_5F_parsing_i11_(parameter_1, inLexique) ;
    break ;
  case 23 :
      rule_communs_bit_5F_number_5F_parsing_i12_(parameter_1, inLexique) ;
    break ;
  case 24 :
      rule_communs_bit_5F_number_5F_parsing_i13_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'immediate_expression' non terminal implementation                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_expression_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 15 :
      rule_communs_immediate_5F_expression_i4_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_expression_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 15 :
      rule_communs_immediate_5F_expression_i4_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_expression_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 15 :
      rule_communs_immediate_5F_expression_i4_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'section_list' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_section_5F_list_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_baseline_5F_syntax_section_5F_list_i0_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_section_5F_list_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_baseline_5F_syntax_section_5F_list_i0_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_section_5F_list_ (GALGAS_baseline_5F_routineDefinitionList &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_ramDefinitionList &  parameter_3,
                                GALGAS_lstringlist &  parameter_4,
                                GALGAS_configDefinitionList &  parameter_5,
                                GALGAS_constantDefinitionList &  parameter_6,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_baseline_5F_syntax_section_5F_list_i0_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::performIndexing (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_piccolo_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_piccolo_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  scanner->enableIndexing () ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_baseline_include_grammar, gNonTerminalNames_baseline_include_grammar,
                                                     gActionTableIndex_baseline_include_grammar, gSuccessorTable_baseline_include_grammar,
                                                     gProductionsTable_baseline_include_grammar) ;
    if (ok) {
      cGrammar_baseline_5F_include_5F_grammar grammar ;
      grammar.nt_section_5F_list_indexing (scanner) ;
    }
    scanner->generateIndexFile () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_baseline_5F_include_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_piccolo_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_piccolo_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_baseline_5F_include_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_piccolo_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_piccolo_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performBottomUpParsing (gActionTable_baseline_include_grammar, gNonTerminalNames_baseline_include_grammar,
                                     gActionTableIndex_baseline_include_grammar, gSuccessorTable_baseline_include_grammar,
                                     gProductionsTable_baseline_include_grammar) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_baseline_5F_routineDefinitionList &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_ramDefinitionList &  parameter_3,
                                GALGAS_lstringlist &  parameter_4,
                                GALGAS_configDefinitionList &  parameter_5,
                                GALGAS_constantDefinitionList &  parameter_6
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_piccolo_5F_lexique * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_piccolo_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable_baseline_include_grammar, gNonTerminalNames_baseline_include_grammar,
                                                         gActionTableIndex_baseline_include_grammar, gSuccessorTable_baseline_include_grammar,
                                                         gProductionsTable_baseline_include_grammar) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_baseline_5F_include_5F_grammar grammar ;
          grammar.nt_section_5F_list_ (parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_baseline_5F_routineDefinitionList &  parameter_1,
                                GALGAS_lstringlist &  parameter_2,
                                GALGAS_ramDefinitionList &  parameter_3,
                                GALGAS_lstringlist &  parameter_4,
                                GALGAS_configDefinitionList &  parameter_5,
                                GALGAS_constantDefinitionList &  parameter_6
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_piccolo_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_piccolo_5F_lexique (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable_baseline_include_grammar, gNonTerminalNames_baseline_include_grammar,
                                                     gActionTableIndex_baseline_include_grammar, gSuccessorTable_baseline_include_grammar,
                                                     gProductionsTable_baseline_include_grammar) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_baseline_5F_include_5F_grammar grammar ;
      grammar.nt_section_5F_list_ (parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, scanner) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'baseline_instruction_list' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_instruction_5F_list_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_baseline_5F_syntax_baseline_5F_instruction_5F_list_i1_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_instruction_5F_list_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_baseline_5F_syntax_baseline_5F_instruction_5F_list_i1_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_instruction_5F_list_ (GALGAS_baseline_5F_instructionList &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
      rule_baseline_5F_syntax_baseline_5F_instruction_5F_list_i1_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'baseline_routine_definition' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_routine_5F_definition_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 2 :
      rule_baseline_5F_syntax_baseline_5F_routine_5F_definition_i2_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_routine_5F_definition_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 2 :
      rule_baseline_5F_syntax_baseline_5F_routine_5F_definition_i2_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_routine_5F_definition_ (GALGAS_baseline_5F_routineDefinitionList &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 2 :
      rule_baseline_5F_syntax_baseline_5F_routine_5F_definition_i2_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           'baseline_structured_instruction' non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_instruction_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_instruction_i3_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_instruction_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_instruction_i3_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_instruction_ (GALGAS_baseline_5F_instruction &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 3 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_instruction_i3_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'baseline_structured_if_instruction' non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_if_5F_instruction_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 4 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_if_5F_instruction_i4_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_if_5F_instruction_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 4 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_if_5F_instruction_i4_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_structured_5F_if_5F_instruction_ (GALGAS_baseline_5F_instruction &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 4 :
      rule_baseline_5F_syntax_baseline_5F_structured_5F_if_5F_instruction_i4_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'baseline_simple_instruction' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_simple_5F_instruction_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 5 :
      rule_baseline_5F_syntax_baseline_5F_simple_5F_instruction_i5_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_simple_5F_instruction_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 5 :
      rule_baseline_5F_syntax_baseline_5F_simple_5F_instruction_i5_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_simple_5F_instruction_ (GALGAS_baseline_5F_instruction &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 5 :
      rule_baseline_5F_syntax_baseline_5F_simple_5F_instruction_i5_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'baseline_condition_factor' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_factor_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 6 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i6_parse(inLexique) ;
    break ;
  case 7 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i7_parse(inLexique) ;
    break ;
  case 8 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i8_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_factor_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 6 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i6_indexing(inLexique) ;
    break ;
  case 7 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i7_indexing(inLexique) ;
    break ;
  case 8 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i8_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_factor_ (GALGAS_baseline_5F_conditionExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 6 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i6_(parameter_1, inLexique) ;
    break ;
  case 7 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i7_(parameter_1, inLexique) ;
    break ;
  case 8 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i8_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'baseline_condition_expression' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_expression_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 9 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_expression_i9_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_expression_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 9 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_expression_i9_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_expression_ (GALGAS_baseline_5F_conditionExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 9 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_expression_i9_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'baseline_condition_term' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_term_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_term_i10_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_term_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_term_i10_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_baseline_5F_condition_5F_term_ (GALGAS_baseline_5F_conditionExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 10 :
      rule_baseline_5F_syntax_baseline_5F_condition_5F_term_i10_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'declaration_in_ram' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_declaration_5F_in_5F_ram_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_communs_declaration_5F_in_5F_ram_i1_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_declaration_5F_in_5F_ram_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_communs_declaration_5F_in_5F_ram_i1_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_declaration_5F_in_5F_ram_ (GALGAS_declarationInRam &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 12 :
      rule_communs_declaration_5F_in_5F_ram_i1_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'immediate_bitwise_term' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_term_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_communs_immediate_5F_bitwise_5F_term_i5_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_term_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_communs_immediate_5F_bitwise_5F_term_i5_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_term_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 16 :
      rule_communs_immediate_5F_bitwise_5F_term_i5_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'immediate_bitwise_factor' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_factor_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_communs_immediate_5F_bitwise_5F_factor_i6_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_factor_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_communs_immediate_5F_bitwise_5F_factor_i6_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_bitwise_5F_factor_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 17 :
      rule_communs_immediate_5F_bitwise_5F_factor_i6_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'immediate_term' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_term_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_communs_immediate_5F_term_i7_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_term_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_communs_immediate_5F_term_i7_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_term_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 18 :
      rule_communs_immediate_5F_term_i7_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'immediate_factor' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_factor_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_communs_immediate_5F_factor_i8_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_factor_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_communs_immediate_5F_factor_i8_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_factor_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 19 :
      rule_communs_immediate_5F_factor_i8_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'immediate_primary' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_primary_parse (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_communs_immediate_5F_primary_i9_parse(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_primary_indexing (C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_communs_immediate_5F_primary_i9_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_baseline_5F_include_5F_grammar::nt_immediate_5F_primary_ (GALGAS_immediatExpression &  parameter_1,
                                C_Lexique_piccolo_5F_lexique * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 20 :
      rule_communs_immediate_5F_primary_i9_(parameter_1, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_0' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_0 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 26 27 28 29 30 31 32 33
  return inLexique->nextProductionIndex () - 25 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_1' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_1 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 34 35
  return inLexique->nextProductionIndex () - 33 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_2' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_2 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 36 37
  return inLexique->nextProductionIndex () - 35 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_3' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_3 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 38 39 40
  return inLexique->nextProductionIndex () - 37 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_4' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_4 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 41 42
  return inLexique->nextProductionIndex () - 40 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_5' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_5 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 43 44
  return inLexique->nextProductionIndex () - 42 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_6' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_6 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 45 46 47 48 49 50 51 52 53
  return inLexique->nextProductionIndex () - 44 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_7' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_7 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 54 55
  return inLexique->nextProductionIndex () - 53 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_8' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_8 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 56 57
  return inLexique->nextProductionIndex () - 55 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_9' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_9 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 58 59
  return inLexique->nextProductionIndex () - 57 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_10' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_10 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 60 61
  return inLexique->nextProductionIndex () - 59 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_11' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_11 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 62 63 64
  return inLexique->nextProductionIndex () - 61 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_12' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_12 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 65 66 67 68 69 70 71 72 73 74 75 76
  return inLexique->nextProductionIndex () - 64 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_13' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_13 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 77 78 79 80 81 82 83 84 85 86 87 88
  return inLexique->nextProductionIndex () - 76 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_14' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_14 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 89 90
  return inLexique->nextProductionIndex () - 88 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_15' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_15 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 91 92
  return inLexique->nextProductionIndex () - 90 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_16' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_16 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 93 94 95 96
  return inLexique->nextProductionIndex () - 92 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_17' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_17 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 97 98
  return inLexique->nextProductionIndex () - 96 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_18' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_18 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 99 100
  return inLexique->nextProductionIndex () - 98 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_19' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_19 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 101 102
  return inLexique->nextProductionIndex () - 100 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_20' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_20 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 103 104
  return inLexique->nextProductionIndex () - 102 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             'select_baseline_5F_syntax_21' non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_baseline_5F_syntax_21 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 105 106
  return inLexique->nextProductionIndex () - 104 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_0' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_0 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 107 108
  return inLexique->nextProductionIndex () - 106 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_1' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_1 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 109 110
  return inLexique->nextProductionIndex () - 108 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_2' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_2 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 111 112
  return inLexique->nextProductionIndex () - 110 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_3' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_3 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 113 114
  return inLexique->nextProductionIndex () - 112 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_4' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_4 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 115 116
  return inLexique->nextProductionIndex () - 114 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_5' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_5 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 117 118
  return inLexique->nextProductionIndex () - 116 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_6' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_6 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 119 120
  return inLexique->nextProductionIndex () - 118 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_7' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_7 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 121 122
  return inLexique->nextProductionIndex () - 120 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_8' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_8 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 123 124
  return inLexique->nextProductionIndex () - 122 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'select_communs_9' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_9 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 125 126 127
  return inLexique->nextProductionIndex () - 124 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_10' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_10 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 128 129
  return inLexique->nextProductionIndex () - 127 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_11' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_11 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 130 131 132 133 134 135 136
  return inLexique->nextProductionIndex () - 129 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_12' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_12 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 137 138 139 140 141
  return inLexique->nextProductionIndex () - 136 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_13' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_13 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 142 143 144 145
  return inLexique->nextProductionIndex () - 141 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_14' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_14 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 146 147 148 149 150 151 152
  return inLexique->nextProductionIndex () - 145 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_15' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_15 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 153 154
  return inLexique->nextProductionIndex () - 152 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_16' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_16 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 155 156
  return inLexique->nextProductionIndex () - 154 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_17' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_17 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 157 158
  return inLexique->nextProductionIndex () - 156 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_18' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_18 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 159 160
  return inLexique->nextProductionIndex () - 158 ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'select_communs_19' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_baseline_5F_include_5F_grammar::select_communs_19 (C_Lexique_piccolo_5F_lexique * inLexique) {
// Productions numbers : 161 162
  return inLexique->nextProductionIndex () - 160 ;
}

//---------------------------------------------------------------------------------------------------------------------*

