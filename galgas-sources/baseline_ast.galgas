

#----------------------------------------------------*

abstract class @baseline_instruction {
  @location mInstructionLocation
}

#----------------------------------------------------*

list @baseline_instructionList {
  @baseline_instruction mInstruction
}

#----------------------------------------------------*

class @baseline_instruction_FD : @baseline_instruction {
  @baseline_instruction_FD_base_code mInstruction_FD_base_code
  @registerExpression mRegisterExpression
  @bool m_W_isDestination
}

#----------------------------------------------------*

class @baseline_instruction_F : @baseline_instruction {
  @baseline_F_instruction_base_code mFAinstruction
  @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @baseline_instruction_FB : @baseline_instruction {
  @baseline_bit_oriented_op mBitOrientedOp
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

class @baseline_instruction_CALL : @baseline_instruction {
  @lstring mTargetLabel
}

#----------------------------------------------------*

class @baseline_instruction_JSR : @baseline_instruction {
  @lstring mTargetLabel
}

#----------------------------------------------------*

class @baseline_instruction_GOTO : @baseline_instruction {
  @lstring mTargetLabel
}

#----------------------------------------------------*

class @baseline_instruction_JUMP : @baseline_instruction {
  @lstring mTargetLabel
}

#----------------------------------------------------*

class @baseline_instruction_WO_OPERAND : @baseline_instruction {
  @baseline_WO_OPERAND_group mInstruction
}

#----------------------------------------------------*

class @baseline_instruction_TRIS : @baseline_instruction {
  @lstring mOperand
}

#----------------------------------------------------*

class @baseline_instruction_literalOperation : @baseline_instruction {
  @baseline_literal_instruction_opcode mLiteralInstruction
  @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @baseline_instruction_MNOP : @baseline_instruction {
  @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @baseline_instruction_FOREVER : @baseline_instruction {
  @baseline_instructionList mInstructionList
  @location mEndOfInstructionList
}

#----------------------------------------------------*

class @baseline_instruction_STATIC_REPEAT : @baseline_instruction {
  @immediatExpression mRepeatExpression
  @baseline_instructionList mInstructionList
  @location mEndOfInstruction
}

#----------------------------------------------------*

abstract class @baseline_instruction_IF_SEMI_COLON : @baseline_instruction {
  @baseline_instruction mInstruction
}

#----------------------------------------------------*

class @baseline_instruction_IF_BitTest : @baseline_instruction_IF_SEMI_COLON {
  @bool mSkipIfSet
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
}

method @baseline_instruction_IF_BitTest getBaseCode !@uint outBaseCode {
  if mSkipIfSet then
    outBaseCode = 0x1C00 # BTFSS
  else
    outBaseCode = 0x1800 # BTFSC
  end
} 

method @baseline_instruction_IF_BitTest getMnemonic !@string outMnemonic {
  if mSkipIfSet then
    outMnemonic = "BTFSS"
  else
    outMnemonic = "BTFSC"
  end
} 


#----------------------------------------------------*

class @baseline_instruction_IF_IncDec : @baseline_instruction_IF_SEMI_COLON {
  @bool mIncrement
  @registerExpression mRegisterExpression
  @bool m_W_isDestination
}

#----------------------------------------------------*

abstract class @baseline_conditionExpression {
}

#----------------------------------------------------*

class @baseline_incDecRegisterInCondition : @baseline_conditionExpression {
  @registerExpression mRegisterExpression
  @bool mIncrement
  @bool m_W_isDestination
  @bool mBranchIfZero
}

#----------------------------------------------------*

class @baseline_negateCondition : @baseline_conditionExpression {
  @baseline_conditionExpression mCondition
}

#----------------------------------------------------*

class @baseline_andCondition : @baseline_conditionExpression {
  @baseline_conditionExpression mLeftExpression
  @baseline_conditionExpression mRightExpression
}

#----------------------------------------------------*

class @baseline_bitTest_in_structured_if_condition : @baseline_conditionExpression {
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
#  @bool mBTFSSinstruction
}

#----------------------------------------------------*

class @baseline_instruction_structured_if : @baseline_instruction {
  @baseline_conditionExpression mIfCondition
  @baseline_instructionList mThenInstructionList
  @baseline_instructionList mElseInstructionList
  @location mEndOfElsePartLocation
}

#----------------------------------------------------*

list @baseline_partList {
  @baseline_conditionExpression mCondition
  @baseline_instructionList mInstructionList
  @location mEndOfPartLocation
}

#----------------------------------------------------*

class @baseline_instruction_do_while : @baseline_instruction {
  @baseline_instructionList mRepeatedInstructionList
  @location mEndOfRepeatedInstructionList
  @baseline_partList mWhilePartList
}

#----------------------------------------------------*

list @baseline_routineDefinitionList {
  @lstring mRoutineName
  @luint mPage
  @bool mIsNoReturn
  @baseline_instructionList mInstructionList
  @location mEndOfRoutineLocation
}

#----------------------------------------------------*

struct @baseline_model {
  @lstring mProgramName
  @lstring mDeviceName
  @configDefinitionList mConfigDefinitionList
  @ramDefinitionList mRamDefinitionList
  @lstringlist mUnusedRegisterList
  @constantDefinitionList mConstantDefinitionList
  @baseline_routineDefinitionList mRoutineDefinitionList
  @lstringlist mUnusedRoutineList
  @location mEndOfProgram
}

#----------------------------------------------------*

