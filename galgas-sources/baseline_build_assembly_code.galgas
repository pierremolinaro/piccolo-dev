

#----------------------------------------------------------------------------*
#                                                                            *
#               C O D E    G E N E R A T I O N                               *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @baseline_intermediate_instruction generateAssemblyCode
  ?let @baseline_intermediate_registerExpression inSTATUSregister
  ?let @bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList

#----------------------------------------------------------------------------*

override method @baseline_intermediate_NULL generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList unused ioAssemblyInstructionList {
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_PAGE generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_pseudo_ORG.init { !self.mPage * 512}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_BEGIN_ROUTINE generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_pseudo_BEGINOFROUTINE.init { !self.mRoutineName !self.mIsRegular}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_END_ROUTINE generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_pseudo_ENDOFROUTINE.init { !self.mRoutineName !self.mPage}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_FD generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_instruction_FD.init {
    !self.mInstructionLocation
    !self.mInstruction
    !self.mRegisterDescription
    !self.m_W_isDestination}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_F generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_instruction_F.init {
    !self.mInstructionLocation
    !self.mInstruction
    !self.mRegisterDescription}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_FB generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_instruction_FB.init {
    !self.mInstructionLocation
    !self.mInstruction
    !self.mRegisterDescription
    !self.mBitNumber}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_BitTestSkip generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_instruction_BitTestSkip.init {
    !self.mInstructionLocation
    !self.mSkipIfSet
    !self.mRegisterDescription
    !self.mBitNumber}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_WO_OPERAND generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_WO_OPERAND.init {
    !self.mInstructionLocation
    !self.mInstruction}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_TRIS generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_TRIS.init {
    !self.mInstructionLocation
    !self.mOperand
    !self.mOpcode}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_literalOperation generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_instruction_literalOperation.init {
    !self.mInstructionLocation
    !self.mInstruction
    !self.mLiteralValue}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_pseudo_LABEL generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_pseudo_LABEL.init {
    !self.mLabel}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_instruction_MNOP generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  if self.mOccurrenceFactor.uint == 0 then
    warning self.mOccurrenceFactor: "No generated code"
  end
  var @uint idx = 0
  loop( self.mOccurrenceFactor.uint)
  while idx < self.mOccurrenceFactor.uint
  do
    ioAssemblyInstructionList += !@baseline_assembly_WO_OPERAND.init {
      !self.mInstructionLocation
      !@baseline_WO_OPERAND_group. NOP}
    idx += 1
  end
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_GOTO generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_GOTO.init {
    !self.mInstructionLocation
    !self.mTargetLabel}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_JUMP generateAssemblyCode
  ?let @baseline_intermediate_registerExpression inSTATUSregister
  ?let @bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
#---
  var @uint pageChangeFlags = self.mCurrentPage ^ self.mTargetPage
  var @uint targetPageFlags = self.mTargetPage
  var @uint idx = 0
  loop (8) while pageChangeFlags != 0 do
    if (pageChangeFlags & 1) != 0 then
      let @uint bitIndex
      if [inStatusRegisterBitSliceTable hasKey !"PA"] then
        [inStatusRegisterBitSliceTable searchKey 
          !@lstring.init { !"PA" !self.mInstructionLocation}
          ?let @uint sliceIndex
          ?let @uint sliceSize
        ]
        if idx >= sliceSize then
          error self.mInstructionLocation : "internal error, idx (" + idx + ") >= sliceSize (" + sliceSize + ")"
        end
        bitIndex = sliceIndex + idx
      elsif [inStatusRegisterBitSliceTable hasKey !"PA"+ idx] then
        [inStatusRegisterBitSliceTable searchKey 
          !@lstring.init { !"PA"+ idx !self.mInstructionLocation}
          ?let @uint sliceIndex
          ?let @uint sliceSize
        ]
        if sliceSize != 1 then
          error self.mInstructionLocation : "internal error: sliceSize (" + sliceSize + ") != 1"
        end
        bitIndex = sliceIndex
      else
        error self.mInstructionLocation : "internal error, cannot solve page bit addressing" : bitIndex
      end
      ioAssemblyInstructionList += !@baseline_assembly_instruction_FB.init {
        !self.mInstructionLocation
        !if (targetPageFlags & 1) != 0 then @baseline_bit_oriented_op. BSF else @baseline_bit_oriented_op. BCF end
        !inSTATUSregister
        !bitIndex}
    end
    pageChangeFlags = pageChangeFlags / 2
    targetPageFlags = targetPageFlags / 2
    idx = idx + 1
  end
  ioAssemblyInstructionList += !@baseline_assembly_GOTO.init {
    !self.mInstructionLocation
    !self.mTargetLabel}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_CALL generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_CALL.init {
    !self.mInstructionLocation
    !self.mTargetLabel}
}

#----------------------------------------------------------------------------*

override method @baseline_intermediate_JSR generateAssemblyCode
  ?let @baseline_intermediate_registerExpression inSTATUSregister
  ?let @bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
#---
  var @uint pageChangeFlags = self.mCurrentPage ^ self.mTargetPage
  var @uint targetPageFlags = self.mTargetPage
  var @uint idx = 0
  var pageRestoreInstructions =@baseline_assembly_instructionList §[]
  loop (8) while pageChangeFlags != 0 do
    if (pageChangeFlags & 1) != 0 then
      let @uint bitIndex
      if [inStatusRegisterBitSliceTable hasKey !"PA"] then
        [inStatusRegisterBitSliceTable searchKey 
          !@lstring.init { !"PA" !self.mInstructionLocation}
          ?let @uint sliceIndex
          ?let @uint sliceSize
        ]
        if idx >= sliceSize then
          error self.mInstructionLocation : "internal error, idx (" + idx + ") >= sliceSize (" + sliceSize + ")"
        end
        bitIndex = sliceIndex + idx
      elsif [inStatusRegisterBitSliceTable hasKey !"PA"+ idx] then
        [inStatusRegisterBitSliceTable searchKey 
          !@lstring.init { !"PA"+ idx !self.mInstructionLocation}
          ?let @uint sliceIndex
          ?let @uint sliceSize
        ]
        if sliceSize != 1 then
          error self.mInstructionLocation : "internal error: sliceSize (" + sliceSize + ") != 1"
        end
        bitIndex = sliceIndex
      else
        error self.mInstructionLocation : "internal error, cannot solve page bit addressing" : bitIndex
      end
      ioAssemblyInstructionList += !@baseline_assembly_instruction_FB.init {
        !self.mInstructionLocation
        !if (targetPageFlags & 1) != 0 then @baseline_bit_oriented_op. BSF else @baseline_bit_oriented_op. BCF end
        !inSTATUSregister
        !bitIndex}
      pageRestoreInstructions += !@baseline_assembly_instruction_FB.init {
        !self.mInstructionLocation
        !if (targetPageFlags & 1) == 0 then @baseline_bit_oriented_op. BSF else @baseline_bit_oriented_op. BCF end
        !inSTATUSregister
        !bitIndex}
    end
    pageChangeFlags = pageChangeFlags / 2
    targetPageFlags = targetPageFlags / 2
    idx = idx + 1
  end
  ioAssemblyInstructionList += !@baseline_assembly_CALL.init {
    !self.mInstructionLocation
    !self.mTargetLabel}
  for (mInstruction) in  pageRestoreInstructions do
    ioAssemblyInstructionList += !mInstruction
  end
}

#----------------------------------------------------*

override method @baseline_intermediate_incDecRegisterInCondition generateAssemblyCode
  ?let @baseline_intermediate_registerExpression unused inSTATUSregister
  ?let @bitSliceTable unused inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
  ioAssemblyInstructionList += !@baseline_assembly_incDecRegisterInCondition.init {
    !self.mInstructionLocation
    !self.mRegisterDescription
    !self.mIncrement
    !self.m_W_isDestination}
#---
  if self.mBranchIfZero then
    ioAssemblyInstructionList += !@baseline_assembly_SKIP.init {
      !self.mInstructionLocation}
  end
#--- Generate GOTO instruction
  ioAssemblyInstructionList += !@baseline_assembly_GOTO.init {
    !self.mInstructionLocation
    !@lstring.init { !self.mTargetLabel !self.mInstructionLocation}}
}

#----------------------------------------------------------------------------*
#                                                                            *
#                                                                            *
#----------------------------------------------------------------------------*

proc build_baseline_assembly_code
  ?let @baseline_intermediate_instructionList inGeneratedInstructionList
  ?let @actualConfigurationMap inActualConfigurationMap
  ?let @baseline_intermediate_registerExpression inSTATUSregister
  ?let @bitSliceTable inStatusRegisterBitSliceTable
  ?!@baseline_assembly_instructionList ioAssemblyInstructionList {
#-------------------------------- Build assembly code
  for (mInstruction) in  inGeneratedInstructionList do
    [mInstruction generateAssemblyCode !inSTATUSregister !inStatusRegisterBitSliceTable !?ioAssemblyInstructionList]
  end
#-------------------------------- Add Configuration
  for (* mRegisterAddress mRegisterValue) in  inActualConfigurationMap do
    setEmitAddress ( ! mRegisterAddress + mRegisterAddress )
    emitCode ( !mRegisterValue )
  end
}

#----------------------------------------------------------------------------*

