

#----------------------------------------------------------------------------*

proc emitBaselineCodeAtWordAddress
  ?let @uint inCode
  ?!@uint ioWordAddress
  ?let @baseline_assembly_instruction inInstruction
  ?!@string ioListFileContents {
  ioListFileContents += "   " + [ioWordAddress * 2 x4String]
  ioListFileContents += " " + [inCode x4String] + " "
  [inInstruction print !?ioListFileContents]
  ioListFileContents += "\n"
  emitCode ( !inCode )
  ioWordAddress = ioWordAddress + 1
}

#----------------------------------------------------------------------------*

proc emitNoBaselineCodeAtWordAddress
  ?let @uint inWordAddress
  ?let @baseline_assembly_instruction inInstruction
  ?!@string ioListFileContents {
  ioListFileContents += "   " + [inWordAddress * 2 x4String]
  ioListFileContents += "      "
  [inInstruction print !?ioListFileContents]
  ioListFileContents += "\n"
}

#----------------------------------------------------------------------------*

map @baseline_symbolTable {
  public var @uint mRoutineAddress
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
}

#----------------------------------------------------------------------------*
#                                                                            *
#                          enterLabelAtAddress                               *
#                                                                            *
#----------------------------------------------------------------------------*

method @baseline_assembly_instruction enterLabelAtAddress
  ?!@baseline_symbolTable unused ioRoutineSymbolTable
  ?!@uint unused ioWordAddress {
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_LABEL enterLabelAtAddress
  ?!@baseline_symbolTable ioRoutineSymbolTable
  ?!@uint ioWordAddress {
  [!?ioRoutineSymbolTable insertKey !self.mLabel !ioWordAddress]
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_ORG enterLabelAtAddress
  ?!@baseline_symbolTable unused ioRoutineSymbolTable
  ?!@uint ioWordAddress {
  ioWordAddress = self.mOrigin
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_actualInstruction enterLabelAtAddress
  ?!@baseline_symbolTable unused ioRoutineSymbolTable
  ?!@uint ioWordAddress {
  ioWordAddress = ioWordAddress  + [self length]
}

#----------------------------------------------------------------------------*
#                                                                            *
#               C O D E    G E N E R A T I O N                               *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @baseline_assembly_instruction generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_BEGINOFROUTINE generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  if self.mIsRegular & ((ioWordAddress & 0x0100) != 0) then
    error self.mRoutineName : "the 8th bit of the routine address is not 0; a regular routine should be begin in the first half of a page"
  end
  emitNoBaselineCodeAtWordAddress ( !ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_ENDOFROUTINE generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  if ioWordAddress > (self.mPage * 512 + 512) then
    error self.mRoutineName : "the routine is too large, it does not lie in page " + self.mPage + " (" + (ioWordAddress - (self.mPage * 512 + 512)) + " word(s) in excess)"
  end
  emitNoBaselineCodeAtWordAddress ( !ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_ORG generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  ioWordAddress = self.mOrigin
  setEmitAddress ( !self.mOrigin * 2 )
  emitNoBaselineCodeAtWordAddress ( !ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_instruction_FD generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
#--- Emit Code
  var @uint code
  switch self.mInstruction
  case ADDWF  : code = 0x01C0
  case ANDWF  : code = 0x0140
  case COMF   : code = 0x0240
  case DECF   : code = 0x00C0
  case DECFSZ : code = 0x02C0
  case INCF   : code = 0x0280
  case INCFSZ : code = 0x3C00
  case IORWF  : code = 0x0100
  case MOVF   : code = 0x0200
  case RLF    : code = 0x0340
  case RRF    : code = 0x0300
  case SUBWF  : code = 0x0080
  case SWAPF  : code = 0x0380
  case XORWF  : code = 0x0180
  end
  if not self.m_W_isDestination then
    code = code | 0x20
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 0x1F)
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_instruction_F generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  var @uint code
  switch self.mInstruction
    case CLRF   : code = 0x0060
    case MOVWF  : code = 0x0020
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 0x1F)
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_instruction_FB generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  var @uint code
  switch self.mInstruction
    case BCF : code = 0x0400
    case BSF : code = 0x0500
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 0x1F)
  code = code | (self.mBitNumber << 5)
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_instruction_BitTestSkip generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
#--- Emit Code
  var @uint code
  if self.mSkipIfSet then
    code = 0x0700 # "BTFSS"
  else
    code = 0x0600 # BTFSC
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 0x1F)
  code = code | (self.mBitNumber << 5)
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_GOTO generateBinaryCodeAtAddress
  ?let @baseline_symbolTable inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
#---
  [inRoutineSymbolTable searchKey !self.mTargetLabel ?let @uint targetAddress]
#---
  emitBaselineCodeAtWordAddress ( !0x0A00 | (targetAddress & 0x1FF) !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_SKIP generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  emitBaselineCodeAtWordAddress ( !0x0A00 | ((ioWordAddress + 2) & 0x1FF) !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_CALL generateBinaryCodeAtAddress
  ?let @baseline_symbolTable inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
#---
  [inRoutineSymbolTable searchKey !self.mTargetLabel ?let targetAddress]
#---
  emitBaselineCodeAtWordAddress ( !0x0900 | (targetAddress & 0xFF) !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------*

override method @baseline_assembly_incDecRegisterInCondition generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  var @uint code
  if self.mIncrement then
    code = 0x03C0 # INCFSZ
  else
    code = 0x02C0 # DECFSZ
  end
  if not self.m_W_isDestination then
    code = code | 0x0020
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 0x1F)
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_WO_OPERAND generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  let @uint code
  switch self.mInstruction
  case CLRW    : code = 0x0040
  case NOP     : code = 0x0000
  case CLRWDT  : code = 0x0004
  case OPTION_ : code = 0x0002
  case SLEEP   : code = 0x0003
  end
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_TRIS generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  emitBaselineCodeAtWordAddress ( !self.mOpcode !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_instruction_literalOperation generateBinaryCodeAtAddress
  ?let @baseline_symbolTable unused inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  var @uint code
  switch self.mInstruction
  case ANDLW : code = 0x0E00
  case IORLW : code = 0x0D00
  case MOVLW : code = 0x0C00
  case RETLW : code = 0x0800
  case XORLW : code = 0x0F00
  end
  code = code | self.mLiteralValue
  emitBaselineCodeAtWordAddress ( !code !?ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*

override method @baseline_assembly_pseudo_LABEL generateBinaryCodeAtAddress
  ?let @baseline_symbolTable inRoutineSymbolTable
  ?!@string ioListFileContents
  ?!@uint ioWordAddress {
  [inRoutineSymbolTable searchKey !self.mLabel ?let targetAddress]
  if (targetAddress != ioWordAddress) then
    error self.mLabel: "Internal second pass error: the '" + self.mLabel
    + "' label gets " + [ioWordAddress hexString] + " value in second pass, while it gets "
    + [targetAddress hexString] + " in first pass"
  end
  emitNoBaselineCodeAtWordAddress ( !ioWordAddress !self !?ioListFileContents )
}

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc build_baseline_binary_code
  ?let @baseline_assembly_instructionList inAssemblyInstructionList
  ?let @uint inROMsize
  ?!@string ioListFileContents
  !@uint outUsedROMsize {
#-------------------------------- First pass: build label map
  var symbolTable =@baseline_symbolTable §[]
  var @uint currentWordAddress = 0
  for (mInstruction) in  inAssemblyInstructionList do
    [mInstruction enterLabelAtAddress !?symbolTable !?currentWordAddress]
  end
  let @uint lastAddressForFirstPass = currentWordAddress
  outUsedROMsize = currentWordAddress
#-------------------------------- Second pass: generate code
  currentWordAddress = 0
  setEmitAddress ( !0 )
  for (mInstruction) in  inAssemblyInstructionList do
    [mInstruction generateBinaryCodeAtAddress
      !symbolTable
      !?ioListFileContents
      !?currentWordAddress
    ]
    checkCurrentEmitAddress ( !currentWordAddress * 2 )
  end
  if lastAddressForFirstPass != currentWordAddress then
    error @location.here: "Internal second pass error: the last address gets " + [currentWordAddress hexString]
    + " value in second pass, while it gets "
    + [lastAddressForFirstPass hexString] + " value in first pass"
  elsif lastAddressForFirstPass > inROMsize then
    error @location.here: "Program too large: " + [lastAddressForFirstPass string]
    + " bytes (rom size is "
    + [inROMsize string] + " bytes)"
  end
}

#----------------------------------------------------------------------------*

