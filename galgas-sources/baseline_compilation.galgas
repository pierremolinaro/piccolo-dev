

#----------------------------------------------------------------------------*

map @baseline_declaredRoutineMap {
  insert insertKey error message "the '%K' routine is already declared"
  search searchKey error message "the '%K' routine is not declared"
}

#----------------------------------------------------------------------------*
#                                                                            *
#    S H O U L D    T E R M I N A T E    W I T H    M O V L W                *
#                                                                            *
#----------------------------------------------------------------------------*

method @baseline_instruction shouldTerminateWithMOVLW
  ?let @string inErrorMessage {
  error self.mInstructionLocation : inErrorMessage
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_literalOperation shouldTerminateWithMOVLW
  ?let @string inErrorMessage {
  if self.mLiteralInstruction != @baseline_literal_instruction_opcode. MOVLW then
    error self.mInstructionLocation : inErrorMessage  
  end
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_CALL shouldTerminateWithMOVLW
  ?let @string unused inErrorMessage {
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_structured_if shouldTerminateWithMOVLW
  ?let @string unused inErrorMessage {
#--- THEN branch
  if [self.mThenInstructionList count] == 0 then
    error self.mInstructionLocation : "the 'then' branch of this 'if' instruction does not have any instruction; it must terminate with a MOVLW instruction"
  else
   [self.mThenInstructionList last ?let @baseline_instruction lastInstruction]
   [lastInstruction shouldTerminateWithMOVLW !"the 'then' branch of this 'if' instruction must terminate with a MOVLW instruction"]
  end
#--- ELSE branch
  if [self.mElseInstructionList count] == 0 then
    error self.mInstructionLocation : "the 'else' branch of this 'if' instruction does not have any instruction; it must terminate with a MOVLW instruction"
  else
   [self.mElseInstructionList last ?let @baseline_instruction lastInstruction]
   [lastInstruction shouldTerminateWithMOVLW !"the 'else' branch of this 'if' instruction must terminate with a MOVLW instruction"]
  end

}

#----------------------------------------------------------------------------*
#                                                                            *
#    N O    R E T U R N    C H E C K I N G                                   *
#                                                                            *
#----------------------------------------------------------------------------*

method @baseline_instruction shouldNotContinueInSequence ?let @string inErrorMessage {
  error self.mInstructionLocation : inErrorMessage
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_GOTO shouldNotContinueInSequence
  ?let @string unused inErrorMessage {
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_JUMP shouldNotContinueInSequence
  ?let @string unused inErrorMessage {
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_FOREVER shouldNotContinueInSequence
  ?let @string unused inErrorMessage {
}

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc baseline_analysis
  ?let @baseline_model inPiccoloModel
  ?let @string inSourceFileName {
  let @string sourceFileBaseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
  if sourceFileBaseName != inPiccoloModel.mProgramName.string then
    error inPiccoloModel.mProgramName: "the program name ('" + inPiccoloModel.mProgramName
    + "') should be identical to the file base name '" + sourceFileBaseName + "'"
  end
  var @string listFileContents = ""
#-------------------------------- Analyze Device
  parseDeviceDefinition ( !inPiccoloModel.mDeviceName ?let piccoloDeviceModel )
  switch piccoloDeviceModel.mProcessorType
    case baseline :
    case pic18_60, pic18_80 : error inPiccoloModel.mDeviceName: "a pic18 device is not accepted here : only a baseline device"
    case midrange : error inPiccoloModel.mDeviceName: "a mid-ranfe device is not accepted here : only a baseline device"
  end
#-------------------------------- Config definition
  buildConfig (
    !piccoloDeviceModel.mConfigRegisterMap
    !inPiccoloModel.mConfigDefinitionList
    !?listFileContents
    ?let actualConfigurationMap
  )
#-------------------------------- Build constant map
  var @constantMap constantMap = @()
  var @registerTable registerTable = piccoloDeviceModel.mRegisterTable
#--- Add "ROM_SIZE" constant
#  @lstring romSizeString [new !"ROM_SIZE" !here] ;
#  [!?constantMap insertKey !romSizeString ![piccoloDeviceModel->mRomSize sint]] ;
#--- Add declared constants
  var @stringset usedRegisters = @()
  for (mConstantName mExpression) in  inPiccoloModel.mConstantDefinitionList do
    [mExpression eval !registerTable !constantMap ?let @sint64 result !?usedRegisters]
    if [registerTable hasKey !mConstantName.string] then
      error mConstantName: "'" + mConstantName + "' is already declared as ram register or special register"
    else
      [!?constantMap insertKey !mConstantName !result]
    end
  end
#-------------------------------- Ram definition
  var @ramBankTable ramBank = piccoloDeviceModel.mRamBankTable
  analyze_ram_sections (
    !"DECLARED VARIABLES"
    !inPiccoloModel.mRamDefinitionList
    !constantMap
    !?usedRegisters
    !?ramBank
    !piccoloDeviceModel.mRegisterTable
    !?listFileContents
    !?registerTable
    ?let @declaredByteMap declaredByteMap
  )
#-------------------------------- Build routine map
  var routineMap =@baselineRoutineMap ()
  for (mRoutineName mPage mIsNoReturn * *) in  inPiccoloModel.mRoutineDefinitionList do
    [!?routineMap insertKey !mRoutineName !mIsNoReturn !mPage]
  end
#-------------------------------- Print constant map
  if [option piccolo_options.ouputListingFile value] then
    print_constant_definition (
      !constantMap
      !?listFileContents
    )
  end
#-------------------------------- Check the "main" routine is declared
  if [routineMap hasKey !"main"] then
    [routineMap searchKey !@lstring { !"main" !@location.here} ?let @bool isNoReturn ?let @luint page]
    if not isNoReturn then
      error [routineMap locationForKey !"main"] :"the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main page 0\""
    end
    if page.uint != 0 then
      error page :"the \"main\" should be declared in page 0: \"noreturn main page 0\""
    end
  else
    error inPiccoloModel.mEndOfProgram: "the program should declare the \"main\" routine"
  end
#-------------------------------- Check page routine specification is compatible with device
  var @bool needsToSavePCLATH = false
  let @uint totalPageCount = (piccoloDeviceModel.mRomSize.uint + 511) / 512
  for (* mPage * * *) in  inPiccoloModel.mRoutineDefinitionList do
    if mPage.uint > 0 then
      needsToSavePCLATH = true
    end
    if mPage.uint >= totalPageCount then
      error mPage:"invalid value ("+ mPage.uint + "); the device has " + totalPageCount + " 512 word page(s) on rom"
    end
  end
#-------------------------------- Order routines to place "main" routine first
  var sortedRoutineDefinitionList =@baseline_routineDefinitionList ()
  for (mRoutineName mPage mIsNoReturn mInstructionList mEndOfRoutineLocation) in  inPiccoloModel.mRoutineDefinitionList do
    if mRoutineName.string == "main" then
      [!?sortedRoutineDefinitionList insertAtIndex 
        !mRoutineName
        !mPage
        !mIsNoReturn
        !mInstructionList
        !mEndOfRoutineLocation
        !0
      ]
    else
      sortedRoutineDefinitionList += 
        !mRoutineName
        !mPage
        !mIsNoReturn
        !mInstructionList
        !mEndOfRoutineLocation
    end
  end
#-------------------------------- Check and translate routines
  var intermediateInstructionList =@baseline_intermediate_instructionList ()
  if @uint. errorCount == 0 then
    var @uint currentPage = 0
    var @uint localLabelIndex = 0
    loop( totalPageCount) while currentPage < totalPageCount do
      var @bool pseudo_PAGE_generated = false
      for (mRoutineName mPage mIsNoReturn mInstructionList *) in  sortedRoutineDefinitionList do
        if mPage.uint == currentPage then
        #---
          if not pseudo_PAGE_generated then
            pseudo_PAGE_generated = true
            intermediateInstructionList += !@baseline_intermediate_pseudo_PAGE { !currentPage}
          end
        #---
          let @routineKind routineKind
          if mIsNoReturn then
            routineKind = @routineKind. noReturnRoutine
          #--- Check does not continue in sequence
            if [mInstructionList count] == 0 then
              error mRoutineName : "a noreturn routine should terminate by a GOTO or a FOREVER loop"
            else
             [mInstructionList last ?let @baseline_instruction lastInstruction]
             [lastInstruction shouldNotContinueInSequence !"a noreturn routine should terminate by a GOTO or a FOREVER loop"]
            end
          else
            routineKind = @routineKind. regularRoutine
          #--- Check instruction list terminates by a MOVLW instruction
            if [mInstructionList count] == 0 then
              error mRoutineName : "a baseline routine must end with a MOVLW instruction"
            else
             [mInstructionList last ?let @baseline_instruction lastInstruction]
             [lastInstruction shouldTerminateWithMOVLW !"the last routine instruction should be MOVLW"]
            end
          end
        #--- Check and translate instructions
          if mRoutineName.string != "main" then
            intermediateInstructionList += !@baseline_intermediate_pseudo_BEGIN_ROUTINE { !mRoutineName !not mIsNoReturn}
            intermediateInstructionList += !@baseline_intermediate_pseudo_LABEL { !mRoutineName}
          end
          handleBaselineInstructionList (
            !currentPage
            !mInstructionList
            !routineMap
            !registerTable
            !constantMap
            !?localLabelIndex
            !?intermediateInstructionList
            !?listFileContents
            ?let @bool continuesInSequence
            !routineKind
            !not mIsNoReturn # Last instruction should be RETLW ?
            !?usedRegisters
          )
          intermediateInstructionList += !@baseline_intermediate_pseudo_END_ROUTINE { !mRoutineName !currentPage}
          if mIsNoReturn & continuesInSequence then
            error mRoutineName:"execution should not reach the end of a \"noreturn\" routine"
          end
        end
      end
      currentPage += 1
    end
  end
#-------------------------------- Compute used routine set
  let @stringset usedRoutineSet = baseline_computeUsedRoutines (
    !inPiccoloModel.mRoutineDefinitionList
  )
  var declaredRoutineMap =@baseline_declaredRoutineMap ()
  for (mRoutineName * * * *) in  inPiccoloModel.mRoutineDefinitionList do
    [!?declaredRoutineMap insertKey !mRoutineName]
  end
#-------------------------------- Check used routines
  var unusedRoutineDeclarationUnicity =@stringset ()
  for (mValue) in  inPiccoloModel.mUnusedRoutineList do
    if not [declaredRoutineMap hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' routine is not declared"
    elsif [unusedRoutineDeclarationUnicity hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is already declared as unused"
    elsif [usedRoutineSet hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is declared as unused, but is used"
    end
    unusedRoutineDeclarationUnicity += !mValue.string
  end
  for (lkey) in  declaredRoutineMap do
    if (not [usedRoutineSet hasKey !lkey.string]) & (not [unusedRoutineDeclarationUnicity hasKey !lkey.string]) then
      warning lkey : "the '" + lkey + "' routine is unused"
    end
  end
#----------------------------------------------------------- Check declared bytes are used
  var unusedDeclarationUnicity =@stringset ()
  for (mValue) in  inPiccoloModel.mUnusedRegisterList do
    if not [registerTable hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' byte is not declared"
    elsif [unusedDeclarationUnicity hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' byte is already declared as unused"
    elsif [usedRegisters hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' byte is declared as unused, but is used"
    end
    unusedDeclarationUnicity += !mValue.string
  end
  for (lkey) in  declaredByteMap do
    if (not [usedRegisters hasKey !lkey.string]) & (not [unusedDeclarationUnicity hasKey !lkey.string]) then
      warning lkey : "the '" + lkey + "' byte is unused"
    end
  end
#-------------------------------- Print intermediate Instruction List
  if (@uint. errorCount == 0) & [option piccolo_options.ouputListingFile value] then
    listFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
    listFileContents += "*" + ["INTERMEDIATE INSTRUCTION LIST" stringByLeftAndRightPadding !117 !' '] + "*\n"
    listFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    listFileContents += "Generated intermediate code:\n"
    listFileContents += " Line Length Mnemonic\n"
    var @uint currentAddress = 0
    for (mInstruction) in  intermediateInstructionList do(idx)
      listFileContents += [[idx string] stringByLeftPadding !5 !' '] + " "
      listFileContents += [[[mInstruction length] string] stringByLeftPadding !6 !' '] + " "
      [mInstruction print !?listFileContents]
      listFileContents += "\n"
      [mInstruction setCurrentAddress !?currentAddress]
    end
    listFileContents += "\n"
    listFileContents += "Code size without optimization: " + [currentAddress string] + " words.\n\n"
  end
#-------------------------------- Perform Code Optimization
  if (@uint. errorCount == 0) & [option piccolo_options.performOptimizations value] then
    perform_baseline_optimizations ( !?intermediateInstructionList !?listFileContents )
  end
#-------------------------------- Build assembly instruction list
  initCodeGenerator ()
  let sr = @registerExpression {
    ! @{!"STATUS" !.here}
    !@immediatInteger {! @{!0 !.here}}
    !.here
  }
  [sr resolveBaselineAccess
    !registerTable
    !constantMap
    ?let @baseline_intermediate_registerExpression statusRegister
    ?let @bitSliceTable statusRegisterBitSliceTable
    !?usedRegisters
  ]
  var assemblyInstructionList =@baseline_assembly_instructionList ()
  if @uint.errorCount == 0 then
    build_baseline_assembly_code (
      !intermediateInstructionList
      !actualConfigurationMap
      !statusRegister
      !statusRegisterBitSliceTable
      !?assemblyInstructionList
    )
  end
#-------------------------------- Build binary code
  if @uint. errorCount == 0 then
    listFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
    listFileContents += "*" + ["GENERATED CODE" stringByLeftAndRightPadding !117 !' '] + "*\n"
    listFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    listFileContents += "Address Code Mnemonic\n"
    build_baseline_binary_code (
      !assemblyInstructionList
      !piccoloDeviceModel.mRomSize.uint
      !?listFileContents
      ?let @uint unused usedROMsize
    )
  end
#-------------------------------- Listing file
  if [option piccolo_options.ouputListingFile value] then
    let @string listFile = [inSourceFileName stringByDeletingPathExtension] + ".list"
    [listFileContents writeToFileWhenDifferentContents !listFile ?*]
  end
#-------------------------------- Code generation
#--- If no error, generate object file(s)
  if @uint. errorCount == 0 then
#  #--- Generate hex file
#    @uint usedROMsize ;
#    build_midrange_intermediate_binary_code
#      !registerTable
#      ![[piccoloDeviceModel mBankCount] uint]
#      !generatedInstructionList
#      ![[piccoloDeviceModel mRomSize] uint]
#      !actualConfigurationMap
#      ?usedROMsize
#    ;
    getGeneratedContents (?var @string contents)
    var @string destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".hex"
    [contents writeToFileWhenDifferentContents !destinationFile ?*]
    if [option piccolo_options.output_C_Array value] then
      let @string baseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
      get_C_ArrayImplementation ( !baseName ?contents )
      destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".c"
      [contents writeToFileWhenDifferentContents !destinationFile ?*]
      get_C_ArrayHeader ( !baseName ?contents )
      destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".h"
      [contents writeToFileWhenDifferentContents !destinationFile ?*]
    end
#  #--- Write infos (if verbose mode)
#    if [option.verbose_output value] then
#      @string verboseMessage := "  ROM size: " . [[[piccoloDeviceModel mRomSize] uint] string] . " words;" ;
#      verboseMessage .= " used: " . [usedROMsize string] . " words (" ;
#      verboseMessage .= [(usedROMsize * 100) / [[piccoloDeviceModel mRomSize] uint] string] . "%).\n" ;
#      foreach ramBank do
#        @uint bankSize := mLastAddressPlusOne - mFirstAddress ;
#        @uint usedSize := mFirstFreeAddress - mFirstAddress ;
#        verboseMessage .= "  RAM bank '" . lkey . "': " ;
#        verboseMessage .= [bankSize string] . " bytes, used " ;
#        verboseMessage .= [usedSize string] . " bytes (" ;
#        verboseMessage .= [(usedSize * 100) / bankSize string] . "%).\n" ;
#      end foreach ;
#      message verboseMessage ;
#    end if ;
  #--- Generate asm file, if corresponding option enabled
    if [option piccolo_options.generateAssembly value] then
      var @string assemblyCode = "  processor " + inPiccoloModel.mDeviceName + "\n\n"
      for (mInstruction) in  assemblyInstructionList do
        [mInstruction print !?assemblyCode]
        assemblyCode += "\n"
      end
      assemblyCode += "\n;--- Registers\n"
      for (lkey mRegisterAddressList * * * *) in  registerTable do
        [mRegisterAddressList first ?let @uint address]
        assemblyCode += lkey.string + " EQU " + [address hexString] + "\n"
      end
      assemblyCode += "W EQU 0\n\n"
      assemblyCode += ";--- Configuration\n"
      for (* mRegisterAddress mRegisterValue) in  actualConfigurationMap do
        assemblyCode += "  __config " + [mRegisterAddress hexString] + ", " + [mRegisterValue & 255 hexString] + "\n"
      end
      assemblyCode += "\n  END\n"
      let @string asmDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".asm"
      [assemblyCode writeToFileWhenDifferentContents !asmDestinationFile ?*]
    end
  else # There are errors : delete hex and asm files
    let @string hexDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".hex"
    if [hexDestinationFile fileExists] then
      [@string deleteFile !hexDestinationFile]
    end
    let @string asmDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".asm"
    if [asmDestinationFile fileExists] then
      [@string deleteFile !asmDestinationFile]
    end
  end
}

#----------------------------------------------------*

