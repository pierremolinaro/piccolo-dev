

#----------------------------------------------------------------------------*

map @baselineRoutineMap {
  public var @bool mIsNoReturn
  public var @luint mPage
  insert insertKey error message "the '%K' routine is already declared in %L"
  search searchKey error message "the '%K' routine is not declared"
}

#----------------------------------------------------*

method @registerExpression resolveBaselineAccess
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@baseline_intermediate_registerExpression outIntermediateRegisterDescription
  !@bitSliceTable outBitSliceTable
  ?!@stringset ioUsedRegisters
{
  [self.mOffset eval !inRegisterTable !inConstantMap ?let @sint64 offset !?ioUsedRegisters]
  ioUsedRegisters += !self.mRegisterName.string
#--- Build assembly string
  var @string assemblyString = self.mRegisterName.string
  if offset > 0 then
    assemblyString += " + " + [[offset uint] hexString]
  end
#--- Find register
  [inRegisterTable searchKey
    !self.mRegisterName
    ?let @uintlist registerAddressList
    ?*
    ?outBitSliceTable
    ?*
    ?let protection
  ]
  [inRegisterTable checkPrivateAccess !self.mRegisterName !write:true !protection]
#--- Accept if one address is <= 0x1F
  var @uint registerAddress = 0
  if [registerAddressList count] > 0 then
    var @bool found = false
    for (mValue) in  registerAddressList while not found do
      registerAddress = mValue
      found = mValue <= 0x1F
    end
    if not found then
      error self.mRegisterName : "the register cannot be accessed directly; use indirect addressing throught FSR register"
    end
  end
#---
  outIntermediateRegisterDescription = @baseline_intermediate_registerExpression.init {
    !assemblyString
    !registerAddress + [offset uint]
  }
}

#----------------------------------------------------------------------------*

proc handleBaselineInstructionList
  ?let @uint inCurrentPage
  ?let @baseline_instructionList inInstructionList
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  !@bool outContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  outContinuesInSequence = true
  for (mInstruction) in  inInstructionList do(idx)
    if not outContinuesInSequence then
      error mInstruction.mInstructionLocation : "Unreachable code"
      outContinuesInSequence = true
    end
    [mInstruction build_baseline_intermediate_instructionList
      !inCurrentPage
      !inRoutineMap
      !inRegisterTable
      !inConstantMap
      !?ioLocalLabelIndex
      !?ioGeneratedInstructionList
      !?ioListFileContents
      !?outContinuesInSequence
      !inRoutineKind
      !if (idx + 1) == [inInstructionList count] then inLastInstructionShouldReturn else false end
      !?ioUsedRegisters
    ]
  end
}

#----------------------------------------------------------------------------*

abstract method @baseline_instruction build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters

#----------------------------------------------------------------------------*

override method @baseline_instruction_WO_OPERAND build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "the last routine instruction should be MOVLW"
  end
  ioGeneratedInstructionList += !@baseline_intermediate_WO_OPERAND.init { !self.mInstructionLocation !self.mInstruction}
}

#----------------------------------------------------------------------------*

func %once acceptableTRISoperand -> @stringset set {
  set = @stringset. emptySet
  set += !"GPIO"
  set += !"PORTA"
  set += !"PORTB"
  set += !"PORTC"
  set += !"PORTD"
  set += !"PORTE"
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_TRIS build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction but should be MOVLW"
  end
#---
  if not [acceptableTRISoperand () hasKey !self.mOperand.string] then
    var @string s = ""
    for (key) in  acceptableTRISoperand ()
    do s += key
    between s += ", "    
    end
    error self.mInstructionLocation : "invalid TRIS operand; accepted operand are: " + s
  end
#---
  [inRegisterTable searchKey !self.mOperand ?let @uintlist registerAddressList ?3* ?let protection]
  [inRegisterTable checkPrivateAccess !self.mOperand !write:true !protection]
  [registerAddressList first ?let @uint opcode]
#---
  ioGeneratedInstructionList += !@baseline_intermediate_TRIS.init { !self.mInstructionLocation !self.mOperand !opcode}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_MNOP build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_MNOP.init { !self.mInstructionLocation !self.mOccurrenceFactor}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_literalOperation build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  if inLastInstructionShouldReturn & (self.mLiteralInstruction != @baseline_literal_instruction_opcode. MOVLW) then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [self.mImmediatExpression eval !inRegisterTable !inConstantMap ?let @sint64 immediatValue !?ioUsedRegisters]
#---
   if (immediatValue > 255) | (immediatValue < -128) then
     error self.mInstructionLocation:"immediate value is evaluated as " + immediatValue + " (should be betwween -128 and 255)"
   end
#---  
  if inLastInstructionShouldReturn then
    ioGeneratedInstructionList += !@baseline_intermediate_instruction_literalOperation.init {
      !self.mInstructionLocation
      !@baseline_literal_instruction_opcode. RETLW
      ![immediatValue & 0x000000FF uint]}
  else
    ioGeneratedInstructionList += !@baseline_intermediate_instruction_literalOperation.init {
      !self.mInstructionLocation
      !self.mLiteralInstruction
      ![immediatValue & 0x000000FF uint]}
  end
}


#----------------------------------------------------------------------------*

override method @baseline_instruction_FD build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable unused bitSliceTable
    !?ioUsedRegisters
  ]
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_FD.init {
    !self.mInstructionLocation
    !self.mInstruction_FD_base_code
    !intermediateRegisterDescription
    !self.m_W_isDestination}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_CALL build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
#--- Check instruction
  [inRoutineMap searchKey !self.mTargetLabel ?let @bool isNoReturn ?let @luint targetPage]
  if isNoReturn then
    error self.mTargetLabel:"a \"noreturn\" routine should be called with a GOTO or a JUMP instruction"
  end
  if inCurrentPage != targetPage.uint then
    error self.mTargetLabel:"for an inter-page regular routine call, use a JSR instruction"
  end
#---
  if inLastInstructionShouldReturn then
    ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
      !self.mInstructionLocation
      !self.mTargetLabel}
  else
    ioGeneratedInstructionList += !@baseline_intermediate_CALL.init {
      !self.mInstructionLocation
      !self.mTargetLabel}
  end
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_JSR build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
#--- Check instruction
  [inRoutineMap searchKey !self.mTargetLabel ?let @bool isNoReturn ?let @luint targetPage]
  if isNoReturn then
    error self.mTargetLabel:"a \"noreturn\" routine should be called with a GOTO or a JUMP instruction"
  end
#---
  if inLastInstructionShouldReturn then
    ioGeneratedInstructionList += !@baseline_intermediate_JUMP.init {
      !self.mInstructionLocation
      !self.mTargetLabel
      !inCurrentPage
      !targetPage.uint}
  else
    ioGeneratedInstructionList += !@baseline_intermediate_JSR.init {
      !self.mInstructionLocation
      !self.mTargetLabel
      !inCurrentPage
      !targetPage.uint}
  end
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_F build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?*
    !?ioUsedRegisters
  ]
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_F.init {
    !self.mInstructionLocation
    !self.mFAinstruction
    !intermediateRegisterDescription}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_FB build_baseline_intermediate_instructionList
  ?let @uint unused inCurrentPage
  ?let @baselineRoutineMap unused inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable bitSliceTable
    !?ioUsedRegisters
  ]
  [self.mBitNumber getBitNumber
    !inRegisterTable
    !inConstantMap
    !?ioUsedRegisters
    !bitSliceTable
    ?let @uint bitNumber
  ]
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_FB.init {
    !self.mInstructionLocation
    !self.mBitOrientedOp
    !intermediateRegisterDescription
    !bitNumber
  }
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_GOTO build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [inRoutineMap searchKey !self.mTargetLabel ?let @bool isNoReturn ?let @luint targetPage]
  if not isNoReturn then
    error self.mTargetLabel:"a regular routine should be called with a CALL or a JSR instruction"
  end
  if inCurrentPage != targetPage.uint then
    error self.mTargetLabel:"for an inter-page noreturn routine call, use a JUMP instruction"
  end
  ioContinuesInSequence = false
#---
  ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
    !self.mInstructionLocation
    !self.mTargetLabel}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_JUMP build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string unused ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind unused inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset unused ioUsedRegisters {
  if inLastInstructionShouldReturn then
    error self.mInstructionLocation : "this instruction is the last routine instruction and should be MOVLW"
  end
  [inRoutineMap searchKey !self.mTargetLabel ?let @bool isNoReturn ?let @luint targetPage]
  if not isNoReturn then
    error self.mTargetLabel:"a regular routine should be called with a CALL or a JSR instruction"
  end
  ioContinuesInSequence = false
#---
  ioGeneratedInstructionList += !@baseline_intermediate_JUMP.init {
    !self.mInstructionLocation
    !self.mTargetLabel
    !inCurrentPage
    !targetPage.uint}
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_IF_BitTest build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable bitSliceTable
    !?ioUsedRegisters
  ]
  [self.mBitNumber getBitNumber
    !inRegisterTable
    !inConstantMap
    !?ioUsedRegisters
    !bitSliceTable
    ?let bitNumber
  ]
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_BitTestSkip.init {
    !self.mInstructionLocation
    !self.mSkipIfSet
    !intermediateRegisterDescription
    !bitNumber}
#--- Append Instruction
  var @bool unusedContinuesInSequence = true
  [self.mInstruction build_baseline_intermediate_instructionList
    !inCurrentPage
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    !?unusedContinuesInSequence
    !inRoutineKind
    !inLastInstructionShouldReturn
    !?ioUsedRegisters
  ]
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_IF_IncDec build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool unused ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
#---
  let @baseline_instruction_FD_base_code baseCode
  if self.mIncrement then
    baseCode = @baseline_instruction_FD_base_code. INCFSZ
  else
    baseCode = @baseline_instruction_FD_base_code. DECFSZ
  end
#---
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable unused bitSliceTable
    !?ioUsedRegisters
  ]
#---
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_FD.init {
    !self.mInstructionLocation
    !baseCode
    !intermediateRegisterDescription
    !self.m_W_isDestination}
#---
  var @bool unusedContinuesInSequence = true
  [self.mInstruction build_baseline_intermediate_instructionList
    !inCurrentPage
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    !?unusedContinuesInSequence
    !inRoutineKind
    !inLastInstructionShouldReturn
    !?ioUsedRegisters
  ]
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_FOREVER build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint  ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool unused inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
  switch inRoutineKind
  case regularRoutine :
    error self.mInstructionLocation:"a regular routine does not accept the \"forever\" instruction"
  case noReturnRoutine : # ok
  case interruptRoutine :
    error self.mInstructionLocation:"an interrupt routine does not accept the \"forever\" instruction"
  end
#--- Check instruction list does not change bank
  let @string label0 = ".L" + [ioLocalLabelIndex string] 
  ioLocalLabelIndex += 1
  ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !label0 !self.mInstructionLocation}}
  handleBaselineInstructionList (
    !inCurrentPage
    !self.mInstructionList 
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    ?ioContinuesInSequence
    !inRoutineKind
    !false # Instruction list does not need to end with MOVLW
    !?ioUsedRegisters
  )
#--- Generate GOTO to the beginning of the loop
  ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
    !self.mInstructionLocation
    !@lstring.init { !label0 !self.mInstructionLocation}}
#---
  ioContinuesInSequence = false
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_STATIC_REPEAT build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint  ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool unused inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters
{
#--- Solve immediat expression
  [self.mLowerBoundExpression eval !inRegisterTable !inConstantMap ?let @sint64 lowerBound !?ioUsedRegisters]
  [self.mUpperBoundExpression eval !inRegisterTable !inConstantMap ?let @sint64 upperBound !?ioUsedRegisters]
#---
  if lowerBound > upperBound then
    error self.mInstructionLocation: "lower bound (" + lowerBound + ") greater then upper bound (" + upperBound + ")"
  elsif (upperBound - lowerBound) > 0xFFFF then
    error self.mInstructionLocation:"repeat count (" + (upperBound - lowerBound) + ") too large (should be <= 0xFFFF)"
  end
#--- First pass
  var tempConstantMap = inConstantMap
  [!?tempConstantMap insertKey !self.mConstantName !lowerBound]
  handleBaselineInstructionList (
    !inCurrentPage
    !self.mInstructionList 
    !inRoutineMap
    !inRegisterTable
    !tempConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    ?ioContinuesInSequence
    !inRoutineKind
    !false # Instruction list does not need to end with MOVLW
    !?ioUsedRegisters
  )
  if not ioContinuesInSequence then
    error self.mEndOfInstruction:"enclosed instruction list contains an endless loop"
  end
#--- Other passes
  var idx = lowerBound + 1
  loop ([upperBound - lowerBound + 1 uint]) while (idx <= upperBound) && (@uint.errorCount == 0) do
    var constantMap = inConstantMap
    [!?constantMap insertKey !self.mConstantName !idx]
    handleBaselineInstructionList (
      !inCurrentPage
      !self.mInstructionList 
      !inRoutineMap
      !inRegisterTable
      !constantMap
      !?ioLocalLabelIndex
      !?ioGeneratedInstructionList
      !?ioListFileContents
      ?ioContinuesInSequence
      !inRoutineKind
      !false # Instruction list does not need to end with MOVLW
      !?ioUsedRegisters
    )
    idx += 1
  end
}

#----------------------------------------------------------------------------*

override method @baseline_instruction_do_while build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
#--- Generate label
  let @string labelInstructionBegin = ".L" + [ioLocalLabelIndex string] ; ioLocalLabelIndex += 1
#--- Define label
  ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !labelInstructionBegin !self.mInstructionLocation}}
#--- Repeated instructions
  handleBaselineInstructionList (
    !inCurrentPage
    !self.mRepeatedInstructionList
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    ?ioContinuesInSequence
    !inRoutineKind
    !inLastInstructionShouldReturn
    !?ioUsedRegisters
  )
#--- while parts
  for (mCondition mInstructionList *) in  self.mWhilePartList do
    if [mInstructionList count] == 0 then
      [mCondition build_intermediate_condition_instructions
        !inCurrentPage
        !inRegisterTable
        !inConstantMap
        !?ioLocalLabelIndex
        !false
        !self.mInstructionLocation
        !labelInstructionBegin
        !?ioGeneratedInstructionList
        !?ioUsedRegisters
      ]
    else
      let @string nextBranchLabel = ".L" + [ioLocalLabelIndex string] ; ioLocalLabelIndex += 1
      [mCondition build_intermediate_condition_instructions
        !inCurrentPage
        !inRegisterTable
        !inConstantMap
        !?ioLocalLabelIndex
        !true
        !self.mInstructionLocation
        !nextBranchLabel
        !?ioGeneratedInstructionList
        !?ioUsedRegisters
      ]
      handleBaselineInstructionList (
        !inCurrentPage
        !mInstructionList
        !inRoutineMap
        !inRegisterTable
        !inConstantMap
        !?ioLocalLabelIndex
        !?ioGeneratedInstructionList
        !?ioListFileContents
        ?ioContinuesInSequence
        !inRoutineKind
        !inLastInstructionShouldReturn
        !?ioUsedRegisters
      )
      ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
        !self.mInstructionLocation
        !@lstring.init { !labelInstructionBegin !self.mInstructionLocation}}
      ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !nextBranchLabel !self.mInstructionLocation}}
    end
  end
}

#-------------------------------------------------------------------------------*

override method @baseline_instruction_structured_if build_baseline_intermediate_instructionList
  ?let @uint inCurrentPage
  ?let @baselineRoutineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents
  ?!@bool ioContinuesInSequence
  ?let @routineKind inRoutineKind
  ?let @bool inLastInstructionShouldReturn
  ?!@stringset ioUsedRegisters {
#---
  let @string label_nextCondition = ".L" + [ioLocalLabelIndex string] ; ioLocalLabelIndex += 1
  let @string label_endOfIfinstruction = ".L" + [ioLocalLabelIndex string] ; ioLocalLabelIndex += 1
#--- Translate condition
  [self.mIfCondition build_intermediate_condition_instructions
    !inCurrentPage
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !true
    !self.mInstructionLocation
    !label_nextCondition
    !?ioGeneratedInstructionList
    !?ioUsedRegisters
  ]
#--- 'then' instructions
  handleBaselineInstructionList (
    !inCurrentPage
    !self.mThenInstructionList
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    ?let @bool thenContinuesInSequence
    !inRoutineKind
    !inLastInstructionShouldReturn
    !?ioUsedRegisters
  )
#--- 'else' instructions
  if ([self.mElseInstructionList count] > 0) & not inLastInstructionShouldReturn then
    ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
      !self.mInstructionLocation
      !@lstring.init { !label_endOfIfinstruction !self.mInstructionLocation}}
  end
  ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !label_nextCondition !self.mInstructionLocation}}
  handleBaselineInstructionList (
    !inCurrentPage
    !self.mElseInstructionList
    !inRoutineMap
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioListFileContents
    ?let @bool elseContinuesInSequence
    !inRoutineKind
    !inLastInstructionShouldReturn
    !?ioUsedRegisters
  )
  if ([self.mElseInstructionList count] > 0) & not inLastInstructionShouldReturn then
    ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !label_endOfIfinstruction !self.mInstructionLocation}}
  end
#---
  ioContinuesInSequence = thenContinuesInSequence | elseContinuesInSequence
}

#-------------------------------------------------------------------------------*
#                                                                               *
#   B U I L D    I P I C    C O N D I T I O N    I N S T R U C T I O N S        *
#                                                                               *
#-------------------------------------------------------------------------------*

abstract method @baseline_conditionExpression build_intermediate_condition_instructions
  ?let @uint inCurrentPage
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?let @bool inComplementaryBranch
  ?let @location inInstructionLocation
  ?let @string inTargetLabel
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@stringset ioUsedRegisters

#----------------------------------------------------*

override method @baseline_incDecRegisterInCondition build_intermediate_condition_instructions
  ?let @uint unused inCurrentPage
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?let @bool inComplementaryBranch
  ?let @location inInstructionLocation
  ?let @string inTargetLabel
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@stringset ioUsedRegisters {
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable unused bitSliceTable
    !?ioUsedRegisters
  ]
#---
  ioGeneratedInstructionList += !@baseline_intermediate_incDecRegisterInCondition.init {
    !inInstructionLocation
    !intermediateRegisterDescription
    !inTargetLabel
    !self.mIncrement
    !self.m_W_isDestination
    !self.mBranchIfZero ^ inComplementaryBranch}
}

#----------------------------------------------------*

override method @baseline_negateCondition build_intermediate_condition_instructions
  ?let @uint inCurrentPage
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?let @bool inComplementaryBranch
  ?let @location inInstructionLocation
  ?let @string inTargetLabel
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@stringset ioUsedRegisters {
  [self.mCondition build_intermediate_condition_instructions
    !inCurrentPage
    !inRegisterTable
    !inConstantMap
    !?ioLocalLabelIndex
    !not inComplementaryBranch
    !inInstructionLocation
    !inTargetLabel
    !?ioGeneratedInstructionList
    !?ioUsedRegisters
  ]
}

#----------------------------------------------------*

override method @baseline_andCondition build_intermediate_condition_instructions
  ?let @uint inCurrentPage
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint ioLocalLabelIndex
  ?let @bool inComplementaryBranch
  ?let @location inInstructionLocation
  ?let @string inTargetLabel
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@stringset ioUsedRegisters {
  if inComplementaryBranch then
    [self.mLeftExpression build_intermediate_condition_instructions
      !inCurrentPage
      !inRegisterTable
      !inConstantMap
      !?ioLocalLabelIndex
      !true
      !inInstructionLocation
      !inTargetLabel
      !?ioGeneratedInstructionList
      !?ioUsedRegisters
    ]
    [self.mRightExpression build_intermediate_condition_instructions
      !inCurrentPage
      !inRegisterTable
      !inConstantMap
      !?ioLocalLabelIndex
      !true
      !inInstructionLocation
      !inTargetLabel
      !?ioGeneratedInstructionList
      !?ioUsedRegisters
    ]
  else
    let @string label0 = ".L" + [ioLocalLabelIndex string] ; ioLocalLabelIndex += 1
    [self.mLeftExpression build_intermediate_condition_instructions
      !inCurrentPage
      !inRegisterTable
      !inConstantMap
      !?ioLocalLabelIndex
      !true
      !inInstructionLocation
      !label0
      !?ioGeneratedInstructionList
      !?ioUsedRegisters
    ]
    [self.mRightExpression build_intermediate_condition_instructions
      !inCurrentPage
      !inRegisterTable
      !inConstantMap
      !?ioLocalLabelIndex
      !false
      !inInstructionLocation
      !inTargetLabel
      !?ioGeneratedInstructionList
      !?ioUsedRegisters
    ]
    ioGeneratedInstructionList += !@baseline_intermediate_pseudo_LABEL.init { !@lstring.init { !label0 !inInstructionLocation}}
  end
}

#----------------------------------------------------*

override method @baseline_bitTest_in_structured_if_condition build_intermediate_condition_instructions
  ?let @uint unused inCurrentPage
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@uint unused ioLocalLabelIndex
  ?let @bool inComplementaryBranch
  ?let @location inInstructionLocation
  ?let @string inTargetLabel
  ?!@baseline_intermediate_instructionList ioGeneratedInstructionList
  ?!@stringset ioUsedRegisters
{
  [self.mRegisterExpression resolveBaselineAccess
    !inRegisterTable
    !inConstantMap
    ?let @baseline_intermediate_registerExpression intermediateRegisterDescription
    ?let @bitSliceTable bitSliceTable
    !?ioUsedRegisters
  ]
  [self.mBitNumber getBitNumber
    !inRegisterTable
    !inConstantMap
    !?ioUsedRegisters
    !bitSliceTable
    ?let bitNumber
  ]
  ioGeneratedInstructionList += !@baseline_intermediate_instruction_BitTestSkip.init {
    !inInstructionLocation
    !inComplementaryBranch # mBTFSSinstruction ^ inComplementaryBranch
    !intermediateRegisterDescription
    !bitNumber
  }
  ioGeneratedInstructionList += !@baseline_intermediate_GOTO.init {
    !inInstructionLocation
    !@lstring.init {!inTargetLabel !inInstructionLocation}
  }
}

#-------------------------------------------------------------------------------*

