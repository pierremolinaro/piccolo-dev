syntax communs (piccolo_lexique) {

#----------------------------------------------------*

rule <configuration_definition>
  ?!@configDefinitionList ioConfigDefinitionList
{
  $configuration$
  let defLocation = @location.here
  var settingList =@configSettingList ()
  ${$
  repeat
  while
    $identifier$ ?let @lstring settingName
    $:$
    let @lstring settingValue
    select
      $identifier$ ? settingValue
    or
      $literal_string$ ? settingValue
    end
    settingList += !settingName !settingValue
  end
  $}$
  ioConfigDefinitionList += !defLocation !settingList
}

#----------------------------------------------------*

rule <declaration_in_ram> !@declarationInRam outDeclaration {
  let @registerProtection protection
  select
    protection = .publicRegister
  or
    $protected$
    protection = .protectedRegister
  or
    $private$
    protection = .privateRegister
  end
  $byte$
  $identifier$ ?let @lstring name indexing variableDeclaration
  let @immediatExpression sizeExpression
  select
    sizeExpression = @immediatInteger.init {!.init {!1 !.here}}
  or
    $[$
    <immediate_expression> ?sizeExpression
    $]$
  end
  var bitSliceTable = @bitSliceTable ()
  var @string bitDefinitionString
  select
    bitDefinitionString = ""
  or
    $<$
    bitDefinitionString = " <"
    var @sint sliceIndex = 8
    repeat
     select
        var @uint sliceWidth = 0 # Means undefined
        repeat
          var @uint sliceBase = 0
          if sliceIndex >= 0 then
            sliceBase = [sliceIndex uint]
          end
          $identifier$ ?let @lstring sliceName
          select
            if (sliceWidth != 0) & (sliceWidth != 1) then
              error sliceName:"a slice of 1 bit is expected for '" + sliceName + "'" 
            end
            sliceWidth = 1
            bitDefinitionString += sliceName.string 
          or
            $[$
            $integer$ ?let @luint sliceSize
            if (sliceWidth != 0) & (sliceWidth != sliceSize.uint) then
              error sliceName:"a slice of " + [sliceWidth string] + " bits is expected for '" + sliceName + "'" 
            end
            sliceWidth = sliceSize.uint
            sliceBase = sliceBase + 1 - sliceSize.uint
            bitDefinitionString += sliceName.string + "[" + [sliceSize.uint string] + "]" 
            $]$
          end
          var @uint base = 0
          if sliceIndex >= [sliceWidth sint] then
            base = [sliceIndex uint] - sliceWidth
          end
          [!?bitSliceTable insertKey !sliceName !base !sliceWidth]
        while
          $/$
          bitDefinitionString += "/"
        end
        sliceIndex = sliceIndex - [sliceWidth sint]
      or
        $-$
        bitDefinitionString += "-"
        sliceIndex -= 1
      or
        $integer$ ?let bitCount
        if bitCount.uint == 0 then
          error bitCount.location: "the bit count should be > 0"
        end
        for * in 0 ..< bitCount.uint
          do bitDefinitionString += "-"
          between bitDefinitionString += ", "
        end
        sliceIndex = sliceIndex - [bitCount.uint sint]
      end
    while
      $,$
      bitDefinitionString += ", " 
    end
    if sliceIndex != 0 then
      error name:"Incorrect bit definition for register '" + name + "': " + [8 - sliceIndex string] + " bits (s) are defined, instead of 8"
    end
    $>$
    bitDefinitionString += ">"
  end
  outDeclaration = @byteDeclarationInRam.init {!name !sizeExpression !bitSliceTable !bitDefinitionString !protection}
}

#----------------------------------------------------*

rule <ram_definition>
  ?!@ramDefinitionList ioRamDefinitionList
{
  $ram$
  $identifier$ ?let @lstring bankName
  ${$
  var declarationInRamList =@declarationInRamList ()
  repeat
  while
    <declaration_in_ram> ?let @declarationInRam declaration
    declarationInRamList += !declaration
  end
  ioRamDefinitionList += !bankName !declarationInRamList
  $}$
}

#----------------------------------------------------*

rule <constant_definition>
  ?!@constantDefinitionList ioConstantDefinitionList {
  $const$
  $identifier$ ?let @lstring constantName indexing constantDeclaration
  $=$
  <immediate_expression> ?let @immediatExpression expression
  ioConstantDefinitionList += !constantName !expression
}

#----------------------------------------------------*

rule <immediate_expression> !@immediatExpression outExpression {
  <immediate_bitwise_term> ?outExpression
  repeat
  while
    $|$
    <immediate_bitwise_term> ?let @immediatExpression rightExpression
    outExpression = @immediatOr.init { !outExpression! rightExpression}
  while
    $^$
    <immediate_bitwise_term> ?let @immediatExpression rightExpression
    outExpression = @immediatXor.init { !outExpression! rightExpression}
  end
}

#----------------------------------------------------*

rule  <immediate_bitwise_term> !@immediatExpression outExpression {
  <immediate_bitwise_factor> ?outExpression
  repeat
  while
    $&$
    <immediate_bitwise_factor> ?let rightExpression
    outExpression = @immediatAnd.init { !outExpression! rightExpression}
  end
}

#----------------------------------------------------*

rule <immediate_bitwise_factor> !@immediatExpression outExpression {
  <immediate_term> ?outExpression
  select
  or
    $==$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatEqualTest.init { !outExpression! rightExpression}
  or
    $!=$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatNotEqualTest.init { !outExpression! rightExpression}
  or
    $>=$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatGreaterOrEqualTest.init { !outExpression! rightExpression}
  or
    $<=$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatLowerOrEqualTest.init { !outExpression! rightExpression}
  or
    $>$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatGreaterTest.init { !outExpression! rightExpression}
  or
    $<$ 
    <immediate_term> ?let rightExpression
    outExpression = @immediatLowerTest.init { !outExpression! rightExpression}
  end
}

#----------------------------------------------------*

rule <immediate_term> !@immediatExpression outExpression {
  <immediate_factor> ?outExpression
  repeat
  while
    $+$
    <immediate_factor> ?let rightExpression
    outExpression = @immediatAdd.init { !outExpression! rightExpression}
  while
    $-$
    <immediate_factor> ?let rightExpression
    outExpression = @immediatSub.init { !outExpression! rightExpression}
  while
    $<<$
    <immediate_factor> ?let rightExpression
    outExpression = @immediatLeftShift.init { !outExpression! rightExpression}
  while
    $>>$
    <immediate_factor> ?let rightExpression
    outExpression = @immediatRightShift.init { !outExpression! rightExpression}
  end
}

#----------------------------------------------------*

rule <immediate_factor> !@immediatExpression outExpression {
  <immediate_primary> ?outExpression
  repeat
  while
    $*$
    <immediate_primary> ?let rightExpression
    outExpression = @immediatMul.init { !outExpression! rightExpression}
  while
    $%$
    <immediate_primary> ?let rightExpression
    outExpression = @immediatMod.init { !outExpression! rightExpression}
  while
    $/$
    <immediate_primary> ?let rightExpression
    outExpression = @immediatDiv.init { !outExpression! rightExpression}
  end
}


#----------------------------------------------------*

rule <immediate_primary> !@immediatExpression outExpression {
  select
    $-$
    <immediate_primary> ?let expression
    outExpression = @immediatNegate.init { !expression}
  or
    $~$
    <immediate_primary> ?let expression
    outExpression = @immediatComplement.init { !expression}
  or
    $integer$ ?let @luint constant
    outExpression = @immediatInteger.init { !constant}
  or
    $literal_char$ ?let @lchar literalCharValue
    outExpression = @immediatInteger.init { !@luint.init { ![literalCharValue.char uint] !literalCharValue.location}}
  or
    $identifier$ ?let @lstring registerName indexing variableUse
    let @immediatExpression offset
    let @location endOfOffsetExpression
    select
      offset = @immediatInteger.init {!.init {!0 !.here}}
      endOfOffsetExpression = .here
    or
      $[$
      <immediate_expression> ?offset
      endOfOffsetExpression = .here
      $]$
    end
    let registerExpression = @registerExpression.init{
      !registerName
      !offset
      !endOfOffsetExpression
    }
    outExpression = @immediatRegister.init { !registerExpression}
  or
    $($
    <immediate_expression> ?outExpression
    $)$
  or
    $identifier$ ?let @lstring registerName
    $($
    var sliceExpressionList =@immediatSliceExpressionList ()
    repeat
      $identifier$ ?let @lstring sliceName
      $:$
      <immediate_expression> ?let expression
      sliceExpressionList += !sliceName !expression
    while
      $,$
    end
    $)$
    outExpression = @immediatSlice.init {!registerName !sliceExpressionList}
  end
}

#----------------------------------------------------*

rule <register_parsing> !@registerExpression outRegisterExpression {
  $identifier$ ?let @lstring registerName indexing variableUse
  let @immediatExpression offset
  let @location endOfOffsetExpression
  select
    offset = @immediatInteger.init {!.init {!0 !.here}}
    endOfOffsetExpression = .here
  or
    $[$
    <immediate_expression> ?offset
    endOfOffsetExpression = .here
    $]$
  end
  outRegisterExpression = @registerExpression.init {
    !registerName
    !offset
    !endOfOffsetExpression
  }
}

#----------------------------------------------------*

rule <bit_number_parsing> !@bitNumberExpression outBitNumber {
  $identifier$ ?let @lstring bitNumberLabel
  let @luint bitIndex
  select
    bitIndex = @luint.init { !0 !@location.here}
  or
    $[$
    $integer$ ? bitIndex
    $]$
  end
  outBitNumber = @bitNumberLabelValue.init {!bitNumberLabel !bitIndex}
}

#----------------------------------------------------*

rule <bit_number_parsing> !@bitNumberExpression outBitNumber {
  $integer$ ?let bitIndex
  outBitNumber = @bitNumberLiteralValue.init {!bitIndex}
}

#----------------------------------------------------*

rule <bit_number_parsing> !@bitNumberExpression outBitNumber {
  $($
  <immediate_expression> ?let bitNumberExpression
  let endOfExpression = @location.here
  $)$
  outBitNumber = @bitNumberLiteralExpression.init {!bitNumberExpression !endOfExpression}
}

#----------------------------------------------------*

rule <optional_w_as_dest> !@bool out_W_isDestination {
  select
    out_W_isDestination = false
  or
    $,$
    $w$
    out_W_isDestination = true
  end
}

#----------------------------------------------------*

}