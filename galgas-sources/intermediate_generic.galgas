

#----------------------------------------------------------------------------*
#                                                                            *
#                 EXTERN ROUTINES FOR EMITING HEX CODE                       *
#                                                                            *
#----------------------------------------------------------------------------*

extern proc initCodeGenerator

extern proc setEmitAddress ?let @uint inAddress

extern proc currentEmitAddress !@uint outAddress

extern proc emitCode ?let @uint inCode

extern proc emitByte ?let @uint inCode

extern proc getGeneratedContents !@string outContents

extern proc get_C_ArrayImplementation ?let @string inSourceName !@string outContents

extern proc get_C_ArrayHeader ?let @string inSourceName !@string outContents

#----------------------------------------------------------------------------*

getter @uint x4String ->@string outResult {
  if self > 0xFFFF then
    outResult = "****"
  else
    outResult = [self >> 12 xString]
    outResult += [(self >> 8) & 0xF xString]
    outResult += [(self >> 4) & 0xF xString]
    outResult += [self & 0xF xString]
  end
}

#----------------------------------------------------------------------------*

proc checkCurrentEmitAddress ?let @uint inCurrentAddress {
  currentEmitAddress (?let addr)
  if (@uint. errorCount == 0) & (addr != inCurrentAddress) then
    error @location.here:"internal error: current emit address is " + [addr hexString]
    + "; it should be " + [inCurrentAddress hexString]
  end
}

#----------------------------------------------------------------------------*
#                          CONSTANT MAP                                      *
#----------------------------------------------------------------------------*

map @constantMap {
  public var @sint64 mValue
  insert insertKey error message "the '%K' constant is already declared in %L"
  search searchKey error message "the '%K' constant is not declared"
}

#----------------------------------------------------------------------------*
#                          ROUTINE MAP                                       *
#----------------------------------------------------------------------------*

map @routineMap {
  public var @bool mIsNoReturn
  public var @uint mRequiredBank
  public var @uint mReturnedBank
  public var @bool mPreservesBank
  insert insertKey error message "the '%K' routine is already declared in %L"
  search searchKey error message "the '%K' routine is not declared"
}

#----------------------------------------------------------------------------*

enum @routineKind {
  case regularRoutine  case noReturnRoutine  case interruptRoutine
}

#----------------------------------------------------------------------------*
#                                                                            *
#                    IMMEDIAT EXPRESSION EVALUATION                          *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @immediatExpression eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters

#----------------------------------------------------------------------------*

override method @immediatInteger eval
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  !@sint64 outResult
  ?!@stringset unused ioUsedRegisters
{
  outResult = [self.mValue.uint sint64]
}

#----------------------------------------------------------------------------*

override method @immediatRegister eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters
{
  if [inRegisterTable hasKey !self.mRegister.mRegisterName.string] then
    ioUsedRegisters += !self.mRegister.mRegisterName.string
    [inRegisterTable searchKey !self.mRegister.mRegisterName ?let registerAddressList ?let size ?2* ?let protection]
    [inRegisterTable checkPrivateAccess !self.mRegister.mRegisterName !write:false !protection]
    [registerAddressList first ?let @uint registerAddress]
    [self.mRegister.mOffset eval !inRegisterTable !inConstantMap ?let @sint64 offset !?ioUsedRegisters]
    if offset < 0 then
      error self.mRegister.mEndOfOffsetExpression
      :"index (" + offset + ") should be >= 0"
    elsif [offset uint] >= size then
      error self.mRegister.mEndOfOffsetExpression
      :"index (" + offset + ") should be lower than size (" + [size string] + ")"
    end
    outResult = [registerAddress sint64] + offset
  elsif [inConstantMap hasKey !self.mRegister.mRegisterName.string] then
    [inConstantMap searchKey !self.mRegister.mRegisterName ?outResult]
    [self.mRegister.mOffset eval !inRegisterTable !inConstantMap ?let @sint64 offset !?ioUsedRegisters]
    if 0 != offset then
      error self.mRegister.mEndOfOffsetExpression:
      "index notation (" + offset + ") cannot be used with a constant"
    end
  else
    error self.mRegister.mRegisterName: "'" + self.mRegister.mRegisterName + "' should be declared as ram register or as constant" : outResult
  end
}

#----------------------------------------------------------------------------*

override method @immediatAdd eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult + rightResult
}

#----------------------------------------------------------------------------*

override method @immediatSub eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult - rightResult
}

#----------------------------------------------------------------------------*

override method @immediatMul eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult * rightResult
}

#----------------------------------------------------------------------------*

override method @immediatDiv eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult / rightResult
}

#----------------------------------------------------------------------------*

override method @immediatMod eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult mod rightResult
}

#----------------------------------------------------------------------------*

override method @immediatAnd eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult & rightResult
}

#----------------------------------------------------------------------------*

override method @immediatOr eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult | rightResult
}

#----------------------------------------------------------------------------*

override method @immediatXor eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult ^ rightResult
}

#----------------------------------------------------------------------------*

override method @immediatLeftShift eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult << [rightResult uint]
}

#----------------------------------------------------------------------------*

override method @immediatRightShift eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  outResult = leftResult >> [rightResult uint]
}

#----------------------------------------------------------------------------*

override method @immediatEqualTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult == rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatNotEqualTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult != rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatGreaterOrEqualTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult >= rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatLowerOrEqualTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult <= rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatGreaterTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult > rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatLowerTest eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mLeftExpression eval !inRegisterTable !inConstantMap ?let @sint64 leftResult !?ioUsedRegisters]
  [self.mRightExpression eval !inRegisterTable !inConstantMap ?let @sint64 rightResult !?ioUsedRegisters]
  if leftResult < rightResult then
    outResult = 1
  else
    outResult = 0
  end
}

#----------------------------------------------------------------------------*

override method @immediatNegate eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mExpression eval !inRegisterTable !inConstantMap ?let @sint64 result !?ioUsedRegisters]
  outResult = - result
}

#----------------------------------------------------------------------------*

override method @immediatComplement eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters {
  [self.mExpression eval !inRegisterTable !inConstantMap ?let @sint64 result !?ioUsedRegisters]
  outResult = ~ result
}

#----------------------------------------------------------------------------*

override method @immediatSlice eval
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  !@sint64 outResult
  ?!@stringset ioUsedRegisters
{
  let @bitSliceTable bitSliceTable
  outResult = 0
  ioUsedRegisters += !self.mRegisterName.string
  [inRegisterTable searchKey !self.mRegisterName ?* ?* ? bitSliceTable ?* ?let protection]
  [inRegisterTable checkPrivateAccess !self.mRegisterName !write:false !protection]
  var sliceNameSet =@stringset.emptySet{}
  for (mSliceName mExpression) in  self.mSliceExpressionList do
    if [sliceNameSet hasKey !mSliceName.string] then
      error mSliceName:"the '" + mSliceName + "' bit field has been already defined"
    else
      sliceNameSet += !mSliceName.string
      [bitSliceTable searchKey !mSliceName ?let sliceIndex ?let sliceSize]
      [mExpression eval !inRegisterTable !inConstantMap ?let @sint64 result !?ioUsedRegisters]
      if (result < 0) | (result > ((1 << sliceSize) - 1)) then
        error mSliceName:"invalid immediat value associated to the '" + mSliceName + "' bit field, evaluated as " + [result string]
        + " (should be between 0 and " + [(1 << sliceSize) - 1 string] + ")"
      end
      outResult = outResult | (result << sliceIndex)
      end
  end
}

#----------------------------------------------------------------------------*
#                                                                            *
#                        BIT NUMBER EXPRESSION                               *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @bitNumberExpression getBitNumber
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@stringset ioUsedRegisters
  ?let @bitSliceTable inBitSliceTable
  !@uint outBitNumber

#----------------------------------------------------------------------------*

override method @bitNumberLiteralValue getBitNumber
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@stringset unused ioUsedRegisters
  ?let @bitSliceTable unused inBitSliceTable
  !@uint outBitNumber
{
  if self.mBitNumberLiteralValue.uint > 7 then
    error self.mBitNumberLiteralValue:"The bit number is " + [self.mBitNumberLiteralValue.uint string] + " (should be <= 7)"
  end
  outBitNumber = self.mBitNumberLiteralValue.uint
}

#----------------------------------------------------------------------------*

override method @bitNumberLabelValue getBitNumber
  ?let @registerTable unused inRegisterTable
  ?let @constantMap unused inConstantMap
  ?!@stringset unused ioUsedRegisters
  ?let @bitSliceTable inBitSliceTable
  !@uint outBitNumber
{
  [inBitSliceTable searchKey !self.mBitNumberLabelValue ?let sliceIndex ?let sliceSize]
  if self.mBitNumberIndexValue.uint > sliceSize then
    error self.mBitNumberIndexValue: "The " + [self.mBitNumberIndexValue.uint string]
    + " index is too large (should be < " + [sliceSize string] + ")"
  end
  outBitNumber = sliceIndex + self.mBitNumberIndexValue.uint
}

#----------------------------------------------------------------------------*

override method @bitNumberLiteralExpression getBitNumber
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?!@stringset ioUsedRegisters
  ?let @bitSliceTable unused inBitSliceTable
  !@uint outBitNumber
{
  [self.mBitNumberLiteralExpression eval !inRegisterTable !inConstantMap ?let @sint64 result !?ioUsedRegisters]
  if result < 0 then
    error self.mEndOfExpression : "bit index is " + result + ", but should be >= 0" : outBitNumber
  elsif result > 7 then
    error self.mEndOfExpression: "bit index is " + result + ", but should be <= 7" : outBitNumber
  else
    outBitNumber = [result uint]
  end
}

#----------------------------------------------------------------------------*

map @symbolTableForOptimizations {
  public var @uint mDefinitionLineIndex
  public var @bool mIsDeletable
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
  remove removeKey error message "the '%K' label is not declared"
}

#----------------------------------------------------------------------------*
#                                                                            *
#               P R I N T    C O N S T A N T    M A P                        *
#                                                                            *
#----------------------------------------------------------------------------*

proc print_constant_definition
  ?let @constantMap inConstantMap
  ?!@string ioListFileContents {
  if [inConstantMap count] > 0 then
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
    ioListFileContents += "*" + ["CONSTANTS" stringByLeftAndRightPadding !117 !' '] + "*\n"
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    ioListFileContents += ["Constant" stringByLeftPadding !40 !' '] + " Value\n"
    for (lkey mValue) in  inConstantMap do
      ioListFileContents += [lkey.string stringByLeftPadding !40 !' '] + " " + [mValue string] + "\n"
    end
    ioListFileContents += "\n"
  end
}

#----------------------------------------------------*

