#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @pic18SimpleConstantCaseItem : @pic18AbstractCaseItem {
  public var @immediatExpression mCaseExpression
  public var @location mCaseExpressionLocation
}

#·······················································································································

refclass @pic18IntervalCaseItem : @pic18AbstractCaseItem {
  public var @immediatExpression mMinExpression
  public var @immediatExpression mMaxExpression
  public var @location mCaseExpressionLocation
}

#·······················································································································

list @pic18CaseExpressionList {
  public var @pic18AbstractCaseItem mCaseItem
}

#·······················································································································

list @pic18SwitchInstructionCaseList {
  public var @location mStartOfCase
  public var @pic18CaseExpressionList mCaseExpressionList
  public var @pic18InstructionList mInstructionList
}

#·······················································································································

refclass @pic18Instruction_switch : @pic18PiccoloInstruction {
  public var @pic18SwitchInstructionCaseList mCaseList
  public var @location mElseBranchStartLocation
  public var @pic18InstructionList mElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! ANALYZE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @pic18Instruction_switch analyze
  ?let @uint inAccessBankSplitOffset
  ?!@ipic18BlockList ioGeneratedBlockList
  ?let @routineMap inRoutineMap
  ?let @registerTable inRegisterTable
  ?let @pic18_dataMap inDataMap
  ?let @constantMap inConstantMap
  ?let @pic18MacroMap inMacroMap
  ?!@uint ioLocalLabelIndex
  ?!@ipic18SequentialInstructionList ioGeneratedInstructionList
  ?!@lstring ioBlockLabel
  ?!@string ioListFileContents
  ?!@uint ioCurrentBank
  ?let @bool inShouldPreserveBSR
  ?let @routineKind inRoutineKind
  ?!@stringset ioUsedRegisters
{
  var caseConstantMap =@caseConstantMap.emptyMap{}
#--- Labels
  let exitLabel = @lstring.new { !".L" + [ioLocalLabelIndex string] !self.mInstructionLocation} 
  ioLocalLabelIndex += 1
#--- Comparison value
  var @sint64 lastComparisonValue = 0LS
#--- By default, do not continue in sequence
  var @bool continuesInSequence = false
#---
  let initialBankSetting = ioCurrentBank
  var @uint finalBankSetting = .max # Any value
  var finalBankSettingDefined = false
#---
  for (mStartOfCase mCaseExpressionList mInstructionList) in  self.mCaseList do
  #--- Label
    let conditionTrueLabel = @lstring.new { !".L.accepted." + [ioLocalLabelIndex string] !self.mInstructionLocation} 
  #--- Generate test blocks
    for (mCaseItem) in mCaseExpressionList do
      let conditionLabel = [ioLocalLabelIndex string]
      ioLocalLabelIndex += 1
      [mCaseItem analyzeCaseItem
        !inRegisterTable
        !inConstantMap
        !conditionTrueLabel
        !conditionLabel
        !?ioUsedRegisters
        !?caseConstantMap
        !?ioGeneratedInstructionList
        !?ioGeneratedBlockList
        !?ioBlockLabel
        !?lastComparisonValue
      ]
    end
  #--- Analyze instruction list
    let @lstring conditionFalseLabel = ioBlockLabel
    ioBlockLabel = conditionTrueLabel
    var @uint branchFinalBank = initialBankSetting
    analyzeInstructionList (
      !mInstructionList
      !?ioGeneratedBlockList
      !inAccessBankSplitOffset
      !inRoutineMap
      !inRegisterTable
      !inDataMap
      !inConstantMap
      !inMacroMap
      !?ioLocalLabelIndex
      !?ioGeneratedInstructionList
      !?ioBlockLabel
      !?ioListFileContents
      !?branchFinalBank
      !inShouldPreserveBSR
      !inRoutineKind
      !?ioUsedRegisters
    )
    if ioBlockLabel.string != "" then
      continuesInSequence = true
      ioGeneratedBlockList += !@ipic18Block.new {
        !@uint. max # relocatable
        !ioBlockLabel
        !ioGeneratedInstructionList
        !@ipic18JumpTerminator. new { !self.mInstructionLocation !exitLabel !@jumpInstructionKind. ipicRelative}
        !@uint.max
        !0
      }
    end
    if finalBankSettingDefined then
      if finalBankSetting != branchFinalBank then
        error mStartOfCase: "this branch leaves bank setting to "
        + if branchFinalBank == @uint. max then "'no selection'" else [branchFinalBank string] end
        + ", but first branch leaves bank setting to "
        + if finalBankSetting == @uint. max then "'no selection'" else [finalBankSetting string] end
        + " (should be the same setting)"
      end
    else
      finalBankSettingDefined = true
      finalBankSetting = branchFinalBank
    end
    ioGeneratedInstructionList = @ipic18SequentialInstructionList. emptyList
    ioBlockLabel = conditionFalseLabel
  end
#--- "else" instruction list
  var @uint branchFinalBank = initialBankSetting
  analyzeInstructionList (
    !self.mElseInstructionList
    !?ioGeneratedBlockList
    !inAccessBankSplitOffset
    !inRoutineMap
    !inRegisterTable
    !inDataMap
    !inConstantMap
    !inMacroMap
    !?ioLocalLabelIndex
    !?ioGeneratedInstructionList
    !?ioBlockLabel
    !?ioListFileContents
    !?branchFinalBank
    !inShouldPreserveBSR
    !inRoutineKind
    !?ioUsedRegisters
  )
  let @bool thenContinuesInSequence = ioBlockLabel.string != ""
  if thenContinuesInSequence then
    ioGeneratedBlockList += !@ipic18Block.new {
      !@uint. max # relocatable
      !ioBlockLabel
      !ioGeneratedInstructionList
      !@ipic18JumpTerminator.new { !self.mInstructionLocation !exitLabel !.ipicRelative}
      !@uint.max
      !0
    }
  end
  ioGeneratedInstructionList = {}
#--- Bank setting
  if finalBankSetting != branchFinalBank then
    error self.mElseBranchStartLocation: "the 'else' branch leaves bank setting to "
    + if branchFinalBank == @uint. max then "'no selection'" else [branchFinalBank string] end
    + ", but first branch leaves bank setting to "
    + if finalBankSetting == @uint. max then "'no selection'" else [finalBankSetting string] end
    + " (should be the same setting)"
  end
#---
  ioCurrentBank = finalBankSetting
  if continuesInSequence then
    ioBlockLabel = exitLabel
  else
    ioBlockLabel = ["" nowhere]
  end
}

#·······················································································································

map @caseConstantMap {
  insert insertKey error message "the '%K' constant is already declared in %L"
}

#·······················································································································

abstract method @pic18AbstractCaseItem analyzeCaseItem
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?let @lstring inConditionTrueLabel
  ?let @string inIndexForLabels
  ?!@stringset ioUsedRegisters
  ?!@caseConstantMap ioCaseConstantMap
  ?!@ipic18SequentialInstructionList ioGeneratedInstructionList
  ?!@ipic18BlockList ioGeneratedBlockList
  ?!@lstring ioBlockLabel
  ?!@sint64 ioLastComparisonValue

#·······················································································································

override method @pic18SimpleConstantCaseItem analyzeCaseItem
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?let @lstring inConditionTrueLabel
  ?let @string inIndexForLabels
  ?!@stringset ioUsedRegisters
  ?!@caseConstantMap ioCaseConstantMap
  ?!@ipic18SequentialInstructionList ioGeneratedInstructionList
  ?!@ipic18BlockList ioGeneratedBlockList
  ?!@lstring ioBlockLabel
  ?!@sint64 ioLastComparisonValue
{
  [self.mCaseExpression eval !inRegisterTable !inConstantMap ?let @sint64 result !?ioUsedRegisters]
#---
  if (result > 255LS) | (result < 0LS) then
    error self.mCaseExpressionLocation:"case value is evaluated as " + result + " (should be between 0 and 255)"
  end
#--- Check constant is unique
  if [ioCaseConstantMap hasKey ![result string]] then
    error self.mCaseExpressionLocation : "the '" + result + "' constant is already used in switch instruction"
    error [ioCaseConstantMap locationForKey ![result string]] : "the '" + result + "' constant is used here"
  else
    [!?ioCaseConstantMap insertKey !.new { ![result string] !self.mCaseExpressionLocation}]
  end
#--- Generate addlw instruction  
  ioGeneratedInstructionList += !@ipic18_intermediate_instruction_literalOperation. new {
    !self.mCaseExpressionLocation
    !.ADDLW
    ![(ioLastComparisonValue - result) & 0xFFLS uint]
  }
  !@uint.max
  !0
#--- Update comparison value
  ioLastComparisonValue = result
#--- Condition false label
  let conditionFalseLabel = @lstring.new { !".L.value.rejected." + inIndexForLabels !self.mCaseExpressionLocation} 
#--- Terminate current block with a BZ instruction
  let @ipic18AbstractBlockTerminator t = @ipic18ConditionalJumpTerminator. new {
    !self.mCaseExpressionLocation
    !.bz
    !inConditionTrueLabel
    !.native
    !conditionFalseLabel
    !.native}
#--- Save current block block
  ioGeneratedBlockList += !@ipic18Block. new {
    !@uint. max # relocatable
    !ioBlockLabel
    !ioGeneratedInstructionList
    !t
    !@uint.max
    !0
  }
  ioGeneratedInstructionList = @ipic18SequentialInstructionList. emptyList
  ioBlockLabel = conditionFalseLabel
}

#·······················································································································

override method @pic18IntervalCaseItem analyzeCaseItem
  ?let @registerTable inRegisterTable
  ?let @constantMap inConstantMap
  ?let @lstring inConditionTrueLabel
  ?let @string inIndexForLabels
  ?!@stringset ioUsedRegisters
  ?!@caseConstantMap ioCaseConstantMap
  ?!@ipic18SequentialInstructionList ioGeneratedInstructionList
  ?!@ipic18BlockList ioGeneratedBlockList
  ?!@lstring ioBlockLabel
  ?!@sint64 ioLastComparisonValue
{
  [self.mMinExpression eval !inRegisterTable !inConstantMap ?let @sint64 minBound !?ioUsedRegisters]
  [self.mMaxExpression eval !inRegisterTable !inConstantMap ?let @sint64 maxBound !?ioUsedRegisters]
#---
  var ok = true
  if (minBound > 255LS) | (minBound < 0LS) then
    error self.mCaseExpressionLocation:"min bound is evaluated as " + minBound + " (should be between 0 and 255)"
    ok = false
  end
  if (maxBound > 255LS) | (maxBound < 0LS) then
    error self.mCaseExpressionLocation:"max bound is evaluated as " + maxBound + " (should be between 0 and 255)"
    ok = false
  end
  if maxBound <= minBound then
    error self.mCaseExpressionLocation:"max bound (" + maxBound + ") should be greater than low bound (" + minBound + ")"
    ok = false
  elsif (maxBound == 255LS) & (minBound == 0LS) then
    error self.mCaseExpressionLocation : "condition is always true"
    ok = false
  end
  if ok then
  #--- Check constant is unique
    for n in @range.new {![minBound uint] ![maxBound - minBound + 1LS uint]} do
      if [ioCaseConstantMap hasKey ![n string]] then
        error self.mCaseExpressionLocation : "the '" + n + "' constant is already used in switch instruction"
        error [ioCaseConstantMap locationForKey ![n string]] : "the '" + n + "' constant is used here"
      else
        [!?ioCaseConstantMap insertKey !@lstring. new { ![n string] !self.mCaseExpressionLocation}]
      end
    end
  #--- Labels
    let firstConditionAcceptedLabel = @lstring.new { !".L.first.accepted." + inIndexForLabels !self.mCaseExpressionLocation} 
    let firstConditionRejectedLabel = @lstring.new { !".L.first.rejected." + inIndexForLabels !self.mCaseExpressionLocation} 
    let intervalRejectedLabel = @lstring.new { !".L.interval.rejected." + inIndexForLabels !self.mCaseExpressionLocation} 
  #--- Second sublw instruction  
    let @ipic18SequentialInstruction secondTestInstruction = @ipic18_intermediate_instruction_literalOperation. new {
      !self.mCaseExpressionLocation
      !.ADDLW
      ![maxBound - minBound + 1LS uint]
    }
  #---------------------- First test
    ioGeneratedInstructionList += !@ipic18_intermediate_instruction_literalOperation. new {
        !self.mCaseExpressionLocation
        !.ADDLW
        ![(ioLastComparisonValue + 255LS - maxBound) & 0xFFLS uint]
      }
      !.max
      !0
  #--- Terminate current block with a BC instruction
    let @ipic18AbstractBlockTerminator t = @ipic18ConditionalJumpTerminator. new {
      !self.mCaseExpressionLocation
      !.bnc
      !firstConditionAcceptedLabel
      !.native
      !firstConditionRejectedLabel
      !.native
    }
  #--- Save current block
    ioGeneratedBlockList += !@ipic18Block. new {
      !.max # relocatable
      !ioBlockLabel
      !ioGeneratedInstructionList
      !t
      !@uint.max
      !0
    }
  #---------------------- First test reject
    ioGeneratedBlockList += !@ipic18Block.new {
      !.max # relocatable
      !firstConditionRejectedLabel
      !{!secondTestInstruction !.max !0}
      !@ipic18JumpTerminator.new {!self.mCaseExpressionLocation !intervalRejectedLabel !.relative}
      !.max
      !0
    }
  #---------------------- First test accepted
    let @ipic18AbstractBlockTerminator t2 = @ipic18ConditionalJumpTerminator. new {
      !self.mCaseExpressionLocation
      !.bc
      !inConditionTrueLabel
      !.native
      !intervalRejectedLabel
      !.native
    }
  #--- Save current block
    ioGeneratedBlockList += !@ipic18Block.new {
      !.max # relocatable
      !firstConditionAcceptedLabel
      !{!secondTestInstruction !.max !0}
      !t2
      !.max
      !0
    }
  #----------------------
    ioGeneratedInstructionList = {}
    ioBlockLabel = intervalRejectedLabel
  #--- Update comparison value
    ioLastComparisonValue = minBound
  end
}

#·······················································································································

override method @pic18Instruction_switch addUsedRoutines
  ?let @pic18MacroMap inMacroMap
  ?!@stringset ioUsedRoutines
{
  for (* * mInstructionList) in  self.mCaseList do
    addPic18UsedRoutinesFromInstructionList (!mInstructionList !inMacroMap !?ioUsedRoutines )
  end
  addPic18UsedRoutinesFromInstructionList (!self.mElseInstructionList !inMacroMap !?ioUsedRoutines )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
