

//——————————————————————————————————————————————————————————————————————————————————————————————

map @pic18_dataMap {
  public var @uintlist mData
  public var @bool mIsData8 # true: data8, false: data16
  insert insertKey error message "the '%K' data is already declared"
  search searchKey error message "the '%K' data is not declared"
}

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract class @ipic18SequentialInstruction {
  public var @location mInstructionLocation
}

//——————————————————————————————————————————————————————————————————————————————————————————————

list @ipic18SequentialInstructionList {
  public var @ipic18SequentialInstruction mInstruction
  public var @uint mMin
  public var @uint mMax
}

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract class @ipic18AbstractBlockTerminator {
  public var @location mInstructionLocation
}

//——————————————————————————————————————————————————————————————————————————————————————————————

struct @ipic18Block {
  public var @uint mAddress # [@uint max] if relocatable
  public var @lstring mLabel
  public var @ipic18SequentialInstructionList mInstructionList
  public var @ipic18AbstractBlockTerminator mTerminator
  public var @uint mTerminatorMin
  public var @uint mTerminatorMax
}

//——————————————————————————————————————————————————————————————————————————————————————————————

list @ipic18BlockList {
  public var @ipic18Block mBlock
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Block terminators

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract class @ipic18SingleInstructionTerminator : @ipic18AbstractBlockTerminator {
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18ReturnTerminator : @ipic18SingleInstructionTerminator {
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18RetlwTerminator : @ipic18SingleInstructionTerminator {
  public var @uint mLiteralValue
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18RetfieTerminator : @ipic18SingleInstructionTerminator {
  public var @bool mFastReturn
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18JumpTerminator : @ipic18SingleInstructionTerminator {
  public var @lstring mLabel
  public var @jumpInstructionKind mKind
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18ComputedGotoTerminator : @ipic18AbstractBlockTerminator {
  public var @lstringlist mTargetLabels
  public var @bool mUsesRCALL
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18ComputedRETLWTerminator : @ipic18AbstractBlockTerminator {
  public var @uintlist mLiteralValues
  public var @bool mUsesRCALL
}

//——————————————————————————————————————————————————————————————————————————————————————————————

enum @conditionalBranchMode %equatable {
  case native  # Use Bcc instruction only
  case ipicBRA  # Use BRA if possible (Bcc + BRA)
  case ipicGOTO # use GOTO (Bcc + GOTO)
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18ConditionalJumpTerminator : @ipic18AbstractBlockTerminator {
  public var @conditional_branch mConditionalBranch
  public var @lstring mTargetLabelWhenTrue
  public var @conditionalBranchMode mBranchModeOnTrueLabel
  public var @lstring mTargetLabelWhenFalse
  public var @conditionalBranchMode mBranchModeOnFalseLabel
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18ComputedBraTerminator : @ipic18AbstractBlockTerminator {
  public var @lstringlist mTargetLabels
  public var @bool mUsesRCALL
}

#----------------------------------------------------*

enum @ipic18RegisterComparison %equatable {
  case registerEqualsToW 
  case registerGreaterThanW 
  case registerLowerThanW
}

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract class @ipic18AbstractConditionTerminator : @ipic18AbstractBlockTerminator {
  public var @ipic18SingleInstructionTerminator mSingleInstructionTerminatorIfConditionTrue
  public var @ipic18SingleInstructionTerminator mSingleInstructionTerminatorIfConditionFalse
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @pic18RegisterComparisonTerminator : @ipic18AbstractConditionTerminator {
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @ipic18RegisterComparison mComparison
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18IncDecRegisterTerminator : @ipic18AbstractConditionTerminator {
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @bool mIncrement
  public var @bool m_W_isDestination
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @pic18TestRegisterTerminator : @ipic18AbstractConditionTerminator {
  public var @ipic18_intermediate_registerExpression mRegisterDescription
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @pic18BitTestTerminator : @ipic18AbstractConditionTerminator {
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @uint mBitNumber
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Regular instructions

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18InstructionWithNoOperand : @ipic18SequentialInstruction {
  public var @pic18InstructionWithNoOperandKind mKind
}

//——————————————————————————————————————————————————————————————————————————————————————————————

struct @ipic18_intermediate_registerExpression {
  public var @string mAssemblyString
  public var @uint mRegisterAddress # 12 bit full address
  public var @bool mNeedsBSR
}

//——————————————————————————————————————————————————————————————————————————————————————————————

getter @ipic18_intermediate_registerExpression isEqualToRegister
  ?let @ipic18_intermediate_registerExpression inRegister
  -> @bool outResult {
  outResult = self.mAssemblyString == inRegister.mAssemblyString
  if outResult then
    outResult = self.mRegisterAddress == inRegister.mRegisterAddress
  end
  if outResult then
    outResult = self.mNeedsBSR == inRegister.mNeedsBSR
  end
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_FDA : @ipic18SequentialInstruction {
  public var @pic18Instruction_FDA_base_code_AST mInstruction_FDA_base_code
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @bool m_W_isDestination
}

#----------------------------------------------------*

enum @FA_sequential_instruction_base_code {
  case CLRF  case MOVWF  case MULWF  case NEGF  case SETF
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_FA : @ipic18SequentialInstruction {
  public var @FA_sequential_instruction_base_code mFAinstruction
  public var @ipic18_intermediate_registerExpression mRegisterDescription
}

//——————————————————————————————————————————————————————————————————————————————————————————————

struct @ipic18_intermediate_registerExpressionWithoutBSRIndication {
  public var @string mAssemblyString
  public var @uint mRegisterAddress # 12 bit full address
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_MOVFF : @ipic18SequentialInstruction {
  public var @ipic18_intermediate_registerExpressionWithoutBSRIndication mSourceRegisterDescription
  public var @ipic18_intermediate_registerExpressionWithoutBSRIndication mDestinationRegisterDescription
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_literalOperation : @ipic18SequentialInstruction {
  public var @literal_instruction_opcode mLiteralInstruction
  public var @uint mLiteralValue
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_LFSR : @ipic18SequentialInstruction {
  public var @luint mFSRindex
  public var @uint mValue
}  

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_FBA : @ipic18SequentialInstruction {
  public var @bit_oriented_op mBitOrientedOp
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @uint mBitNumber
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_JSR : @ipic18SequentialInstruction {
  public var @lstring mTargetLabel
  public var @jumpInstructionKind mKind
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_MOVLB : @ipic18SequentialInstruction {
  public var @luint mBankIndex
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_FNOP : @ipic18SequentialInstruction {
  public var @uint mBlankValue
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_BLANK : @ipic18SequentialInstruction {
  public var @uint mBlankValue
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_TBLRD : @ipic18SequentialInstruction {
  public var @tableAccessOption mOption
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_TBLWT : @ipic18SequentialInstruction {
  public var @tableAccessOption mOption
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_MNOP : @ipic18SequentialInstruction {
  public var @luint mOccurrenceFactor
}
//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_NOPBRA : @ipic18SequentialInstruction {
  public var @luint mOccurrenceFactor
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_MOV_LABEL_W : @ipic18SequentialInstruction {
  public var @lstring mLabel
  public var @uint mOffset
  public var @uint mRightShift
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_intermediate_instruction_computed_rcall : @ipic18SequentialInstruction {
  public var @ipic18SequentialInstructionList mTargetInstructions
  public var @bool mUsesRCALL
}

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract class @ipic18_condition_skip_instruction : @ipic18SequentialInstruction {
  public var @ipic18SequentialInstruction mEmbeddedInstruction
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_skip_instruction_BitTestSkip : @ipic18_condition_skip_instruction {
  public var @bool mSkipIfSet
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @uint mBitNumber
}

#----------------------------------------------------*

enum @ipic18_compare_register_instruction_base_code {
  case CPFSEQ  case CPFSGT  case CPFSLT  case TSTFSZ
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_skip_instruction_compare_register : @ipic18_condition_skip_instruction {
  public var @ipic18_compare_register_instruction_base_code mCompareInstruction
  public var @ipic18_intermediate_registerExpression mRegisterDescription
}

#----------------------------------------------------*

enum @skip_instruction_FDA_base_code {
  case DECFSZ  case DCFSNZ  case INCFSZ  case INFSNZ
}

//——————————————————————————————————————————————————————————————————————————————————————————————

class @ipic18_skip_instruction_FDA : @ipic18_condition_skip_instruction {
  public var @skip_instruction_FDA_base_code mInstruction_FDA_base_code
  public var @ipic18_intermediate_registerExpression mRegisterDescription
  public var @bool m_W_isDestination
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Optimization

//——————————————————————————————————————————————————————————————————————————————————————————————

map @symbolTableForBlockOptimization {
  public var @uint mDefinitionBlockIndex
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Cluster ordering optimization

//——————————————————————————————————————————————————————————————————————————————————————————————

map @symbolTableForClusterOrdering {
  public var @uint mCluster
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
}

//——————————————————————————————————————————————————————————————————————————————————————————————

// listmap @branchOverflowMap (@stringlist)

//——————————————————————————————————————————————————————————————————————————————————————————————

dict @branchOverflowMapDictionary : @string {
  public var @stringlist mList
}

//——————————————————————————————————————————————————————————————————————————————————————————————

struct @branchOverflowMap {
  private(set) var @branchOverflowMapDictionary dictionary = ()

  //·····························································································

  setter insertKey  ?let @string inKey
                    ?let @string inValue {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?var aList]
      [!?aList append !inValue]
      self.dictionary += !inKey !aList
    else
      self.dictionary += !inKey !§[.init (inValue)]
    end
  }

  //·····························································································

  getter listForKey ?let @string inKey -> @stringlist {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?result]
   else
      result = ()
    end
  }

  //·····························································································

}

//——————————————————————————————————————————————————————————————————————————————————————————————

method @ipic18SequentialInstruction instructionRelativeBranchOverflow
  ?let @uint unused inAddress
  ?let @string unused inBlockLabel
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?!@branchOverflowMap unused ioOverflowMap {
}

//——————————————————————————————————————————————————————————————————————————————————————————————

method @ipic18AbstractBlockTerminator terminatorRelativeBranchOverflow
  ?let @uint unused inAddress
  ?let @string unused inBlockLabel
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @string unused inNextBlockLabel
  ?!@branchOverflowMap unused ioOverflowMap {
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!@symbolTableForRelativesResolution

//——————————————————————————————————————————————————————————————————————————————————————————————

method @ipic18AbstractBlockTerminator performTerminatorRelativeBranchResolution
  ?let @uint unused inAddress
  ?let @string unused inBlockLabel
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @string unused inNextBlockLabel
  ?!@uint unused ioConversionCount
  ?!@string unused ioListFileContents
  !@ipic18AbstractBlockTerminator outModifiedTerminator {
  outModifiedTerminator = self
}

//——————————————————————————————————————————————————————————————————————————————————————————————

map @symbolTableForRelativesResolution {
  public var @uint mLabelAddress
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
}

//——————————————————————————————————————————————————————————————————————————————————————————————

list @codeList {
  public var @string mAssemblyCode
  public var @uintlist mBinaryCode
}
  
//——————————————————————————————————————————————————————————————————————————————————————————————

map @pic18_dataAddressMap {
  public var @uint mDataAddress
  insert insertKey error message "the '%K' data is already declared"
  search searchKey error message "the '%K' data is not declared"
}

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract method @ipic18SequentialInstruction generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataMap
  !@codeList outCode

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract method @ipic18AbstractBlockTerminator generateTerminatorCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @string inNextBlockLabel
  !@codeList outCode

//——————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @ipic18AbstractBlockTerminator isEqualToTerminator
  ?let @ipic18AbstractBlockTerminator inTerminator
  -> @bool

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Check displacement

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_checkBCC
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @lstring inTargetLabel
  ?let @uint inCurrentAddress
  ->@bool outDisplacementOK {
  [inSymbolTable searchKey !inTargetLabel ?let @uint targetAddress]
  let @sint displacement = ([targetAddress sint] - 2 - [inCurrentAddress sint]) >> 1
  outDisplacementOK =  (displacement <= 127) & (displacement >= - 128)
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_checkBRA_RCALL
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @lstring inTargetLabel
  ?let @uint inCurrentAddress
  ->@bool outDisplacementOK {
#--- The target label is not defined if 
  [inSymbolTable searchKey !inTargetLabel ?let @uint targetAddress]
  let @sint displacement = ([targetAddress sint] - 2 - [inCurrentAddress sint]) >> 1
  outDisplacementOK =  (displacement <= 1023) & (displacement >= - 1024)
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_BRA_RCALL_displacement
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @lstring inTargetLabel
  ?let @uint inCurrentAddress
  ->@sint outDisplacement {
  [inSymbolTable searchKey !inTargetLabel ?let @uint targetAddress]
  outDisplacement = ([targetAddress sint] - 2 - [inCurrentAddress sint]) >> 1
}

//——————————————————————————————————————————————————————————————————————————————————————————————

#!Generate branch instructions

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_Bcc_instruction_code
  ?let @uint inConditionalBranchInstructionAddress
  ?let @uint inTargetAddress
  ?let @lstring inTargetLabel
  ?let @conditional_branch inConditionalBranch
  ?let @bool inComplemented
  ->@codeList outCode {  
  let @sint displacement = ([inTargetAddress sint] - 2 - [inConditionalBranchInstructionAddress sint]) >> 1
  if (displacement > 127) | (displacement < - 128) then
    error inTargetLabel: "** INTERNAL ERROR ** displacement too large for conditional branch instruction"
  end

  let @conditional_branch conditionalBranch
  if inComplemented then
    switch inConditionalBranch
    case bz   : conditionalBranch = @conditional_branch. bnz
    case bnz  : conditionalBranch = @conditional_branch. bz
    case bn   : conditionalBranch = @conditional_branch. bnn
    case bnn  : conditionalBranch = @conditional_branch. bn
    case bc   : conditionalBranch = @conditional_branch. bnc
    case bnc  : conditionalBranch = @conditional_branch. bc
    case bov  : conditionalBranch = @conditional_branch. bnov
    case bnov : conditionalBranch = @conditional_branch. bov
  end
  else
    conditionalBranch = inConditionalBranch
  end
  
  let @uint baseCode
  let @string mnemonic
  switch conditionalBranch
  case bz   : baseCode = 0xE000 ; mnemonic = "BZ"
  case bnz  : baseCode = 0xE100 ; mnemonic = "BNZ"
  case bn   : baseCode = 0xE600 ; mnemonic = "BN"
  case bnn  : baseCode = 0xE700 ; mnemonic = "BNN"
  case bc   : baseCode = 0xE200 ; mnemonic = "BC"
  case bnc  : baseCode = 0xE300 ; mnemonic = "BNC"
  case bov  : baseCode = 0xE400 ; mnemonic = "BOV"
  case bnov : baseCode = 0xE500 ; mnemonic = "BNOV"
  end
  outCode = @codeList. listWithValue {
    !"    " + mnemonic + " " + inTargetLabel
    !@uintlist. listWithValue { !baseCode | [displacement & 0x0FF uint]}}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_RCALL_instruction_code
  ?let @uint inRCALLinstructionAddress
  ?let @uint inTargetAddress
  ?let @lstring inTargetLabel
  ->@codeList outCode {
  let @sint displacement = ([inTargetAddress sint] - 2 - [inRCALLinstructionAddress sint]) >> 1
  if (displacement > 1023) | (displacement < - 1024) then
    error inTargetLabel: "** INTERNAL ERROR ** displacement too large ("+ [displacement  string]
    + ") for RCALL instruction to '" + inTargetLabel + "' (should be between -1024 and 1023)"
  end
  outCode = @codeList. listWithValue {
    !"    RCALL " + inTargetLabel
    !@uintlist. listWithValue { !0xD800 | [displacement & 0x07FF uint]}}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_BRA_instruction_code
  ?let @uint inRCALLinstructionAddress
  ?let @uint inTargetAddress
  ?let @lstring inTargetLabel
  ->@codeList outCode {
  let @sint displacement = ([inTargetAddress sint] - 2 - [inRCALLinstructionAddress sint]) >> 1
  if (displacement > 1023) | (displacement < - 1024) then
    error inTargetLabel: "** INTERNAL ERROR ** displacement too large ("+ [displacement  string]
    + ") for BRA instruction to '" + inTargetLabel + "' (should be between -1024 and 1023)"
  end
  outCode = @codeList. listWithValue {
    !"    BRA " + inTargetLabel
    !@uintlist. listWithValue { !0xD000 | [displacement & 0x07FF uint]}}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_CALL_instruction_code
  ?let @uint inTargetAddress
  ?let @lstring inTargetLabel
  ->@codeList outCode {
  var binaryCode =@uintlist ()
  binaryCode += !0xEC00 | ((inTargetAddress >> 1) & 255)
  binaryCode += !0xF000 | (inTargetAddress >> 9)
  outCode = @codeList. listWithValue {
    !"    CALL " + inTargetLabel
    !binaryCode}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_GOTO_instruction_code
  ?let @uint inTargetAddress
  ?let @lstring inTargetLabel
  ->@codeList outCode {
  var binaryCode =@uintlist ()
  binaryCode += !0xEF00 | ((inTargetAddress >> 1) & 255)
  binaryCode += !0xF000 | (inTargetAddress >> 9)
  outCode = @codeList. listWithValue {
    !"    GOTO " + inTargetLabel
    !binaryCode}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

func pic18_definition_label
  ?let @lstring inTargetLabel
  ->@codeList outCode {
  outCode = @codeList. listWithValue {
    !inTargetLabel.string + ":"
    !@uintlist ()}
}

//——————————————————————————————————————————————————————————————————————————————————————————————

