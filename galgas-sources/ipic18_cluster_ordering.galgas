

#----------------------------------------------------------------------------*

list @clusterList {
  public var @ipic18BlockList mBlockList
}

#----------------------------------------------------------------------------*

map @neededConversionForClusterOrder {
  public var @uint mConversions
  insert insertKey error message "the '%K' key is already declared in %L"
  search searchKey error message "the '%K' key is not declared"
}

#----------------------------------------------------------------------------*

func sortKey ?let @clusterList inClusterList -> @string outKey {
  outKey = ""
  for (mBlockList) in  inClusterList
  do
    outKey += [mBlockList mBlockAtIndex !0].mLabel.string
  between 
    outKey += "."
  end
}

#----------------------------------------------------------------------------*

proc perform_cluster_ordering
  ?let @clusterList inInitialClusterList
  ?!@ipic18BlockList ioBlockList
  ?!@string ioListFileContents {
  let @bool optimize = [option piccolo_options.performOptimizations value]
    & ([option piccolo_options.performOptimizations value] | [[option piccolo_options.optimizationFlags value] containsCharacter !'B'])
    & not [option piccolo_options.doNotReorderCluster value]
  if not optimize then
    ioListFileContents += "Option '--" + [option piccolo_options.doNotReorderCluster string] + "': this optimization is not performed.n\n"
  else
    let @uint clusterCount = [inInitialClusterList count]
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
    ioListFileContents += "*" + ["CLUSTER ORDERING OPTIMIZATION" stringByLeftAndRightPadding !117 !' '] + "*\n"
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    let @string s = "Cluster ordering optimization (" + clusterCount + " cluster" + if clusterCount > 1 then "s" else "" end + "):\n"
    ioListFileContents += s + "\n"
  #---
    if @application.verboseOutput then
      print (!s)
    end
  #------------------- Optimization loop
    var @clusterList clusterList = inInitialClusterList
    var neededConversionForClusterOrder =@neededConversionForClusterOrder ()
    var @bool continue = true
    var @uint pass = 0
    loop( [clusterList count] * [clusterList count])
    while continue do
      pass += 1
      ioListFileContents += "Pass " + pass + ":\n"
    #--- Build working block list and symbol table
      var workingBlockList =@ipic18BlockList ()
      var symbolTable =@symbolTableForClusterOrdering ()
      for (mBlockList) in  clusterList do(clusterIndex)
        workingBlockList += mBlockList
        for (mBlock) in  mBlockList do
          [!?symbolTable insertKey !mBlock.mLabel !clusterIndex]
        end
      end
    #--- Add symbols from last relocatable blocks
      let @uint insertionIdx = [workingBlockList count]
      for > (mBlock) in  ioBlockList while continue do
        continue = mBlock.mAddress != @uint. max
        if continue then
          [!?symbolTable insertKey !mBlock.mLabel !@uint. max]
          [!?workingBlockList insertAtIndex !mBlock !insertionIdx]
        end
      end 
    #--- Check for overflows
      ipic18RelativeBranchOverflow (
        !workingBlockList
        !ioBlockList # For entering absolute labels
        ?let @branchOverflowMap overflowMap
      )
      var @uint overflowCount = 0
      for (key mList) in overflowMap.dictionary do
        for (mValue) in  mList do
          overflowCount += 1
          [symbolTable searchKey ![key nowhere] ?let @uint sourceCluster]
          [symbolTable searchKey ![mValue nowhere] ?let @uint targetCluster]
          ioListFileContents += "  " + key + " (cluster #" + sourceCluster + ") --> " + mValue + " (cluster #" + targetCluster + ")\n"
        end
      end
      [!?neededConversionForClusterOrder insertKey
        ![sortKey (!clusterList) nowhere]
        !overflowCount
      ]
      if @application.verboseOutput then
        var @string s = "  Pass " + pass + ": "
        if overflowCount == 0 then
          s += "no branch overflow"
        elsif overflowCount == 1 then
          s += "1 branch overflow"
        else
          s += [overflowCount string] + " branch overflows"
        end
        print (!s)
      end
    #--- Correction
      var @bool correctionLoop = true
      for (key mList) in overflowMap.dictionary while correctionLoop do
        for (mValue) in  mList while correctionLoop do
          [symbolTable searchKey ![mValue nowhere] ?let @uint targetCluster]
          if targetCluster != @uint. max then
            [symbolTable searchKey ![key nowhere] ?let @uint sourceCluster]
            if (sourceCluster + 1) == targetCluster then
              correctionLoop = false
              continue = true
              [!?clusterList removeAtIndex ?let @ipic18BlockList last !targetCluster ]
              [!?clusterList removeAtIndex ?let @ipic18BlockList first !sourceCluster ]
              [!?clusterList insertAtIndex !first + last !sourceCluster]
              let @string m = "merge #" + targetCluster + " into #" + sourceCluster + "]"
              ioListFileContents += "  --> " + m + "\n"
              if @application.verboseOutput then
                print (!" -> " + m)
              end
            elsif sourceCluster == (targetCluster + 1) then
              correctionLoop = false
              continue = true
              [!?clusterList removeAtIndex ?let @ipic18BlockList last !sourceCluster ]
              [!?clusterList removeAtIndex ?let @ipic18BlockList first !targetCluster ]
              [!?clusterList insertAtIndex !first + last !targetCluster]
              let @string m = "merge #" + sourceCluster + " into #" + targetCluster + "]"
              ioListFileContents += "  --> " + m + "\n"
              if @application.verboseOutput then
                print (!" -> " + m)
              end
            elsif sourceCluster < targetCluster then
              var @clusterList candidate = clusterList
              [!?candidate removeAtIndex ?let @ipic18BlockList b !targetCluster ]
              [!?candidate insertAtIndex !b !(targetCluster + sourceCluster) / 2 ]
              if not [neededConversionForClusterOrder hasKey !sortKey (!candidate)] then
                clusterList = candidate
                correctionLoop = false
                continue = true
                let @string m = "roll up [#" + ((targetCluster + sourceCluster) / 2) + ", #" + targetCluster + "]"
                ioListFileContents += "  --> " + m + "\n"
                if @application.verboseOutput then
                  print (!" -> " + m)
                end
              end
            elsif sourceCluster > targetCluster then
              var @clusterList candidate = clusterList
              [!?candidate removeAtIndex ?let @ipic18BlockList b !sourceCluster ]
              [!?candidate insertAtIndex !b !(targetCluster + sourceCluster) / 2 ]
              if not [neededConversionForClusterOrder hasKey !sortKey (!candidate)] then
                clusterList = candidate
                correctionLoop = false
                continue = true
                let @string m = "roll up [#" + targetCluster+ ", #" + ((targetCluster + sourceCluster) / 2) + "]"
                ioListFileContents += "  --> " + m + "\n"
                if @application.verboseOutput then
                  print (!" -> " + m)
                end
              end
            end
          end
        end
      end
      if @application.verboseOutput then
        print (!".\n")
      end
    end
    if @application.verboseOutput then
      print (!"\n")
    end
    ioListFileContents += "\n"
  #---------------------------------- Build the new ordered block list
    var newBlockList =@ipic18BlockList ()
  #--- First insert absolute blocks from 0
    continue = true
    for (mBlock) in  ioBlockList while continue do
      continue = mBlock.mAddress != @uint. max
      if continue then
        newBlockList += !mBlock
      end
    end 
  #--- Insert sorted blocks 
    for (mBlockList) in  clusterList do
      newBlockList += mBlockList
    end
  #--- Insert absolute blocks from the end
    let @uint insertionIndex = [newBlockList count]
    continue = true
    for > (mBlock) in  ioBlockList while continue do
      continue = mBlock.mAddress != @uint. max
      if continue then
        [!?newBlockList insertAtIndex !mBlock !insertionIndex]
      end
    end 
  #--- Set result
    ioBlockList = newBlockList
  end
}      

#----------------------------------------------------------------------------*


