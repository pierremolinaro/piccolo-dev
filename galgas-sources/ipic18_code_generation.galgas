#----------------------------------------------------------------------------------------------------------------------*

map @generatedCodeMap { # Key is code address (decimal representation)
  public var @codeList mCode
  public var @ipic18SequentialInstruction mInstruction
  insert insertKey error message "the '%K' entry is already declared in %L"
  search searchKey error message "the '%K' entry is not declared"
}

#----------------------------------------------------------------------------*

getter @uint x4string ->@string outResult {
  outResult  = [self / 0x10_00 & 0xF xString]
  outResult += [self / 0x10_0 & 0xF xString]
  outResult += [self / 0x10_ & 0xF xString]
  outResult += [self         & 0xF xString]
}

#----------------------------------------------------------------------------*

getter @uint x6string -> @string outResult {
  outResult  = [self / 0x10_000 & 0xF xString]
  outResult += [self / 0x10_00 & 0xF xString]
  outResult += [self / 0x10_0 & 0xF xString]
  outResult += [self / 0x10_ & 0xF xString]
  outResult += [self         & 0xF xString]
}

#----------------------------------------------------------------------------*

proc generateLineWithCode
  ?let @uint inAddress
  ?let @codeList inCode
  ?let @stringlist inIpicText
  ?let @uint inMin
  ?let @uint inMax
  ?!@string ioListFileContents
 {
#--- Complete text with empty lines
  var @stringlist ipicText = inIpicText
  loop( [inCode length] + 1)
  while [ipicText length] < [inCode length] do
    ipicText += !""
  end
#---
  var @uint address = inAddress
  var first = true
  for (mValue) in  ipicText, (mAssemblyCode mBinaryCode) in  inCode do
    ioListFileContents += [address x6string]
    address = address + 2 * [mBinaryCode length]
    var @string s = " "
    for (bin_mValue) in  mBinaryCode do
      s += " " + [bin_mValue x4string]
    end
    ioListFileContents += [s stringByRightPadding !13 !' ']
    s = ""
    if first && (inMin <= inMax) then
      if inMin <= 99_999 then
        s += [inMin string]
      else
        s += "*****"
      end
      s += "-"
      if inMax <= 99_999 then
        s += [inMax string]
      else
        s += "*****"
      end
      s += " "
    end
    ioListFileContents += [s stringByRightPadding !12 !' ']
    ioListFileContents += [mAssemblyCode stringByRightPadding !50 !' ']
    ioListFileContents += " "
    ioListFileContents += mValue
    ioListFileContents += "\n"
    first = false 
  end
#--- Display supplementary text
  for (mValue) in  [ipicText subListFromIndex ![inCode length]] do
    ioListFileContents += [address x6string]
    ioListFileContents += ["" stringByRightPadding !76 !' ']
    ioListFileContents += mValue
    ioListFileContents += "\n" 
  end
}
  
#----------------------------------------------------------------------------*

method @ipic18Block generateCodeForBlock
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataMap
  ?let @uint inBlockAddress
  ?let @string inNextBlockLabel
  ?!@string ioListFileContents
  ?!@string ioAssemblyString
  ?!@generatedCodeMap ioGeneratedCodeMap
{
  ioListFileContents +=
    "Addr.  Code       Duration    Assembly                                           Intermediate Representation\n"
  if self.mAddress == .max then # Relocatable
    generateLineWithCode (
      !inBlockAddress
      !{!self.mLabel.string + ":" !{}}
      !{!"LABEL " + self.mLabel}
      !@uint.max
      !0
      !?ioListFileContents
    )
    ioAssemblyString += self.mLabel.string + ":\n"
  else
    var @codeList cd = {}
    cd += !"ORG " + [inBlockAddress hexString] !{}
    cd += !self.mLabel.string + ":" !{}
    generateLineWithCode (
      !inBlockAddress
      !cd
      !{!"LABEL " + self.mLabel + ", ORG "+ [inBlockAddress hexString]}
      !@uint.max
      !0
      !?ioListFileContents
    )  
    ioAssemblyString += "    ORG "+ [inBlockAddress hexString] + "\n"
    ioAssemblyString += self.mLabel.string + ":\n"
  end
#--- Generate regular instructions
  var address = inBlockAddress
  for (mInstruction mMin mMax) in self.mInstructionList do
    [mInstruction generateCode
      !address
      !inSymbolTable
      !inDataMap
      ?let @codeList code
    ]
    [!?ioGeneratedCodeMap insertKey ![[address string] nowhere] !code !mInstruction]
    generateLineWithCode (
      !address
      !code
      ![mInstruction instructionDisplay]
      !mMin
      !mMax
      !?ioListFileContents
    )
    for (mAssemblyCode mBinaryCode) in code do
      for (mValue) in mBinaryCode do
        emitCode (!mValue)
      end
      ioAssemblyString += mAssemblyCode + "\n"
    end
    address = address + [mInstruction instructionSize]
  #--- Check instruction size corresponds generated code size
    var @uint generatedCodeSize = 0
    for (* mBinaryCode) in code do
      generatedCodeSize = generatedCodeSize + 2 * [mBinaryCode length]
    end
    if generatedCodeSize != [mInstruction instructionSize] then
      let s = "*** INTERNAL ERROR ** generated code size ("
      + generatedCodeSize + ") != instruction size (" + [mInstruction instructionSize] + ")"
      error .nowhere : s
      ioListFileContents += s + "\n"
    end
  end
#--- Generate block terminator
  [self.mTerminator generateTerminatorCode
    !address
    !inSymbolTable
    !inNextBlockLabel
    ?let @codeList code
  ]
  generateLineWithCode (
    !address
    !code
    !{![self.mTerminator terminatorDisplay !inNextBlockLabel]}
    !self.mTerminatorMin
    !self.mTerminatorMax
    !?ioListFileContents
  )
  for (mAssemblyCode mBinaryCode) in code do
    for (mValue) in mBinaryCode do
      emitCode (!mValue)
    end
    ioAssemblyString += mAssemblyCode + "\n"
  end
  #--- Check terminator size corresponds generated code size
    var generatedCodeSize = 0
    for (* mBinaryCode) in code do
      generatedCodeSize = generatedCodeSize + 2 * [mBinaryCode length]
    end
    if generatedCodeSize != [self.mTerminator terminatorSize !inNextBlockLabel] then
      let s = "*** INTERNAL ERROR ** generated code size ("
      + generatedCodeSize + ") != instruction size (" + [self.mTerminator terminatorSize !inNextBlockLabel] + ")"
      error .nowhere : s
      ioListFileContents += s + "\n"
    end
#---
  ioListFileContents += "\n"
}

#----------------------------------------------------------------------------*
#                                                                            *
#        C O D E    G E N E R A T I O N                                      *
#                                                                            *
#----------------------------------------------------------------------------*

proc ipic18GenerateCode
  ?let @string inSourceFileName
  ?let @programKind inProgramKind
  ?let @uint inBootloaderReservedROMsize
  ?let @uint inROMsize
  ?let @string inProcessorName
  ?let @registerTable inPredefinedRegisters
  ?let @registerTable inAllRegisters
  ?let @pic18_dataMap inDataMap
  ?let @actualConfigurationMap inActualConfigurationMap
  ?!@string ioListFileContents
  ?let @ipic18BlockList inGeneratedBlockList
  !@uint outUsedROMsize
  !@generatedCodeMap outGeneratedCodeMap
{
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
  ioListFileContents += "*" + ["CODE GENERATION" stringByLeftAndRightPadding !117 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
  if @application.verboseOutput then
    message "Code generation:\n"
  end
#--- Build address map
  computeLabelAbsoluteAddressMap (
    !inGeneratedBlockList
    !{}
    ?let @symbolTableForRelativesResolution symbolTable
    ?let @uint firstDataAddress
  )
#--------------------------------- Build Data Address Map
  var @uint dataAddress = firstDataAddress
  var @pic18_dataAddressMap dataAddressMap = {}
  for (lkey mData *) in  inDataMap do
    [!?dataAddressMap insertKey !lkey !dataAddress]
    dataAddress = dataAddress + [mData length] * 2
  end 
#---------------------------------- Generate code
  initCodeGenerator ( )
  var assemblyString = ""
  var relocatableCodeSize = 0
  var blockStartAddress = 0
  outGeneratedCodeMap = {}
  for (mBlock) in  inGeneratedBlockList do(blockIndex)
    let @string nextBlockLabel
    if (blockIndex+1) < [inGeneratedBlockList length] then
      nextBlockLabel = [inGeneratedBlockList mBlockAtIndex !blockIndex+1].mLabel.string
    else
      nextBlockLabel = ""
    end
    if mBlock.mAddress != .max then # Absolute block
      blockStartAddress = mBlock.mAddress
      setEmitAddress (!blockStartAddress)
    end
    [mBlock generateCodeForBlock
      !symbolTable
      !dataAddressMap
      !blockStartAddress
      !nextBlockLabel
      !?ioListFileContents
      !?assemblyString
      !?outGeneratedCodeMap
    ]
    let @uint blockSize = [mBlock blockSize !nextBlockLabel]
    blockStartAddress = blockStartAddress + blockSize
    if mBlock.mAddress == .max then
      relocatableCodeSize = relocatableCodeSize + blockSize
    end
  end
#--- Data
  dataAddress = firstDataAddress
  for (dataName dataValueList *) in  inDataMap
  before
    setEmitAddress (!dataAddress )
    generateLineWithCode (
      !dataAddress
      !{!"    ORG " + [dataAddress hexString] !{}}
      !{!"    ORG " + [dataAddress hexString]}
      !@uint.max
      !0
      !?ioListFileContents
    )
    assemblyString += "    ORG " + [dataAddress hexString] + "\n"
  do
    generateLineWithCode (
      !dataAddress
      !{!"_data_" + dataName + ":" !{}}
      !{!"_data_" + dataName + ":"}
      !@uint.max
      !0
      !?ioListFileContents
    )
    assemblyString += "_data_" + dataName + ":\n"
    for (data) in  dataValueList do
      assemblyString += "    DW " + [data hexString] + "\n"
      emitCode (!data)
      generateLineWithCode (
        !dataAddress
        !{!"    DW " + [data hexString] !{!data}}
        !{!"    DW " + [data hexString]}
        !@uint.max
        !0
        !?ioListFileContents
      )
      dataAddress = dataAddress + 2 
    end
    ioListFileContents += "\n"
  end 
  if @application.verboseOutput then
    message "  Relocatable code size: " + relocatableCodeSize + " bytes.\n\n"
  end
  outUsedROMsize = dataAddress
#----------------------------- Code too large ?
  switch inProgramKind
  case regularProgram, userProgram :
    if outUsedROMsize > inROMsize then
      error .here : "the program uses " + outUsedROMsize + " bytes, greater than reserved size (" + inROMsize + " bytes)"
    end
  case bootloaderProgram :
    if outUsedROMsize > inBootloaderReservedROMsize then
      error .here : "the bootloader uses " + outUsedROMsize + " bytes, greater than reserved size (" + inBootloaderReservedROMsize + " bytes)"
    end
  end
#----------------------------- Generate HEX file
#--- Add Configuration
  for (* mRegisterAddress mRegisterValue) in  inActualConfigurationMap do
    setEmitAddress (!mRegisterAddress)
    emitByte (!mRegisterValue)
  end
#--- Generate file
  getGeneratedContents (?let @string contents)
  var destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".hex"
  [contents writeToFileWhenDifferentContents !destinationFile ?*]
#--- Generate contents in C file ?
  if [option piccolo_options.output_C_Array value] then
    let baseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
    get_C_ArrayImplementation (!baseName ?let @string cContents)
    destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".c"
    [cContents writeToFileWhenDifferentContents !destinationFile ?*]
    get_C_ArrayHeader (!baseName ?let @string hContents)
    destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".h"
    [hContents writeToFileWhenDifferentContents !destinationFile ?*]
  end
#----------------------------- Generate assembly file ?
  if [option piccolo_options.generateAssembly value] & (@uint. errorCount == 0) then
    pic18GenerateAssemblyFile (
      !inSourceFileName
      !inProcessorName
      !inPredefinedRegisters
      !inAllRegisters
      !inActualConfigurationMap
      !assemblyString
    )
  end
}

#----------------------------------------------------------------------------*
#                                                                            *
#        C O D E    G E N E R A T I O N                                      *
#                                                                            *
#----------------------------------------------------------------------------*

proc pic18GenerateAssemblyFile
  ?let @string inSourceFileName
  ?let @string inProcessorName
  ?let @registerTable inPredefinedRegisters
  ?let @registerTable inAllRegisters
  ?let @actualConfigurationMap inActualConfigurationMap
  ?let @string inAssemblyCode {
  var @string assemblyString = "  PROCESSOR " + inProcessorName + "\n"
#--- Code
  assemblyString += ";--- Code\n"
  assemblyString += inAssemblyCode
#--- Prefined registers
  assemblyString += ";--- Prefefined registers\n"
  for (lkey mRegisterAddressList * * * *) in  inPredefinedRegisters do
    [mRegisterAddressList first ?let @uint firstRegister]
    assemblyString += lkey.string + " EQU " + [firstRegister hexString] + "\n"
  end
  assemblyString += "\n\n"
#--- User defined registers in ram
  assemblyString += ";--- User defined registers (in RAM)\n"
  for (lkey mRegisterAddressList * * * *) in  inAllRegisters do
    if not [inPredefinedRegisters hasKey !lkey.string] then
      [mRegisterAddressList first ?let @uint firstRegister]
      assemblyString += lkey.string + " EQU " + [firstRegister hexString] + "\n"
    end
  end
  assemblyString += "\n\n"
#--- PICCOLO defined symbols
  assemblyString += ";--- Piccolo defined symbols\n"
  assemblyString += "W EQU 1\n"
  assemblyString += "FAST EQU 1\n"
  assemblyString += "BSR_ACCESS EQU 1\n\n"
#-------------------------------- Add Configuration
  if [inActualConfigurationMap count] > 0 then
    assemblyString += ";--- Configuration\n\n"
    for (* mRegisterAddress mRegisterValue) in  inActualConfigurationMap do
      assemblyString += "  __config " + [mRegisterAddress hexString] + ", " + [mRegisterValue & 255 hexString] + "\n"
    end
  end
#-------------------------------- End
  assemblyString += ";---\n\n"
  assemblyString += "  END\n\n"
#-------------------------------- Generate file
  let @string asmDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".asm"
 [assemblyString writeToFileWhenDifferentContents !asmDestinationFile ?*]
}

#----------------------------------------------------------------------------*

