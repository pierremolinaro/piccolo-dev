map @blockMapForDurationComputation {
  @ipic18Block mBlock
  @string mNextLabel
  insert insertKey error message "the '%K' block is already declared in %L"
  search searchKey error message "the '%K' block is not declared"
}

#----------------------------------------------------------------------------------------------------------------------*

map @exploredBlockMap {
  @uint mMinDuration
  @uint mMaxDuration
  insert insertKey error message "the '%K' entry is already declared in %L"
  search searchKey error message "the '%K' entry is not declared"
}

#----------------------------------------------------------------------------------------------------------------------*

sortedlist @codeWithDuration {
  @uint mAddress
  @string mAssembly
  @uint mMinDuration
  @uint mMaxDuration
}{
  mAddress <
}

#----------------------------------------------------------------------------------------------------------------------*
#! terminatorMinMaxDuration
#----------------------------------------------------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation inBlockMapForDurationComputation
  ?!@exploredBlockMap ioExploredBlockMap
  ?!@codeWithDuration ioCodeWithDuration
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ReturnTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetlwTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetfieTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18JumpTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation inBlockMapForDurationComputation
  ?!@exploredBlockMap ioExploredBlockMap
  ?!@codeWithDuration ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
  if [ioExploredBlockMap hasKey !mLabel.string] then
    [ioExploredBlockMap searchKey !mLabel ?let @uint min ?let @uint max]
    outMin = outMin + min
    outMax = outMax + max
  else
    [inBlockMapForDurationComputation searchKey !mLabel ?let aBlock ?let nextLabel]
    [aBlock computeMinMaxDuration
      !inBlockMapForDurationComputation
      !?ioExploredBlockMap
      !?ioCodeWithDuration
      !nextLabel
      ?let @uint min 
      ?let @uint max
    ]
    outMin = outMin + min
    outMax = outMax + max
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation inBlockMapForDurationComputation
  ?!@exploredBlockMap ioExploredBlockMap
  ?!@codeWithDuration ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
#--- True branch
  [inBlockMapForDurationComputation searchKey !mTargetLabelWhenTrue ?let trueBlock ?let trueLabel]
  [trueBlock computeMinMaxDuration
    !inBlockMapForDurationComputation
    !?ioExploredBlockMap
    !?ioCodeWithDuration
    !trueLabel
    ?let min_true
    ?let max_true
  ]
  [inBlockMapForDurationComputation searchKey !mTargetLabelWhenFalse ?let falseBlock ?let falseLabel]
  [falseBlock computeMinMaxDuration
    !inBlockMapForDurationComputation
    !?ioExploredBlockMap
    !?ioCodeWithDuration
    !falseLabel
    ?let min_false
    ?let max_false
  ]
  outMin = 2 + if min_true < min_false then min_true else min_false end
  outMax = 2 + if max_true > max_false then max_true else max_false end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
#--- True branch
#  [inBlockMapForDurationComputation searchKey !mTargetLabelWhenTrue ?let trueBlock]
#  [trueBlock computeMinMaxDuration
#    !inBlockMapForDurationComputation
#    !?ioExploredBlockMap
#    ?let min_true
#    ?let max_true
#  ]
#  [inBlockMapForDurationComputation searchKey !mTargetLabelWhenFalse ?let falseBlock]
#  [falseBlock computeMinMaxDuration
#    !inBlockMapForDurationComputation
#    !?ioExploredBlockMap
#    ?let min_false
#    ?let max_false
#  ]
#  outMin = 2 + if min_true < min_false then min_true else min_false end
#  outMax = 2 + if max_true > max_false then max_true else max_false end
  outMin = 10000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 20000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18BitTestTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 30000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 40000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 50000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 60000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator terminatorMinMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 70000
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*
#! minMaxDuration
#----------------------------------------------------------------------------------------------------------------------*

method @ipic18SequentialInstruction minMaxDuration
  ?let @blockMapForDurationComputation unused inBlockMapForDurationComputation
  ?!@exploredBlockMap unused ioExploredBlockMap
  ?!@codeWithDuration unused ioCodeWithDuration
  !@uint outMin
  !@uint outMax
{
  outMin = 1
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

method @ipic18Block computeMinMaxDuration
  ?let @blockMapForDurationComputation inBlockMapForDurationComputation
  ?!@exploredBlockMap ioExploredBlockMap
  ?!@codeWithDuration ioCodeWithDuration
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  if [ioExploredBlockMap hasKey !mLabel.string] then
    [ioExploredBlockMap searchKey !mLabel ?outMin ?outMax]
  else
    outMin = 2 # Interrupt response
    outMax = 2
    for (instruction) in mInstructionList do
      [instruction minMaxDuration
        !inBlockMapForDurationComputation
        !?ioExploredBlockMap
        !?ioCodeWithDuration
        ?let @uint min
        ?let @uint max
      ]
      outMin = outMin + min
      outMax = outMax + max
    end
    [mTerminator terminatorMinMaxDuration
      !inBlockMapForDurationComputation
      !?ioExploredBlockMap
      !?ioCodeWithDuration
      !inNextLabel
      ?let @uint min
      ?let @uint max
    ]
    outMin = outMin + min
    outMax = outMax + max
    [!?ioExploredBlockMap insertKey !mLabel !outMin !outMax]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

#! Routine ipic18DurationComputations

#----------------------------------------------------------------------------------------------------------------------*

proc ipic18DurationComputations
  ?!@string ioListFileContents
  ?let @ipic18BlockList inBlockList
  ?let @generatedCodeMap unused inGeneratedCodeMap
{
  ioListFileContents += ["" stringByLeftAndRightPadding !79 !'*'] + "\n"
  ioListFileContents += "*" + ["INTERRUPT ROUTINE DURATION COMPUTATIONS" stringByLeftAndRightPadding !77 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !79 !'*'] + "\n\n"
  var m = "Interrupt routine durations (in CPU clock units)\n"
#--- Find interrupt blocks
  @stringset startLabelsToExplore = {}
  @blockMapForDurationComputation blockMapForStackComputation = {}
  @stringlist nextLabelList = {}
  for () in inBlockList do
    nextLabelList += !mBlock.mLabel.string
  end
  nextLabelList += !""
  for () in inBlockList do (idx)
    if (mBlock.mAddress == 0x8) || (mBlock.mAddress == 0x18) then
      startLabelsToExplore += !mBlock.mLabel.string
    end
    [!?blockMapForStackComputation insertKey !mBlock.mLabel !mBlock ![nextLabelList mValueAtIndex!idx+1]]
  end
#--- Explore blocks to computing duration
  @codeWithDuration codeWithDuration = {}
  @exploredBlockMap exploredBlockMap = {}
  loop ([inBlockList length] + 1)
  while [startLabelsToExplore count] > 0
  do
    let startLabel = [startLabelsToExplore anyString]
    [!?startLabelsToExplore removeKey !startLabel]
    [blockMapForStackComputation searchKey ![startLabel nowhere] ?let @ipic18Block aBlock ?let nextLabel]
    [aBlock computeMinMaxDuration
      !blockMapForStackComputation
      !?exploredBlockMap
      !?codeWithDuration
      !nextLabel
      ?let @uint min
      ?let @uint max
    ]
    ioListFileContents += startLabel + ": [" + min + " ... " + max + "]\n"
    m += "  " + startLabel + ": [" + min + " ... " + max + "]\n"
  end
  message m + '\n' ;
  for () in codeWithDuration do
    ioListFileContents += [mAddress x6string] + "\n"
  end
}      

#----------------------------------------------------------------------------------------------------------------------*


