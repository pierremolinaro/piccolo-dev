
map @blockDurationMap {
  public var @uint mMinDuration
  public var @uint mMaxDuration
  %insertSetter insertKey %errorMessage "the '%K' entry is already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' entry is not declared"
}

#----------------------------------------------------------------------------------------------------------------------*
#! terminatorMinMaxDuration
#----------------------------------------------------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ReturnTerminator terminatorMinMaxDuration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetlwTerminator terminatorMinMaxDuration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetfieTerminator terminatorMinMaxDuration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18JumpTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  if [inExploredBlockMap hasKey !self.mLabel.string] then # Solved
    [inExploredBlockMap searchKey !self.mLabel ?let @uint min ?let @uint max]
    if self.mLabel.string == inNextLabel then
      outMin = min
      outMax = max
    else
      outMin = 2 + min
      outMax = 2 + max
    end
  else # Unknown
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18TestRegisterTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  [self.mSingleInstructionTerminatorIfConditionTrue duration !inExploredBlockMap !inNextLabel ?let trueMin ?let trueMax]
  [self.mSingleInstructionTerminatorIfConditionFalse duration !inExploredBlockMap !"" ?let falseMin ?let falseMax]
  if (trueMin <= trueMax) && (falseMin <= falseMax) then # Solved
    if [self.mSingleInstructionTerminatorIfConditionTrue terminatorSize !inNextLabel] == 0 then # No code for true terminator
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    else
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    end
  else # Not solved
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18RegisterComparisonTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  [self.mSingleInstructionTerminatorIfConditionTrue duration !inExploredBlockMap !inNextLabel ?let trueMin ?let trueMax]
  [self.mSingleInstructionTerminatorIfConditionFalse duration !inExploredBlockMap !inNextLabel ?let falseMin ?let falseMax]
  if (trueMin <= trueMax) && (falseMin <= falseMax) then # Solved
    if [self.mSingleInstructionTerminatorIfConditionTrue terminatorSize !inNextLabel] == 0 then # No code for true terminator
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    else
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    end
  else # Not solved
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @pic18BitTestTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  [self.mSingleInstructionTerminatorIfConditionTrue duration !inExploredBlockMap !inNextLabel ?let trueMin ?let trueMax]
  [self.mSingleInstructionTerminatorIfConditionFalse duration !inExploredBlockMap !inNextLabel ?let falseMin ?let falseMax]
  if (trueMin <= trueMax) && (falseMin <= falseMax) then # Solved
    if [self.mSingleInstructionTerminatorIfConditionTrue terminatorSize !inNextLabel] == 0 then # No code for true terminator
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    elsif [self.mSingleInstructionTerminatorIfConditionFalse terminatorSize !inNextLabel] == 0 then # No code for false terminator
      let falseBranchMinDuration = falseMin + 2
      let falseBranchMaxDuration = falseMax + 2
      let trueBranchMinDuration = trueMin + 1
      let trueBranchMaxDuration = trueMax + 1
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    else
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    end
  else # Not solved
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  if [inExploredBlockMap hasKey !self.mTargetLabelWhenTrue.string] && [inExploredBlockMap hasKey !self.mTargetLabelWhenFalse.string] then
    [inExploredBlockMap searchKey !self.mTargetLabelWhenTrue ?let trueMin ?let trueMax]
    [inExploredBlockMap searchKey !self.mTargetLabelWhenFalse ?let falseMin ?let falseMax]
    if self.mTargetLabelWhenTrue.string == inNextLabel then # No code for true terminator
      let trueBranchMinDuration = trueMin + 1
      let trueBranchMaxDuration = trueMax + 1
      let falseBranchMinDuration = falseMin + 2
      let falseBranchMaxDuration = falseMax + 2
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    elsif self.mTargetLabelWhenFalse.string == inNextLabel then # No code for false terminator
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    else
      let trueBranchMinDuration = trueMin + 3
      let trueBranchMaxDuration = trueMax + 3
      let falseBranchMinDuration = falseMin + 2
      let falseBranchMaxDuration = falseMax + 2
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    end
  else # Not solved
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18IncDecRegisterTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  [self.mSingleInstructionTerminatorIfConditionTrue duration !inExploredBlockMap !inNextLabel ?let trueMin ?let trueMax]
  [self.mSingleInstructionTerminatorIfConditionFalse duration !inExploredBlockMap !inNextLabel ?let falseMin ?let falseMax]
  if (trueMin <= trueMax) && (falseMin <= falseMax) then # Solved
    if [self.mSingleInstructionTerminatorIfConditionTrue terminatorSize !inNextLabel] == 0 then # No code for true terminator
      let trueBranchMinDuration = trueMin + 1
      let trueBranchMaxDuration = trueMax + 1
      let falseBranchMinDuration = falseMin + 2
      let falseBranchMaxDuration = falseMax + 2
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    elsif [self.mSingleInstructionTerminatorIfConditionFalse terminatorSize !inNextLabel] == 0 then # No code for false terminator
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      outMin = if falseBranchMinDuration < trueBranchMinDuration then falseBranchMinDuration else trueBranchMinDuration end
      outMax = if falseBranchMaxDuration > trueBranchMaxDuration then falseBranchMaxDuration else trueBranchMaxDuration end
    else
      let trueBranchMinDuration = trueMin + 2
      let trueBranchMaxDuration = trueMax + 2
      let falseBranchMinDuration = falseMin + 1
      let falseBranchMaxDuration = falseMax + 1
      outMin = if trueBranchMinDuration < falseBranchMinDuration then trueBranchMinDuration else falseBranchMinDuration end
      outMax = if trueBranchMaxDuration > falseBranchMaxDuration then trueBranchMaxDuration else falseBranchMaxDuration end
    end
  else # Not solved
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = @uint.max
  outMax = 0
#---
  var solved = true
  for (aLabel) in self.mTargetLabels while solved do
    solved = [inExploredBlockMap hasKey !aLabel.string]
  end
#---
  if solved then
    for (aLabel) in self.mTargetLabels do
      [inExploredBlockMap searchKey !aLabel ?let min ?let max]
      if min < outMin then
        outMin = min
      end
      if max > outMax then
        outMax = max
      end
    end
  #--- Add RCALL execution (2), computed goto 4 execution (8), GOTO (2)
    outMin = outMin + 12
    outMax = outMax + 12
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator terminatorMinMaxDuration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 11 # RCALL (2), _computed_goto2 (7), RETLW (2)
  if not self.mUsesRCALL then
    outMin += 1
  end
  outMax = outMin
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator terminatorMinMaxDuration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = @uint.max
  outMax = 0
#---
  var solved = true
  for (aLabel) in self.mTargetLabels while solved do
    solved = [inExploredBlockMap hasKey !aLabel.string]
  end
#---
  if solved then
    for (aLabel) in self.mTargetLabels do
      [inExploredBlockMap searchKey !aLabel ?let min ?let max]
      if min < outMin then
        outMin = min
      end
      if max > outMax then
        outMax = max
      end
    end
  #--- Add RCALL execution (2), computed goto 2 execution (7), BRA (2)
    outMin = outMin + 11
    outMax = outMax + 11
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#! @ipic18SingleInstructionTerminator duration
#----------------------------------------------------------------------------------------------------------------------*

abstract method @ipic18SingleInstructionTerminator duration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
  
#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18ReturnTerminator duration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}
  
#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetlwTerminator duration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}
  
#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18RetfieTerminator duration
  ?let @blockDurationMap unused inExploredBlockMap
  ?let @string unused inNextLabel
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}
  
#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18JumpTerminator duration
  ?let @blockDurationMap inExploredBlockMap
  ?let @string inNextLabel
  !@uint outMin
  !@uint outMax
{
  if [inExploredBlockMap hasKey !self.mLabel.string] then
    [inExploredBlockMap searchKey !self.mLabel ?let min ?let max] 
    outMin = min
    outMax = max
    if self.mLabel.string != inNextLabel then
      outMin = outMin + 2
      outMax = outMax + 2
    end
  else
    outMin = @uint.max
    outMax = 0
  end
}
  
#----------------------------------------------------------------------------------------------------------------------*
#! minMaxDuration
#----------------------------------------------------------------------------------------------------------------------*

method @ipic18SequentialInstruction minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = 1
  outMax = 1
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLRD minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLWT minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MNOP minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = self.mOccurrenceFactor.uint
  outMax = self.mOccurrenceFactor.uint
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_NOPBRA minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = self.mOccurrenceFactor.uint * 2
  outMax = self.mOccurrenceFactor.uint * 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_LFSR minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MOVFF minMaxDuration
  ?@blockDurationMap unused inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = 2
  outMax = 2
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR minMaxDuration
  ?@blockDurationMap inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  if [inExploredBlockMap hasKey !self.mTargetLabel.string] then
    [inExploredBlockMap searchKey !self.mTargetLabel ?outMin ?outMax]
    outMin = outMin + 2
    outMax = outMax + 2
  else
    outMin = @uint.max
    outMax = 0
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_condition_skip_instruction minMaxDuration
  ?@blockDurationMap inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  [self.mEmbeddedInstruction minMaxDuration !inExploredBlockMap ?outMin ?outMax]
  if outMin <= outMax then
    outMin = outMin + 1
    outMax = outMax + 1
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall minMaxDuration
  ?@blockDurationMap inExploredBlockMap
  !@uint outMin
  !@uint outMax
{
  outMin = @uint.max
  outMax = 0
  var solved = true
  for (instr * *) in self.mTargetInstructions while solved do
    [instr minMaxDuration !inExploredBlockMap ?let min ?let max]
    solved = min <= max
  end
  if solved then
    for (instr * *) in self.mTargetInstructions do (idx)
      [instr minMaxDuration !inExploredBlockMap ?@uint min ?@uint max]
    #--- For all branches (but the last one) add BRA execution (2 cycles)
      if idx < ([self.mTargetInstructions length] - 1) then
        min = min + 2
        max = max + 2
      end
      if min < outMin then
        outMin = min
      end
      if max > outMax then
        outMax = max
      end
    end
  #--- Add RCALL execution (2), computed_goto4 execution (8)
    outMin = outMin + 10
    outMax = outMax + 10
  end
}

#----------------------------------------------------------------------------------------------------------------------*

#! Routine ipic18DurationComputations

#----------------------------------------------------------------------------------------------------------------------*

proc ipic18DurationComputations
  ?!@ipic18BlockList ioBlockList
  !@blockDurationMap outBlockDurationMap
{
#--- Next label list
  var @stringlist nextLabelList = {}
  for (mBlock) in ioBlockList do
    nextLabelList += !mBlock.mLabel.string
  end
  nextLabelList += !""
  [!?nextLabelList popFirst ?*]
#--- Compute durations
  outBlockDurationMap = {}
  var continue = true
  loop ([ioBlockList length] + 1) while continue do
    continue = false
    let tempBlockList = ioBlockList
    ioBlockList = {}
    for (aBlock) in tempBlockList, (nextLabel) in nextLabelList do
      [aBlock computeDuration !?outBlockDurationMap !nextLabel ?let newBlock !?continue]
      ioBlockList += !newBlock
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

method @ipic18Block computeDuration
  ?!@blockDurationMap ioExploredBlockMap
  ?@string inNextLabel
  !@ipic18Block outNewBlock
  ?!@bool ioContinue
{
  if self.mTerminatorMin <= self.mTerminatorMax then # Already solved
    outNewBlock = self
  else
    [self.mTerminator terminatorMinMaxDuration !ioExploredBlockMap !inNextLabel ?let terminatorMin ?let terminatorMax]
    var min = terminatorMin
    var max = terminatorMax
    var @ipic18SequentialInstructionList computedInstructionList = {}
    var ok = min <= max
    for > (instr * *) in self.mInstructionList  do
      [instr minMaxDuration
        !ioExploredBlockMap
        ?let @uint instructionMin
        ?let @uint instructionMax
      ]
      if ok && (instructionMin <= instructionMax) then
        min = min + instructionMin
        max = max + instructionMax
        [!?computedInstructionList insertAtIndex !instr !min !max !0]
      else
        ok = false
        [!?computedInstructionList insertAtIndex !instr !@uint.max !0 !0]
      end
    end
    if ok then # Solved
      outNewBlock = @ipic18Block.new {
        !self.mAddress
        !self.mLabel
        !computedInstructionList
        !self.mTerminator
        !terminatorMin
        !terminatorMax
      }
      ioContinue = true
      [!?ioExploredBlockMap insertKey !self.mLabel !min !max]
    else # Not solved
      outNewBlock = self
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc ipic18PrintDurations
  ?!@string ioListFileContents 
  ?let @blockDurationMap inBlockDurationMap
{
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
  ioListFileContents += "*" + ["TIMINGS" stringByLeftAndRightPadding !117 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
  ioListFileContents += ["Label" stringByLeftPadding !100 !' '] + ": min ... max\n" 
  for (key min max) in inBlockDurationMap do
    ioListFileContents += [key.string stringByLeftPadding !100 !' '] + ": " + min + " ... " + max + "\n" 
  end
  ioListFileContents += "\n"
}

#----------------------------------------------------------------------------------------------------------------------*
