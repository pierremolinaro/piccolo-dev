

#----------------------------------------------------------------------------*

#!Instruction size

#----------------------------------------------------------------------------*

getter @ipic18SequentialInstruction instructionSize
  -> @uint outSize {
  outSize = 2
}

#----------------------------------------------------------------------------*

override getter @ipic18_condition_skip_instruction instructionSize
  -> @uint outSize {
  outSize = 2 + [self.mEmbeddedInstruction instructionSize]
}

#----------------------------------------------------------------------------*

#!Check relative resolution : instruction

#----------------------------------------------------------------------------*

method @ipic18SequentialInstruction performInstructionRelativeBranchResolution
  ?let @uint unused inAddress
  ?let @string unused inBlockLabel
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?!@uint unused ioConversionCount
  ?!@string unused ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
}

#----------------------------------------------------------------------------*

override method @ipic18_condition_skip_instruction instructionRelativeBranchOverflow
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@branchOverflowMap ioOverflowMap {
  [self.mEmbeddedInstruction instructionRelativeBranchOverflow
    !inAddress + 2
    !inBlockLabel
    !inSymbolTable
    !?ioOverflowMap
  ]
}

#----------------------------------------------------------------------------*

#!Intermediate instruction display

#----------------------------------------------------------------------------*

abstract getter @ipic18SequentialInstruction instructionDisplay
  ->@stringlist

#----------------------------------------------------------------------------*

#!Intermediate @ipic18InstructionWithNoOperand

#----------------------------------------------------------------------------*

getter @pic18InstructionWithNoOperandKind mnemonic
  ->@string outResult {
  switch self
  case CLRWDT : outResult = "CLRWDT"
  case DAW : outResult = "DAW"
  case NOP : outResult = "NOP"
  case POP : outResult = "POP"
  case PUSH : outResult = "PUSH"
  case RESET : outResult = "RESET"
  case SLEEP : outResult = "SLEEP"
  end
}

#----------------------------------------------------------------------------*

override getter @ipic18InstructionWithNoOperand instructionDisplay
  ->@stringlist outResult {
  outResult = @stringlist. listWithValue { ![self.mKind mnemonic]}
}

#----------------------------------------------------------------------------*

override method @ipic18InstructionWithNoOperand generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint c
  switch self.mKind
  case CLRWDT :
    c = 0x0004
  case DAW :
    c = 0x0007
  case NOP :
    c = 0x0000
  case POP :
    c = 0x0006
  case PUSH :
    c = 0x0005
  case RESET :
    c = 0x00FF
  case SLEEP :
    c = 0x0003
  end
  outCode = @codeList.listWithValue {
    !"    " + [self.mKind mnemonic]
    !§[.init (c)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_FDA

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_FDA instructionDisplay
  ->@stringlist outResult {
  var @string s
  switch self.mInstruction_FDA_base_code
    case ADDWF : s = "ADDWF"
    case ADDWFC : s = "ADDWFC"
    case ANDWF : s = "ANDWF"
    case COMF : s = "COMF"
    case DECF : s = "DECF"
    case INCF : s = "INCF"
    case IORWF : s = "IORWF"
    case MOVF : s = "MOVF"
    case RLCF : s = "RLCF"
    case RLNCF : s = "RLNCF"
    case RRCF : s = "RRCF"
    case RRNCF : s = "RRNCF"
    case SUBFWB : s = "SUBFWB"
    case SUBWF : s = "SUBWF"
    case SUBWFB : s = "SUBWFB"
    case SWAPF : s = "SWAPF"
    case XORWF : s = "XORWF"
  end
  s += " " + self.mRegisterDescription.mAssemblyString
  if self.m_W_isDestination & self.mRegisterDescription.mNeedsBSR then
    s += ", W, BSR_ACCESS"
  elsif self.mRegisterDescription.mNeedsBSR then
    s += ", F, BSR_ACCESS"
  elsif self.m_W_isDestination then
    s += ", W"
  else
    s += ", F"
  end
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FDA generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var @uint code
  switch self.mInstruction_FDA_base_code
  case ADDWF : code = 0x2400
  case ADDWFC : code = 0x2000
  case ANDWF : code = 0x1400
  case COMF : code = 0x1C00
  case DECF : code = 0x0400
  case INCF : code = 0x2800
  case IORWF : code = 0x1000
  case MOVF : code = 0x5000
  case RLCF : code = 0x3400
  case RLNCF : code = 0x4400
  case RRCF : code = 0x3000
  case RRNCF : code = 0x4000
  case SUBFWB : code = 0x5400
  case SUBWF : code = 0x5C00
  case SUBWFB :  code = 0x5800
  case SWAPF : code = 0x3800
  case XORWF : code = 0x1800
  end

  if self.mRegisterDescription.mNeedsBSR then
    code = code | 0x0100
  end
  if not self.m_W_isDestination then
    code = code | 0x0200
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 255)
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_FDA

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_FA instructionDisplay ->@stringlist outResult {
  var @string s
  switch self.mFAinstruction
  case CLRF   : s = "CLRF"
  case MOVWF  : s = "MOVWF"
  case MULWF  : s = "MULWF"
  case NEGF   : s = "NEGF"
  case SETF   : s = "SETF"
  end

  s += " " + self.mRegisterDescription.mAssemblyString
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FA generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var @uint code
  switch self.mFAinstruction
  case CLRF   : code = 0x6A00
  case MOVWF  : code = 0x6E00
  case MULWF  : code = 0x0200
  case NEGF   : code = 0x6C00
  case SETF   : code = 0x6800
  end

  if self.mRegisterDescription.mNeedsBSR then
    code = code | 0x0100
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 255)
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_MOVFF

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_MOVFF instructionSize
  -> @uint outSize {
  outSize = 4
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_MOVFF instructionDisplay ->@stringlist outResult {
  let @string s = "MOVFF " + self.mSourceRegisterDescription.mAssemblyString
  + ", " + self.mDestinationRegisterDescription.mAssemblyString
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MOVFF generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var code =@uintlist ()
  code += !0xC000 | self.mSourceRegisterDescription.mRegisterAddress
  code += !0xF000 | self.mDestinationRegisterDescription.mRegisterAddress
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !code}
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_literalOperation

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_literalOperation instructionDisplay ->@stringlist outResult {
  let @string s = [self.mLiteralInstruction mnemonic] + " " + [self.mLiteralValue hexString] + " ; " + self.mLiteralValue
  outResult = §[.init (s)]
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_literalOperation generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var @uint code
  switch self.mLiteralInstruction
  case ADDLW : code = 0x0F00
  case ANDLW : code = 0x0B00
  case IORLW : code = 0x0900
  case MOVLW : code = 0x0E00
  case MULLW : code = 0x0D00
  case SUBLW : code = 0x0800
  case XORLW : code = 0x0A00
  end
  code = code | self.mLiteralValue
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]}
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_LFSR

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_LFSR instructionSize
  -> @uint outSize {
  outSize = 4
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_LFSR instructionDisplay ->@stringlist outResult {
  let @string s = "LFSR " + [self.mFSRindex.uint string] + ", " + [self.mValue hexString]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_LFSR generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var code =@uintlist ()
  code += !0xEE00 | (self.mFSRindex.uint << 4) | (self.mValue >> 8)
  code += !0xF000 | (self.mValue & 255)
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !code}
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_FBA

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_FBA instructionDisplay ->@stringlist outResult {
  let @string s = [self.mBitOrientedOp mnemonic] + " " + self.mRegisterDescription.mAssemblyString + ", " + [self.mBitNumber string]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FBA generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  var @uint code
  switch self.mBitOrientedOp
  case BCF : code = 0x9000
  case BSF : code = 0x8000
  case BTG : code = 0x7000
  end
  if self.mRegisterDescription.mNeedsBSR then
    code = code | 0x0100
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 255)
  code = code | (self.mBitNumber << 9)
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_MOVLB

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_MOVLB instructionDisplay ->@stringlist outResult {
  let @string s = "MOVLB " + [self.mBankIndex.uint hexString]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MOVLB generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint code = 0x0100 | self.mBankIndex.uint
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_TBLRD

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_TBLRD instructionDisplay ->@stringlist outResult {
  let @string s = "TBLRD " + [self.mOption mnemonic]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLRD generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint code
  switch self.mOption
  case simpleAccess  : code = 0x0008
  case postIncrement : code = 0x0009
  case postDecrement : code = 0x000A
  case preIncrement  : code = 0x000B
  end
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_TBLWT

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_TBLWT instructionDisplay ->@stringlist outResult {
  let @string s = "TBLWT " + [self.mOption mnemonic]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_TBLWT generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint code
  switch self.mOption
  case simpleAccess  : code = 0x000C
  case postIncrement : code = 0x000D
  case postDecrement : code = 0x000E
  case preIncrement  : code = 0x000F
  end
  outCode = @codeList. listWithValue {
    !"    " + [[self instructionDisplay] mValueAtIndex !0]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_MNOP

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_MNOP instructionSize
  -> @uint outSize
{
  outSize = self.mOccurrenceFactor.uint * 2
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_MNOP instructionDisplay ->@stringlist outResult {
  let s = "MNOP " + self.mOccurrenceFactor.uint
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_MNOP generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode
{
  outCode = @codeList ()
  var @uint idx = 0
  loop( self.mOccurrenceFactor.uint)
  while idx < self.mOccurrenceFactor.uint
  do
    outCode += !"    NOP" !§[.init (0x0000)]
    idx += 1
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_NOPBRA

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_NOPBRA instructionSize
  -> @uint outSize {
  outSize = self.mOccurrenceFactor.uint * 2
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_NOPBRA instructionDisplay ->@stringlist outResult {
  let s = "NOPBRA " + self.mOccurrenceFactor.uint
  outResult = §[.init (s)]
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_NOPBRA generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode
 {
  outCode = ()
  var @uint idx = 0
  loop (self.mOccurrenceFactor.uint)
  while idx < self.mOccurrenceFactor.uint
  do
    outCode += !"    BRA $+2" !§[.init (0xD000)]
    idx += 1
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_MOV_LABEL_W

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_MOV_LABEL_W instructionDisplay ->@stringlist outResult {
  let @string s = "MOVLW ((" + self.mLabel + " + " + self.mOffset + ") >> " + self.mRightShift + ") & 0xFF"
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_MOV_LABEL_W generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap inDataAddressMap
  !@codeList outCode {
  [inDataAddressMap searchKey !self.mLabel ?let @uint address]
  let @uint code = ((address + self.mOffset) >> self.mRightShift) & 0xFF
  let @uint code_MOVLW = 0x0E00
  outCode = @codeList. listWithValue {
    !"    MOVLW ((_data_" + self.mLabel + " + " + self.mOffset + ") >> " + self.mRightShift + ") & 0xFF"
    !§[.init (code | code_MOVLW)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_BLANK

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_BLANK instructionDisplay ->@stringlist outResult {
  let @string s = "BLANK " + [self.mBlankValue hexString]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_BLANK generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint code = 0xF000 | self.mBlankValue
  outCode = @codeList. listWithValue {
    !"    DW " + [code hexString]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_FNOP

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_FNOP instructionDisplay ->@stringlist outResult {
  let @string s = "FNOP " + [self.mBlankValue hexString]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_FNOP generateCode
  ?let @uint unused inAddress
  ?let @symbolTableForRelativesResolution unused inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  let @uint code = 0xF000 | self.mBlankValue
  outCode = @codeList. listWithValue {
    !"    DW " + [code hexString]
    !§[.init (code)]
  }
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_skip_instruction_compare_register

#----------------------------------------------------------------------------*

override getter @ipic18_skip_instruction_compare_register instructionDisplay ->@stringlist outResult {
  var @string s = self.mRegisterDescription.mAssemblyString + " "
  switch self.mCompareInstruction
  case CPFSEQ : s += "!= W"
  case CPFSGT : s += "<= W"
  case CPFSLT : s += ">= W"
  case TSTFSZ : s += "!= 0"
  end
  s += " ? " + [[self.mEmbeddedInstruction instructionDisplay] mValueAtIndex !0]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_compare_register generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataAddressMap
  !@codeList outCode {
  var @uint code
  switch self.mCompareInstruction
  case CPFSEQ : code = 0x6200
  case CPFSGT : code = 0x6400
  case CPFSLT : code = 0x6000
  case TSTFSZ : code = 0x6600
  end

  if self.mRegisterDescription.mNeedsBSR then
    code = code | 0x0100
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 255)
#--- Assembly string
  var @string s = "    "
  switch self.mCompareInstruction
  case CPFSEQ : s += "CPFSEQ"
  case CPFSGT : s += "CPFSGT"
  case CPFSLT : s += "CPFSLT"
  case TSTFSZ : s += "TSTFSZ"
  end
  s += " " + self.mRegisterDescription.mAssemblyString
  if self.mRegisterDescription.mNeedsBSR then
    s += ", BSR_ACCESS"
  end
#---
  outCode = @codeList. listWithValue {
    !s
    !§[.init (code)]
  }
  [self.mEmbeddedInstruction generateCode
    !inAddress + 2
    !inSymbolTable
    !inDataAddressMap
    ?let @codeList c
  ]
  outCode += c
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_compare_register performInstructionRelativeBranchResolution
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
  let @uint n = ioConversionCount
  [self.mEmbeddedInstruction performInstructionRelativeBranchResolution
    !inAddress + 2
    !inBlockLabel
    !inSymbolTable
    !?ioConversionCount
    !?ioListFileContents
    ?let @ipic18SequentialInstruction outModifiedEmbeddedInstruction
  ]
  if n != ioConversionCount then
    outModifiedInstruction = @ipic18_skip_instruction_compare_register.init { 
      !self.mInstructionLocation
      !outModifiedEmbeddedInstruction
      !self.mCompareInstruction
      !self.mRegisterDescription}  
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_skip_instruction_BitTestSkip

#----------------------------------------------------------------------------*

override getter @ipic18_skip_instruction_BitTestSkip instructionDisplay ->@stringlist outResult {
  var @string s = ""
  if self.mSkipIfSet then
    s += "!"
  end
  s += self.mRegisterDescription.mAssemblyString + "." + [self.mBitNumber string]
  + " ? "
  let @stringlist x = [self.mEmbeddedInstruction instructionDisplay]
  s += [x mValueAtIndex !0]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_BitTestSkip generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataAddressMap
  !@codeList outCode {
  var @uint code
  if self.mSkipIfSet then
    code = 0xA000 # BTFSS
  else
    code = 0xB000 # BTFSC
  end
  if self.mRegisterDescription.mNeedsBSR then
    code = code | 0x0100
  end
  code = code | (self.mRegisterDescription.mRegisterAddress & 255)
  code = code | (self.mBitNumber << 9)
#--- Assembly string
  var @string s = "    "
  if self.mSkipIfSet then
    s += "BTFSS"
  else
    s += "BTFSC"
  end
  s += " " + self.mRegisterDescription.mAssemblyString + ", " + [self.mBitNumber string]
#---
  outCode = @codeList. listWithValue {
    !s
    !§[.init (code)]
  }
  [self.mEmbeddedInstruction generateCode
    !inAddress + 2
    !inSymbolTable
    !inDataAddressMap
    ?let @codeList c
  ]
  outCode += c
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_BitTestSkip performInstructionRelativeBranchResolution
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
  let @uint n = ioConversionCount
  [self.mEmbeddedInstruction performInstructionRelativeBranchResolution
    !inAddress + 2
    !inBlockLabel
    !inSymbolTable
    !?ioConversionCount
    !?ioListFileContents
    ?let @ipic18SequentialInstruction outModifiedEmbeddedInstruction
  ]
  if n != ioConversionCount then
    outModifiedInstruction = @ipic18_skip_instruction_BitTestSkip.init { 
      !self.mInstructionLocation
      !outModifiedEmbeddedInstruction
      !self.mSkipIfSet
      !self.mRegisterDescription
      !self.mBitNumber}  
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_skip_instruction_FDA

#----------------------------------------------------------------------------*

override getter @ipic18_skip_instruction_FDA instructionDisplay ->@stringlist outResult {
  var @string s
  switch self.mInstruction_FDA_base_code
  case DECFSZ : s = "DECFSZ"
  case DCFSNZ : s = "DCFSNZ"
  case INCFSZ : s = "INCFSZ"
  case INFSNZ : s = "INFSNZ"
  end
  s += " " + self.mRegisterDescription.mAssemblyString
  if self.m_W_isDestination then
    s += ", W"
  end
  s += " ? "
  let @stringlist x = [self.mEmbeddedInstruction instructionDisplay]
  s += [x mValueAtIndex !0]
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_FDA generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataAddressMap
  !@codeList outCode {
  var @uint binCode
  switch self.mInstruction_FDA_base_code
  case DECFSZ : binCode = 0x2C00
  case DCFSNZ : binCode = 0x4C00
  case INCFSZ : binCode = 0x3C00
  case INFSNZ : binCode = 0x4800
  end
  if self.mRegisterDescription.mNeedsBSR then
    binCode = binCode | 0x0100
  end
  binCode = binCode | (self.mRegisterDescription.mRegisterAddress & 255)
#--- Assembly string
  var @string assemblyCode = "    "
  switch self.mInstruction_FDA_base_code
  case DECFSZ : assemblyCode += "DECFSZ"
  case DCFSNZ : assemblyCode += "DCFSNZ"
  case INCFSZ : assemblyCode += "INCFSZ"
  case INFSNZ : assemblyCode += "INFSNZ"
  end
  assemblyCode += " " + self.mRegisterDescription.mAssemblyString
  if self.m_W_isDestination then
    assemblyCode += ", W"
  else
    binCode = binCode | 0x0200
    assemblyCode += ", F"
  end
  if self.mRegisterDescription.mNeedsBSR then
    binCode = binCode | 0x0100
    assemblyCode += ", BSR_ACCESS"
  end
#---
  outCode = @codeList. listWithValue {
    !assemblyCode
    !§[.init (binCode)]
  }
  [self.mEmbeddedInstruction generateCode
    !inAddress + 2
    !inSymbolTable
    !inDataAddressMap
    ?let @codeList c
  ]
  outCode += c
}

#----------------------------------------------------------------------------*

override method @ipic18_skip_instruction_FDA performInstructionRelativeBranchResolution
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
  let @uint n = ioConversionCount
  [self.mEmbeddedInstruction performInstructionRelativeBranchResolution
    !inAddress + 2
    !inBlockLabel
    !inSymbolTable
    !?ioConversionCount
    !?ioListFileContents
    ?let @ipic18SequentialInstruction outModifiedEmbeddedInstruction
  ]
  if n != ioConversionCount then
    outModifiedInstruction = @ipic18_skip_instruction_FDA.init { 
      !self.mInstructionLocation
      !outModifiedEmbeddedInstruction
      !self.mInstruction_FDA_base_code
      !self.mRegisterDescription
      !self.m_W_isDestination}  
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_JSR

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_JSR instructionSize
  -> @uint outSize {
  switch self.mKind
  case ipicRelative, relative :
    outSize = 2
  case absolute :
    outSize = 4
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR instructionRelativeBranchOverflow
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@branchOverflowMap ioOverflowMap {
  switch self.mKind
  case ipicRelative, relative :
    if not pic18_checkBRA_RCALL (!inSymbolTable !self.mTargetLabel !inAddress) then
      ioOverflowMap += !inBlockLabel !self.mTargetLabel.string
    end
  case absolute : # Allways ok
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR performInstructionRelativeBranchResolution
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
  switch self.mKind
  case ipicRelative :
    if not pic18_checkBRA_RCALL (!inSymbolTable !self.mTargetLabel !inAddress) then
      ioConversionCount += 1
      ioListFileContents += "  " + inBlockLabel + ": JSR " + self.mTargetLabel + " --> CALL " + self.mTargetLabel + "\n"
      outModifiedInstruction = @ipic18_intermediate_JSR.init { !self.mInstructionLocation !self.mTargetLabel !@jumpInstructionKind. absolute}
    end
  case relative :
    if not pic18_checkBRA_RCALL (!inSymbolTable !self.mTargetLabel !inAddress) then
      error self.mInstructionLocation: "displacement ("
      + pic18_BRA_RCALL_displacement (!inSymbolTable !self.mTargetLabel !inAddress)
      + ") too large for RCALL " + self.mTargetLabel + " instruction (limited to [-1024, 1023])"
    end
  case absolute : # Allways ok
  end
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_JSR instructionDisplay ->@stringlist outResult {
    let @string s
    switch self.mKind
    case ipicRelative : s = "JSR " + self.mTargetLabel
    case relative     : s = "RCALL " + self.mTargetLabel
    case absolute     : s = "CALL " + self.mTargetLabel
  end
  outResult = @stringlist. listWithValue { !s}
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap unused inDataAddressMap
  !@codeList outCode {
  [inSymbolTable searchKey !self.mTargetLabel ?let @uint targetAddress]
  switch self.mKind
  case ipicRelative, relative :
    outCode = pic18_RCALL_instruction_code (!inAddress !targetAddress !self.mTargetLabel)
  case absolute :
    outCode = pic18_CALL_instruction_code (!targetAddress !self.mTargetLabel)
  end
}

#----------------------------------------------------------------------------*

#!Intermediate @ipic18_intermediate_instruction_computed_rcall

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_computed_rcall instructionSize
  -> @uint outSize {
  if self.mUsesRCALL then
    outSize = 2
  else
    outSize = 4
  end
  outSize = outSize + 4 * [self.mTargetInstructions count] - 2
}

#----------------------------------------------------------------------------*

override getter @ipic18_intermediate_instruction_computed_rcall instructionDisplay ->@stringlist outResult {
  var @string s = "COMPUTED "
  if not self.mUsesRCALL then
    s += "(uses CALL)"
  end
  outResult = @stringlist. listWithValue { !s}
  for (mInstruction * *) in  self.mTargetInstructions do
    for (mValue) in  [mInstruction instructionDisplay] do
      outResult += !"   " + mValue
    end
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall instructionRelativeBranchOverflow
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@branchOverflowMap ioOverflowMap {
  var @uint address = inAddress + if self.mUsesRCALL then 2 else 4 end
  for (mInstruction * *) in  self.mTargetInstructions do
    [mInstruction instructionRelativeBranchOverflow
      !address
      !inBlockLabel
      !inSymbolTable
      !?ioOverflowMap
    ]
    address = address + 4
  end
  if self.mUsesRCALL then
    if not pic18_checkBRA_RCALL (!inSymbolTable !["_computed_goto_4" nowhere] !inAddress) then
      ioOverflowMap += !inBlockLabel !"_computed_goto_4"
    end
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall performInstructionRelativeBranchResolution
  ?let @uint inAddress
  ?let @string inBlockLabel
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18SequentialInstruction outModifiedInstruction {
  outModifiedInstruction = self
  var @uint unusedConversionCount = 0
  var @string unusedListing = ""
  var @uint address = inAddress + if self.mUsesRCALL then 2 else 4 end
  for (mInstruction * *) in  self.mTargetInstructions do
    #--- NEVER CONVERT: ONLY PERFORM CHECKING
    [mInstruction performInstructionRelativeBranchResolution
      !address
      !inBlockLabel
      !inSymbolTable
      !?unusedConversionCount
      !?unusedListing
      ?* # ?@ipic18SequentialInstruction outModifiedInstruction
    ]
    address = address + 4
  end
  if self.mUsesRCALL then
    if not pic18_checkBRA_RCALL (!inSymbolTable !["_computed_goto_4" nowhere] !inAddress) then
      ioConversionCount += 1
      ioListFileContents += "  " + inBlockLabel + ": computed rcall needs to use CALL _computed_goto_4\n"
      outModifiedInstruction = @ipic18_intermediate_instruction_computed_rcall.init {
        !self.mInstructionLocation
        !self.mTargetInstructions
        !false}
    end
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall generateCode
  ?let @uint inAddress
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @pic18_dataAddressMap inDataAddressMap
  !@codeList outCode {
  let target = @lstring.init { !"_computed_goto_4" !self.mInstructionLocation}

  [inSymbolTable searchKey !target ?let @uint computetedGoto4Address]

  var @uint currentInstructionAddress
  if self.mUsesRCALL then
    currentInstructionAddress = inAddress + 2
    outCode = pic18_RCALL_instruction_code (!inAddress !computetedGoto4Address !target)
  else
    currentInstructionAddress = inAddress + 4
    outCode = pic18_CALL_instruction_code (!computetedGoto4Address !target)
  end
  let @uint instructionFollowingComputedRcallAddress = currentInstructionAddress + [self.mTargetInstructions count] * 4 - 1
  let nextInstructionLabel = @lstring.init { !"_computed_" + [inAddress xString] !self.mInstructionLocation}
  var @uint idx = 0
  for (mInstruction * *) in  self.mTargetInstructions do
    idx += 1
    [mInstruction generateCode
      !currentInstructionAddress
      !inSymbolTable
      !inDataAddressMap
      ?let @codeList instructionCode
    ]
    outCode += instructionCode
    currentInstructionAddress = currentInstructionAddress + 2
    if idx < [self.mTargetInstructions count] then
      outCode += pic18_BRA_instruction_code (!currentInstructionAddress !instructionFollowingComputedRcallAddress !nextInstructionLabel)
      currentInstructionAddress = currentInstructionAddress + 2
    end
  end
#--- Emit label instruction
  outCode += pic18_definition_label (!nextInstructionLabel)
}

#----------------------------------------------------------------------------*



