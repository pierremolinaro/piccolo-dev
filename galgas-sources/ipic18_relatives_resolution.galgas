

#----------------------------------------------------------------------------*

method @ipic18Block performRelativesResolution
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @string inNextBlockLabel
  ?let @uint inBlockStartAddress
  ?!@uint ioConversionCount
  ?!@string ioListFileContents
  !@ipic18Block outModifiedBlock
{
#--- Instruction
  var modifiedInstructionList =@ipic18SequentialInstructionList ()
  var @uint address = inBlockStartAddress
  for (mInstruction * *) in  self.mInstructionList do
    [mInstruction performInstructionRelativeBranchResolution
      !address
      !self.mLabel.string
      !inSymbolTable
      !?ioConversionCount
      !?ioListFileContents
      ?let @ipic18SequentialInstruction modifiedInstruction
    ]
    modifiedInstructionList += !modifiedInstruction !@uint.max !0
    address = address + [mInstruction instructionSize]
  end
#--- Terminator
  [self.mTerminator performTerminatorRelativeBranchResolution
    !address
    !self.mLabel.string
    !inSymbolTable
    !inNextBlockLabel
    !?ioConversionCount
    !?ioListFileContents
    ?let @ipic18AbstractBlockTerminator modifiedTerminator
  ]
#---
  outModifiedBlock = @ipic18Block {
    !self.mAddress
    !self.mLabel
    !modifiedInstructionList
    !modifiedTerminator
    !@uint.max
    !0
  }
}

#----------------------------------------------------------------------------*

proc performRelativesResolution
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?!@ipic18BlockList ioBlockList
  ?!@uint ioConversionCount
  ?!@string ioListFileContents {
  var modifiedBlockList =@ipic18BlockList ()
  var @uint blockStartAddress = 0
  for (mBlock) in  ioBlockList do(blockIndex)
    let @string nextBlockLabel
    if (blockIndex+1) < [ioBlockList count] then
      nextBlockLabel = [ioBlockList mBlockAtIndex !blockIndex+1].mLabel.string
    else
      nextBlockLabel = ""
    end
    if mBlock.mAddress != @uint. max then # Absolute block
      blockStartAddress = mBlock.mAddress
    end
    [mBlock performRelativesResolution
      !inSymbolTable
      !nextBlockLabel
      !blockStartAddress
      !?ioConversionCount
      !?ioListFileContents
      ?let @ipic18Block modifiedBlock
    ]
    modifiedBlockList += !modifiedBlock
    let @uint blockSize = [mBlock blockSize !nextBlockLabel]
    blockStartAddress = blockStartAddress + blockSize
  end
  ioBlockList = modifiedBlockList
}

#----------------------------------------------------------------------------*

#!Block Size and address

#----------------------------------------------------------------------------*

getter @ipic18Block blockSize
  ?let @string inNextBlockLabel
  ->@uint outResult {
  outResult = [self.mTerminator terminatorSize !inNextBlockLabel]
  for (mInstruction * *) in  self.mInstructionList do
    outResult = outResult + [mInstruction instructionSize]  
  end
}

#----------------------------------------------------------------------------*

proc computeLabelAbsoluteAddressMap
  ?let @ipic18BlockList inGeneratedBlockList
  ?let @ipic18BlockList inInitialBlockList # for entering absolute labels
  !@symbolTableForRelativesResolution outSymbolTable
  !@uint outFreeAddress {
  outSymbolTable = @symbolTableForRelativesResolution ()
  outFreeAddress = @uint. max
#--- Pass first absolute blocks
  var @uint blockStartAddress = 0
  for (mBlock) in  inGeneratedBlockList do(blockIndex)
    let @string nextBlockLabel
    if (blockIndex+1) < [inGeneratedBlockList count] then
      nextBlockLabel = [inGeneratedBlockList mBlockAtIndex !blockIndex+1].mLabel.string
    else
      nextBlockLabel = ""
    end
    if mBlock.mAddress != @uint. max then # Absolute block
      blockStartAddress = mBlock.mAddress
    end
    [!?outSymbolTable insertKey !mBlock.mLabel !blockStartAddress]
    let @uint blockSize = [mBlock blockSize !nextBlockLabel]
    blockStartAddress = blockStartAddress + blockSize
    if mBlock.mAddress == @uint. max then # Relocatable block
      outFreeAddress = blockStartAddress
    end
  end
#---
  for (mBlock) in  inInitialBlockList do
    if mBlock.mAddress != @uint. max then # Absolute block
      if not [outSymbolTable hasKey !mBlock.mLabel.string] then
        [!?outSymbolTable insertKey !mBlock.mLabel !mBlock.mAddress]
      end
    end  
  end
}

#----------------------------------------------------------------------------*

proc ipic18RelativesResolution
  ?!@string ioListFileContents
  ?!@ipic18BlockList ioGeneratedBlockList {
#---
  if @application.verboseOutput then
    print (!"Relative branch conversion to absolute:\n")
  end
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
  ioListFileContents += "*" + ["RELATIVES RESOLUTION" stringByLeftAndRightPadding !117 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
#---
  var @bool resolutionDone = false
  var @uint pass = 0
  loop( [ioGeneratedBlockList count] + 1)
  while (not resolutionDone) & (@uint. errorCount == 0) do
    pass += 1
    computeLabelAbsoluteAddressMap (
      !ioGeneratedBlockList
      !@ipic18BlockList ()
      ?let @symbolTableForRelativesResolution symbolTable
      ?*
    )
    ioListFileContents += "\nPass " + pass + ":\n"
    var @uint conversionCount = 0
    performRelativesResolution (
      !symbolTable
      !?ioGeneratedBlockList
      !?conversionCount
      !?ioListFileContents
    )
    resolutionDone = conversionCount == 0
    if @application.verboseOutput then
      var @string s = "  Pass " + pass + ": "
      if conversionCount == 0 then
        s += "none."
      elsif conversionCount == 1 then
        s += "1 conversion"
      else
        s += [conversionCount string] + " conversions"
      end
      print (!s + "\n")
    end
  end
  if @application.verboseOutput then
    ioListFileContents += "  No conversion.\n\n"
    print (!"\n")
  end
}

#----------------------------------------------------------------------------*

#! Relative Branch overflow

#----------------------------------------------------------------------------*

method @ipic18Block relativeBranchOverflow
  ?let @symbolTableForRelativesResolution inSymbolTable
  ?let @string inNextBlockLabel
  ?let @uint inBlockStartAddress
  ?!@branchOverflowMap ioOverflowMap {
#--- Instruction
  var @uint address = inBlockStartAddress
  for (mInstruction * *) in  self.mInstructionList do
    [mInstruction instructionRelativeBranchOverflow
      !address
      !self.mLabel.string
      !inSymbolTable
      !?ioOverflowMap
    ]
    address = address + [mInstruction instructionSize]
  end
#--- Terminator
  [self.mTerminator terminatorRelativeBranchOverflow
    !address
    !self.mLabel.string
    !inSymbolTable
    !inNextBlockLabel
    !?ioOverflowMap
  ]
}

#----------------------------------------------------------------------------*

proc ipic18RelativeBranchOverflow
  ?let @ipic18BlockList inBlockList
  ?let @ipic18BlockList inInitialBlockList # for entering absolute labels
  !@branchOverflowMap outOverflowMap {
#--- Compute label map
  computeLabelAbsoluteAddressMap (
    !inBlockList
    !inInitialBlockList # for entering absolute labels
    ?let @symbolTableForRelativesResolution symbolTable
    ?*
  )
#---
  outOverflowMap = @branchOverflowMap ()
  var @uint blockStartAddress = 0
  for (mBlock) in  inBlockList do(blockIndex)
    let @string nextBlockLabel
    if (blockIndex+1) < [inBlockList count] then
      nextBlockLabel = [inBlockList mBlockAtIndex !blockIndex+1].mLabel.string
    else
      nextBlockLabel = ""
    end
    if mBlock.mAddress != @uint. max then # Absolute block
      blockStartAddress = mBlock.mAddress
    end
    [mBlock relativeBranchOverflow
      !symbolTable
      !nextBlockLabel
      !blockStartAddress
      !?outOverflowMap
    ]
    let @uint blockSize = [mBlock blockSize !nextBlockLabel]
    blockStartAddress = blockStartAddress + blockSize
  end
}

#----------------------------------------------------------------------------*

