map @blockMapForStackComputation {
  public var @ipic18Block mBlock
  insert insertKey error message "the '%K' block is already declared in %L"
  search searchKey error message "the '%K' block is not declared"
}

#------------------------------------------------------------------------------*

map @routineCallMap {
  public var @stringset mCalledRoutineSet
  public var @uint mTerminatorStackNeeds
  insert insertKey error message "the '%K' entry is already declared in %L"
}

#------------------------------------------------------------------------------*

map @routineStackRequirementMap {
  public var @uint mLevels
  insert insertKey error message "the '%K' entry is already declared in %L"
  search searchKey error message "the '%K' entry is not declared"
}

#----------------------------------------------------------------------------*

#! exploreAccessibleBlocksForStackComputations

#----------------------------------------------------------------------------*

abstract method @ipic18AbstractBlockTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset unused ioBlockToExploreSet
  ?!@stringset unused ioExploredBlockSet
  !@uint outStackNeeds

#----------------------------------------------------------------------------*

override method @ipic18AbstractConditionTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset ioBlockToExploreSet
  ?!@stringset ioExploredBlockSet
  !@uint outStackNeeds
{
  [self.mSingleInstructionTerminatorIfConditionTrue exploreAccessibleBlocksForStackComputations
    !?ioBlockToExploreSet
    !?ioExploredBlockSet
    ?let trueStackNeeds
  ]
  [self.mSingleInstructionTerminatorIfConditionFalse exploreAccessibleBlocksForStackComputations
    !?ioBlockToExploreSet
    !?ioExploredBlockSet
    ?let falseStackNeeds
  ]
  outStackNeeds = if trueStackNeeds > falseStackNeeds then trueStackNeeds else falseStackNeeds end
}

#----------------------------------------------------------------------------*

override method @ipic18ComputedBraTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset ioBlockToExploreSet
  ?!@stringset ioExploredBlockSet
  !@uint outStackNeeds
{
  for (mValue) in  self.mTargetLabels do
    if not [ioExploredBlockSet hasKey !mValue.string] then
      ioBlockToExploreSet += !mValue.string
    end
  end
  outStackNeeds = 1
}

#----------------------------------------------------------------------------*

override method @ipic18ComputedGotoTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset ioBlockToExploreSet
  ?!@stringset ioExploredBlockSet
  !@uint outStackNeeds
{
  for (mValue) in  self.mTargetLabels do
    if not [ioExploredBlockSet hasKey !mValue.string] then
      ioBlockToExploreSet += !mValue.string
    end
  end
  outStackNeeds = 1
}

#----------------------------------------------------------------------------*

override method @ipic18JumpTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset ioBlockToExploreSet
  ?!@stringset ioExploredBlockSet
  !@uint outStackNeeds
{
  if not [ioExploredBlockSet hasKey !self.mLabel.string] then
    ioBlockToExploreSet += !self.mLabel.string
  end
  outStackNeeds = 0
}

#----------------------------------------------------------------------------*

override method @ipic18ConditionalJumpTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset ioBlockToExploreSet
  ?!@stringset ioExploredBlockSet
  !@uint outStackNeeds
{
  if not [ioExploredBlockSet hasKey !self.mTargetLabelWhenTrue.string] then
    ioBlockToExploreSet += !self.mTargetLabelWhenTrue.string
  end
  if not [ioExploredBlockSet hasKey !self.mTargetLabelWhenFalse.string] then
    ioBlockToExploreSet += !self.mTargetLabelWhenFalse.string
  end
  outStackNeeds = 0
}

#----------------------------------------------------------------------------*

override method @ipic18ComputedRETLWTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset unused ioBlockToExploreSet
  ?!@stringset unused ioExploredBlockSet
  !@uint outStackNeeds
{
  outStackNeeds = 1
}

#----------------------------------------------------------------------------*

override method @ipic18ReturnTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset unused ioBlockToExploreSet
  ?!@stringset unused ioExploredBlockSet
  !@uint outStackNeeds
{
  outStackNeeds = 0
}

#----------------------------------------------------------------------------*

override method @ipic18RetlwTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset unused ioBlockToExploreSet
  ?!@stringset unused ioExploredBlockSet
  !@uint outStackNeeds
{
  outStackNeeds = 0
}

#----------------------------------------------------------------------------*

override method @ipic18RetfieTerminator exploreAccessibleBlocksForStackComputations
  ?!@stringset unused ioBlockToExploreSet
  ?!@stringset unused ioExploredBlockSet
  !@uint outStackNeeds
{
  outStackNeeds = 0
}

#----------------------------------------------------------------------------*

#! buildCalledRoutineSetForStackComputations

#----------------------------------------------------------------------------*

method @ipic18SequentialInstruction buildCalledRoutineSetForStackComputations
  ?!@stringset unused ioRoutineCalledSet
{
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_JSR buildCalledRoutineSetForStackComputations
  ?!@stringset ioRoutineCalledSet {
  ioRoutineCalledSet += !self.mTargetLabel.string
}

#----------------------------------------------------------------------------*

override method @ipic18_intermediate_instruction_computed_rcall buildCalledRoutineSetForStackComputations
  ?!@stringset ioRoutineCalledSet {
  for (mInstruction * *) in  self.mTargetInstructions do
    [mInstruction buildCalledRoutineSetForStackComputations !?ioRoutineCalledSet]
  end
}

#----------------------------------------------------------------------------*

override method @ipic18_condition_skip_instruction buildCalledRoutineSetForStackComputations
  ?!@stringset ioRoutineCalledSet {
  [self.mEmbeddedInstruction buildCalledRoutineSetForStackComputations !?ioRoutineCalledSet]
}

#----------------------------------------------------------------------------*

#! Routine ipic18StackComputations

#----------------------------------------------------------------------------*

proc ipic18StackComputations
  ?!@string ioListFileContents
  ?let @ipic18BlockList inBlockList
{
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
  ioListFileContents += "*" + ["STACK COMPUTATIONS" stringByLeftAndRightPadding !117 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
#--- Find all absolute blocks
  var startLabelsToExplore =@stringset ()
  var blockMapForStackComputation =@blockMapForStackComputation ()
  for (mBlock) in  inBlockList do
    if mBlock.mAddress != @uint. max then # Absolute block
      startLabelsToExplore += !mBlock.mLabel.string    
    end  
    [!?blockMapForStackComputation insertKey !mBlock.mLabel !mBlock]
  end
#--- Explore all blocks to find called routines
  var @routineCallMap routineCallMap = @()
  loop( [inBlockList count] + 1)
  while [startLabelsToExplore count] > 0
  do
    let startLabel = [startLabelsToExplore anyString]
    [!?startLabelsToExplore removeKey !startLabel]
  #--- Explore accessible blocks
    var blockToExploreSet =@stringset ()
    blockToExploreSet += !startLabel
    var @stringset exploredBlockSet = @()
    var @stringset calledRoutineSet = @()
    var @uint terminatorStackNeeds = 0
    loop( [inBlockList count] + 1)
    while [blockToExploreSet count] > 0
    do
      let @string b = [blockToExploreSet anyString]
      [!?blockToExploreSet removeKey !b]
      exploredBlockSet += !b
      [blockMapForStackComputation searchKey ![b nowhere] ?let @ipic18Block aBlock]
      [aBlock.mTerminator exploreAccessibleBlocksForStackComputations
        !?blockToExploreSet
        !?exploredBlockSet
        ?let tsn
      ]
      if tsn > terminatorStackNeeds then
        terminatorStackNeeds = tsn
      end
      for (mInstruction * *) in aBlock.mInstructionList do
        [mInstruction buildCalledRoutineSetForStackComputations !?calledRoutineSet]
      end
    end
    [!?routineCallMap insertKey ![startLabel nowhere] !calledRoutineSet !terminatorStackNeeds]
    for (key) in  calledRoutineSet do
      if not [routineCallMap hasKey !key] then
        startLabelsToExplore += !key
      end
    end
  end
#  log routineCallMap ;
#--- Compute stack requirement of every routine
  var @routineStackRequirementMap routineStackRequirementMap = @()
  var progress = true
  loop( [routineCallMap count] + 1)
  while progress
  do
    progress = false
    let @routineCallMap tempRoutineCallMap = routineCallMap
    routineCallMap = @()
    for (lkey mCalledRoutineSet mTerminatorStackNeeds) in  tempRoutineCallMap do
      var @uint levels = mTerminatorStackNeeds
      var @bool solved = true
      for (key) in mCalledRoutineSet while solved do
        solved = [routineStackRequirementMap hasKey !key]
        if solved then
          [routineStackRequirementMap searchKey ![key nowhere] ?let @uint rLevel]
          if levels <= rLevel then
            levels = rLevel + 1
          end
        end
      end
      if solved then
        [!?routineStackRequirementMap insertKey !lkey !levels]
        progress = true
      else
        [!?routineCallMap insertKey !lkey !mCalledRoutineSet !mTerminatorStackNeeds]
      end
    end
  end
  ioListFileContents += "Levels Routine\n"
  for (lkey mLevels) in  routineStackRequirementMap do
    ioListFileContents += [[mLevels string]stringByLeftPadding !6 !' '] + " " + lkey + "\n"
  end
  ioListFileContents += "\n"
#--- Recursive routines
  let @bool noRecursiveRoutine = [routineCallMap count] == 0
  if not noRecursiveRoutine then
    if not [option piccoloOptions.doNotWarnRecursive value] then
      warning @location. nowhere: "There are recursive routines"
    end
    ioListFileContents += "The following routines are recursive:\n"
    for (lkey * *) in  routineCallMap do
      ioListFileContents += "  - " + lkey + "\n"
    end  
    ioListFileContents += "\n"
  end
#--- Total stack requirements
  if noRecursiveRoutine then
    [routineStackRequirementMap searchKey ![".START" nowhere] ?let @uint mainLevels]
    var @uint totalLevels = mainLevels
    if [routineStackRequirementMap hasKey !".HIGH_INTERRUPT"] then
      [routineStackRequirementMap searchKey ![".HIGH_INTERRUPT" nowhere] ?let @uint highIntLevels]
      totalLevels = totalLevels + highIntLevels + 1
    end
    if [routineStackRequirementMap hasKey !".LOW_INTERRUPT"] then
      [routineStackRequirementMap searchKey ![".LOW_INTERRUPT" nowhere] ?let @uint lowIntLevels]
      totalLevels = totalLevels + lowIntLevels + 1
    end
    print (!"Max stack depth: " + totalLevels + "\n\n")
    if totalLevels > 31 then
      error @location. nowhere: "Max stack depth is greater than 31"
    end
  end
}      

#----------------------------------------------------------------------------*


