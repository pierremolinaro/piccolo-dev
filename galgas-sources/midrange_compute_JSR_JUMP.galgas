

#----------------------------------------------------------------------------*

map @midrange_symbolTableForConvertingRelatives {
  public var @uint mRoutineAddress
  insert insertKey error message "the '%K' label is already declared in %L"
  search searchKey error message "the '%K' label is not declared"
}

#----------------------------------------------------------------------------*
#                                                                            *
#                          defineLabelAtAddress                              *
#                                                                            *
#----------------------------------------------------------------------------*

method @midrange_intermediate_instruction defineLabelAtAddress
  ?!@midrange_symbolTableForConvertingRelatives unused ioRoutineSymbolTable
  ?!@uint unused ioAddress {
}

#----------------------------------------------------------------------------*

override
method @midrange_intermediate_pseudo_LABEL defineLabelAtAddress
  ?!@midrange_symbolTableForConvertingRelatives ioRoutineSymbolTable
  ?!@uint ioAddress {
  [!?ioRoutineSymbolTable insertKey !self.mLabel !ioAddress]
}

#----------------------------------------------------------------------------*

override
method @midrange_intermediate_pseudo_ORG defineLabelAtAddress
  ?!@midrange_symbolTableForConvertingRelatives unused ioRoutineSymbolTable
  ?!@uint ioAddress {
  if (ioAddress > self.mOrigin) then
    error @location.here :"internal error: current address ("
     + [ioAddress hexString] + ") is greater than origin (" + [self.mOrigin hexString] + ")"
  end
  ioAddress = self.mOrigin
}

#----------------------------------------------------------------------------*

override
method @midrange_intermediate_actualInstruction defineLabelAtAddress
  ?!@midrange_symbolTableForConvertingRelatives unused ioRoutineSymbolTable
  ?!@uint ioAddress {
  let @uint nextAddress = ioAddress  + [self instructionLength]
  if ((nextAddress ^ ioAddress) & 0xF800) != 0 then
    error self.mInstructionLocation:"Routine too long, crosses page boundary at this instruction"
  end
  ioAddress = nextAddress
}

#----------------------------------------------------------------------------*
#                                                                            *
#               R E L A T I V E    B R A N C H    C H E C K I N G            *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @midrange_intermediate_instruction compute
  ?let @midrange_symbolTableForConvertingRelatives unused inRoutineSymbolTable
  ?!@uint unused ioAddress
  ?!@bool unused ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList unused ioGeneratedInstructionList
  ?let @uint unused inIndex
  ?!@string unused ioListFileContents

#----------------------------------------------------------------------------*

override method @midrange_intermediate_NULL compute
  ?let @midrange_symbolTableForConvertingRelatives unused inRoutineSymbolTable
  ?!@uint unused ioAddress
  ?!@bool unused ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList unused ioGeneratedInstructionList
  ?let @uint unused inIndex
  ?!@string unused ioListFileContents {
}

#----------------------------------------------------------------------------*

override method @midrange_intermediate_actualInstruction compute
  ?let @midrange_symbolTableForConvertingRelatives unused inRoutineSymbolTable
  ?!@uint unused ioAddress
  ?!@bool unused ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList unused ioGeneratedInstructionList
  ?let @uint unused inIndex
  ?!@string unused ioListFileContents {
}

#----------------------------------------------------------------------------*

override
method @midrange_intermediate_pseudo_ORG compute
  ?let @midrange_symbolTableForConvertingRelatives unused inRoutineSymbolTable
  ?!@uint ioAddress
  ?!@bool unused ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList unused ioGeneratedInstructionList
  ?let @uint unused inIndex
  ?!@string unused ioListFileContents {
  ioAddress = self.mOrigin
}

#----------------------------------------------------------------------------*

override method @midrange_intermediate_JUMP compute
  ?let @midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
  ?!@uint ioAddress
  ?!@bool ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
  ?let @uint inIndex
  ?!@string ioListFileContents {
#--- Get target address
    [inRoutineSymbolTable searchKey !self.mTargetLabel ?let targetAddress]
#--- Change bit 11 ?
   let @uint flags = ioAddress ^ targetAddress
   let @midrange_call_goto_bit bit11
   if (flags & 0x800) == 0 then
     bit11 = @midrange_call_goto_bit. noChange
   elsif (targetAddress & 0x800) == 0 then
     bit11 = @midrange_call_goto_bit. clear
   else
     bit11 = @midrange_call_goto_bit. set
   end
#--- Change bit 12 ?
   let @midrange_call_goto_bit bit12
   if (flags & 0x1000) == 0 then
     bit12 = @midrange_call_goto_bit. noChange
   elsif (targetAddress & 0x1000) == 0 then
     bit12 = @midrange_call_goto_bit. clear
   else
     bit12 = @midrange_call_goto_bit. set
   end
#--- Change ?
  if (bit11 != self.mBit11) | (bit12 != self.mBit12) then
    let @midrange_intermediate_actualInstruction instruction = @midrange_intermediate_JUMP.init {
      !self.mInstructionLocation
      !self.mTargetLabel
      !bit11
      !bit12}
    [!?ioGeneratedInstructionList setMInstructionAtIndex !instruction !inIndex]
    ioJUMP_or_JSR_fixed = true
    ioListFileContents += "  line " + [inIndex string] + ":  JUMP to other page fixed\n"
  end
}

#----------------------------------------------------------------------------*

override method @midrange_intermediate_JSR compute
  ?let @midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
  ?!@uint ioAddress
  ?!@bool ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
  ?let @uint inIndex
  ?!@string ioListFileContents {
#--- Get target address
    [inRoutineSymbolTable searchKey !self.mTargetLabel ?let targetAddress]
#--- Change bit 11 ?
   let @uint flags = ioAddress ^ targetAddress
   let @midrange_call_goto_bit bit11
   if (flags & 0x800) == 0 then
     bit11 = @midrange_call_goto_bit. noChange
   elsif (targetAddress & 0x800) == 0 then
     bit11 = @midrange_call_goto_bit. clear
   else
     bit11 = @midrange_call_goto_bit. set
   end
#--- Change bit 12 ?
   let @midrange_call_goto_bit bit12
   if (flags & 0x1000) == 0 then
     bit12 = @midrange_call_goto_bit. noChange
   elsif (targetAddress & 0x1000) == 0 then
     bit12 = @midrange_call_goto_bit. clear
   else
     bit12 = @midrange_call_goto_bit. set
   end
#--- Change ?
  if (bit11 != self.mBit11) | (bit12 != self.mBit12) then
    let @midrange_intermediate_actualInstruction instruction = @midrange_intermediate_JSR.init {
      !self.mInstructionLocation
      !self.mTargetLabel
      !bit11
      !bit12}
    [!?ioGeneratedInstructionList setMInstructionAtIndex !instruction !inIndex]
    ioJUMP_or_JSR_fixed = true
    ioListFileContents += "  line " + [inIndex string] + ":  JSR to other page fixed\n"
  end
}

#----------------------------------------------------------------------------*

override method @midrange_intermediate_pseudo_LABEL compute
  ?let @midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
  ?!@uint ioAddress
  ?!@bool unused ioJUMP_or_JSR_fixed
  ?!@midrange_intermediate_instructionList unused ioGeneratedInstructionList
  ?let @uint unused inIndex
  ?!@string unused ioListFileContents {
  [inRoutineSymbolTable searchKey !self.mLabel ?let targetAddress]
  if (targetAddress != ioAddress) then
    error self.mLabel: "Internal second pass error: the '" + self.mLabel
    + "' label gets " + [ioAddress hexString] + " value in second pass, while it gets "
    + [targetAddress hexString] + " in first pass"
  end
}

#----------------------------------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_retlw compute
#  ??@midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
#  ?!@uint ioAddress
#  ?!@bool ioJUMP_or_JSR_fixed
#  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
#  ??@uint inIndex
#  ?!@string ioListFileContents
#:
#  if mUsesRCALL then
#    @uint targetAddress ;
#    [inRoutineSymbolTable searchKey ![@lstring new !"_computed_goto_2" !here] ?targetAddress] ;
#    @sint displacement := ([targetAddress sint] - 2S - [ioAddress sint]) >> 1 ;
#    if (displacement > 1023S) | (displacement < - 1024S) then
#      ioJUMP_or_JSR_fixed := true ;
#      ioListFileContents .= "  line " . [inIndex string] . ":  COMPUTED RETLW with RCALL overflow, converted to COMPUTED RETLW with CALL\n" ;
#      @ipic_actualInstruction instruction := [@midrange_intermediate_instruction_computed_retlw new
#        !mInstructionLocation
#        !mLiteralValues
#        !false
#      ] ;
#      [!?ioGeneratedInstructionList setMInstructionAtIndex !instruction !inIndex] ;
#    end if ;
#  end if ;
#end method ;

#----------------------------------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_bra compute
#  ??@midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
#  ?!@uint ioAddress
#  ?!@bool ioJUMP_or_JSR_fixed
#  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
#  ??@uint inIndex
#  ?!@string ioListFileContents
#:
#  if mUsesRCALL then
#    @uint targetAddress ;
#    [inRoutineSymbolTable searchKey ![@lstring new !"_computed_goto_2" !here] ?targetAddress] ;
#    @sint displacement := ([targetAddress sint] - 2S - [ioAddress sint]) >> 1 ;
#    if (displacement > 1023S) | (displacement < - 1024S) then
#      ioJUMP_or_JSR_fixed := true ;
#      ioListFileContents .= "  line " . [inIndex string] . ":  COMPUTED BRA with RCALL overflow, converted to COMPUTED BRA with CALL\n" ;
#      @ipic_actualInstruction instruction := [@midrange_intermediate_instruction_computed_bra new
#        !mInstructionLocation
#        !mTargetLabels
#        !false
#      ] ;
#      [!?ioGeneratedInstructionList setMInstructionAtIndex !instruction !inIndex] ;
#    end if ;
#  end if ;
#  @uint addressForCheckingBRA := ioAddress + 2 ;
#  if not mUsesRCALL then
#    addressForCheckingBRA := addressForCheckingBRA + 2 ; # GOTO takes 2 more bytes
#  end if ;
#  foreach mTargetLabels do
#    @uint targetAddress ;
#    [inRoutineSymbolTable searchKey !mValue ?targetAddress] ;
#    @sint displacement := ([targetAddress sint] - 2S - [addressForCheckingBRA sint]) >> 1 ;
#    if (displacement > 1023S) | (displacement < - 1024S) then
#      error mValue: "displacement (" . [displacement string] . ") too large for BRA instruction (limited to [-1024, 1023])" ;
#    end if ;
#    addressForCheckingBRA := addressForCheckingBRA + 2 ;
#  end foreach ;
#end method ;

#----------------------------------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_goto compute
#  ??@midrange_symbolTableForConvertingRelatives inRoutineSymbolTable
#  ?!@uint ioAddress
#  ?!@bool ioJUMP_or_JSR_fixed
#  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
#  ??@uint inIndex
#  ?!@string ioListFileContents
#:
#  if mUsesRCALL then
#    @uint targetAddress ;
#    [inRoutineSymbolTable searchKey ![@lstring new !"_computed_goto_4" !here] ?targetAddress] ;
#    @sint displacement := ([targetAddress sint] - 2S - [ioAddress sint]) >> 1 ;
#    if (displacement > 1023S) | (displacement < - 1024S) then
#      ioJUMP_or_JSR_fixed := true ;
#      ioListFileContents .= "  line " . [inIndex string] . ":  COMPUTED GOTO with RCALL overflow, converted to COMPUTED GOTO with CALL\n" ;
#      @ipic_actualInstruction instruction := [@midrange_intermediate_instruction_computed_goto new
#        !mInstructionLocation
#        !mTargetLabels
#        !false
#      ] ;
#      [!?ioGeneratedInstructionList setMInstructionAtIndex !instruction !inIndex] ;
#    end if ;
#  end if ;
#  foreach mTargetLabels do
#    [inRoutineSymbolTable searchKey !mValue ?*] ;
#  end foreach ;
#end method ;

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc midrange_compute_JSR_JUMP
  ?!@midrange_intermediate_instructionList ioGeneratedInstructionList
  ?!@string ioListFileContents {
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
  ioListFileContents += "*" + ["COMPUTE JSR and JUMP" stringByLeftAndRightPadding !117 !' '] + "*\n"
  ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
  var @bool JUMP_or_JSR_fixed = true
  var @uint iteration = 0
  loop( [ioGeneratedInstructionList count])
  while JUMP_or_JSR_fixed & (@uint. errorCount == 0)
  do
    JUMP_or_JSR_fixed = false
    iteration += 1
    ioListFileContents += "Pass " + [iteration string] + ":\n"
  #-------------------------------- First pass: build label map
    var symbolTable =@midrange_symbolTableForConvertingRelatives §[]
    var @uint currentAddress = 0
    for (mInstruction) in  ioGeneratedInstructionList do
      [mInstruction defineLabelAtAddress !?symbolTable !?currentAddress]
    end
    let @uint lastAddressForFirstPass = currentAddress
  #-------------------------------- Second pass: generate code
    currentAddress = 0
    for (mInstruction) in  ioGeneratedInstructionList do(idx)
      [mInstruction compute !symbolTable !?currentAddress !?JUMP_or_JSR_fixed !?ioGeneratedInstructionList !idx !?ioListFileContents]
      currentAddress = currentAddress  + [mInstruction instructionLength]
    end
    if lastAddressForFirstPass != currentAddress then
      error @location.here: "Internal second pass error: the last address gets " + [currentAddress hexString]
      + " value when checking relative branches, while it gets "
      + [lastAddressForFirstPass hexString] + " value when computing routine map"
    end
    if not JUMP_or_JSR_fixed then
      ioListFileContents += "  No JUMP, no JSR to fix\n\n"
      ioListFileContents += "Program size: " + [currentAddress string] + " instructions\n\n"
    end
  end
}

#----------------------------------------------------------------------------*

