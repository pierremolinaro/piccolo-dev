

#----------------------------------------------------*
#                BUILD ASSEMBLY CODE                 *
#----------------------------------------------------*

abstract method @midrange_intermediate_instruction buildAssemblyCode
  ?!@string unused ioString 
  ?!@uint unused ioLocalLabelIndex

#----------------------------------------------------*

override method @midrange_intermediate_NULL buildAssemblyCode
  ?!@string unused ioString 
  ?!@uint unused ioLocalLabelIndex {
}

#----------------------------------------------------*

override method @midrange_intermediate_pseudo_ORG buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  ORG " + [self.mOrigin hexString] + "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_pseudo_LABEL buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += self.mLabel.string + ":\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_FD buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  " + [self.mInstruction_FD_base_code mnemonic] + " " + self.mRegisterDescription.mAssemblyString
  if self.m_W_isDestination then
    ioString += ", W"
  else
    ioString += ", F"
  end
  ioString += "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_FB buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  " + [self.mBitOrientedOp mnemonic]
  ioString += "  " + self.mRegisterDescription.mAssemblyString
  ioString += ", " + [self.mBitNumber string]
  ioString += "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_BitTestSkip buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  "
  if self.mSkipIfSet then
    ioString += "BTFSS"
  else
    ioString += "BTFSC"
  end
  ioString += "  " + self.mRegisterDescription.mAssemblyString
  ioString += ", " + [self.mBitNumber string]
  ioString += "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_F buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  " + [self.mFinstruction mnemonic] + " " + self.mRegisterDescription.mAssemblyString
  ioString += "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_incDecRegisterInCondition buildAssemblyCode
  ?!@string ioString
  ?!@uint ioLocalLabelIndex {
  if self.mIncrement then
    ioString += "  " + "INCFSZ "
  else
    ioString += "  " + "DECFSZ "
  end
  ioString += self.mRegisterDescription.mAssemblyString
  if self.m_W_isDestination then
    ioString += ", W"
  else
    ioString += ", F"
  end
  ioString += "\n"
  if self.mBranchIfZero then
    let @string localLabel = ".LL" + [ioLocalLabelIndex string] ioLocalLabelIndex ++
    ioString += "  GOTO " + localLabel + "\n"
    ioString += "  GOTO " + self.mTargetLabel + "\n"
    ioString += localLabel + ":\n"
  else
    ioString += "  GOTO " + self.mTargetLabel + "\n"
  end
}

#----------------------------------------------------*

override method @midrange_intermediate_JUMP buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  switch self.mBit11 
  case set   : ioString += "  BSF PCLATH, 3\n"
  case clear : ioString += "  BCF PCLATH, 3\n"
  case noChange :
  end
  switch self.mBit12 
  case set   : ioString += "  BSF PCLATH, 4\n"
  case clear : ioString += "  BCF PCLATH, 4\n"
  case noChange :
  end
  ioString += "  GOTO   " + self.mTargetLabel.string + "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_GOTO buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  GOTO   " + self.mTargetLabel.string + "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_JSR buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  switch self.mBit11 
  case set   : ioString += "  BSF PCLATH, 3\n"
  case clear : ioString += "  BCF PCLATH, 3\n"
  case noChange :
  end
  switch self.mBit12 
  case set   : ioString += "  BSF PCLATH, 4\n"
  case clear : ioString += "  BCF PCLATH, 4\n"
  case noChange :
  end
  ioString += "  CALL  " + self.mTargetLabel.string + "\n"
  switch self.mBit11 
  case set   : ioString += "  BCF PCLATH, 3\n"
  case clear : ioString += "  BSF PCLATH, 3\n"
  case noChange :
  end
  switch self.mBit12 
  case set   : ioString += "  BCF PCLATH, 4\n"
  case clear : ioString += "  BSF PCLATH, 4\n"
  case noChange :
  end
}

#----------------------------------------------------*

override method @midrange_intermediate_CALL buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  CALL  " + self.mTargetLabel.string + "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_CLRWDT buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  CLRWDT\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_CLRW buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  CLRW\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_NOP buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  NOP\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_RETURN buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  RETURN\n"
}

#----------------------------------------------------*

 override method @midrange_intermediate_instruction_RETFIE buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  RETFIE\n"
}

#----------------------------------------------------*

 override method @midrange_intermediate_instruction_SLEEP buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  SLEEP\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_literalOperation buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  ioString += "  " + [self.mLiteralInstruction mnemonic] + " " + [self.mLiteralValue hexString] + "\n"
}

#----------------------------------------------------*

override method @midrange_intermediate_instruction_MNOP buildAssemblyCode
  ?!@string ioString
  ?!@uint unused ioLocalLabelIndex {
  if self.mOccurrenceFactor.uint == 0 then
    warning self.mOccurrenceFactor: "No generated code"
  end
  var @uint idx = 0
  loop( self.mOccurrenceFactor.uint)
  while idx < self.mOccurrenceFactor.uint
  do
    ioString += "  NOP\n"
    idx ++
  end
}

#----------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_retlw buildAssemblyCode
#  ?!@string ioString
#  ?!@uint unused ioLocalLabelIndex
#:
#  if mUsesRCALL then
#    ioString .= "  RCALL _computed_goto_2\n" ;
#  else
#    ioString .= "  CALL _computed_goto_2\n" ;
#  end if ;
#  foreach mLiteralValues do
#    ioString .= "  RETLW " . [mValue hexString] . "\n" ;
#  end foreach ;
#end method ;

#----------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_bra buildAssemblyCode
#  ?!@string ioString
#  ?!@uint unused ioLocalLabelIndex
#:
#  if mUsesRCALL then
#    ioString .= "  RCALL _computed_goto_2\n" ;
#  else
#    ioString .= "  CALL _computed_goto_2\n" ;
#  end if ;
#  foreach mTargetLabels do
#    ioString .= "  BRA " . [mValue string] . "\n" ;
#  end foreach ;
#end method ;

#----------------------------------------------------*

#override method @midrange_intermediate_instruction_computed_goto buildAssemblyCode
#  ?!@string ioString
#  ?!@uint unused ioLocalLabelIndex
#:
#  if mUsesRCALL then
#    ioString .= "  RCALL _computed_goto_4\n" ;
#  else
#    ioString .= "  CALL _computed_goto_4\n" ;
#  end if ;
#  foreach mTargetLabels do
#    ioString .= "  GOTO " . [mValue string] . "\n" ;
#  end foreach ;
#end method ;

#----------------------------------------------------*

proc midrange_build_assembly_code
  ?let @string inProcessorName
  ?let @registerTable inPredefinedRegisters
  ?let @registerTable inAllRegisters
  ?let @midrange_intermediate_instructionList inInstructionList
  ?let @actualConfigurationMap inActualConfigurationMap
  !@string outAssemblyCode {
  outAssemblyCode = "  errorlevel -302 ; No Warning on registers not in bank 0\n" 
  outAssemblyCode += "  errorlevel -306 ; No Warning on crossing page boundary\n\n" 
  outAssemblyCode += "  PROCESSOR " + inProcessorName + "\n\n"
#--- Code
  outAssemblyCode += ";--- Code\n"
  outAssemblyCode += "  ORG 0\n"
  var @uint bccLabelIndex = 0
  for (mInstruction) in  inInstructionList do
    [mInstruction buildAssemblyCode !?outAssemblyCode !?bccLabelIndex]
  end
  outAssemblyCode += "\n"
#--- Prefined registers
  outAssemblyCode += ";--- Prefefined registers\n"
  for (lkey mRegisterAddressList * * * *) in  inPredefinedRegisters do
    var @uint firstRegister [mRegisterAddressList first ?firstRegister]
    outAssemblyCode += lkey.string + " EQU " + [firstRegister hexString] + "\n"
  end
  outAssemblyCode += "\n"
#--- User defined registers in ram
  outAssemblyCode += ";--- User defined registers (in RAM)\n"
  for (lkey mRegisterAddressList * * * *) in  inAllRegisters do
    if not [inPredefinedRegisters hasKey !lkey.string] then
      var @uint firstRegister [mRegisterAddressList first ?firstRegister]
      outAssemblyCode += lkey.string + " EQU " + [firstRegister hexString] + "\n"
    end
  end
  outAssemblyCode += "\n"
#--- PICCOLO defined symbols
  outAssemblyCode += ";--- Piccolo defined symbol\n"
  outAssemblyCode += "W EQU 1\n\n"
#-------------------------------- Add Configuration
  if [inActualConfigurationMap count] > 0 then
    outAssemblyCode += ";--- Configuration\n\n"
    for (* mRegisterAddress mRegisterValue) in  inActualConfigurationMap do
      outAssemblyCode += "  __config " + [mRegisterAddress hexString] + ", " + [mRegisterValue & 255 hexString] + "\n"
    end
  end
#-------------------------------- End
  outAssemblyCode += ";---\n\n"
  outAssemblyCode += "  END\n\n"
}

#----------------------------------------------------*

