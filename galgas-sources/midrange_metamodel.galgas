

#----------------------------------------------------*

abstract refclass @midrange_instruction {
  public var @location mInstructionLocation
}

#----------------------------------------------------*

list @midrange_instructionList {
  public var @midrange_instruction mInstruction
}

#----------------------------------------------------*

refclass @midrange_instruction_nobanksel : @midrange_instruction {
}

#----------------------------------------------------*

refclass @midrange_instruction_banksel : @midrange_instruction {
  public var @luint mBankIndex
  public var @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

refclass @midrangeInstruction_checkbank : @midrange_instruction {
  public var @uint mBankIndex
}

#----------------------------------------------------*

refclass @midrangeInstruction_checknobank : @midrange_instruction {
}

#----------------------------------------------------*

refclass @midrange_instruction_banksel_register : @midrange_instruction {
  public var @registerExpression mRegister
  public var @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

refclass @midrange_instruction_savebank : @midrange_instruction {
  public var @registerExpression mRegister
  public var @midrange_instructionList mInstructionList
  public var @location mEndOfSaveBankInstruction
}

#----------------------------------------------------*

refclass @midrange_instruction_STATIC_REPEAT : @midrange_instruction {
  public var @lstring mConstantName
  public var @immediatExpression mLowerBoundExpression
  public var @immediatExpression mUpperBoundExpression
  public var @midrange_instructionList mInstructionList
  public var @location mEndOfInstruction
}

#----------------------------------------------------*

enum @midrange_instruction_FD_base_code {
  case ADDWF  case ANDWF  case COMF  case DECF  case DECFSZ  case INCF  case INCFSZ  case IORWF  case MOVF  case RLF  case RRF  case SUBWF  case SWAPF  case XORWF
}

getter @midrange_instruction_FD_base_code mnemonic -> @string outResult {
  switch self
    case ADDWF : outResult = "ADDWF"
    case ANDWF : outResult = "ANDWF"
    case COMF : outResult = "COMF"
    case DECF : outResult = "DECF"
    case DECFSZ : outResult = "DECFSZ"
    case INCF : outResult = "INCF"
    case INCFSZ : outResult = "INCFSZ"
    case IORWF : outResult = "IORWF"
    case MOVF : outResult = "MOVF"
    case RLF : outResult = "RLF"
    case RRF : outResult = "RRF"
    case SUBWF : outResult = "SUBWF"
    case SWAPF : outResult = "SWAPF"
    case XORWF : outResult = "XORWF"
  end
}

#----------------------------------------------------*

refclass @midrange_instruction_FD : @midrange_instruction {
  public var @midrange_instruction_FD_base_code mInstruction_FD_base_code
  public var @registerExpression mRegisterExpression
  public var @bool m_W_isDestination
}

#----------------------------------------------------*

enum @midrange_F_instruction_base_code {
  case CLRF  case MOVWF
}

getter @midrange_F_instruction_base_code mnemonic -> @string outResult {
  switch self
    case CLRF   : outResult = "CLRF"
    case MOVWF  : outResult = "MOVWF"
  end
}

#----------------------------------------------------*

refclass @midrange_instruction_F : @midrange_instruction {
  public var @midrange_F_instruction_base_code mFAinstruction
  public var @registerExpression mRegisterExpression
}

#----------------------------------------------------*

enum @midrange_bit_oriented_op {
  case BCF  case BSF
}

getter @midrange_bit_oriented_op mnemonic -> @string outResult {
  switch self
    case BCF : outResult = "BCF"
    case BSF : outResult = "BSF"
  end
}

#----------------------------------------------------*

refclass @midrange_instruction_FB : @midrange_instruction {
  public var @midrange_bit_oriented_op mBitOrientedOp
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

refclass @midrange_instruction_CALL : @midrange_instruction {
  public var @lstring mTargetLabel
}

#----------------------------------------------------*

refclass @midrange_instruction_JSR : @midrange_instruction {
  public var @lstring mTargetLabel
}

#----------------------------------------------------*

refclass @midrange_instruction_JUMP : @midrange_instruction {
  public var @lstring mTargetLabel
}

#----------------------------------------------------*

refclass @midrange_instruction_GOTO : @midrange_instruction {
  public var @lstring mTargetLabel
}

#----------------------------------------------------*

refclass @midrange_instruction_CLRWDT : @midrange_instruction {
}

#----------------------------------------------------*

refclass @midrange_instruction_CLRW : @midrange_instruction {
}

#----------------------------------------------------*

refclass @midrange_instruction_NOP : @midrange_instruction {
}

#----------------------------------------------------*

refclass @midrange_instruction_SLEEP : @midrange_instruction {
}

#----------------------------------------------------*

enum @midrange_literal_instruction_opcode {
  case ADDLW  case ANDLW  case IORLW  case MOVLW  case RETLW  case SUBLW  case XORLW
}

getter @midrange_literal_instruction_opcode mnemonic -> @string outResult {
  switch self
    case ADDLW : outResult = "ADDLW"
    case ANDLW : outResult = "ANDLW"
    case IORLW : outResult = "IORLW"
    case MOVLW : outResult = "MOVLW"
    case RETLW : outResult = "RETLW"
    case SUBLW : outResult = "SUBLW"
    case XORLW : outResult = "XORLW"
  end
}

#----------------------------------------------------*

refclass @midrange_instruction_literalOperation : @midrange_instruction {
  public var @midrange_literal_instruction_opcode mLiteralInstruction
  public var @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

refclass @midrange_instruction_MNOP : @midrange_instruction {
  public var @luint mOccurrenceFactor
}

#----------------------------------------------------*

refclass @midrange_instruction_FOREVER : @midrange_instruction {
  public var @midrange_instructionList mInstructionList
  public var @location mEndOfInstructionList
}

#----------------------------------------------------*

abstract refclass @midrange_instruction_IF_SEMI_COLON : @midrange_instruction {
  public var @midrange_instruction mInstruction
}

#----------------------------------------------------*

refclass @midrange_instruction_IF_BitTest : @midrange_instruction_IF_SEMI_COLON {
  public var @bool mSkipIfSet
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
}

method @midrange_instruction_IF_BitTest getBaseCode !@uint outBaseCode {
  if self.mSkipIfSet then
    outBaseCode = 0x1C00 # BTFSS
  else
    outBaseCode = 0x1800 # BTFSC
  end
} 

method @midrange_instruction_IF_BitTest getMnemonic !@string outMnemonic {
  if self.mSkipIfSet then
    outMnemonic = "BTFSS"
  else
    outMnemonic = "BTFSC"
  end
} 


#----------------------------------------------------*

refclass @midrange_instruction_IF_IncDec : @midrange_instruction_IF_SEMI_COLON {
  public var @bool mIncrement
  public var @registerExpression mRegisterExpression
  public var @bool m_W_isDestination
}

#----------------------------------------------------*

abstract refclass @midrange_conditionExpression {
}

#----------------------------------------------------*

refclass @midrange_incDecRegisterInCondition : @midrange_conditionExpression {
  public var @registerExpression mRegisterExpression
  public var @bool mIncrement
  public var @bool m_W_isDestination
  public var @bool mBranchIfZero
}

#----------------------------------------------------*

refclass @midrange_negateCondition : @midrange_conditionExpression {
  public var @midrange_conditionExpression mCondition
}

#----------------------------------------------------*

refclass @midrange_andCondition : @midrange_conditionExpression {
  public var @midrange_conditionExpression mLeftExpression
  public var @midrange_conditionExpression mRightExpression
}

#----------------------------------------------------*

refclass @midrange_bitTest_in_structured_if_condition : @midrange_conditionExpression {
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
#  @bool mBTFSSinstruction
}

#----------------------------------------------------*

refclass @midrange_instruction_structured_if : @midrange_instruction {
  public var @midrange_conditionExpression mIfCondition
  public var @midrange_instructionList mThenInstructionList
  public var @midrange_instructionList mElseInstructionList
  public var @location mEndOfElsePartLocation
}

#----------------------------------------------------*

list @midrange_partList {
  public var @midrange_conditionExpression mCondition
  public var @midrange_instructionList mInstructionList
  public var @location mEndOfPartLocation
}

#----------------------------------------------------*

refclass @midrange_instruction_do_while : @midrange_instruction {
  public var @midrange_instructionList mRepeatedInstructionList
  public var @location mEndOfRepeatedInstructionList
  public var @midrange_partList mWhilePartList
}

#----------------------------------------------------*

list @midrange_interruptDefinitionList {
  public var @location mInterruptLocation
  public var @midrange_instructionList mInstructionList
  public var @lstring mFirstSaveRegister
  public var @lstring mSecondSaveRegister
  public var @location mEndOfInterruptLocation
}

#----------------------------------------------------*

list @midrange_routineDefinitionList {
  public var @lstring mRoutineName
  public var @luint mPage
  public var @luint mRequiredBank
  public var @luint mReturnedBank
  public var @bool mPreservesBank
  public var @bool mIsNoReturn
  public var @midrange_instructionList mInstructionList
  public var @location mEndOfRoutineLocation
}

#----------------------------------------------------*

struct @midrange_model {
  public var @lstring mProgramName
  public var @lstring mDeviceName
  public var @configDefinitionList mConfigDefinitionList
  public var @ramDefinitionList mRamDefinitionList
  public var @lstringlist mUnusedRegisterList
  public var @midrange_interruptDefinitionList mInterruptDefinitionList
  public var @constantDefinitionList mConstantDefinitionList
  public var @midrange_routineDefinitionList mRoutineDefinitionList
  public var @lstringlist mUnusedRoutineList
  public var @bool mNeedsComputedGoto2
  public var @bool mNeedsComputedGoto4
  public var @location mEndOfProgram
}

#----------------------------------------------------*

