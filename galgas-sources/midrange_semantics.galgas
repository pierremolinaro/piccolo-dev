

#----------------------------------------------------------------------------*

map @midrange_declaredRoutineMap {
  insert insertKey error message "the '%K' routine is already declared"
  search searchKey error message "the '%K' routine is not declared"
}

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc midrange_analyze ?let @midrange_model inPiccoloModel ?let @string inSourceFileName {
  let @string sourceFileBaseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
  if sourceFileBaseName != inPiccoloModel.mProgramName.string then
    error inPiccoloModel.mProgramName: "the program name ('" + inPiccoloModel.mProgramName
    + "') should be identical to the file base name '" + sourceFileBaseName + "'"
  end
  var @string listFileContents = ""
#-------------------------------- Analyze Device
  parseDeviceDefinition (!inPiccoloModel.mDeviceName ?let piccoloDeviceModel)
  switch piccoloDeviceModel.mProcessorType
    case midrange :
    case pic18_60, pic18_80 : error inPiccoloModel.mDeviceName: "a pic18 device is not accepted here : only a mid-range device"
    case baseline : error inPiccoloModel.mDeviceName: "a baseline device is not accepted here : only a mid-range device"
  end
#-------------------------------- Interrupts ?
  var @bool hasInterrupt = false
  for (mInterruptLocation * * * *) in  inPiccoloModel.mInterruptDefinitionList do
    if hasInterrupt then
      error mInterruptLocation:"only one interrupt routine can be defined"
    end
    hasInterrupt = true
  end
#-------------------------------- Config definition
  buildConfig (
    !piccoloDeviceModel.mConfigRegisterMap
    !inPiccoloModel.mConfigDefinitionList
    !?listFileContents
    ?let actualConfigurationMap
  )
#-------------------------------- Build constant map
  var @constantMap constantMap = @()
  var @stringset usedRegisters = @()
  var @registerTable registerTable = piccoloDeviceModel.mRegisterTable
#--- Add "ROM_SIZE" constant
  let romSizeString = @lstring {!"ROM_SIZE" !.here}
  [!?constantMap insertKey !romSizeString ![piccoloDeviceModel.mRomSize sint64]]
#--- Add declared constants
  for (mConstantName mExpression) in  inPiccoloModel.mConstantDefinitionList do
    [mExpression eval !registerTable !constantMap ?let @sint64 result !?usedRegisters]
    if [registerTable hasKey !mConstantName.string] then
      error mConstantName: "'" + mConstantName + "' is already declared as ram register or special register"
    else
      [!?constantMap insertKey !mConstantName !result]
    end
  end
#-------------------------------- Ram definition
  var @ramBankTable ramBank = piccoloDeviceModel.mRamBankTable
  analyze_ram_sections (
    !"DECLARED VARIABLES"
    !inPiccoloModel.mRamDefinitionList
    !constantMap
    !?usedRegisters
    !?ramBank
    !piccoloDeviceModel.mRegisterTable
    !?listFileContents
    !?registerTable
    ?let @declaredByteMap declaredByteMap
  )
#-------------------------------- Build IPIC Assembly Instruction List
  build_midrange_assembly_instruction_list (
    !(piccoloDeviceModel.mRomSize.uint + 2047) / 2048
    !piccoloDeviceModel.mBankCount.uint
    !constantMap
#    ![[piccoloDeviceModel.mRomSize uint] sint]
    !piccoloDeviceModel.mSharedBankName
    !registerTable
    !inPiccoloModel
    !hasInterrupt
    ?var @midrange_intermediate_instructionList generatedInstructionList
    !?listFileContents
    !?usedRegisters
  )
#-------------------------------- Compute used routine set
  let @stringset usedRoutineSet = midrange_computeUsedRoutines (
    !inPiccoloModel.mInterruptDefinitionList
    !inPiccoloModel.mRoutineDefinitionList
  )
  var declaredRoutineMap =@midrange_declaredRoutineMap ()
  for (mRoutineName * * * * * * *) in  inPiccoloModel.mRoutineDefinitionList do
    [!?declaredRoutineMap insertKey !mRoutineName]
  end
#-------------------------------- Check used routines
  var unusedRoutineDeclarationUnicity =@stringset ()
  for (mValue) in  inPiccoloModel.mUnusedRoutineList do
    if not [declaredRoutineMap hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' routine is not declared"
    elsif [unusedRoutineDeclarationUnicity hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is already declared as unused"
    elsif [usedRoutineSet hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is declared as unused, but is used"
    end
    unusedRoutineDeclarationUnicity += !mValue.string
  end
  for (lkey) in  declaredRoutineMap do
    if (not [usedRoutineSet hasKey !lkey.string]) & (not [unusedRoutineDeclarationUnicity hasKey !lkey.string]) then
      warning lkey : "the '" + lkey + "' routine is unused"
    end
  end
#----------------------------------------------------------- Check declared bytes are used
  var unusedByteDeclarationUnicity =@stringset ()
  for (mValue) in  inPiccoloModel.mUnusedRegisterList do
    if not [registerTable hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' byte is not declared"
    elsif [unusedByteDeclarationUnicity hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' byte is already declared as unused"
    elsif [usedRegisters hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' byte is declared as unused, but is used"
    end
    unusedByteDeclarationUnicity += !mValue.string
  end
  for (lkey) in  declaredByteMap do
    if (not [usedRegisters hasKey !lkey.string]) & (not [unusedByteDeclarationUnicity hasKey !lkey.string]) then
      warning lkey : "the '" + lkey + "' byte is unused"
    end
  end
#-------------------------------- Perform Code Optimization
  if (@uint. errorCount == 0) & [option piccoloOptions.performOptimizations value] then
    perform_midrange_optimizations ( !?generatedInstructionList !?listFileContents )
  end
#-------------------------------- Compute inter-pages JUMP and JSR
  if @uint. errorCount == 0 then
    midrange_compute_JSR_JUMP ( !?generatedInstructionList !?listFileContents )
  end
#-------------------------------- Code generation
#--- If no error, generate object file(s)
  if @uint. errorCount == 0 then
  #--- Generate hex file
    build_midrange_ipic_binary_code (
      !registerTable
      !@()
      !piccoloDeviceModel.mBankCount.uint
      !generatedInstructionList
      !piccoloDeviceModel.mRomSize.uint
      !actualConfigurationMap
      !?listFileContents
      ?let usedROMsize
    )
    var @string contents
    getGeneratedContents ( ?contents )
    var @string destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".hex"
    [contents writeToFileWhenDifferentContents !destinationFile ?*]
    if [option piccoloOptions.output_C_Array value] then
      let @string baseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
      get_C_ArrayImplementation ( !baseName ?contents )
      destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".c"
      [contents writeToFileWhenDifferentContents !destinationFile ?*]
      get_C_ArrayHeader ( !baseName ?contents )
      destinationFile = [inSourceFileName stringByDeletingPathExtension] + ".h"
      [contents writeToFileWhenDifferentContents !destinationFile ?*]
    end
  #--- Write infos (if verbose mode)
    if @application.verboseOutput then
      var @string verboseMessage = "  ROM size: " + [piccoloDeviceModel.mRomSize.uint string] + " words;"
      verboseMessage += " used: " + [usedROMsize string] + " words ("
      verboseMessage += [(usedROMsize * 100) / piccoloDeviceModel.mRomSize.uint string] + "%).\n"
      for (lkey mFirstAddress mFirstFreeAddress mLastAddressPlusOne *) in  ramBank do
        let @uint bankSize = mLastAddressPlusOne - mFirstAddress
        let @uint usedSize = mFirstFreeAddress - mFirstAddress
        verboseMessage += "  Bank '" + lkey + "': used "
        verboseMessage += [usedSize string] + " / "
        verboseMessage += [bankSize string] + " bytes ("
        verboseMessage += [(usedSize * 100) / bankSize string] + "%).\n"
      end
      print (!verboseMessage)
    end
  #--- Generate asm file, if corresponding option enabled
    if [option piccoloOptions.generateAssembly value] then
      let @string assemblyCode
      midrange_build_assembly_code (
        !piccoloDeviceModel.mDeviceName.string
        !piccoloDeviceModel.mRegisterTable
        !registerTable
        !generatedInstructionList
        !actualConfigurationMap
        ?assemblyCode
      )
      let @string asmDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".asm"
      [assemblyCode writeToFileWhenDifferentContents !asmDestinationFile ?*]
    end
  else # There are errors : delete hex and asm files
    let @string hexDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".hex"
    if [hexDestinationFile fileExists] then
      [@string deleteFile !hexDestinationFile]
    end
    let @string asmDestinationFile = [inSourceFileName stringByDeletingPathExtension] + ".asm"
    if [asmDestinationFile fileExists] then
      [@string deleteFile !asmDestinationFile]
    end
  end
#-------------------------------- Listing file
  if [option piccoloOptions.ouputListingFile value] then
    let @string listFile = [inSourceFileName stringByDeletingPathExtension] + ".list"
    [listFileContents writeToFileWhenDifferentContents !listFile ?*]
  end
}

#----------------------------------------------------*

