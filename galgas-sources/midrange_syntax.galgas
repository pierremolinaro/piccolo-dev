syntax midrange_syntax (piccolo_lexique) {

#----------------------------------------------------*

rule <configuration_definition>
  ?!@configDefinitionList ioConfigDefinitionList

rule <declaration_in_ram>
  !@declarationInRam outDeclaration

rule <ram_definition>
  ?!@ramDefinitionList ioRamDefinitionList

rule <constant_definition>
  ?!@constantDefinitionList ioConstantDefinitionList

rule <register_parsing>
  !@registerExpression outRegisterExpression

rule <optional_w_as_dest>
  !@bool out_W_isDestination

rule <bit_number_parsing>
  !@bitNumberExpression outBitNumber

rule <immediate_expression>
  !@immediatExpression outExpression

#----------------------------------------------------*

rule <start_symbol> {
  $midrange$
  $identifier$ ?var  @lstring programName
  $literal_string$ ?var  @lstring deviceName
  $:$
  var interruptDefinitionList =@midrange_interruptDefinitionList.emptyList{}
  var routineDefinitionList =@midrange_routineDefinitionList.emptyList{}
  var ramDefinitionList =@ramDefinitionList.emptyList{}
  var unusedRegisterList =@lstringlist.emptyList{}
  var unusedRoutineList =@lstringlist.emptyList{}
  var configDefinitionList =@configDefinitionList.emptyList{}
  var constantDefinitionList =@constantDefinitionList.emptyList{}
  @bool needsComputedGoto2 = false
  @bool needsComputedGoto4 = false
  repeat
  while
    $mark$
    $literal_string$ ?var @lstring s
    warning s : "obsolete construct: use a comment beginning by #!"
  while
    $unused$
    $byte$
    repeat
      $identifier$ ?var @lstring unusedRegister
      unusedRegisterList += !unusedRegister
    while 
      $,$
    end
  while
    $unused$
    $routine$
    repeat
      $identifier$ ?var @lstring unusedRoutine
      unusedRoutineList += !unusedRoutine
    while 
      $,$
    end
  while
    <configuration_definition> !?configDefinitionList
  while
    <ram_definition> !?ramDefinitionList
  while
    <constant_definition> !?constantDefinitionList
  while
    <midrange_interrupt_definition>
      !?interruptDefinitionList
      !?needsComputedGoto2
      !?needsComputedGoto4
  while
    <midrange_routine_definition>
      !?routineDefinitionList
      !?needsComputedGoto2
      !?needsComputedGoto4
  end
  $end$
#--- Semantic analysis
  if @uint. errorCount == 0 then
    var piccoloModel =@midrange_model.new{
      !programName
      !deviceName
      !configDefinitionList
      !ramDefinitionList
      !unusedRegisterList
      !interruptDefinitionList
      !constantDefinitionList
      !routineDefinitionList
      !unusedRoutineList
      !needsComputedGoto2
      !needsComputedGoto4
      !@location.here
    }
    midrange_analyze ( !piccoloModel !@string. stringWithSourceFilePath )
  else
    @string hexDestinationFile = [@string. stringWithSourceFilePath stringByDeletingPathExtension] + ".hex"
    if [hexDestinationFile fileExists] then
      [@string deleteFile !hexDestinationFile]
    end
    @string asmDestinationFile = [@string. stringWithSourceFilePath stringByDeletingPathExtension] + ".asm"
    if [asmDestinationFile fileExists] then
      [@string deleteFile !asmDestinationFile]
    end
  end
}
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize {
  $midrange$
  $identifier$ ?var  @lstring programName
  error programName: "this file does not define a bootloader specification"
   : outPiccoloDeviceModel, outAccessBankSplitOffset, outRamBank, outRegisterTable,
      outBootloaderReservedRAMmap, outBootloaderRoutineDeclarationList,
      outUserRoutineDeclarationList, outDeviceName,
      outBootloaderReservedROMsize
  $literal_string$ ? *
  $:$
  repeat
  while
    $mark$
    $literal_string$ ?*
  while
    $unused$
    $byte$
    repeat
      $identifier$ ?*
    while 
      $,$
    end
  while
    $unused$
    $routine$
    repeat
      $identifier$ ?*
    while 
      $,$
    end
  while
     parse<configuration_definition>
  while
     parse<ram_definition>
  while
     parse<constant_definition>
  while
     parse<midrange_interrupt_definition>
  while
     parse<midrange_routine_definition>
  end
  $end$
}

#----------------------------------------------------*

rule <midrange_instruction_list>
  !@midrange_instructionList outInstructionList
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4 {
  outInstructionList = @midrange_instructionList. emptyList
  repeat
  while
    @midrange_instruction instruction
    <midrange_simple_instruction> ?instruction
    outInstructionList += !instruction
  while
    @midrange_instruction instruction
    <midrange_structured_instruction>
      ?instruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
    outInstructionList += !instruction
  end
}

#----------------------------------------------------*

rule <midrange_interrupt_definition>
  ?!@midrange_interruptDefinitionList ioInterruptDefinitionList
  ?!@bool ioNeedsComputedGoto2 
  ?!@bool ioNeedsComputedGoto4 {
  $interrupt$
  @location interruptionLocation = @location.here
  $contextsave$
  $identifier$ ?var  @lstring firstSaveRegister
  $,$
  $identifier$ ?var  @lstring secondSaveRegister
  ${$
  @midrange_instructionList instructionList
  <midrange_instruction_list>
    ?instructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
  $}$
  ioInterruptDefinitionList +=
   !interruptionLocation
   !instructionList
   !firstSaveRegister
   !secondSaveRegister
   !@location.here
}

#----------------------------------------------------*

rule <midrange_routine_definition>
  ?!@midrange_routineDefinitionList ioRoutineDefinitionList
  ?!@bool ioNeedsComputedGoto2 
  ?!@bool ioNeedsComputedGoto4 {
  @bool noreturn
  select
    noreturn = false
  or
    $noreturn$
    noreturn = true
  end
  $routine$
  $identifier$ ?var  @lstring routineName indexing routineDefinition
#--- Page
  @luint page
  select
    page = @luint. new { !0 !@location.here}
  or
    $page$
    $integer$ ? page
  end
#--- Bank
  @luint requiredBank
  @luint returnedBank
  @bool preservesBank
  select
    requiredBank = @luint. new { !@uint. max !@location.here}
    returnedBank = @luint. new { !@uint. max !@location.here}
    preservesBank = false
  or
    $bank$
    $:$
    select
      $preserved$
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:preserved\" setting"
      end
      preservesBank = true
      requiredBank = @luint. new { !@uint. max !@location.here}
      returnedBank = @luint. new { !@uint. max !@location.here}
    or
      $requires$
      $integer$ ? requiredBank
      preservesBank = false
      select
        returnedBank = @luint. new { !@uint. max !@location.here}
      or
        $ensures$
        $integer$ ? returnedBank
        if noreturn then
          error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
        end
      end
    or
      $ensures$
      $integer$ ? returnedBank
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
      end
      preservesBank = false
      requiredBank = @luint. new { !@uint. max !@location.here}
    end
  end
  ${$
  @midrange_instructionList instructionList
  <midrange_instruction_list>
    ?instructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
  $}$
  ioRoutineDefinitionList +=
    !routineName
    !page
    !requiredBank
    !returnedBank
    !preservesBank
    !noreturn
    !instructionList
    !@location.here
}

#----------------------------------------------------*

rule <midrange_structured_instruction>
  !@midrange_instruction outInstruction
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4 {
  select
    $do$
    let instructionLocation = @location.here
    $($
    $identifier$ ?let constantName
    $:$
    <immediate_expression> ?let @immediatExpression lowBoundExpression
    $...$
    <immediate_expression> ?let @immediatExpression highBoundExpression
    $)$
    <midrange_instruction_list> ?let @midrange_instructionList instructionList !?ioNeedsComputedGoto2 !?ioNeedsComputedGoto4
    outInstruction = @midrange_instruction_STATIC_REPEAT. new {
      !instructionLocation
      !constantName
      !lowBoundExpression
      !highBoundExpression
      !instructionList
      !@location.here}
    $end$
  or
    $checkbank$
    $integer$ ?var  @luint bankIndex
    outInstruction = @midrangeInstruction_checkbank. new { !bankIndex.location !bankIndex.uint}
  or
    $checknobank$
    outInstruction = @midrangeInstruction_checknobank. new { !@location.here}
  or
    $banksel$
    @location instructionLocation = @location.here
    <register_parsing> ?var @registerExpression register
    @bool warningOnUselessBanksel
    select
      warningOnUselessBanksel = true
    or
      $,$
      $*$
      warningOnUselessBanksel = false
    end
    outInstruction = @midrange_instruction_banksel_register. new { !instructionLocation !register !warningOnUselessBanksel}
  or
    $banksel$
    @location instructionLocation = @location.here
    $integer$ ?var  @luint bank
    @bool warningOnUselessBanksel
    select
      warningOnUselessBanksel = true
    or
      $,$
      $*$
      warningOnUselessBanksel = false
    end
    outInstruction = @midrange_instruction_banksel. new { !instructionLocation !bank !warningOnUselessBanksel}
  or
    $banksave$
    @location instructionLocation = @location.here
    <register_parsing> ?var @registerExpression register
    @midrange_instructionList instructionList
    <midrange_instruction_list>
      ?instructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
    $end$
    outInstruction = @midrange_instruction_savebank. new {
      !instructionLocation
      !register
      !instructionList
      !@location.here}
  or
    $nobank$
    outInstruction = @midrange_instruction_nobanksel. new { !@location.here}
  or
    $forever$
    @location instructionLocation = @location.here
    @midrange_instructionList instructionList
    <midrange_instruction_list> ?instructionList !?ioNeedsComputedGoto2 !?ioNeedsComputedGoto4
    $end$
    outInstruction = @midrange_instruction_FOREVER. new {
      !instructionLocation
      !instructionList
      !@location.here}
  or
    $if$
    @location instructionLocation = @location.here
    @registerExpression registerExpression
    @bitNumberExpression bitNumberExpression
    @bool skipIfSet
    select
      $!$
      <register_parsing> ? registerExpression
      $.$
      <bit_number_parsing> ? bitNumberExpression
      skipIfSet = true
    or
      <register_parsing> ? registerExpression
      $.$
      <bit_number_parsing> ? bitNumberExpression
      skipIfSet = false
    end
    $:$
    @midrange_instruction instruction
    <midrange_simple_instruction> ?instruction
    outInstruction = @midrange_instruction_IF_BitTest. new {
      !instructionLocation
      !instruction
      !skipIfSet
      !registerExpression
      !bitNumberExpression}
  or
    $if$
    @location instructionLocation = @location.here
    @bool increment
    select
      $decf$ increment = false
    or
      $incf$ increment = true
    end
    @registerExpression registerExpression
    <register_parsing> ? registerExpression
    @bool w_isTarget
    select
      w_isTarget = false
    or
      $,$ $w$ w_isTarget = true
    end
    $identifier$ ?var  @lstring conditionString
    @string condition = [[conditionString string] uppercaseString]
    if condition != "NZ" then
      error conditionString:"invalid '" + condition + "' condition; it should be 'nz'"
    end
    $:$
    @midrange_instruction instruction
    <midrange_simple_instruction> ?instruction
    outInstruction = @midrange_instruction_IF_IncDec. new {
      !instructionLocation
      !instruction
      !increment
      !registerExpression
      !w_isTarget}
  or
    $if$
    <midrange_structured_if_instruction>
      ?outInstruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
    $end$
  or
    $do$
    @location instructionLocation = @location.here
    @midrange_instructionList repeatedInstructionList
    <midrange_instruction_list>
      ?repeatedInstructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
    @location endOfRepeatedInstructionList = @location.here
    var whilePartList =@midrange_partList.emptyList{}
    repeat
      $while$
      @midrange_conditionExpression whileCondition
      <midrange_condition_expression> ?whileCondition
      @midrange_instructionList instructionList
      <midrange_instruction_list>
        ?instructionList
        !?ioNeedsComputedGoto2
        !?ioNeedsComputedGoto4
      whilePartList += !whileCondition !instructionList !@location.here
    while
    end
    $end$
    outInstruction = @midrange_instruction_do_while. new {
      !instructionLocation
      !repeatedInstructionList
      !endOfRepeatedInstructionList
      !whilePartList}
  or
    $mnop$
    @location instructionLocation = @location.here
    $integer$ ?var  @luint occurrenceFactor
    outInstruction = @midrange_instruction_MNOP. new { !instructionLocation !occurrenceFactor}
  or
    $jsr$
    @location instructionLocation = @location.here
    $identifier$ ?var  @lstring targetLabelName
    outInstruction = @midrange_instruction_JSR. new {
      !instructionLocation
      !targetLabelName}
  or
    $jump$
    @location instructionLocation = @location.here
    $identifier$ ?var  @lstring targetLabelName
    outInstruction = @midrange_instruction_JUMP. new {
      !instructionLocation
      !targetLabelName}
  end
}

#----------------------------------------------------*

rule <midrange_structured_if_instruction>
  !@midrange_instruction outInstruction
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4 {
  @location instructionLocation = @location.here
  @midrange_conditionExpression structured_if_condition
  <midrange_condition_expression> ?structured_if_condition
  @midrange_instructionList thenInstructionList
  <midrange_instruction_list>
    ?thenInstructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
  @midrange_instructionList elseInstructionList
  select
    elseInstructionList = @midrange_instructionList. emptyList
  or
    $elsif$
    @midrange_instruction elsifPartInstruction
    <midrange_structured_if_instruction>
      ?elsifPartInstruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
    elseInstructionList = @midrange_instructionList. emptyList
    elseInstructionList += !elsifPartInstruction
  or
    $else$
    <midrange_instruction_list>
      ?elseInstructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
  end
  @location endOfElsePartLocation = @location.here
  outInstruction = @midrange_instruction_structured_if. new {
    !instructionLocation
    !structured_if_condition
    !thenInstructionList
    !elseInstructionList
    !endOfElsePartLocation}
}

#----------------------------------------------------*

rule <midrange_simple_instruction> !@midrange_instruction outInstruction {
  select
    @midrange_instruction_FD_base_code baseCode
    select
      $addwf$
      baseCode = @midrange_instruction_FD_base_code. ADDWF
    or
      $andwf$
      baseCode = @midrange_instruction_FD_base_code. ANDWF
    or
      $comf$
      baseCode = @midrange_instruction_FD_base_code. COMF
    or
      $decf$
      baseCode = @midrange_instruction_FD_base_code. DECF
    or
      $incf$
      baseCode = @midrange_instruction_FD_base_code. INCF
    or
      $iorwf$
      baseCode = @midrange_instruction_FD_base_code. IORWF
    or
      $movf$
      baseCode = @midrange_instruction_FD_base_code. MOVF
    or
      $rlf$
      baseCode = @midrange_instruction_FD_base_code. RLF
    or
      $rrf$
      baseCode = @midrange_instruction_FD_base_code. RRF
    or
      $subwf$
      baseCode = @midrange_instruction_FD_base_code. SUBWF
    or
      $swapf$
      baseCode = @midrange_instruction_FD_base_code. SWAPF
    or
      $xorwf$
      baseCode = @midrange_instruction_FD_base_code. XORWF
    end
    @location instructionLocation = @location.here
    @registerExpression registerExpression
    <register_parsing> ? registerExpression
    @bool W_isDestination
    <optional_w_as_dest> ?W_isDestination
    outInstruction = @midrange_instruction_FD. new {
      !instructionLocation
      !baseCode
      !registerExpression
      !W_isDestination}
  or
    @midrange_F_instruction_base_code FAinstruction
    select
      $clrf$
      FAinstruction = @midrange_F_instruction_base_code. CLRF
    or
      $movwf$
      FAinstruction = @midrange_F_instruction_base_code. MOVWF
    end
    @location instructionLocation = @location.here
    @registerExpression registerExpression
    <register_parsing> ? registerExpression
    outInstruction = @midrange_instruction_F. new {
      !instructionLocation
      !FAinstruction
      !registerExpression}
  or
    @midrange_bit_oriented_op bitOrientedOp
    select
      $bcf$ bitOrientedOp = @midrange_bit_oriented_op. BCF
    or
      $bsf$ bitOrientedOp = @midrange_bit_oriented_op. BSF
    end
    @location instructionLocation = @location.here
    @registerExpression registerExpression
    <register_parsing> ? registerExpression
    $.$
    @bitNumberExpression bitNumberExpression
    <bit_number_parsing> ? bitNumberExpression
    outInstruction = @midrange_instruction_FB. new {
      !instructionLocation
      !bitOrientedOp
      !registerExpression
      !bitNumberExpression}
  or
    $goto$
    @location instructionLocation = @location.here
    $identifier$ ?var  @lstring targetLabelName indexing routineCall
    outInstruction = @midrange_instruction_GOTO. new {
      !instructionLocation
      !targetLabelName}
  or
    $call$
    let @location instructionLocation = @location.here
    $identifier$ ?var  @lstring targetLabelName indexing routineCall
    outInstruction = @midrange_instruction_CALL. new {
      !instructionLocation
      !targetLabelName}
  or
    $clrw$
    outInstruction = @midrange_instruction_CLRW. new { !@location.here}
  or
    $clrwdt$
    outInstruction = @midrange_instruction_CLRWDT. new { !@location.here}
  or
    $nop$
    outInstruction = @midrange_instruction_NOP. new { !@location.here}
  or
    $sleep$
    outInstruction = @midrange_instruction_SLEEP. new { !@location.here}
  or
    @midrange_literal_instruction_opcode literalInstruction
    select
      $addlw$ literalInstruction = @midrange_literal_instruction_opcode. ADDLW
    or
      $andlw$ literalInstruction = @midrange_literal_instruction_opcode. ANDLW
    or
      $iorlw$ literalInstruction = @midrange_literal_instruction_opcode. IORLW
    or
      $movlw$ literalInstruction = @midrange_literal_instruction_opcode. MOVLW
    or
      $sublw$ literalInstruction = @midrange_literal_instruction_opcode. SUBLW
    or
      $xorlw$ literalInstruction = @midrange_literal_instruction_opcode. XORLW
    end
    @location instructionLocation = @location.here
    @immediatExpression expression
    <immediate_expression> ?expression
    outInstruction = @midrange_instruction_literalOperation. new {
      !instructionLocation
      !literalInstruction
      !expression}
  end
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  $!$
  @midrange_conditionExpression condition
  <midrange_condition_factor> ? condition
  outCondition = @midrange_negateCondition. new { !condition}
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  <midrange_condition_expression> ? outCondition
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  select
    @bool isIncrement
    select
      $incf$ isIncrement = true
    or
      $decf$ isIncrement = false
    end
    @registerExpression registerExpression
    <register_parsing> ? registerExpression
    @bool W_isDestination
    select
      W_isDestination = false
    or
      $,$ $w$ W_isDestination = true
    end
    $identifier$ ?var  @lstring conditionString
    @string condition = [[conditionString string] uppercaseString]
    @bool branchIfZero
    if condition == "Z" then
      branchIfZero = true
    elsif condition == "NZ" then
      branchIfZero = false
    else
      error conditionString: "invalid '" + conditionString
      + "' condition; valid ones are: 'z' and 'nz'"
      : branchIfZero
    end
    outCondition = @midrange_incDecRegisterInCondition. new {
      !registerExpression
      !isIncrement
      !W_isDestination
      !branchIfZero}
  or
    @registerExpression registerExpression
    @bitNumberExpression bitNumberExpression
#    @bool BTFSSinstruction
    <register_parsing> ? registerExpression
    $.$
    <bit_number_parsing> ?bitNumberExpression
#    select
#      BTFSSinstruction = false
#    or
#      $identifier$ ?var  @lstring conditionString
#      @string condition = [[conditionString string] uppercaseString]
#      if condition == "Z" then
#        BTFSSinstruction = true
#        @string s = "! " + [[registerExpression mRegisterName] string]
#        if [[registerExpression mOffset] uint] > 0 then
#          s += " [" + [[[registerExpression mOffset] uint] string] + "]"
#        end
#        s += "." [bitNumberExpression display !?s]
#        warning conditionString: "In Piccolo 1.2.0 and later, this construction is deprecated; use '" + s + "' instead" 
#      elsif condition == "NZ" then
#        BTFSSinstruction = false
#        @string s = [[registerExpression mRegisterName] string]
#        if [[registerExpression mOffset] uint] > 0 then
#          s += " [" + [[[registerExpression mOffset] uint] string] + "]"
#        end
#        s += "." [bitNumberExpression display !?s]
#        warning conditionString: "In Piccolo 1.2.0 and later, this construction is deprecated; use '" + s + "' instead" 
#      else
#        error conditionString: "invalid '" + conditionString
#        + "' condition; valid ones are: 'z' and 'nz'"
#        : BTFSSinstruction
#      end
#    end
    outCondition = @midrange_bitTest_in_structured_if_condition. new {
      !registerExpression
      !bitNumberExpression
#      !false
    }
  end
}

#----------------------------------------------------*

rule <midrange_condition_expression>
  !@midrange_conditionExpression outCondition {
  $($
  <midrange_condition_term> ? outCondition
  repeat
  while
    $|$
    @midrange_conditionExpression c
    <midrange_condition_term> ? c
    @midrange_conditionExpression rc = @midrange_negateCondition. new { !c}
    @midrange_conditionExpression lc = @midrange_negateCondition. new { !outCondition}
    outCondition = @midrange_negateCondition. new { !@midrange_andCondition. new { !lc !rc}}
  end
  $)$
}

#----------------------------------------------------*

rule <midrange_condition_term>
  !@midrange_conditionExpression outCondition {
  <midrange_condition_factor> ? outCondition
  repeat
  while
    $&$
    @midrange_conditionExpression c
    <midrange_condition_factor> ? c
    outCondition = @midrange_andCondition. new { !outCondition !c}
  end
}

#----------------------------------------------------*

}