syntax midrange_syntax (piccolo_lexique) {

#----------------------------------------------------*

rule <configuration_definition>
  ?!@configDefinitionList ioConfigDefinitionList

rule <declaration_in_ram>
  !@declarationInRam outDeclaration

rule <ram_definition>
  ?!@ramDefinitionList ioRamDefinitionList

rule <constant_definition>
  ?!@constantDefinitionList ioConstantDefinitionList

rule <register_parsing>
  !@registerExpression outRegisterExpression

rule <optional_w_as_dest>
  !@bool out_W_isDestination

rule <bit_number_parsing>
  !@bitNumberExpression outBitNumber

rule <immediate_expression>
  !@immediatExpression outExpression

#----------------------------------------------------*

rule <start_symbol> {
  $midrange$
  $identifier$ ?let @lstring programName
  $literal_string$ ?let @lstring deviceName
  $:$
  var interruptDefinitionList =@midrange_interruptDefinitionList ()
  var routineDefinitionList =@midrange_routineDefinitionList ()
  var ramDefinitionList =@ramDefinitionList ()
  var unusedRegisterList =@lstringlist ()
  var unusedRoutineList =@lstringlist ()
  var configDefinitionList =@configDefinitionList ()
  var constantDefinitionList =@constantDefinitionList ()
  var @bool needsComputedGoto2 = false
  var @bool needsComputedGoto4 = false
  repeat
  while
    $unused$
    $byte$
    repeat
      $identifier$ ?let @lstring unusedRegister
      unusedRegisterList += !unusedRegister
    while 
      $,$
    end
  while
    $unused$
    $routine$
    repeat
      $identifier$ ?let @lstring unusedRoutine
      unusedRoutineList += !unusedRoutine
    while 
      $,$
    end
  while
    <configuration_definition> !?configDefinitionList
  while
    <ram_definition> !?ramDefinitionList
  while
    <constant_definition> !?constantDefinitionList
  while
    <midrange_interrupt_definition>
      !?interruptDefinitionList
      !?needsComputedGoto2
      !?needsComputedGoto4
  while
    <midrange_routine_definition>
      !?routineDefinitionList
      !?needsComputedGoto2
      !?needsComputedGoto4
  end
  $end$
#--- Semantic analysis
  if @uint. errorCount == 0 then
    let piccoloModel = @midrange_model.init{
      !programName
      !deviceName
      !configDefinitionList
      !ramDefinitionList
      !unusedRegisterList
      !interruptDefinitionList
      !constantDefinitionList
      !routineDefinitionList
      !unusedRoutineList
      !needsComputedGoto2
      !needsComputedGoto4
      !@location.here
    }
    midrange_analyze ( !piccoloModel !@string. stringWithSourceFilePath )
  else
    let @string hexDestinationFile = [@string. stringWithSourceFilePath stringByDeletingPathExtension] + ".hex"
    if [hexDestinationFile fileExists] then
      [@string deleteFile !hexDestinationFile]
    end
    let @string asmDestinationFile = [@string. stringWithSourceFilePath stringByDeletingPathExtension] + ".asm"
    if [asmDestinationFile fileExists] then
      [@string deleteFile !asmDestinationFile]
    end
  end
}
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize {
  $midrange$
  $identifier$ ?let @lstring programName
  error programName: "this file does not define a bootloader specification"
   : outPiccoloDeviceModel, outAccessBankSplitOffset, outRamBank, outRegisterTable,
      outBootloaderReservedRAMmap, outBootloaderRoutineDeclarationList,
      outUserRoutineDeclarationList, outDeviceName,
      outBootloaderReservedROMsize
  $literal_string$ ? *
  $:$
  repeat
  while
    $unused$
    $byte$
    repeat
      $identifier$ ?*
    while 
      $,$
    end
  while
    $unused$
    $routine$
    repeat
      $identifier$ ?*
    while 
      $,$
    end
  while
     parse<configuration_definition>
  while
     parse<ram_definition>
  while
     parse<constant_definition>
  while
     parse<midrange_interrupt_definition>
  while
     parse<midrange_routine_definition>
  end
  $end$
}

#----------------------------------------------------*

rule <midrange_instruction_list>
  !@midrange_instructionList outInstructionList
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4
  ?!@labelMap ioLabelMap
  {
  outInstructionList = @midrange_instructionList ()
  repeat
  while
    <midrange_simple_instruction> ?let instruction
    outInstructionList += !instruction
  while
    <midrange_structured_instruction>
      ?let instruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    outInstructionList += !instruction
  end
}

#----------------------------------------------------*

rule <midrange_interrupt_definition>
  ?!@midrange_interruptDefinitionList ioInterruptDefinitionList
  ?!@bool ioNeedsComputedGoto2 
  ?!@bool ioNeedsComputedGoto4 {
  $interrupt$
  let @location interruptionLocation = @location.here
  $contextsave$
  $identifier$ ?let @lstring firstSaveRegister
  $,$
  $identifier$ ?let @lstring secondSaveRegister
  ${$
  var @labelMap labelMap = ()
  <midrange_instruction_list>
    ?let instructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
    !?labelMap
  $}$
  ioInterruptDefinitionList +=
   !interruptionLocation
   !instructionList
   !firstSaveRegister
   !secondSaveRegister
   !.here
}

#----------------------------------------------------*

rule <midrange_routine_definition>
  ?!@midrange_routineDefinitionList ioRoutineDefinitionList
  ?!@bool ioNeedsComputedGoto2 
  ?!@bool ioNeedsComputedGoto4
{
  let @bool noreturn
  select
    noreturn = false
  or
    $noreturn$
    noreturn = true
  end
  $routine$
  $identifier$ ?let @lstring routineName indexing routineDefinition
#--- Page
  let @luint page
  select
    page = @luint.init { !0 !@location.here}
  or
    $page$
    $integer$ ? page
  end
#--- Bank
  let @luint requiredBank
  let @luint returnedBank
  let @bool preservesBank
  select
    requiredBank = @luint.init { !@uint. max !@location.here}
    returnedBank = @luint.init { !@uint. max !@location.here}
    preservesBank = false
  or
    $bank$
    $:$
    select
      $preserved$
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:preserved\" setting"
      end
      preservesBank = true
      requiredBank = @luint.init { !@uint. max !@location.here}
      returnedBank = @luint.init { !@uint. max !@location.here}
    or
      $requires$
      $integer$ ? requiredBank
      preservesBank = false
      select
        returnedBank = @luint.init { !@uint. max !@location.here}
      or
        $ensures$
        $integer$ ? returnedBank
        if noreturn then
          error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
        end
      end
    or
      $ensures$
      $integer$ ? returnedBank
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
      end
      preservesBank = false
      requiredBank = @luint.init { !@uint. max !@location.here}
    end
  end
  ${$
  var @labelMap labelMap = ()
  <midrange_instruction_list>
    ?let instructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
    !?labelMap
  $}$
  ioRoutineDefinitionList +=
    !routineName
    !page
    !requiredBank
    !returnedBank
    !preservesBank
    !noreturn
    !instructionList
    !@location.here
}

#----------------------------------------------------*

rule <midrange_structured_instruction>
  !@midrange_instruction outInstruction
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4
  ?!@labelMap ioLabelMap
 {
  select
    $do$
    let @lstring doLabel
    select
      doLabel = .init {!"" !.here}
    or
      $label$ ?doLabel
      [!?ioLabelMap insertKey !doLabel]
    end
    let instructionLocation = @location.here
    $($
    $identifier$ ?let constantName
    $:$
    <immediate_expression> ?let @immediatExpression lowBoundExpression
    $...$
    <immediate_expression> ?let @immediatExpression highBoundExpression
    $)$
    <midrange_instruction_list>
      ?let @midrange_instructionList instructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    outInstruction = @midrange_instruction_STATIC_REPEAT.init {
      !instructionLocation
      !constantName
      !lowBoundExpression
      !highBoundExpression
      !instructionList
      !@location.here}
    $end$
    let @lstring endDoLabel
    select
      endDoLabel = .init {!"" !.here}
    or
      $label$ ?endDoLabel
    end
    if doLabel.string != endDoLabel.string then
      error endDoLabel : "'end' label does not match 'do' label, it should be "
         + (if doLabel.string != "" then doLabel.string else "empty" end)
    end 
  or
    $checkbank$
    $integer$ ?let @luint bankIndex
    outInstruction = @midrangeInstruction_checkbank.init { !bankIndex.location !bankIndex.uint}
  or
    $checknobank$
    outInstruction = @midrangeInstruction_checknobank.init { !@location.here}
  or
    $banksel$
    let @location instructionLocation = @location.here
    <register_parsing> ?let @registerExpression register
    let @bool warningOnUselessBanksel
    select
      warningOnUselessBanksel = true
    or
      $,$
      $*$
      warningOnUselessBanksel = false
    end
    outInstruction = @midrange_instruction_banksel_register.init { !instructionLocation !register !warningOnUselessBanksel}
  or
    $banksel$
    let @location instructionLocation = @location.here
    $integer$ ?let @luint bank
    let @bool warningOnUselessBanksel
    select
      warningOnUselessBanksel = true
    or
      $,$
      $*$
      warningOnUselessBanksel = false
    end
    outInstruction = @midrange_instruction_banksel.init { !instructionLocation !bank !warningOnUselessBanksel}
  or
    $banksave$
    let @location instructionLocation = @location.here
    <register_parsing> ?let @registerExpression register
    <midrange_instruction_list>
      ?let instructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    $end$
    outInstruction = @midrange_instruction_savebank.init {
      !instructionLocation
      !register
      !instructionList
      !@location.here}
  or
    $nobank$
    outInstruction = @midrange_instruction_nobanksel.init { !@location.here}
  or
    $forever$
    let @lstring foreverLabel
    select
      foreverLabel = .init {!"" !.here}
    or
      $label$ ?foreverLabel
      [!?ioLabelMap insertKey !foreverLabel]
    end
    let @location instructionLocation = @location.here
    <midrange_instruction_list>
      ?let instructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    $end$
    let @lstring endForeverLabel
    select
      endForeverLabel = .init {!"" !.here}
    or
      $label$ ?endForeverLabel
    end
    if foreverLabel.string != endForeverLabel.string then
      error endForeverLabel : "'end' label does not match 'fovever' label, it should be "
         + (if foreverLabel.string != "" then foreverLabel.string else "empty" end)
    end 
    outInstruction = @midrange_instruction_FOREVER.init {
      !instructionLocation
      !instructionList
      !@location.here}
  or
    $if$
    let @location instructionLocation = @location.here
    let @registerExpression registerExpression
    let @bitNumberExpression bitNumberExpression
    let @bool skipIfSet
    select
      $!$
      <register_parsing> ? registerExpression
      $.$
      <bit_number_parsing> ? bitNumberExpression
      skipIfSet = true
    or
      <register_parsing> ? registerExpression
      $.$
      <bit_number_parsing> ? bitNumberExpression
      skipIfSet = false
    end
    $:$
    <midrange_simple_instruction> ?let instruction
    outInstruction = @midrange_instruction_IF_BitTest.init {
      !instructionLocation
      !instruction
      !skipIfSet
      !registerExpression
      !bitNumberExpression}
  or
    $if$
    let @location instructionLocation = @location.here
    let @bool increment
    select
      $decf$ ; increment = false
    or
      $incf$ ; increment = true
    end
    <register_parsing> ?let registerExpression
    let @bool w_isTarget
    select
      w_isTarget = false
    or
      $,$ ; $w$ ; w_isTarget = true
    end
    $identifier$ ?let @lstring conditionString
    let @string condition = [conditionString.string uppercaseString]
    if condition != "NZ" then
      error conditionString:"invalid '" + condition + "' condition; it should be 'nz'"
    end
    $:$
    <midrange_simple_instruction> ?let instruction
    outInstruction = @midrange_instruction_IF_IncDec.init {
      !instructionLocation
      !instruction
      !increment
      !registerExpression
      !w_isTarget
    }
  or
    $if$
    let @lstring ifLabel
    select
      ifLabel = .init {!"" !.here}
    or
      $label$ ?ifLabel
      [!?ioLabelMap insertKey !ifLabel]
    end
    <midrange_structured_if_instruction>
      !ifLabel
      ?outInstruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    $end$
    let @lstring endIfLabel
    select
      endIfLabel = .init {!"" !.here}
    or
      $label$ ?endIfLabel
    end
    if ifLabel.string != endIfLabel.string then
      error endIfLabel : "'end' label does not match 'if' label, it should be "
         + (if ifLabel.string != "" then ifLabel.string else "empty" end)
    end 
  or
    $do$
    let @lstring doLabel
    select
      doLabel = .init {!"" !.here}
    or
      $label$ ?doLabel
      [!?ioLabelMap insertKey !doLabel]
    end
    let @location instructionLocation = @location.here
    <midrange_instruction_list>
      ?let repeatedInstructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    let @location endOfRepeatedInstructionList = @location.here
    var whilePartList =@midrange_partList ()
    repeat
      $while$
      let @lstring whileLabel
      select
        whileLabel = .init {!"" !.here}
      or
        $label$ ?whileLabel
      end
      if doLabel.string != whileLabel.string then
        error whileLabel : "'while' label does not match 'do' label, it should be "
           + (if doLabel.string != "" then doLabel.string else "empty" end)
      end 
      <midrange_condition_expression> ?let whileCondition
      <midrange_instruction_list>
        ?let instructionList
        !?ioNeedsComputedGoto2
        !?ioNeedsComputedGoto4
      !?ioLabelMap
      whilePartList += !whileCondition !instructionList !@location.here
    while
    end
    $end$
    let @lstring endDoLabel
    select
      endDoLabel = .init {!"" !.here}
    or
      $label$ ?endDoLabel
    end
    if doLabel.string != endDoLabel.string then
      error endDoLabel : "'end' label does not match 'do' label, it should be "
         + (if doLabel.string != "" then doLabel.string else "empty" end)
    end 
    outInstruction = @midrange_instruction_do_while.init {
      !instructionLocation
      !repeatedInstructionList
      !endOfRepeatedInstructionList
      !whilePartList}
  or
    $mnop$
    let @location instructionLocation = @location.here
    $integer$ ?let @luint occurrenceFactor
    outInstruction = @midrange_instruction_MNOP.init { !instructionLocation !occurrenceFactor}
  or
    $jsr$
    let @location instructionLocation = @location.here
    $identifier$ ?let @lstring targetLabelName
    outInstruction = @midrange_instruction_JSR.init {
      !instructionLocation
      !targetLabelName}
  or
    $jump$
    let @location instructionLocation = @location.here
    $identifier$ ?let @lstring targetLabelName
    outInstruction = @midrange_instruction_JUMP.init {
      !instructionLocation
      !targetLabelName}
  end
}

#----------------------------------------------------*

rule <midrange_structured_if_instruction>
  ?let @lstring ifLabel
  !@midrange_instruction outInstruction
  ?!@bool ioNeedsComputedGoto2
  ?!@bool ioNeedsComputedGoto4
  ?!@labelMap ioLabelMap

{
  let @location instructionLocation = @location.here
  <midrange_condition_expression> ?let structured_if_condition
  <midrange_instruction_list>
    ?let thenInstructionList
    !?ioNeedsComputedGoto2
    !?ioNeedsComputedGoto4
    !?ioLabelMap
  var @midrange_instructionList elseInstructionList
  select
    elseInstructionList = @midrange_instructionList ()
  or
    $elsif$
    let @lstring elsifIfLabel
    select
      elsifIfLabel = .init {!"" !.here}
    or
      $label$ ?elsifIfLabel
    end
    if ifLabel.string != elsifIfLabel.string then
      error elsifIfLabel : "'elsif' label does not match 'if' label, it should be "
         + (if ifLabel.string != "" then ifLabel.string else "empty" end)
    end 
    <midrange_structured_if_instruction>
      !ifLabel
      ?let elsifPartInstruction
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
    elseInstructionList = @midrange_instructionList ()
    elseInstructionList += !elsifPartInstruction
  or
    $else$
    let @lstring elseLabel
    select
      elseLabel = .init {!"" !.here}
    or
      $label$ ?elseLabel
    end
    if ifLabel.string != elseLabel.string then
      error elseLabel : "'else' label does not match 'if' label, it should be "
         + (if ifLabel.string != "" then ifLabel.string else "empty" end)
    end 
    <midrange_instruction_list>
      ?elseInstructionList
      !?ioNeedsComputedGoto2
      !?ioNeedsComputedGoto4
      !?ioLabelMap
  end
  let @location endOfElsePartLocation = @location.here
  outInstruction = @midrange_instruction_structured_if.init {
    !instructionLocation
    !structured_if_condition
    !thenInstructionList
    !elseInstructionList
    !endOfElsePartLocation}
}

#----------------------------------------------------*

rule <midrange_simple_instruction> !@midrange_instruction outInstruction {
  select
    let @midrange_instruction_FD_base_code baseCode
    select
      $addwf$
      baseCode = .ADDWF
    or
      $andwf$
      baseCode = .ANDWF
    or
      $comf$
      baseCode = .COMF
    or
      $decf$
      baseCode = .DECF
    or
      $incf$
      baseCode = .INCF
    or
      $iorwf$
      baseCode = .IORWF
    or
      $movf$
      baseCode = .MOVF
    or
      $rlf$
      baseCode = .RLF
    or
      $rrf$
      baseCode = .RRF
    or
      $subwf$
      baseCode = .SUBWF
    or
      $swapf$
      baseCode = .SWAPF
    or
      $xorwf$
      baseCode = .XORWF
    end
    let instructionLocation = @location.here
    <register_parsing> ?let registerExpression
    <optional_w_as_dest> ?let W_isDestination
    outInstruction = @midrange_instruction_FD.init {
      !instructionLocation
      !baseCode
      !registerExpression
      !W_isDestination
    }
  #--- Emit a warning if instruction is "movf" and W is not destination
    if (baseCode == .MOVF) && not W_isDestination then
      warning instructionLocation :  "This instruction does not move data, it only sets flags. "
        "Use 'movf *, reg' instead of 'movf reg' to suppress this warning" 
    end
  or
    $movf$
    let @location instructionLocation = .here
    $*$
    $,$
    <register_parsing> ?let registerName
    outInstruction = @midrange_instruction_FD.init {
      !instructionLocation
      !.MOVF
      !registerName
      !false # W is not destination
    }
  or
    let @midrange_F_instruction_base_code FAinstruction
    select
      $clrf$
      FAinstruction = @midrange_F_instruction_base_code. CLRF
    or
      $movwf$
      FAinstruction = @midrange_F_instruction_base_code. MOVWF
    end
    let @location instructionLocation = @location.here
    <register_parsing> ?let registerExpression
    outInstruction = @midrange_instruction_F.init {
      !instructionLocation
      !FAinstruction
      !registerExpression}
  or
    let @midrange_bit_oriented_op bitOrientedOp
    select
      $bcf$ ; bitOrientedOp = @midrange_bit_oriented_op. BCF
    or
      $bsf$ ; bitOrientedOp = @midrange_bit_oriented_op. BSF
    end
    let @location instructionLocation = @location.here
    <register_parsing> ?let registerExpression
    $.$
    <bit_number_parsing> ?let bitNumberExpression
    outInstruction = @midrange_instruction_FB.init {
      !instructionLocation
      !bitOrientedOp
      !registerExpression
      !bitNumberExpression}
  or
    $goto$
    let @location instructionLocation = @location.here
    $identifier$ ?let @lstring targetLabelName indexing routineCall
    outInstruction = @midrange_instruction_GOTO.init {
      !instructionLocation
      !targetLabelName}
  or
    $call$
    let @location instructionLocation = @location.here
    $identifier$ ?let @lstring targetLabelName indexing routineCall
    outInstruction = @midrange_instruction_CALL.init {
      !instructionLocation
      !targetLabelName}
  or
    $clrw$
    outInstruction = @midrange_instruction_CLRW.init { !@location.here}
  or
    $clrwdt$
    outInstruction = @midrange_instruction_CLRWDT.init { !@location.here}
  or
    $nop$
    outInstruction = @midrange_instruction_NOP.init { !@location.here}
  or
    $sleep$
    outInstruction = @midrange_instruction_SLEEP.init { !@location.here}
  or
    let @midrange_literal_instruction_opcode literalInstruction
    select
      $addlw$ ; literalInstruction = @midrange_literal_instruction_opcode. ADDLW
    or
      $andlw$ ; literalInstruction = @midrange_literal_instruction_opcode. ANDLW
    or
      $iorlw$ ; literalInstruction = @midrange_literal_instruction_opcode. IORLW
    or
      $movlw$ ; literalInstruction = @midrange_literal_instruction_opcode. MOVLW
    or
      $sublw$ ; literalInstruction = @midrange_literal_instruction_opcode. SUBLW
    or
      $xorlw$ ; literalInstruction = @midrange_literal_instruction_opcode. XORLW
    end
    let @location instructionLocation = @location.here
    <immediate_expression> ?let expression
    outInstruction = @midrange_instruction_literalOperation.init {
      !instructionLocation
      !literalInstruction
      !expression}
  end
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  $!$
  <midrange_condition_factor> ?let condition
  outCondition = @midrange_negateCondition.init { !condition}
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  <midrange_condition_expression> ? outCondition
}

#----------------------------------------------------*

rule <midrange_condition_factor>
  !@midrange_conditionExpression outCondition {
  select
    let @bool isIncrement
    select
      $incf$ ; isIncrement = true
    or
      $decf$ ; isIncrement = false
    end
    <register_parsing> ?let registerExpression
    let @bool W_isDestination
    select
      W_isDestination = false
    or
      $,$ ; $w$ ; W_isDestination = true
    end
    $identifier$ ?let @lstring conditionString
    let @string condition = [conditionString.string uppercaseString]
    let @bool branchIfZero
    if condition == "Z" then
      branchIfZero = true
    elsif condition == "NZ" then
      branchIfZero = false
    else
      error conditionString: "invalid '" + conditionString
      + "' condition; valid ones are: 'z' and 'nz'"
      : branchIfZero
    end
    outCondition = @midrange_incDecRegisterInCondition.init {
      !registerExpression
      !isIncrement
      !W_isDestination
      !branchIfZero}
  or
    <register_parsing> ?let registerExpression
    $.$
    <bit_number_parsing> ?let bitNumberExpression
    outCondition = @midrange_bitTest_in_structured_if_condition.init {
      !registerExpression
      !bitNumberExpression
    }
  end
}

#----------------------------------------------------*

rule <midrange_condition_expression>
  !@midrange_conditionExpression outCondition {
  $($
  <midrange_condition_term> ? outCondition
  repeat
  while
    $|$
    <midrange_condition_term> ?let c
    let @midrange_conditionExpression rc = @midrange_negateCondition.init { !c}
    let @midrange_conditionExpression lc = @midrange_negateCondition.init { !outCondition}
    outCondition = @midrange_negateCondition.init { !@midrange_andCondition.init { !lc !rc}}
  end
  $)$
}

#----------------------------------------------------*

rule <midrange_condition_term>
  !@midrange_conditionExpression outCondition {
  <midrange_condition_factor> ? outCondition
  repeat
  while
    $&$
    <midrange_condition_factor> ?let c
    outCondition = @midrange_andCondition.init { !outCondition !c}
  end
}

#----------------------------------------------------*

}