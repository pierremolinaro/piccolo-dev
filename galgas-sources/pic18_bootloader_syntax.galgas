syntax pic18_bootloader_syntax (piccolo_lexique) {

#----------------------------------------------------*

rule <ram_definition>
  ?!@ramDefinitionList ioRamDefinitionList

rule <start_symbol>
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize

rule <routine_declaration> ?!@routineDeclarationList ioRoutineDefinitionList

#----------------------------------------------------*

rule <parse_bootloader>
  !@lstring outBootloaderName
  !@lstring outDeviceName
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@luint outReservedRomSize
  !@routineDeclarationList outUserRoutineDeclarationList
  !@ramDefinitionList outSharedRamDefinitionList
  !@string outListFileContents
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable {
  $pic18$
  $bootloader$
  $identifier$ ? outBootloaderName
  $literal_string$ ? outDeviceName
#--- First part
  ${$
  outBootloaderRoutineDeclarationList = @routineDeclarationList. emptyList
  outBootloaderReservedRAMmap = @bootloaderReservedRAMmap. emptyMap
  outReservedRomSize = @luint. new { !0 !@location.here}
  repeat
  while
    <routine_declaration> !?outBootloaderRoutineDeclarationList
  while
    $rom$
    $=$
    $integer$ ?let @luint rs
    if outReservedRomSize.uint != 0 then
      error rs : "ROM size already defined"
    elsif rs.uint == 0 then
      error rs: "ROM size should be > 0"
    elsif (rs.uint mod 8) != 0 then
      error rs: "ROM size should be a multiple of 8"
    else
      outReservedRomSize = rs
    end
  while
    $ram$
    $identifier$ ?let @lstring bankName
    $=$
    $integer$ ?let @luint rs
    if [outBootloaderReservedRAMmap hasKey !bankName.string] then
      error rs : "RAM size already defined for '" + bankName + "' bank"
    elsif rs.uint == 0 then
      error rs: "RAM size should be > 0"
    else
      [!?outBootloaderReservedRAMmap  insertKey !bankName !rs]
    end
  end
  $}$
#--- Second part
  ${$
  outUserRoutineDeclarationList = @routineDeclarationList. emptyList
  repeat
  while
    <routine_declaration> !? outUserRoutineDeclarationList
  end
  $}$
#--- Third part
  outSharedRamDefinitionList = @ramDefinitionList. emptyList
  ${$
  repeat
  while
    <ram_definition> !?outSharedRamDefinitionList
  end
  $}$
#--- Semantic analysis
  pic18BootloaderSpecificationAnalysis (
    !@string. stringWithSourceFilePath
    !outBootloaderName
    !outDeviceName
    !outBootloaderRoutineDeclarationList
    !outBootloaderReservedRAMmap
    !outReservedRomSize
    !outUserRoutineDeclarationList
    !outSharedRamDefinitionList
    ?outListFileContents
    ?outPiccoloDeviceModel
    ?outAccessBankSplitOffset
    ?outRamBank
    ?outRegisterTable
  )
}

#----------------------------------------------------*

rule <start_symbol> {
  <parse_bootloader>
    ?let unused bootloaderName
    ?let unused deviceName
    ?let unused bootloaderRoutineDeclarationList
    ?let unused bootloaderReservedRAMmap
    ?let unused reservedRomSize
    ?let unused userRoutineDeclarationList
    ?let unused sharedRamDefinitionList
    ?let listFileContents
    ?let unused piccoloDeviceModel
    ?let unused accessBankSplitOffset
    ?let unused ramBank
    ?let unused registerTable
#--- Semantic analysis
  let @string listingFile = [@string. stringWithSourceFilePath stringByDeletingPathExtension] + ".list"
  if (@uint. errorCount == 0) & [option piccolo_options.ouputListingFile value] then
    [listFileContents writeToFileWhenDifferentContents !listingFile ?*]
  end
  if @uint. errorCount > 0 then
    [@string deleteFileIfExists !listingFile]
  end
}
label importBootloaderSpecification
  !@piccoloDeviceModel outPiccoloDeviceModel
  !@string outDeviceName
  !@uint outAccessBankSplitOffset
  !@ramBankTable outRamBank
  !@registerTable outRegisterTable
  !@bootloaderReservedRAMmap outBootloaderReservedRAMmap
  !@routineDeclarationList outBootloaderRoutineDeclarationList
  !@routineDeclarationList outUserRoutineDeclarationList
  !@luint outBootloaderReservedROMsize {
  <parse_bootloader>
    ?let unused bootloaderName
    ?let @lstring deviceName
    ?outBootloaderRoutineDeclarationList
    ?outBootloaderReservedRAMmap
    ?outBootloaderReservedROMsize
    ?outUserRoutineDeclarationList
    ?let unused sharedRamDefinitionList
    ?let unused listFileContents
    ?outPiccoloDeviceModel
    ?outAccessBankSplitOffset
    ?outRamBank
    ?outRegisterTable
  outDeviceName = deviceName.string
}

#----------------------------------------------------*

rule <routine_declaration>
  ?!@routineDeclarationList ioRoutineDefinitionList {
  let @bool noreturn
  select
    noreturn = false
  or
    $noreturn$
    noreturn = true
  end
  $routine$
  $identifier$ ?let @lstring routineName
  let @luint requiredBank
  let @luint returnedBank
  let @bool preservesBank
  select
    requiredBank = @luint. new { !@uint. max !@location.here}
    returnedBank = @luint. new { !@uint. max !@location.here}
    preservesBank = false
  or
    $bank$
    $:$
    select
      $preserved$
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:preserved\" setting"
      end
      preservesBank = true
      requiredBank = @luint. new { !@uint. max !@location.here}
      returnedBank = @luint. new { !@uint. max !@location.here}
    or
      $requires$
      $integer$ ? requiredBank
      preservesBank = false
      select
        returnedBank = @luint. new { !@uint. max !@location.here}
      or
        $ensures$
        $integer$ ? returnedBank
        if noreturn then
          error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
        end
      end
    or
      $ensures$
      $integer$ ? returnedBank
      if noreturn then
        error @location.here: "a \"noreturn\" routine cannot accept \"bank:returned\" setting"
      end
      preservesBank = false
      requiredBank = @luint. new { !@uint. max !@location.here}
    end
  end
#---
  ioRoutineDefinitionList += !routineName !requiredBank !returnedBank !preservesBank !noreturn
}

#----------------------------------------------------*

}