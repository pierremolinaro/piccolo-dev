

#---------------------------------------------------------------------------*
#                                                                           *
#    B O O T L O A D E R   R E S E R V E D   R A M    M A P                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @bootloaderReservedRAMmap {
  public var @luint mReservedSize
  insert insertKey error message "the reserved size for the '%K' bank is already declared"
  search searchKey error message "the reserved size for the '%K' bank is not declared"
}

#----------------------------------------------------*

abstract class @pic18PiccoloInstruction {
  public var @location mInstructionLocation
}

#----------------------------------------------------*

list @pic18InstructionList {
  public var @pic18PiccoloInstruction mInstruction
}

#----------------------------------------------------*

class @pic18Instruction_nobanksel : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checknobank : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checkbank : @pic18PiccoloInstruction {
  public var @uint mBankIndex
}

#----------------------------------------------------*

abstract class @pic18PiccoloSimpleInstruction : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_banksel : @pic18PiccoloInstruction {
  public var @luint mBankIndex
  public var @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_banksel_register : @pic18PiccoloInstruction {
  public var @registerExpression mRegisterExpression
  public var @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_savebank : @pic18PiccoloInstruction {
  public var @registerExpression mRegister
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfSaveBankInstruction
}

#----------------------------------------------------*

class @pic18Instruction_repetitionStatique : @pic18PiccoloInstruction {
  public var @lstring mConstantName
  public var @immediatExpression mLowerBoundExpression
  public var @immediatExpression mUpperBoundExpression
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfInstruction
}

#----------------------------------------------------*

#!Block Instruction

#----------------------------------------------------*

abstract class @abstractBlockTerminationForBlockInstruction {
}

#----------------------------------------------------*

class @exitBlockTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public var @location mLocation
}

#----------------------------------------------------*

class @gotoTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public var @lstring mNextBlock
}

#----------------------------------------------------*

class @testTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public var @pic18ConditionExpression mCondition
  public var @abstractBlockTerminationForBlockInstruction mTrueTermination
  public var @abstractBlockTerminationForBlockInstruction mFalseTermination
  public var @location mLocation
}

#----------------------------------------------------*

list @pic18BlockInstructionBlockList {
  public var @lstring mBlockName
  public var @pic18InstructionList mInstructionList
  public var @abstractBlockTerminationForBlockInstruction mBlockTerminaisonForBlockInstruction
  public var @location mEndOfBlock
}

#----------------------------------------------------*

class @pic18Instruction_block : @pic18PiccoloInstruction {
  public var @lstring mStartBlockName
  public var @pic18BlockInstructionBlockList mBlockList
  public var @location mEndOfBlockInstruction
}

#----------------------------------------------------*

#!Switch instruction

#----------------------------------------------------*

abstract class @pic18AbstractCaseItem {
}

#----------------------------------------------------*

enum @pic18Instruction_FDA_base_code_AST %equatable {
  case ADDWF  case ADDWFC  case ANDWF  case COMF  case DECF  case INCF 
  case IORWF  case MOVF  case RLCF  case RLNCF  case RRCF  case RRNCF
  case SUBFWB  case SUBWF  case SUBWFB  case SWAPF  case XORWF
}

#----------------------------------------------------*

class @pic18Instruction_FDA : @pic18PiccoloSimpleInstruction {
  public var @pic18Instruction_FDA_base_code_AST mInstruction_FDA_base_code
  public var @registerExpression mRegisterExpression
  public var @bool m_W_isDestination
}

#----------------------------------------------------*

enum @FA_instruction_base_code {
  case CLRF  case CPFSEQ  case CPFSGT  case CPFSLT  case MOVWF  case MULWF  case NEGF  case SETF  case TSTFSZ
}

#----------------------------------------------------*

class @pic18Instruction_FA : @pic18PiccoloSimpleInstruction {
  public var @FA_instruction_base_code mFAinstruction
  public var @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_MOVFF : @pic18PiccoloSimpleInstruction {
  public var @registerExpression mSourceRegisterName
  public var @registerExpression mDestinationRegisterName
}

#----------------------------------------------------*

enum @bit_oriented_op {
  case BCF  case BSF  case BTG
}

#----------------------------------------------------*

class @pic18Instruction_FBA : @pic18PiccoloSimpleInstruction {
  public var @bit_oriented_op mBitOrientedOp
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

enum @conditional_branch %equatable {
  case bz  case bnz  case bn  case bnn  case bc  case bnc  case bov  case bnov
}

#----------------------------------------------------*

enum @jumpInstructionKind %equatable {
  case ipicRelative
  case relative
  case absolute
}

#----------------------------------------------------*

class @pic18Instruction_JSR : @pic18PiccoloSimpleInstruction {
  public var @lstring mTargetLabel
  public var @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_macro : @pic18PiccoloInstruction {
  public var @lstring mMacroName
  public var @immediatExpressionList mExpressionList
}

#----------------------------------------------------*

class @pic18Instruction_JUMP : @pic18PiccoloInstruction {
  public var @lstring mTargetLabel
  public var @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_JUMPCC : @pic18PiccoloInstruction {
  public var @lstring mTargetLabel
  public var @conditional_branch mConditionalBranch
  public var @bool mIsBcc
}

#----------------------------------------------------*

enum @pic18InstructionWithNoOperandKind {
  case CLRWDT 
  case DAW 
  case NOP 
  case POP 
  case PUSH 
  case RESET 
  case SLEEP
}

#----------------------------------------------------*

class @pic18Instruction_withNoOperand : @pic18PiccoloSimpleInstruction {
  public var @pic18InstructionWithNoOperandKind mKind
}

#----------------------------------------------------*

enum @literal_instruction_opcode %equatable {
  case ADDLW  case ANDLW  case IORLW  case MOVLW  case MULLW  case SUBLW  case XORLW
}

#----------------------------------------------------*

class @pic18Instruction_literalOperation : @pic18PiccoloSimpleInstruction {
  public var @literal_instruction_opcode mLiteralInstruction
  public var @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_fnop : @pic18PiccoloSimpleInstruction {
  public var @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LFSR : @pic18PiccoloSimpleInstruction {
  public var @luint mFSRindex
  public var @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LTBLPTR : @pic18PiccoloInstruction {
  public var @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LDATA8PTR : @pic18PiccoloInstruction {
  public var @lstring mDataName
  public var @luint mDataIndex
}

#----------------------------------------------------*

class @pic18Instruction_LDATA16PTR : @pic18PiccoloInstruction {
  public var @lstring mDataName
  public var @luint mDataIndex
}

#----------------------------------------------------*

enum @tableAccessOption {
  case simpleAccess  case postIncrement  case postDecrement  case preIncrement
}

#----------------------------------------------------*

class @pic18Instruction_TBLRD : @pic18PiccoloSimpleInstruction {
  public var @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_TBLWT : @pic18PiccoloSimpleInstruction {
  public var @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_MNOP : @pic18PiccoloInstruction {
  public var @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_NOPBRA : @pic18PiccoloInstruction {
  public var @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_FOREVER : @pic18PiccoloInstruction {
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfInstructionList
}

#----------------------------------------------------*

enum @if_semi_colon_op {
  case CPFSEQ  case CPFSGT  case CPFSLT  case TSTFSZ
}

#----------------------------------------------------*

abstract class @pic18Instruction_IF_SEMI_COLON : @pic18PiccoloInstruction {
  public var @pic18PiccoloSimpleInstruction mEmbeddedInstruction
}

#----------------------------------------------------*

class @pic18Instruction_IF_FA_SEMI_COLON : @pic18Instruction_IF_SEMI_COLON {
  public var @if_semi_colon_op mOpCode
  public var @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_IF_BitTest : @pic18Instruction_IF_SEMI_COLON {
  public var @bool mSkipIfSet
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

class @pic18Instruction_IF_IncDec : @pic18Instruction_IF_SEMI_COLON {
  public var @bool mIncrement
  public var @bool mSkipIfZero
  public var @registerExpression mRegisterExpression
  public var @bool m_W_isDestination
}

#----------------------------------------------------*

class @pic18Instruction_computed_retlw : @pic18PiccoloInstruction {
  public var @immediatExpression mSizeExpression
  public var @immediatExpressionList mImmediateExpressionList
  public var @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_bra : @pic18PiccoloInstruction {
  public var @immediatExpression mSizeExpression
  public var @lstringlist mTargetLabels
  public var @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_goto : @pic18PiccoloInstruction {
  public var @immediatExpression mSizeExpression
  public var @lstringlist mTargetLabels
  public var @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_rcall : @pic18PiccoloInstruction {
  public var @immediatExpression mSizeExpression
  public var @lstringlist mTargetLabels
  public var @bool mUsesRelativeCall
}

#----------------------------------------------------*

abstract class @pic18ConditionExpression {
}

#----------------------------------------------------*

class @pic18RegisterTestCondition : @pic18ConditionExpression {
  public var @registerExpression mRegisterExpression
  public var @bool mBranchIfZero
}

#----------------------------------------------------*

enum @pic18RegisterComparison {
  case notEqual  case equal  case greaterOrEqual  case greater  case lowerOrEqual  case lower
}

#----------------------------------------------------*

class @pic18RegisterComparisonCondition : @pic18ConditionExpression {
  public var @registerExpression mRegisterExpression
  public var @pic18RegisterComparison mComparison
}

#----------------------------------------------------*

class @pic18IncDecRegisterInCondition : @pic18ConditionExpression {
  public var @registerExpression mRegisterExpression
  public var @bool mIncrement
  public var @bool m_W_isDestination
  public var @bool mBranchIfZero
}

#----------------------------------------------------*

class @pic18BccInStructuredCondition : @pic18ConditionExpression {
  public var @location mConditionLocation
  public var @conditional_branch mCondition
}

#----------------------------------------------------*

class @pic18NegateCondition : @pic18ConditionExpression {
  public var @pic18ConditionExpression mCondition
}

#----------------------------------------------------*

class @pic18AndCondition : @pic18ConditionExpression {
  public var @pic18ConditionExpression mLeftExpression
  public var @pic18ConditionExpression mRightExpression
}

#----------------------------------------------------*

class @pic18BitTestInStructuredCondition : @pic18ConditionExpression {
  public var @registerExpression mRegisterExpression
  public var @bitNumberExpression mBitNumber
#  @bool mBTFSSinstruction
}

#----------------------------------------------------*

class @pic18Instruction_structured_if : @pic18PiccoloInstruction {
  public var @pic18ConditionExpression mIfCondition
  public var @pic18InstructionList mThenInstructionList
  public var @pic18InstructionList mElseInstructionList
  public var @location mEndOfElsePartLocation
}

#----------------------------------------------------*

list @pic18DoWhilePartList {
  public var @pic18ConditionExpression mCondition
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfPartLocation
}

#----------------------------------------------------*

class @pic18Instruction_do_while : @pic18PiccoloInstruction {
  public var @pic18InstructionList mRepeatedInstructionList
  public var @location mEndOfRepeatedInstructionList
  public var @pic18DoWhilePartList mWhilePartList
}

#----------------------------------------------------*

list @pic18InterruptDefinitionList {
  public var @lstring mInterruptName
  public var @bool mFastReturn
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfInterruptLocation
}

#----------------------------------------------------*

list @pic18RoutineDefinitionList {
  public var @lstring mRoutineName
  public var @luint mRequiredBank
  public var @luint mReturnedBank
  public var @bool mPreservesBank
  public var @bool mIsNoReturn
  public var @pic18InstructionList mInstructionList
  public var @location mEndOfRoutineLocation
}

#----------------------------------------------------*

list @pic18MacroDefinitionList {
  public var @lstring mMacroName
  public var @lstringlist mConstantNameList
  public var @pic18InstructionList mInstructionList
}

#----------------------------------------------------*

map @pic18MacroMap {
  public var @lstringlist mConstantNameList
  public var @pic18InstructionList mInstructionList
  insert insertKey error message "the '%K' macro is already declared in %L"
  search searchKey error message "there is no '%K' macro"
}

#----------------------------------------------------*

list @routineDeclarationList {
  public var @lstring mRoutineName
  public var @luint mRequiredBank
  public var @luint mReturnedBank
  public var @bool mPreservesBank
  public var @bool mIsNoReturn
}

#----------------------------------------------------*

enum @programKind %equatable {
  case regularProgram  case bootloaderProgram  case userProgram
}

#----------------------------------------------------*

list @dataList {
  public var @lstring mDataName
  public var @immediatExpressionList mValueList
  public var @bool mIsByteList # true: data8, false: data16
}

#----------------------------------------------------*

list @checkpicList {
  public var @location mErrorLocation
  public var @lstringlist mValueList
}

#----------------------------------------------------*

struct @pic18AST {
  public var @lstring mProgramName
  public var @programKind mProgramKind
  public var @lstring mDeviceNameOrBootLoaderReference
  public var @configDefinitionList mConfigDefinitionList
  public var @ramDefinitionList mRamDefinitionList
  public var @lstringlist mUnusedRegisterList
  public var @checkpicList mCheckpicList
  public var @dataList mDataList
  public var @pic18InterruptDefinitionList mInterruptDefinitionList
  public var @constantDefinitionList mConstantDefinitionList
  public var @pic18RoutineDefinitionList mRoutineDefinitionList
  public var @pic18MacroDefinitionList mMacroDefinitionList
  public var @lstringlist mUnusedRoutineList
  public var @lstringlist mInlinedRoutineList
  public var @bool mNeedsComputedGoto2
  public var @bool mNeedsComputedGoto4
  public var @location mEndOfProgram
}

#----------------------------------------------------*

