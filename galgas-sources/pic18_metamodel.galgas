

#---------------------------------------------------------------------------*
#                                                                           *
#    B O O T L O A D E R   R E S E R V E D   R A M    M A P                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @bootloaderReservedRAMmap {
  @luint mReservedSize
  insert insertKey error message "the reserved size for the '%K' bank is already declared"
  search searchKey error message "the reserved size for the '%K' bank is not declared"
}

#----------------------------------------------------*

abstract class @pic18PiccoloInstruction {
  @location mInstructionLocation
}

#----------------------------------------------------*

list @pic18InstructionList {
  @pic18PiccoloInstruction mInstruction
}

#----------------------------------------------------*

class @pic18Instruction_nobanksel : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checknobank : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checkbank : @pic18PiccoloInstruction {
  @uint mBankIndex
}

#----------------------------------------------------*

abstract class @pic18PiccoloSimpleInstruction : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_banksel : @pic18PiccoloInstruction {
  @luint mBankIndex
  @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_banksel_register : @pic18PiccoloInstruction {
  @registerExpression mRegisterExpression
  @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_savebank : @pic18PiccoloInstruction {
  @registerExpression mRegister
  @pic18InstructionList mInstructionList
  @location mEndOfSaveBankInstruction
}

#----------------------------------------------------*

class @pic18Instruction_repetitionStatique : @pic18PiccoloInstruction {
  @lstring mConstantName
  @immediatExpression mLowerBoundExpression
  @immediatExpression mUpperBoundExpression
  @pic18InstructionList mInstructionList
  @location mEndOfInstruction
}

#----------------------------------------------------*

#!Block Instruction

#----------------------------------------------------*

abstract class @abstractBlockTerminationForBlockInstruction {
}

#----------------------------------------------------*

class @exitBlockTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  @location mLocation
}

#----------------------------------------------------*

class @gotoTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  @lstring mNextBlock
}

#----------------------------------------------------*

class @testTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  @pic18ConditionExpression mCondition
  @abstractBlockTerminationForBlockInstruction mTrueTermination
  @abstractBlockTerminationForBlockInstruction mFalseTermination
  @location mLocation
}

#----------------------------------------------------*

list @pic18BlockInstructionBlockList {
  @lstring mBlockName
  @pic18InstructionList mInstructionList
  @abstractBlockTerminationForBlockInstruction mBlockTerminaisonForBlockInstruction
  @location mEndOfBlock
}

#----------------------------------------------------*

class @pic18Instruction_block : @pic18PiccoloInstruction {
  @lstring mStartBlockName
  @pic18BlockInstructionBlockList mBlockList
  @location mEndOfBlockInstruction
}

#----------------------------------------------------*

#!Switch instruction

#----------------------------------------------------*

abstract class @pic18AbstractCaseItem {
}

#----------------------------------------------------*

class @pic18SimpleConstantCaseItem : @pic18AbstractCaseItem {
  @immediatExpression mCaseExpression
  @location mCaseExpressionLocation
}

#----------------------------------------------------*

class @pic18IntervalCaseItem : @pic18AbstractCaseItem {
  @immediatExpression mMinExpression
  @immediatExpression mMaxExpression
  @location mCaseExpressionLocation
}

#----------------------------------------------------*

list @pic18CaseExpressionList {
  @pic18AbstractCaseItem mCaseItem
}

#----------------------------------------------------*

list @pic18SwitchInstructionCaseList {
  @location mStartOfCase
  @pic18CaseExpressionList mCaseExpressionList
  @pic18InstructionList mInstructionList
}

#----------------------------------------------------*

class @pic18Instruction_switch : @pic18PiccoloInstruction {
  @pic18SwitchInstructionCaseList mCaseList
  @location mElseBranchStartLocation
  @pic18InstructionList mElseInstructionList
}

#----------------------------------------------------*

enum @pic18Instruction_FDA_base_code_AST {
  case ADDWF  case ADDWFC  case ANDWF  case COMF  case DECF  case INCF 
  case IORWF  case MOVF  case RLCF  case RLNCF  case RRCF  case RRNCF
  case SUBFWB  case SUBWF  case SUBWFB  case SWAPF  case XORWF
}

#----------------------------------------------------*

class @pic18Instruction_FDA : @pic18PiccoloSimpleInstruction {
  @pic18Instruction_FDA_base_code_AST mInstruction_FDA_base_code
  @registerExpression mRegisterExpression
  @bool m_W_isDestination
}

#----------------------------------------------------*

enum @FA_instruction_base_code {
  case CLRF  case CPFSEQ  case CPFSGT  case CPFSLT  case MOVWF  case MULWF  case NEGF  case SETF  case TSTFSZ
}

#----------------------------------------------------*

class @pic18Instruction_FA : @pic18PiccoloSimpleInstruction {
  @FA_instruction_base_code mFAinstruction
  @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_MOVFF : @pic18PiccoloSimpleInstruction {
  @registerExpression mSourceRegisterName
  @registerExpression mDestinationRegisterName
}

#----------------------------------------------------*

enum @bit_oriented_op {
  case BCF  case BSF  case BTG
}

#----------------------------------------------------*

class @pic18Instruction_FBA : @pic18PiccoloSimpleInstruction {
  @bit_oriented_op mBitOrientedOp
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

enum @conditional_branch {
  case bz  case bnz  case bn  case bnn  case bc  case bnc  case bov  case bnov
}

#----------------------------------------------------*

enum @jumpInstructionKind {
  case ipicRelative
  case relative
  case absolute
}

#----------------------------------------------------*

class @pic18Instruction_JSR : @pic18PiccoloSimpleInstruction {
  @lstring mTargetLabel
  @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_macro : @pic18PiccoloInstruction {
  @lstring mMacroName
  @immediatExpressionList mExpressionList
}

#----------------------------------------------------*

class @pic18Instruction_JUMP : @pic18PiccoloInstruction {
  @lstring mTargetLabel
  @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_JUMPCC : @pic18PiccoloInstruction {
  @lstring mTargetLabel
  @conditional_branch mConditionalBranch
  @bool mIsBcc
}

#----------------------------------------------------*

enum @pic18InstructionWithNoOperandKind {
  case CLRWDT 
  case DAW 
  case NOP 
  case POP 
  case PUSH 
  case RESET 
  case SLEEP
}

#----------------------------------------------------*

class @pic18Instruction_withNoOperand : @pic18PiccoloSimpleInstruction {
  @pic18InstructionWithNoOperandKind mKind
}

#----------------------------------------------------*

enum @literal_instruction_opcode {
  case ADDLW  case ANDLW  case IORLW  case MOVLW  case MULLW  case SUBLW  case XORLW
}

#----------------------------------------------------*

class @pic18Instruction_literalOperation : @pic18PiccoloSimpleInstruction {
  @literal_instruction_opcode mLiteralInstruction
  @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_fnop : @pic18PiccoloSimpleInstruction {
  @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LFSR : @pic18PiccoloSimpleInstruction {
  @luint mFSRindex
  @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LTBLPTR : @pic18PiccoloInstruction {
  @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LDATA8PTR : @pic18PiccoloInstruction {
  @lstring mDataName
  @luint mDataIndex
}

#----------------------------------------------------*

class @pic18Instruction_LDATA16PTR : @pic18PiccoloInstruction {
  @lstring mDataName
  @luint mDataIndex
}

#----------------------------------------------------*

enum @tableAccessOption {
  case simpleAccess  case postIncrement  case postDecrement  case preIncrement
}

#----------------------------------------------------*

class @pic18Instruction_TBLRD : @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_TBLWT : @pic18PiccoloSimpleInstruction {
  @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_MNOP : @pic18PiccoloInstruction {
  @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_NOPBRA : @pic18PiccoloInstruction {
  @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_FOREVER : @pic18PiccoloInstruction {
  @pic18InstructionList mInstructionList
  @location mEndOfInstructionList
}

#----------------------------------------------------*

enum @if_semi_colon_op {
  case CPFSEQ  case CPFSGT  case CPFSLT  case TSTFSZ
}

#----------------------------------------------------*

abstract class @pic18Instruction_IF_SEMI_COLON : @pic18PiccoloInstruction {
  @pic18PiccoloSimpleInstruction mEmbeddedInstruction
}

#----------------------------------------------------*

class @pic18Instruction_IF_FA_SEMI_COLON : @pic18Instruction_IF_SEMI_COLON {
  @if_semi_colon_op mOpCode
  @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_IF_BitTest : @pic18Instruction_IF_SEMI_COLON {
  @bool mSkipIfSet
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

class @pic18Instruction_IF_IncDec : @pic18Instruction_IF_SEMI_COLON {
  @bool mIncrement
  @bool mSkipIfZero
  @registerExpression mRegisterExpression
  @bool m_W_isDestination
}

#----------------------------------------------------*

class @pic18Instruction_computed_retlw : @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression
  @immediatExpressionList mImmediateExpressionList
  @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_bra : @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression
  @lstringlist mTargetLabels
  @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_goto : @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression
  @lstringlist mTargetLabels
  @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_rcall : @pic18PiccoloInstruction {
  @immediatExpression mSizeExpression
  @lstringlist mTargetLabels
  @bool mUsesRelativeCall
}

#----------------------------------------------------*

abstract class @pic18ConditionExpression {
}

#----------------------------------------------------*

class @pic18RegisterTestCondition : @pic18ConditionExpression {
  @registerExpression mRegisterExpression
  @bool mBranchIfZero
}

#----------------------------------------------------*

enum @pic18RegisterComparison {
  case notEqual  case equal  case greaterOrEqual  case greater  case lowerOrEqual  case lower
}

#----------------------------------------------------*

class @pic18RegisterComparisonCondition : @pic18ConditionExpression {
  @registerExpression mRegisterExpression
  @pic18RegisterComparison mComparison
}

#----------------------------------------------------*

class @pic18IncDecRegisterInCondition : @pic18ConditionExpression {
  @registerExpression mRegisterExpression
  @bool mIncrement
  @bool m_W_isDestination
  @bool mBranchIfZero
}

#----------------------------------------------------*

class @pic18BccInStructuredCondition : @pic18ConditionExpression {
  @location mConditionLocation
  @conditional_branch mCondition
}

#----------------------------------------------------*

class @pic18NegateCondition : @pic18ConditionExpression {
  @pic18ConditionExpression mCondition
}

#----------------------------------------------------*

class @pic18AndCondition : @pic18ConditionExpression {
  @pic18ConditionExpression mLeftExpression
  @pic18ConditionExpression mRightExpression
}

#----------------------------------------------------*

class @pic18BitTestInStructuredCondition : @pic18ConditionExpression {
  @registerExpression mRegisterExpression
  @bitNumberExpression mBitNumber
#  @bool mBTFSSinstruction
}

#----------------------------------------------------*

class @pic18Instruction_structured_if : @pic18PiccoloInstruction {
  @pic18ConditionExpression mIfCondition
  @pic18InstructionList mThenInstructionList
  @pic18InstructionList mElseInstructionList
  @location mEndOfElsePartLocation
}

#----------------------------------------------------*

list @pic18DoWhilePartList {
  @pic18ConditionExpression mCondition
  @pic18InstructionList mInstructionList
  @location mEndOfPartLocation
}

#----------------------------------------------------*

class @pic18Instruction_do_while : @pic18PiccoloInstruction {
  @pic18InstructionList mRepeatedInstructionList
  @location mEndOfRepeatedInstructionList
  @pic18DoWhilePartList mWhilePartList
}

#----------------------------------------------------*

list @pic18InterruptDefinitionList {
  @lstring mInterruptName
  @bool mFastReturn
  @pic18InstructionList mInstructionList
  @location mEndOfInterruptLocation
}

#----------------------------------------------------*

list @pic18RoutineDefinitionList {
  @lstring mRoutineName
  @luint mRequiredBank
  @luint mReturnedBank
  @bool mPreservesBank
  @bool mIsNoReturn
  @pic18InstructionList mInstructionList
  @location mEndOfRoutineLocation
}

#----------------------------------------------------*

list @pic18MacroDefinitionList {
  @lstring mMacroName
  @lstringlist mConstantNameList
  @pic18InstructionList mInstructionList
}

#----------------------------------------------------*

map @pic18MacroMap {
  @lstringlist mConstantNameList
  @pic18InstructionList mInstructionList
  insert insertKey error message "the '%K' macro is already declared in %L"
  search searchKey error message "there is no '%K' macro"
}

#----------------------------------------------------*

list @routineDeclarationList {
  @lstring mRoutineName
  @luint mRequiredBank
  @luint mReturnedBank
  @bool mPreservesBank
  @bool mIsNoReturn
}

#----------------------------------------------------*

enum @programKind {
  case regularProgram  case bootloaderProgram  case userProgram
}

#----------------------------------------------------*

list @dataList {
  @lstring mDataName
  @immediatExpressionList mValueList
  @bool mIsByteList # true: data8, false: data16
}

#----------------------------------------------------*

list @checkpicList {
  @location mErrorLocation
  @lstringlist mValueList
}

#----------------------------------------------------*

struct @pic18AST {
  @lstring mProgramName
  @programKind mProgramKind
  @lstring mDeviceNameOrBootLoaderReference
  @configDefinitionList mConfigDefinitionList
  @ramDefinitionList mRamDefinitionList
  @lstringlist mUnusedRegisterList
  @checkpicList mCheckpicList
  @dataList mDataList
  @pic18InterruptDefinitionList mInterruptDefinitionList
  @constantDefinitionList mConstantDefinitionList
  @pic18RoutineDefinitionList mRoutineDefinitionList
  @pic18MacroDefinitionList mMacroDefinitionList
  @lstringlist mUnusedRoutineList
  @lstringlist mInlinedRoutineList
  @bool mNeedsComputedGoto2
  @bool mNeedsComputedGoto4
  @location mEndOfProgram
}

#----------------------------------------------------*

