

#---------------------------------------------------------------------------*
#                                                                           *
#    B O O T L O A D E R   R E S E R V E D   R A M    M A P                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @bootloaderReservedRAMmap {
  public let @luint mReservedSize
  insert insertKey error message "the reserved size for the '%K' bank is already declared"
  search searchKey error message "the reserved size for the '%K' bank is not declared"
}

#----------------------------------------------------*

abstract class @pic18PiccoloInstruction {
  public let @location mInstructionLocation
}

#----------------------------------------------------*

list @pic18InstructionList {
  public let @pic18PiccoloInstruction mInstruction
}

#----------------------------------------------------*

class @pic18Instruction_nobanksel : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checknobank : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_checkbank : @pic18PiccoloInstruction {
  public let @uint mBankIndex
}

#----------------------------------------------------*

abstract class @pic18PiccoloSimpleInstruction : @pic18PiccoloInstruction {
}

#----------------------------------------------------*

class @pic18Instruction_banksel : @pic18PiccoloInstruction {
  public let @luint mBankIndex
  public let @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_banksel_register : @pic18PiccoloInstruction {
  public let @registerExpression mRegisterExpression
  public let @bool mWarningOnUselessBanksel
}

#----------------------------------------------------*

class @pic18Instruction_savebank : @pic18PiccoloInstruction {
  public let @registerExpression mRegister
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfSaveBankInstruction
}

#----------------------------------------------------*

class @pic18Instruction_repetitionStatique : @pic18PiccoloInstruction {
  public let @lstring mConstantName
  public let @immediatExpression mLowerBoundExpression
  public let @immediatExpression mUpperBoundExpression
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfInstruction
}

#----------------------------------------------------*

#!Block Instruction

#----------------------------------------------------*

abstract class @abstractBlockTerminationForBlockInstruction {
}

#----------------------------------------------------*

class @exitBlockTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public let @location mLocation
}

#----------------------------------------------------*

class @gotoTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public let @lstring mNextBlock
}

#----------------------------------------------------*

class @testTerminationForBlockInstruction : @abstractBlockTerminationForBlockInstruction {
  public let @pic18ConditionExpression mCondition
  public let @abstractBlockTerminationForBlockInstruction mTrueTermination
  public let @abstractBlockTerminationForBlockInstruction mFalseTermination
  public let @location mLocation
}

#----------------------------------------------------*

list @pic18BlockInstructionBlockList {
  public let @lstring mBlockName
  public let @pic18InstructionList mInstructionList
  public let @abstractBlockTerminationForBlockInstruction mBlockTerminaisonForBlockInstruction
  public let @location mEndOfBlock
}

#----------------------------------------------------*

class @pic18Instruction_block : @pic18PiccoloInstruction {
  public let @lstring mStartBlockName
  public let @pic18BlockInstructionBlockList mBlockList
  public let @location mEndOfBlockInstruction
}

#----------------------------------------------------*

#!Switch instruction

#----------------------------------------------------*

abstract class @pic18AbstractCaseItem {
}

#----------------------------------------------------*

enum @pic18Instruction_FDA_base_code_AST %equatable {
  case ADDWF  case ADDWFC  case ANDWF  case COMF  case DECF  case INCF 
  case IORWF  case MOVF  case RLCF  case RLNCF  case RRCF  case RRNCF
  case SUBFWB  case SUBWF  case SUBWFB  case SWAPF  case XORWF
}

#----------------------------------------------------*

class @pic18Instruction_FDA : @pic18PiccoloSimpleInstruction {
  public let @pic18Instruction_FDA_base_code_AST mInstruction_FDA_base_code
  public let @registerExpression mRegisterExpression
  public let @bool m_W_isDestination
}

#----------------------------------------------------*

enum @FA_instruction_base_code {
  case CLRF  case CPFSEQ  case CPFSGT  case CPFSLT  case MOVWF  case MULWF  case NEGF  case SETF  case TSTFSZ
}

#----------------------------------------------------*

class @pic18Instruction_FA : @pic18PiccoloSimpleInstruction {
  public let @FA_instruction_base_code mFAinstruction
  public let @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_MOVFF : @pic18PiccoloSimpleInstruction {
  public let @registerExpression mSourceRegisterName
  public let @registerExpression mDestinationRegisterName
}

#----------------------------------------------------*

enum @bit_oriented_op {
  case BCF  case BSF  case BTG
}

#----------------------------------------------------*

class @pic18Instruction_FBA : @pic18PiccoloSimpleInstruction {
  public let @bit_oriented_op mBitOrientedOp
  public let @registerExpression mRegisterExpression
  public let @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

enum @conditional_branch %equatable {
  case bz  case bnz  case bn  case bnn  case bc  case bnc  case bov  case bnov
}

#----------------------------------------------------*

enum @jumpInstructionKind %equatable {
  case ipicRelative
  case relative
  case absolute
}

#----------------------------------------------------*

class @pic18Instruction_JSR : @pic18PiccoloSimpleInstruction {
  public let @lstring mTargetLabel
  public let @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_macro : @pic18PiccoloInstruction {
  public let @lstring mMacroName
  public let @immediatExpressionList mExpressionList
}

#----------------------------------------------------*

class @pic18Instruction_JUMP : @pic18PiccoloInstruction {
  public let @lstring mTargetLabel
  public let @jumpInstructionKind mKind
}

#----------------------------------------------------*

class @pic18Instruction_JUMPCC : @pic18PiccoloInstruction {
  public let @lstring mTargetLabel
  public let @conditional_branch mConditionalBranch
  public let @bool mIsBcc
}

#----------------------------------------------------*

enum @pic18InstructionWithNoOperandKind {
  case CLRWDT 
  case DAW 
  case NOP 
  case POP 
  case PUSH 
  case RESET 
  case SLEEP
}

#----------------------------------------------------*

class @pic18Instruction_withNoOperand : @pic18PiccoloSimpleInstruction {
  public let @pic18InstructionWithNoOperandKind mKind
}

#----------------------------------------------------*

enum @literal_instruction_opcode %equatable {
  case ADDLW  case ANDLW  case IORLW  case MOVLW  case MULLW  case SUBLW  case XORLW
}

#----------------------------------------------------*

class @pic18Instruction_literalOperation : @pic18PiccoloSimpleInstruction {
  public let @literal_instruction_opcode mLiteralInstruction
  public let @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_fnop : @pic18PiccoloSimpleInstruction {
  public let @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LFSR : @pic18PiccoloSimpleInstruction {
  public let @luint mFSRindex
  public let @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LTBLPTR : @pic18PiccoloInstruction {
  public let @immediatExpression mImmediatExpression
}

#----------------------------------------------------*

class @pic18Instruction_LDATA8PTR : @pic18PiccoloInstruction {
  public let @lstring mDataName
  public let @luint mDataIndex
}

#----------------------------------------------------*

class @pic18Instruction_LDATA16PTR : @pic18PiccoloInstruction {
  public let @lstring mDataName
  public let @luint mDataIndex
}

#----------------------------------------------------*

enum @tableAccessOption {
  case simpleAccess  case postIncrement  case postDecrement  case preIncrement
}

#----------------------------------------------------*

class @pic18Instruction_TBLRD : @pic18PiccoloSimpleInstruction {
  public let @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_TBLWT : @pic18PiccoloSimpleInstruction {
  public let @tableAccessOption mOption
}

#----------------------------------------------------*

class @pic18Instruction_MNOP : @pic18PiccoloInstruction {
  public let @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_NOPBRA : @pic18PiccoloInstruction {
  public let @luint mOccurrenceFactor
}

#----------------------------------------------------*

class @pic18Instruction_FOREVER : @pic18PiccoloInstruction {
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfInstructionList
}

#----------------------------------------------------*

enum @if_semi_colon_op {
  case CPFSEQ  case CPFSGT  case CPFSLT  case TSTFSZ
}

#----------------------------------------------------*

abstract class @pic18Instruction_IF_SEMI_COLON : @pic18PiccoloInstruction {
  public let @pic18PiccoloSimpleInstruction mEmbeddedInstruction
}

#----------------------------------------------------*

class @pic18Instruction_IF_FA_SEMI_COLON : @pic18Instruction_IF_SEMI_COLON {
  public let @if_semi_colon_op mOpCode
  public let @registerExpression mRegisterExpression
}

#----------------------------------------------------*

class @pic18Instruction_IF_BitTest : @pic18Instruction_IF_SEMI_COLON {
  public let @bool mSkipIfSet
  public let @registerExpression mRegisterExpression
  public let @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

class @pic18Instruction_IF_IncDec : @pic18Instruction_IF_SEMI_COLON {
  public let @bool mIncrement
  public let @bool mSkipIfZero
  public let @registerExpression mRegisterExpression
  public let @bool m_W_isDestination
}

#----------------------------------------------------*

class @pic18Instruction_computed_retlw : @pic18PiccoloInstruction {
  public let @immediatExpression mSizeExpression
  public let @immediatExpressionList mImmediateExpressionList
  public let @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_bra : @pic18PiccoloInstruction {
  public let @immediatExpression mSizeExpression
  public let @lstringlist mTargetLabels
  public let @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_goto : @pic18PiccoloInstruction {
  public let @immediatExpression mSizeExpression
  public let @lstringlist mTargetLabels
  public let @bool mUsesRelativeCall
}

#----------------------------------------------------*

class @pic18Instruction_computed_rcall : @pic18PiccoloInstruction {
  public let @immediatExpression mSizeExpression
  public let @lstringlist mTargetLabels
  public let @bool mUsesRelativeCall
}

#----------------------------------------------------*

abstract class @pic18ConditionExpression {
}

#----------------------------------------------------*

class @pic18RegisterTestCondition : @pic18ConditionExpression {
  public let @registerExpression mRegisterExpression
  public let @bool mBranchIfZero
}

#----------------------------------------------------*

enum @pic18RegisterComparison {
  case notEqual  case equal  case greaterOrEqual  case greater  case lowerOrEqual  case lower
}

#----------------------------------------------------*

class @pic18RegisterComparisonCondition : @pic18ConditionExpression {
  public let @registerExpression mRegisterExpression
  public let @pic18RegisterComparison mComparison
}

#----------------------------------------------------*

class @pic18IncDecRegisterInCondition : @pic18ConditionExpression {
  public let @registerExpression mRegisterExpression
  public let @bool mIncrement
  public let @bool m_W_isDestination
  public let @bool mBranchIfZero
}

#----------------------------------------------------*

class @pic18BccInStructuredCondition : @pic18ConditionExpression {
  public let @location mConditionLocation
  public let @conditional_branch mCondition
}

#----------------------------------------------------*

class @pic18NegateCondition : @pic18ConditionExpression {
  public let @pic18ConditionExpression mCondition
}

#----------------------------------------------------*

class @pic18AndCondition : @pic18ConditionExpression {
  public let @pic18ConditionExpression mLeftExpression
  public let @pic18ConditionExpression mRightExpression
}

#----------------------------------------------------*

class @pic18BitTestInStructuredCondition : @pic18ConditionExpression {
  public let @registerExpression mRegisterExpression
  public let @bitNumberExpression mBitNumber
}

#----------------------------------------------------*

class @pic18Instruction_structured_if : @pic18PiccoloInstruction {
  public let @pic18ConditionExpression mIfCondition
  public let @pic18InstructionList mThenInstructionList
  public let @pic18InstructionList mElseInstructionList
  public let @location mEndOfElsePartLocation
}

#----------------------------------------------------*

list @pic18DoWhilePartList {
  public let @pic18ConditionExpression mCondition
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfPartLocation
}

#----------------------------------------------------*

class @pic18Instruction_do_while : @pic18PiccoloInstruction {
  public let @pic18InstructionList mRepeatedInstructionList
  public let @location mEndOfRepeatedInstructionList
  public let @pic18DoWhilePartList mWhilePartList
}

#----------------------------------------------------*

list @pic18InterruptDefinitionList {
  public let @lstring mInterruptName
  public let @bool mFastReturn
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfInterruptLocation
}

#----------------------------------------------------*

list @pic18RoutineDefinitionList {
  public let @lstring mRoutineName
  public let @luint mRequiredBank
  public let @luint mReturnedBank
  public let @bool mPreservesBank
  public let @bool mIsNoReturn
  public let @pic18InstructionList mInstructionList
  public let @location mEndOfRoutineLocation
}

#----------------------------------------------------*

list @pic18MacroDefinitionList {
  public let @lstring mMacroName
  public let @lstringlist mConstantNameList
  public let @pic18InstructionList mInstructionList
}

#----------------------------------------------------*

map @pic18MacroMap {
  public let @lstringlist mConstantNameList
  public let @pic18InstructionList mInstructionList
  insert insertKey error message "the '%K' macro is already declared in %L"
  search searchKey error message "there is no '%K' macro"
}

#----------------------------------------------------*

list @routineDeclarationList {
  public let @lstring mRoutineName
  public let @luint mRequiredBank
  public let @luint mReturnedBank
  public let @bool mPreservesBank
  public let @bool mIsNoReturn
}

#----------------------------------------------------*

enum @programKind %equatable {
  case regularProgram  case bootloaderProgram  case userProgram
}

#----------------------------------------------------*

list @dataList {
  public let @lstring mDataName
  public let @immediatExpressionList mValueList
  public let @bool mIsByteList # true: data8, false: data16
}

#----------------------------------------------------*

list @checkpicList {
  public let @location mErrorLocation
  public let @lstringlist mValueList
}

#----------------------------------------------------*

struct @pic18AST {
  public let @lstring mProgramName
  public let @programKind mProgramKind
  public let @lstring mDeviceNameOrBootLoaderReference
  public let @configDefinitionList mConfigDefinitionList
  public let @ramDefinitionList mRamDefinitionList
  public let @lstringlist mUnusedRegisterList
  public let @checkpicList mCheckpicList
  public let @dataList mDataList
  public let @pic18InterruptDefinitionList mInterruptDefinitionList
  public let @constantDefinitionList mConstantDefinitionList
  public let @pic18RoutineDefinitionList mRoutineDefinitionList
  public let @pic18MacroDefinitionList mMacroDefinitionList
  public let @lstringlist mUnusedRoutineList
  public let @lstringlist mInlinedRoutineList
  public let @bool mNeedsComputedGoto2
  public let @bool mNeedsComputedGoto4
  public let @location mEndOfProgram
}

#----------------------------------------------------*

