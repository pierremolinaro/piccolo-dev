

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc pic18_analyze
  ?let @pic18AST inPiccoloModel
  ?let @string inSourceFileName
{
#-------------------------------- Check source file name
  var @string sourceFileBaseName = [[inSourceFileName lastPathComponent] stringByDeletingPathExtension]
  if sourceFileBaseName != inPiccoloModel.mProgramName.string then
    error inPiccoloModel.mProgramName: "the program name ('" + inPiccoloModel.mProgramName
    + "') should be identical to the file base name '" + sourceFileBaseName + "'"
  end
  var @string listFileContents = ""
#-------------------------------- Analyze Device
  var @piccoloDeviceModel piccoloDeviceModel
  var @uint accessBankSplitOffset
  var @ramBankTable ramBank
  var @bootloaderReservedRAMmap bootloaderReservedRAMmap # Used only for bootloader implementation
  var @routineDeclarationList bootloaderRoutineDeclarationListForBootloaderImplementation
  var @routineDeclarationList userRoutineDeclarationListForBootloaderImplementation
  var @routineDeclarationList bootloaderRoutineDeclarationListForUserProgramImplementation
  var @routineDeclarationList userRoutineDeclarationListForUserProgramImplementation
  var @luint bootloaderReservedROMsize # Used only for bootloader implementation or user program implementation, zero for regular program
  var @registerTable registerTable
  var @string piccoloDeviceName
  switch inPiccoloModel.mProgramKind
  case regularProgram :
    piccoloDeviceName = inPiccoloModel.mDeviceNameOrBootLoaderReference.string
    parseDeviceDefinition ( !inPiccoloModel.mDeviceNameOrBootLoaderReference ?piccoloDeviceModel )
    switch piccoloDeviceModel.mProcessorType
      case pic18_60 : accessBankSplitOffset = 0x60
      case pic18_80 : accessBankSplitOffset = 0x80
      case midrange : error inPiccoloModel.mDeviceNameOrBootLoaderReference: "a midrange device is not accepted here" : accessBankSplitOffset
      case baseline : error inPiccoloModel.mDeviceNameOrBootLoaderReference: "a baseline device is not accepted here" : accessBankSplitOffset
    end
    ramBank = piccoloDeviceModel.mRamBankTable
    bootloaderReservedRAMmap = @bootloaderReservedRAMmap. emptyMap
    registerTable = piccoloDeviceModel.mRegisterTable
    bootloaderRoutineDeclarationListForBootloaderImplementation = @routineDeclarationList. emptyList
    userRoutineDeclarationListForBootloaderImplementation = @routineDeclarationList. emptyList
    bootloaderRoutineDeclarationListForUserProgramImplementation = @routineDeclarationList. emptyList
    userRoutineDeclarationListForUserProgramImplementation = @routineDeclarationList. emptyList
    bootloaderReservedROMsize = @luint. new { !0 !@location.here}
  case bootloaderProgram :
    bootloaderRoutineDeclarationListForUserProgramImplementation = @routineDeclarationList. emptyList
    userRoutineDeclarationListForUserProgramImplementation = @routineDeclarationList. emptyList
    grammar pic18_grammar label importBootloaderSpecification in inPiccoloModel.mDeviceNameOrBootLoaderReference
      ?piccoloDeviceModel
      ?piccoloDeviceName
      ?accessBankSplitOffset
      ?ramBank
      ?registerTable
      ?bootloaderReservedRAMmap
      ?bootloaderRoutineDeclarationListForBootloaderImplementation
      ?userRoutineDeclarationListForBootloaderImplementation
      ?bootloaderReservedROMsize
    for (lkey mFirstAddress * * *) in  ramBank do #--- Reset first free addresses for all banks
      [!?ramBank setMFirstFreeAddressForKey !mFirstAddress !lkey.string]
    end
  case userProgram :
    grammar pic18_grammar label importBootloaderSpecification in inPiccoloModel.mDeviceNameOrBootLoaderReference
      ?piccoloDeviceModel
      ?piccoloDeviceName
      ?accessBankSplitOffset
      ?ramBank
      ?registerTable
      ?bootloaderReservedRAMmap
      ?bootloaderRoutineDeclarationListForUserProgramImplementation
      ?userRoutineDeclarationListForUserProgramImplementation
      ?bootloaderReservedROMsize
    bootloaderRoutineDeclarationListForBootloaderImplementation = @routineDeclarationList. emptyList
    userRoutineDeclarationListForBootloaderImplementation = @routineDeclarationList. emptyList
  end
#-------------------------------- Build macro map
  var @pic18MacroMap macroMap = {}
  for (mMacroName mConstantNameList mInstructionList) in inPiccoloModel.mMacroDefinitionList do
    [!?macroMap insertKey !mMacroName !mConstantNameList !mInstructionList]
  end
#-------------------------------- Compute used routine set
  let @stringset usedRoutineSet = pic18_computeUsedRoutines (
    !inPiccoloModel.mInterruptDefinitionList
    !inPiccoloModel.mRoutineDefinitionList
    !macroMap
    !bootloaderRoutineDeclarationListForBootloaderImplementation
    !userRoutineDeclarationListForUserProgramImplementation
  )
  var declaredRoutineMap =@declaredRoutineMap.emptyMap{}
  for (mRoutineName mRequiredBank mReturnedBank mPreservesBank mIsNoReturn mInstructionList *) in  inPiccoloModel.mRoutineDefinitionList do
    [!?declaredRoutineMap insertKey
      !mRoutineName
      !mRequiredBank
      !mReturnedBank
      !mPreservesBank
      !mIsNoReturn
      !mInstructionList
    ]
  end
#-------------------------------- Check used routines
  var unusedDeclarationUnicity =@stringset.emptySet{}
  for (mValue) in  inPiccoloModel.mUnusedRoutineList do
    if not [declaredRoutineMap hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' routine is not declared"
    elsif [unusedDeclarationUnicity hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is already declared as unused"
    elsif [usedRoutineSet hasKey !mValue.string] then
      warning mValue : "the '" + mValue + "' routine is declared as unused, but is used"
    end
    unusedDeclarationUnicity += !mValue.string
  end
  for (lkey * * * * *) in  declaredRoutineMap do
    if (not [usedRoutineSet hasKey !lkey.string]) & (not [unusedDeclarationUnicity hasKey !lkey.string]) then
      warning lkey : "the '" + lkey + "' routine is unused"
    end
  end
#-------------------------------- inline routines
  var inlinedRoutineSet =@stringset.emptySet{}
  for (mValue) in  inPiccoloModel.mInlinedRoutineList do
    if not [declaredRoutineMap hasKey !mValue.string] then
      error mValue : "the '" + mValue + "' routine is not declared"
    elsif not [usedRoutineSet hasKey !mValue.string] then
      warning mValue : "useless declaration, the '" + mValue + "' routine is unused"
    else
      inlinedRoutineSet += !mValue.string
    end
  end
  var @pic18InterruptDefinitionList interruptDefinitionList = inPiccoloModel.mInterruptDefinitionList
  var @pic18RoutineDefinitionList routineDefinitionList = inPiccoloModel.mRoutineDefinitionList
  pic18PerformRoutineInline (
    !inlinedRoutineSet
    !declaredRoutineMap
    !?interruptDefinitionList
    !?routineDefinitionList
  )
#-------------------------------- Check 'checkpic' instructions
  for (mErrorLocation mValueList) in  inPiccoloModel.mCheckpicList do
    var @bool found = false
    for (mValue) in  mValueList while not found do
      found = mValue.string == piccoloDeviceName
    end
    if not found then
      error mErrorLocation: "this code is not available for '" + piccoloDeviceName + "'"
    end
  end
#-------------------------------- Interrupts ?
  var @bool hasHighInterrupt = false
  var @bool highInterruptIsFast = false
  var @bool hasLowInterrupt = false
  var @bool lowInterruptIsFast = false
  for (mInterruptName mFastReturn * *) in  interruptDefinitionList do
    if inPiccoloModel.mProgramKind == @programKind. userProgram then
      error mInterruptName: "interrupt routine is not allowed for a bootloader user program"
    end
    if mInterruptName.string == "high" then
      highInterruptIsFast = mFastReturn
      if hasHighInterrupt then
        error mInterruptName: "Only one 'high' interrupt routine is allowed"
      end
      hasHighInterrupt = true
    elsif mInterruptName.string == "low" then
      lowInterruptIsFast = mFastReturn
      if hasLowInterrupt then
        error mInterruptName: "Only one 'low' interrupt routine is allowed"
      end
      hasLowInterrupt = true
    else
      error mInterruptName: "An interrupt routine should be named 'low' or 'high'"
    end
    if highInterruptIsFast & lowInterruptIsFast then
      error mInterruptName:"either low interrupt or high interrupt can be \"fast\", not both"
    end
  end
#-------------------------------- Config definition
  var @actualConfigurationMap actualConfigurationMap
  if inPiccoloModel.mProgramKind == @programKind. userProgram then
    for (mDefinitionLocation *) in  inPiccoloModel.mConfigDefinitionList do
      error mDefinitionLocation: "configuration is not allowed for a bootloader user program"
    end
    actualConfigurationMap = @actualConfigurationMap. emptyMap
  else
    buildConfig (
      !piccoloDeviceModel.mConfigRegisterMap
      !inPiccoloModel.mConfigDefinitionList
      !?listFileContents
      ?actualConfigurationMap
    )
  end
#-------------------------------- Compute RAM size
  var @uint RAMsize = 0
  for (* * * mLastAddressPlusOne *) in ramBank do
    if mLastAddressPlusOne > RAMsize then
      RAMsize = mLastAddressPlusOne
    end
  end
#-------------------------------- Build constant map
  var @constantMap constantMap = {}
#--- Add "ROM_SIZE" and "RAM_SIZE" constants
  [!?constantMap insertKey !@lstring. new { !"ROM_SIZE" !@location.here} ![piccoloDeviceModel.mRomSize.uint sint64]]
  [!?constantMap insertKey !@lstring. new { !"RAM_SIZE" !@location.here} ![RAMsize sint64]]
#--- Add "BOOTLOADER_RESERVED_SIZE" constant
  if inPiccoloModel.mProgramKind != @programKind. regularProgram then
    var bootloaderSizeString =@lstring.new{ !"BOOTLOADER_RESERVED_SIZE" !@location.here}
    [!?constantMap insertKey !bootloaderSizeString ![bootloaderReservedROMsize.uint sint64]]
  end
#--- Add declared constants
  var usedRegisters = @stringset.emptySet{}
  for (mConstantName mExpression) in  inPiccoloModel.mConstantDefinitionList do
    [mExpression eval !piccoloDeviceModel.mRegisterTable !constantMap ?let @sint64 result !?usedRegisters]
    if [piccoloDeviceModel.mRegisterTable hasKey !mConstantName.string] then
      error mConstantName: "'" + mConstantName + "' is already declared as ram register or special register"
    else
      [!?constantMap insertKey !mConstantName !result]
    end
  end
#-------------------------------- Ram definition
  analyze_ram_sections (
    !"DECLARED VARIABLES"
    !inPiccoloModel.mRamDefinitionList
    !constantMap
    !?usedRegisters
    !?ramBank
    !piccoloDeviceModel.mRegisterTable
    !?listFileContents
    !?registerTable
    ?let @declaredByteMap declaredByteMap
  )
#--- For bootloader implementation, check declared var footprint does not span beyond values declared in specification
  if inPiccoloModel.mProgramKind == @programKind. bootloaderProgram then
    for (lkey mFirstAddress mFirstFreeAddress * *) in ramBank do
      if [bootloaderReservedRAMmap hasKey !lkey.string] then
        var @luint bootloaderReservedSize
        [bootloaderReservedRAMmap searchKey !lkey ?bootloaderReservedSize]
        if (mFirstFreeAddress - mFirstAddress) > bootloaderReservedSize.uint then
          error @location.here: "for '" + lkey + "' RAM bank, the bootloader implementation declares "
          + [mFirstFreeAddress - mFirstAddress string]
          + " byte(s), althought the bootloader specification reserves "
          + [bootloaderReservedSize.uint string]
          + " byte(s)"
        end
      elsif mFirstFreeAddress > mFirstAddress then
        error @location.here: "for '" + lkey + "' RAM bank, the bootloader implementation declares "
        + [mFirstFreeAddress - mFirstAddress string]
        + " byte(s), althought the bootloader specification reserves no space"
      end
    end
  end
#-------------------------------- Build block representation
  build_ipic18_block_representation_list (
    !inSourceFileName
    ![piccoloDeviceModel.mRomSize.uint sint64]
    !macroMap
    !bootloaderRoutineDeclarationListForBootloaderImplementation # Empty for regular program
    !userRoutineDeclarationListForBootloaderImplementation # Empty for regular program
    !bootloaderReservedROMsize
    !bootloaderRoutineDeclarationListForUserProgramImplementation
    !userRoutineDeclarationListForUserProgramImplementation
    !accessBankSplitOffset
    !registerTable
    !declaredByteMap
    !routineDefinitionList
    !inPiccoloModel.mProgramKind
    !constantMap
    !usedRegisters
    !inPiccoloModel.mDataList
    !interruptDefinitionList
    !inPiccoloModel.mUnusedRegisterList
    !ramBank
    !hasHighInterrupt
    !hasLowInterrupt
    !piccoloDeviceModel.mDeviceName.string
    !piccoloDeviceModel.mRegisterTable
    !actualConfigurationMap
    !inPiccoloModel.mEndOfProgram
    !?listFileContents
  )
#-------------------------------- Write listing file
  if [option piccolo_options.ouputListingFile value] then
    listFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    var @string listFile = [inSourceFileName stringByDeletingPathExtension] + ".list"
    [listFileContents writeToFileWhenDifferentContents !listFile ?*]
  end
}

#----------------------------------------------------*

