lexique piccolo_lexique {

@string identifierString
@uint uint32value
@char charValue
@string tokenString

style keywordStyle -> "Keywords:"
style instructionStyle -> "Instructions:"
style delimitersStyle -> "Delimiters:"
style integerStyle -> "Integer Constants:"
style characterStyle -> "Character Constants:"
style stringStyle -> "String Constants:"
style commentStyle -> "Comments:"
style labelStyle -> "Labels:"

#--- Indexing keys
indexing routineDefinition : "Routine Definition"
indexing routineCall : "Routine Call"
indexing variableDeclaration : "Variable Declaration"
indexing variableUse : "Variable Use"
indexing constantDeclaration : "Constant Declaration"

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString %errorMessage "an identifier"

list controlKeyWordList style keywordStyle %errorMessage "the '%K' keyword"{
  "bank",
  "banksave",
  "banksel",
  "baseline",
  "block",
  "bootloader",
  "byte",
  "case",
  "checkbank",
  "checknobank",
  "checkpic",
  "computed",
  "configuration",
  "const",
  "contextsave",
  "data",
  "data16",
  "data8",
  "do",
  "end",
  "else",
  "elsif",
  "ensures",
  "fast",
  "forever",
  "if",
  "implements",
  "include",
  "inline",
  "interrupt",
  "macro",
  "midrange",
  "nobank",
  "noreturn",
  "page",
  "pic18",
  "preserved",
  "protected",
  "private",
  "ram",
  "requires",
  "rom",
  "routine",
  "switch",
  "unused",
  "uses",
  "w",
  "while"
 }

list instructionKeyWordList style instructionStyle %errorMessage "the '%K' instruction"{
  "addlw",
  "addwf",
  "addwfc",
  "andlw",
  "andwf",
  "bc",
  "bcf",
  "bn",
  "bnc",
  "bnn",
  "bov",
  "bnov",
  "bnz",
  "bsf",
  "bra",
  "btg",
  "bz",
  "call",
  "clrf",
  "clrw",
  "clrwdt",
  "comf",
  "daw",
  "decf",
  "incf",
  "iorlw",
  "iorwf",
  "fnop",
  "goto",
  "jsr",
  "jump",
  "lfsr",
  "ldataptr",
  "ldata8ptr",
  "ldata16ptr",
  "ltblptr",
  "mnop",
  "movf",
  "movff",
  "movlw",
  "movwf",
  "mullw",
  "mulwf",
  "negf",
  "nop",
  "nopbra",
  "pop",
  "option",
  "push",
  "rcall",
  "reset",
  "retlw",
  "rlcf",
  "rlf",
  "rlncf",
  "rrcf",
  "rrf",
  "rrncf",
  "setf",
  "sleep",
  "subfwb",
  "sublw",
  "subwf",
  "subwfb",
  "swapf",
  "tblrd",
  "tblwt",
  "tris",
  "xorlw",
  "xorwf"
}


rule isUnicodeLetter {
  repeat
    enterCharacterIntoString (!?identifierString !toLower (!*) )
    enterCharacterIntoString (!?tokenString !* )
  while isUnicodeLetter | '_' | '0'->'9' :
  end
  send %codeFor identifierString in instructionKeyWordList
  default %codeFor identifierString in controlKeyWordList
  default $identifier$
}

#------------------------------- Label ------------------
$label$ ! tokenString  style labelStyle %errorMessage "a label beginning with '@'"
rule '@' {
  repeat
    enterCharacterIntoString (!?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send $label$
}

#------------------------------- Integer, floating Point Constant ------------------
$integer$ ! uint32value  style integerStyle %errorMessage "a 32-bit unsigned number"

%errorMessage hexNumberTooLarge : "hex number too large"
%errorMessage binNumberTooLarge : "bin number too large"
%errorMessage decimalNumberTooLarge : "decimal number too large"
%errorMessage internalError : "internal error"

rule "0x" {
  repeat
  while '0'->'9' :
    enterHexDigitIntoUInt ( !* !?uint32value error hexNumberTooLarge, internalError )
  while 'a'->'f' :
    enterHexDigitIntoUInt ( !* !?uint32value error hexNumberTooLarge, internalError )
  while 'A'->'F' :
    enterHexDigitIntoUInt ( !* !?uint32value error hexNumberTooLarge, internalError )
  while '_' :
  end
  send $integer$
}

rule "0b" {
  repeat
  while '0'->'1' :
    enterBinDigitIntoUInt ( !* !?uint32value error binNumberTooLarge, internalError )
  while '_' :
  end
  send $integer$
}

rule '0'->'9' {
  enterDigitIntoUInt ( !* !?uint32value error decimalNumberTooLarge, internalError )
  repeat
  while '0'->'9' :
    enterDigitIntoUInt ( !* !?uint32value error decimalNumberTooLarge, internalError )
  while '_' :
  end
  send $integer$
}

#--------------------------------- Character constant ------------------------------------
$literal_char$ ! charValue  style characterStyle %errorMessage "a character constant"

%errorMessage incorrectCharConstant : "incorrect literal character"

%errorMessage ASCIIcodeTooLargeError : "ASCII code > 255"

rule '\'' {
  select
  case '\\' :
    select
    case 'f' :
      enterCharacterIntoCharacter (!?charValue !'\f' )
    case 'n' :
      enterCharacterIntoCharacter (!?charValue !'\n' )
    case 'r' :
      enterCharacterIntoCharacter (!?charValue !'\r' )
    case 't' :
      enterCharacterIntoCharacter (!?charValue !'\t' )
    case 'v' :
      enterCharacterIntoCharacter (!?charValue !'\v' )
    case '\\' :
      enterCharacterIntoCharacter (!?charValue !'\\' )
    case '0' :
      enterCharacterIntoCharacter (!?charValue !'\0' )
    case '\'' :
      enterCharacterIntoCharacter (!?charValue !'\'' )
    case 'x' | 'X' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        repeat
          enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
        while '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        end
      default
        error incorrectCharConstant
      end
    default
      error incorrectCharConstant
    end
  case ' ' -> '\u007E' :
     enterCharacterIntoCharacter (!?charValue !* )
  default
    error incorrectCharConstant
  end
  select
  case '\'' :
    send $literal_char$
  default
    error incorrectCharConstant
  end
}

# ----------------------------- Delimitors ---------------------------------------
list delimitorsList style delimitersStyle %errorMessage "the '%K' delimitor"{
  "*",  "*+",   ",",  "!=", "<=", ">=",
  "*-", "+*",   ";",  ":",  "==", "<", ">",
  "[",  "]",    ".",  "!", "&", "|", "=",
  "{",  "}", "(", ")", "/", "-", "+", "?",
  "^", "<<", ">>", "~", "%", "..."
}

rule list delimitorsList

# -------------------- Characters string --------------------------------------
$literal_string$ ! tokenString  style stringStyle %nonAtomicSelection %errorMessage "a character string constant \"...\""

%errorMessage incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
  while '\\' :
    select
    case 'f' :
      enterCharacterIntoString (!?tokenString !'\f' )
    case 'n' :
      enterCharacterIntoString (!?tokenString !'\n' )
    case 'r' :
      enterCharacterIntoString (!?tokenString !'\r' )
    case 't' :
      enterCharacterIntoString (!?tokenString !'\t' )
    case 'v' :
      enterCharacterIntoString (!?tokenString !'\v' )
    case '\\' :
      enterCharacterIntoString (!?tokenString !'\\' )
    case '0' :
      enterCharacterIntoString (!?tokenString !'\0' )
    case '"' :
      enterCharacterIntoString (!?tokenString !'"' )
    case '\'' :
      enterCharacterIntoString (!?tokenString !'\'' )
    case '0' -> '9' :
      repeat
        enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
      while '0' -> '9' :
      end
      enterCharacterIntoString (!?tokenString !charValue )
    default
      error incorrectCharConstant
    end
   while ' ' | '!' | '#'-> '\u007E' :
    enterCharacterIntoString (!?tokenString !* )
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}

# ------------------------------------ Comment ----------------------------
$comment$  style commentStyle %nonAtomicSelection %errorMessage "a comment"
$commentMark$  style commentStyle %nonAtomicSelection %errorMessage "a comment"
rule '#' {
  select
  case '!' :
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $commentMark$
  default
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $comment$
  end
}


# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

#------------------------------------------------------------------------------------

}
