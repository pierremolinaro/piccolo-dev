

#----------------------------------------------------------------------------*
#                                                                            *
#           R A M    D E C L A R A T I O N    A N A L Y S I S                *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @declarationInRam handleDeclaration
  ?!@ramBankTable ioRamBank
  ?!@registerTable ioRegisterTable
  ?let @lstring inCurrentRamBank
  ?!@declaredByteMap ioDeclaredByteMap

#----------------------------------------------------------------------------*

override method @byteDeclarationInRam handleDeclaration
  ?!@ramBankTable ioRamBank
  ?!@registerTable ioRegisterTable
  ?let @lstring inCurrentRamBank
  ?!@declaredByteMap ioDeclaredByteMap {
  @uint lastAddressPlusOne
  @uint firstFreeAddress
  @uintlist mirrorOffsetList
  [ioRamBank searchKey !inCurrentRamBank ?* ?firstFreeAddress ?lastAddressPlusOne ?mirrorOffsetList]
  if [mSize uint] == 0 then
    error mSize: "zero size is not allowed"
  end
  var addressList =@uintlist.listWithValue{ !firstFreeAddress}
  for () in  mirrorOffsetList do
    addressList += !firstFreeAddress + mValue
  end
  if not [ioDeclaredByteMap hasKey !mName.string] then
    [!?ioDeclaredByteMap insertKey !mName]
  end
  [!?ioRegisterTable insertKey !mName !addressList ![mSize uint] !mBitSliceTable !mBitDefinitionString]
  firstFreeAddress = firstFreeAddress + [mSize uint]
  [!?ioRamBank setMFirstFreeAddressForKey !firstFreeAddress ![inCurrentRamBank string]]
  if firstFreeAddress > lastAddressPlusOne then
    error mName: "overflow in '" + inCurrentRamBank + "' ram bank for '" + mName + "' declaration"
  end
}

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc analyze_ram_sections
  ?let @string inListingTitle
  ?let @ramDefinitionList inRamDefinitionList
  ?!@ramBankTable ioRamBankTable
  ?let @registerTable inSpecialRegisterTable
  ?!@string ioListFileContents
  ?!@registerTable ioAllRegisters
  !@declaredByteMap outDeclaredByteMap {
  outDeclaredByteMap = @declaredByteMap. emptyMap
  for () in  inRamDefinitionList do
    for () in  mDeclaration do
      [mDeclarationInRAM handleDeclaration !?ioRamBankTable !?ioAllRegisters !mBankName !?outDeclaredByteMap]
    end
  end
  if [option piccolo_options.ouputListingFile value] then
    ioListFileContents += ["" stringByLeftAndRightPadding !79 !'*'] + "\n"
    ioListFileContents += "*" + [inListingTitle stringByLeftAndRightPadding !77 !' '] + "*\n"
    ioListFileContents += ["" stringByLeftAndRightPadding !79 !'*'] + "\n\n"
    ioListFileContents += ["Variable" stringByLeftPadding !40 !' '] + " Address\n"
    for () in  ioAllRegisters do
      if not [inSpecialRegisterTable hasKey ![lkey string]] then
        ioListFileContents += [[lkey string] stringByLeftPadding !40 !' '] + " "
        for () in  mRegisterAddressList
        do ioListFileContents += [mValue hexString]
        between ioListFileContents += ", "
        end
        ioListFileContents += mBitDefinitionString + "\n"
      end
    end
    ioListFileContents += "\n"
  end
}

#----------------------------------------------------*

