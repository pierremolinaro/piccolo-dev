

#----------------------------------------------------------------------------*
#                                                                            *
#           R A M    D E C L A R A T I O N    A N A L Y S I S                *
#                                                                            *
#----------------------------------------------------------------------------*

abstract method @declarationInRam handleDeclaration
  ?let @constantMap inConstantMap
  ?!@stringset ioUsedRegisters
  ?!@ramBankTable ioRamBank
  ?!@registerTable ioRegisterTable
  ?let @lstring inCurrentRamBank
  ?!@declaredByteMap ioDeclaredByteMap

#----------------------------------------------------------------------------*

override method @byteDeclarationInRam handleDeclaration
  ?let @constantMap inConstantMap
  ?!@stringset ioUsedRegisters
  ?!@ramBankTable ioRamBank
  ?!@registerTable ioRegisterTable
  ?let @lstring inCurrentRamBank
  ?!@declaredByteMap ioDeclaredByteMap
{
  let @uint lastAddressPlusOne
  var @uint firstFreeAddress
  let @uintlist mirrorOffsetList
  [ioRamBank searchKey !inCurrentRamBank ?* ?firstFreeAddress ?lastAddressPlusOne ?mirrorOffsetList]
  [self.mSizeExpression eval !ioRegisterTable !inConstantMap ?let @sint64 size !?ioUsedRegisters]
  if size <= 0 then
    error self.mName: "size expression should be > 0"
  elsif size > 4096 then
    error self.mName: "size expression should be < 4096"
  else
    var @uintlist addressList = {!firstFreeAddress}
    for (mValue) in  mirrorOffsetList do
      addressList += !firstFreeAddress + mValue
    end
    if not [ioDeclaredByteMap hasKey !self.mName.string] then
      [!?ioDeclaredByteMap insertKey !self.mName]
    end
    [!?ioRegisterTable insertKey !self.mName !addressList ![size uint] !self.mBitSliceTable !self.mBitDefinitionString !self.mProtection]
    firstFreeAddress = firstFreeAddress + [size uint]
    [!?ioRamBank setMFirstFreeAddressForKey !firstFreeAddress !inCurrentRamBank.string]
    if firstFreeAddress > lastAddressPlusOne then
      error self.mName: "overflow in '" + inCurrentRamBank + "' ram bank for '" + self.mName + "' declaration"
    end
  end
}

#----------------------------------------------------------------------------*
#                                                                            *
#               S E M A N T I C    A N A L Y S I S                           *
#                                                                            *
#----------------------------------------------------------------------------*

proc analyze_ram_sections
  ?let @string inListingTitle
  ?let @ramDefinitionList inRamDefinitionList
  ?let @constantMap inConstantMap
  ?!@stringset ioUsedRegisters
  ?!@ramBankTable ioRamBankTable
  ?let @registerTable inSpecialRegisterTable
  ?!@string ioListFileContents
  ?!@registerTable ioAllRegisters
  !@declaredByteMap outDeclaredByteMap
{
  outDeclaredByteMap = {}
  for (mBankName mDeclaration) in  inRamDefinitionList do
    for (mDeclarationInRAM) in  mDeclaration do
      [mDeclarationInRAM handleDeclaration
        !inConstantMap
        !?ioUsedRegisters
        !?ioRamBankTable
        !?ioAllRegisters
        !mBankName
        !?outDeclaredByteMap
      ]
    end
  end
  if [option piccolo_options.ouputListingFile value] then
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n"
    ioListFileContents += "*" + [inListingTitle stringByLeftAndRightPadding !117 !' '] + "*\n"
    ioListFileContents += ["" stringByLeftAndRightPadding !119 !'*'] + "\n\n"
    ioListFileContents += ["Variable" stringByLeftPadding !40 !' '] + " Address\n"
    for (lkey mRegisterAddressList * * mBitDefinitionString *) in  ioAllRegisters do
      if not [inSpecialRegisterTable hasKey !lkey.string] then
        ioListFileContents += [lkey.string stringByLeftPadding !40 !' '] + " "
        for (mValue) in  mRegisterAddressList
        do ioListFileContents += [mValue hexString]
        between ioListFileContents += ", "
        end
        ioListFileContents += mBitDefinitionString + "\n"
      end
    end
    ioListFileContents += "\n"
  end
}

#----------------------------------------------------*

