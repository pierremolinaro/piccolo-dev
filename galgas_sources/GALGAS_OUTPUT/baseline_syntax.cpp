//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'baseline_syntax.cpp'                         *
//                        Generated by version 2.4.7                         *
//                       july 6th, 2013, at 9h58'42"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "baseline_syntax.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "piccoloDevice_grammar.h"
#include "piccolo_options.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "baseline_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_section_5F_list_i0_ (GALGAS_baseline_5F_routineDefinitionList & ioArgument_ioRoutineDefinitionList,
                                                                              GALGAS_ramDefinitionList & ioArgument_ioRamDefinitionList,
                                                                              GALGAS_configDefinitionList & ioArgument_ioConfigDefinitionList,
                                                                              GALGAS_constantDefinitionList & ioArgument_ioConstantDefinitionList,
                                                                              C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_0 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_mark) COMMA_SOURCE_FILE_AT_LINE (49)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_literal_5F_string) COMMA_SOURCE_FILE_AT_LINE (50)) ;
    } break ;
    case 3: {
      //-------- @nonterminalInstructionForGeneration
      nt_configuration_5F_definition_ (ioArgument_ioConfigDefinitionList, inCompiler) ;
    } break ;
    case 4: {
      //-------- @nonterminalInstructionForGeneration
      nt_ram_5F_definition_ (ioArgument_ioRamDefinitionList, inCompiler) ;
    } break ;
    case 5: {
      //-------- @nonterminalInstructionForGeneration
      nt_constant_5F_definition_ (ioArgument_ioConstantDefinitionList, inCompiler) ;
    } break ;
    case 6: {
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_routine_5F_definition_ (ioArgument_ioRoutineDefinitionList, inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_section_5F_list_i0_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_0 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_mark) COMMA_SOURCE_FILE_AT_LINE (49)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_literal_5F_string) COMMA_SOURCE_FILE_AT_LINE (50)) ;
    } break ;
    case 3: {
      //-------- @nonterminalInstructionForGeneration
      nt_configuration_5F_definition_parse (inCompiler) ;
    } break ;
    case 4: {
      //-------- @nonterminalInstructionForGeneration
      nt_ram_5F_definition_parse (inCompiler) ;
    } break ;
    case 5: {
      //-------- @nonterminalInstructionForGeneration
      nt_constant_5F_definition_parse (inCompiler) ;
    } break ;
    case 6: {
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_routine_5F_definition_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_instruction_5F_list_i1_ (GALGAS_baseline_5F_instructionList & outArgument_outInstructionList,
                                                                                              C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outInstructionList.drop () ; // Release 'out' argument
  outArgument_outInstructionList = GALGAS_baseline_5F_instructionList::constructor_emptyList (SOURCE_FILE_AT_LINE (67)) ;
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_1 (inCompiler)) {
    case 2: {
      GALGAS_baseline_5F_instruction var_instruction ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_simple_5F_instruction_ (var_instruction, inCompiler) ;
      outArgument_outInstructionList.addAssign_operation (var_instruction COMMA_SOURCE_FILE_AT_LINE (72)) ;
    } break ;
    case 3: {
      GALGAS_baseline_5F_instruction var_instruction ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_structured_5F_instruction_ (var_instruction, inCompiler) ;
      outArgument_outInstructionList.addAssign_operation (var_instruction COMMA_SOURCE_FILE_AT_LINE (78)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_instruction_5F_list_i1_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_1 (inCompiler)) {
    case 2: {
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_simple_5F_instruction_parse (inCompiler) ;
    } break ;
    case 3: {
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_structured_5F_instruction_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_routine_5F_definition_i2_ (GALGAS_baseline_5F_routineDefinitionList & ioArgument_ioRoutineDefinitionList,
                                                                                                C_Lexique_piccolo_5F_lexique * inCompiler) {
  GALGAS_bool var_noreturn ;
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_2 (inCompiler)) {
  case 1: {
    var_noreturn = GALGAS_bool (false) ;
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_noreturn) COMMA_SOURCE_FILE_AT_LINE (91)) ;
    var_noreturn = GALGAS_bool (true) ;
  } break ;
  default:
    break ;
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_routine) COMMA_SOURCE_FILE_AT_LINE (94)) ;
  //-------- @terminalCheckInstructionForGeneration
  GALGAS_lstring var_routineName = inCompiler->synthetizedAttribute_tokenString () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  GALGAS_luint var_page ;
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_3 (inCompiler)) {
  case 1: {
    var_page = GALGAS_luint::constructor_new (GALGAS_uint ((PMUInt32) 0U), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (99)) ;
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_page) COMMA_SOURCE_FILE_AT_LINE (101)) ;
    //-------- @terminalCheckInstructionForGeneration
    var_page = inCompiler->synthetizedAttribute_uint_33__32_value () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_integer) COMMA_SOURCE_FILE_AT_LINE (102)) ;
  } break ;
  default:
    break ;
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE_AT_LINE (105)) ;
  GALGAS_baseline_5F_instructionList var_instructionList ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_instruction_5F_list_ (var_instructionList, inCompiler) ;
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE_AT_LINE (110)) ;
  ioArgument_ioRoutineDefinitionList.addAssign_operation (var_routineName, var_page, var_noreturn, var_instructionList, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (111)) ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_routine_5F_definition_i2_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_2 (inCompiler)) {
  case 1: {
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_noreturn) COMMA_SOURCE_FILE_AT_LINE (91)) ;
  } break ;
  default:
    break ;
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_routine) COMMA_SOURCE_FILE_AT_LINE (94)) ;
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_3 (inCompiler)) {
  case 1: {
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_page) COMMA_SOURCE_FILE_AT_LINE (101)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_integer) COMMA_SOURCE_FILE_AT_LINE (102)) ;
  } break ;
  default:
    break ;
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE_AT_LINE (105)) ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE_AT_LINE (110)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_structured_5F_instruction_i3_ (GALGAS_baseline_5F_instruction & outArgument_outInstruction,
                                                                                                    C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outInstruction.drop () ; // Release 'out' argument
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_4 (inCompiler)) {
  case 1: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_jump) COMMA_SOURCE_FILE_AT_LINE (126)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_targetLabelName = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (128)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_JUMP::constructor_new (var_instructionLocation, var_targetLabelName COMMA_SOURCE_FILE_AT_LINE (129)) ;
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_jsr) COMMA_SOURCE_FILE_AT_LINE (134)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_targetLabelName = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (136)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_JSR::constructor_new (var_instructionLocation, var_targetLabelName COMMA_SOURCE_FILE_AT_LINE (137)) ;
  } break ;
  case 3: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_forever) COMMA_SOURCE_FILE_AT_LINE (142)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_baseline_5F_instructionList var_instructionList ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_ (var_instructionList, inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (146)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_FOREVER::constructor_new (var_instructionLocation, var_instructionList, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (147)) ;
  } break ;
  case 4: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (153)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_registerExpression var_registerExpression ;
    GALGAS_bitNumberExpression var_bitNumberExpression ;
    GALGAS_bool var_skipIfSet ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_5 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__21_) COMMA_SOURCE_FILE_AT_LINE (159)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (161)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_bit_5F_number_5F_parsing_ (var_bitNumberExpression, inCompiler) ;
      var_skipIfSet = GALGAS_bool (true) ;
    } break ;
    case 2: {
      //-------- @nonterminalInstructionForGeneration
      nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (166)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_bit_5F_number_5F_parsing_ (var_bitNumberExpression, inCompiler) ;
      var_skipIfSet = GALGAS_bool (false) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE_AT_LINE (170)) ;
    GALGAS_baseline_5F_instruction var_instruction ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_simple_5F_instruction_ (var_instruction, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_IF_5F_BitTest::constructor_new (var_instructionLocation, var_instruction, var_skipIfSet, var_registerExpression, var_bitNumberExpression COMMA_SOURCE_FILE_AT_LINE (173)) ;
  } break ;
  case 5: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (181)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_bool var_increment ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_6 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (185)) ;
      var_increment = GALGAS_bool (false) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (187)) ;
      var_increment = GALGAS_bool (true) ;
    } break ;
    default:
      break ;
    }
    GALGAS_registerExpression var_registerExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    GALGAS_bool var_w_5F_isTarget ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_7 (inCompiler)) {
    case 1: {
      var_w_5F_isTarget = GALGAS_bool (false) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE_AT_LINE (195)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_w) COMMA_SOURCE_FILE_AT_LINE (195)) ;
      var_w_5F_isTarget = GALGAS_bool (true) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_conditionString = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (197)) ;
    GALGAS_string var_condition = var_conditionString.reader_string (SOURCE_FILE_AT_LINE (198)).reader_uppercaseString (SOURCE_FILE_AT_LINE (198)) ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_condition.objectCompare (GALGAS_string ("NZ"))).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (var_conditionString.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("invalid '").operator_concat (var_condition COMMA_SOURCE_FILE_AT_LINE (200)).operator_concat (GALGAS_string ("' condition; it should be 'nz'") COMMA_SOURCE_FILE_AT_LINE (200)) COMMA_SOURCE_FILE_AT_LINE (200)) ;
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE_AT_LINE (202)) ;
    GALGAS_baseline_5F_instruction var_instruction ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_simple_5F_instruction_ (var_instruction, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_IF_5F_IncDec::constructor_new (var_instructionLocation, var_instruction, var_increment, var_registerExpression, var_w_5F_isTarget COMMA_SOURCE_FILE_AT_LINE (205)) ;
  } break ;
  case 6: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (213)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_structured_5F_if_5F_instruction_ (outArgument_outInstruction, inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  } break ;
  case 7: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_do) COMMA_SOURCE_FILE_AT_LINE (219)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_baseline_5F_instructionList var_repeatedInstructionList ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_ (var_repeatedInstructionList, inCompiler) ;
    GALGAS_location var_endOfRepeatedInstructionList = inCompiler->here () ;
    GALGAS_baseline_5F_partList var_whilePartList = GALGAS_baseline_5F_partList::constructor_emptyList (SOURCE_FILE_AT_LINE (226)) ;
    //-------- @repeatInstructionForGeneration
    bool repeatFlag_2 = true ;
    while (repeatFlag_2) {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_while) COMMA_SOURCE_FILE_AT_LINE (228)) ;
      GALGAS_baseline_5F_conditionExpression var_whileCondition ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_expression_ (var_whileCondition, inCompiler) ;
      GALGAS_baseline_5F_instructionList var_instructionList ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_instruction_5F_list_ (var_instructionList, inCompiler) ;
      var_whilePartList.addAssign_operation (var_whileCondition, var_instructionList, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (235)) ;
      switch (select_baseline_5F_syntax_8 (inCompiler)) {
      case 2: {
      } break ;
      default:
        repeatFlag_2 = false ;
        break ;
      }
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (238)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_do_5F_while::constructor_new (var_instructionLocation, var_repeatedInstructionList, var_endOfRepeatedInstructionList, var_whilePartList COMMA_SOURCE_FILE_AT_LINE (239)) ;
  } break ;
  case 8: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_mnop) COMMA_SOURCE_FILE_AT_LINE (246)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_luint var_occurrenceFactor = inCompiler->synthetizedAttribute_uint_33__32_value () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_integer) COMMA_SOURCE_FILE_AT_LINE (248)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_MNOP::constructor_new (var_instructionLocation, var_occurrenceFactor COMMA_SOURCE_FILE_AT_LINE (249)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_structured_5F_instruction_i3_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_4 (inCompiler)) {
  case 1: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_jump) COMMA_SOURCE_FILE_AT_LINE (126)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (128)) ;
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_jsr) COMMA_SOURCE_FILE_AT_LINE (134)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (136)) ;
  } break ;
  case 3: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_forever) COMMA_SOURCE_FILE_AT_LINE (142)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (146)) ;
  } break ;
  case 4: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (153)) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_5 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__21_) COMMA_SOURCE_FILE_AT_LINE (159)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_register_5F_parsing_parse (inCompiler) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (161)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_bit_5F_number_5F_parsing_parse (inCompiler) ;
    } break ;
    case 2: {
      //-------- @nonterminalInstructionForGeneration
      nt_register_5F_parsing_parse (inCompiler) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (166)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_bit_5F_number_5F_parsing_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE_AT_LINE (170)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_simple_5F_instruction_parse (inCompiler) ;
  } break ;
  case 5: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (181)) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_6 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (185)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (187)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_7 (inCompiler)) {
    case 1: {
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE_AT_LINE (195)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_w) COMMA_SOURCE_FILE_AT_LINE (195)) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (197)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE_AT_LINE (202)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_simple_5F_instruction_parse (inCompiler) ;
  } break ;
  case 6: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_if) COMMA_SOURCE_FILE_AT_LINE (213)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_structured_5F_if_5F_instruction_parse (inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  } break ;
  case 7: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_do) COMMA_SOURCE_FILE_AT_LINE (219)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
    //-------- @repeatInstructionForGeneration
    bool repeatFlag_0 = true ;
    while (repeatFlag_0) {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_while) COMMA_SOURCE_FILE_AT_LINE (228)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_expression_parse (inCompiler) ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
      switch (select_baseline_5F_syntax_8 (inCompiler)) {
      case 2: {
      } break ;
      default:
        repeatFlag_0 = false ;
        break ;
      }
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_end) COMMA_SOURCE_FILE_AT_LINE (238)) ;
  } break ;
  case 8: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_mnop) COMMA_SOURCE_FILE_AT_LINE (246)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_integer) COMMA_SOURCE_FILE_AT_LINE (248)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_structured_5F_if_5F_instruction_i4_ (GALGAS_baseline_5F_instruction & outArgument_outInstruction,
                                                                                                          C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outInstruction.drop () ; // Release 'out' argument
  GALGAS_location var_instructionLocation = inCompiler->here () ;
  GALGAS_baseline_5F_conditionExpression var_structured_5F_if_5F_condition ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_expression_ (var_structured_5F_if_5F_condition, inCompiler) ;
  GALGAS_baseline_5F_instructionList var_thenInstructionList ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_instruction_5F_list_ (var_thenInstructionList, inCompiler) ;
  GALGAS_baseline_5F_instructionList var_elseInstructionList ;
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_9 (inCompiler)) {
  case 1: {
    var_elseInstructionList = GALGAS_baseline_5F_instructionList::constructor_emptyList (SOURCE_FILE_AT_LINE (267)) ;
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_elsif) COMMA_SOURCE_FILE_AT_LINE (269)) ;
    GALGAS_baseline_5F_instruction var_elsifPartInstruction ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_structured_5F_if_5F_instruction_ (var_elsifPartInstruction, inCompiler) ;
    var_elseInstructionList = GALGAS_baseline_5F_instructionList::constructor_emptyList (SOURCE_FILE_AT_LINE (274)) ;
    var_elseInstructionList.addAssign_operation (var_elsifPartInstruction COMMA_SOURCE_FILE_AT_LINE (275)) ;
  } break ;
  case 3: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_else) COMMA_SOURCE_FILE_AT_LINE (277)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_ (var_elseInstructionList, inCompiler) ;
  } break ;
  default:
    break ;
  }
  GALGAS_location var_endOfElsePartLocation = inCompiler->here () ;
  outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_structured_5F_if::constructor_new (var_instructionLocation, var_structured_5F_if_5F_condition, var_thenInstructionList, var_elseInstructionList, var_endOfElsePartLocation COMMA_SOURCE_FILE_AT_LINE (283)) ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_structured_5F_if_5F_instruction_i4_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_expression_parse (inCompiler) ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_9 (inCompiler)) {
  case 1: {
  } break ;
  case 2: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_elsif) COMMA_SOURCE_FILE_AT_LINE (269)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_structured_5F_if_5F_instruction_parse (inCompiler) ;
  } break ;
  case 3: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_else) COMMA_SOURCE_FILE_AT_LINE (277)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_baseline_5F_instruction_5F_list_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_simple_5F_instruction_i5_ (GALGAS_baseline_5F_instruction & outArgument_outInstruction,
                                                                                                C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outInstruction.drop () ; // Release 'out' argument
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_10 (inCompiler)) {
  case 1: {
    GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code var_baseCode ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_11 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_addwf) COMMA_SOURCE_FILE_AT_LINE (298)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_ADDWF (SOURCE_FILE_AT_LINE (299)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_andwf) COMMA_SOURCE_FILE_AT_LINE (301)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_ANDWF (SOURCE_FILE_AT_LINE (302)) ;
    } break ;
    case 3: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_comf) COMMA_SOURCE_FILE_AT_LINE (304)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_COMF (SOURCE_FILE_AT_LINE (305)) ;
    } break ;
    case 4: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (307)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_DECF (SOURCE_FILE_AT_LINE (308)) ;
    } break ;
    case 5: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (310)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_INCF (SOURCE_FILE_AT_LINE (311)) ;
    } break ;
    case 6: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_iorwf) COMMA_SOURCE_FILE_AT_LINE (313)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_IORWF (SOURCE_FILE_AT_LINE (314)) ;
    } break ;
    case 7: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movf) COMMA_SOURCE_FILE_AT_LINE (316)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_MOVF (SOURCE_FILE_AT_LINE (317)) ;
    } break ;
    case 8: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_rlf) COMMA_SOURCE_FILE_AT_LINE (319)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_RLF (SOURCE_FILE_AT_LINE (320)) ;
    } break ;
    case 9: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_rrf) COMMA_SOURCE_FILE_AT_LINE (322)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_RRF (SOURCE_FILE_AT_LINE (323)) ;
    } break ;
    case 10: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_subwf) COMMA_SOURCE_FILE_AT_LINE (325)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_SUBWF (SOURCE_FILE_AT_LINE (326)) ;
    } break ;
    case 11: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_swapf) COMMA_SOURCE_FILE_AT_LINE (328)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_SWAPF (SOURCE_FILE_AT_LINE (329)) ;
    } break ;
    case 12: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_xorwf) COMMA_SOURCE_FILE_AT_LINE (331)) ;
      var_baseCode = GALGAS_baseline_5F_instruction_5F_FD_5F_base_5F_code::constructor_XORWF (SOURCE_FILE_AT_LINE (332)) ;
    } break ;
    default:
      break ;
    }
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_registerExpression var_registerExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    GALGAS_bool var_W_5F_isDestination ;
    //-------- @nonterminalInstructionForGeneration
    nt_optional_5F_w_5F_as_5F_dest_ (var_W_5F_isDestination, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_FD::constructor_new (var_instructionLocation, var_baseCode, var_registerExpression, var_W_5F_isDestination COMMA_SOURCE_FILE_AT_LINE (339)) ;
  } break ;
  case 2: {
    GALGAS_baseline_5F_F_5F_instruction_5F_base_5F_code var_FAinstruction ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_12 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrf) COMMA_SOURCE_FILE_AT_LINE (348)) ;
      var_FAinstruction = GALGAS_baseline_5F_F_5F_instruction_5F_base_5F_code::constructor_CLRF (SOURCE_FILE_AT_LINE (349)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movwf) COMMA_SOURCE_FILE_AT_LINE (351)) ;
      var_FAinstruction = GALGAS_baseline_5F_F_5F_instruction_5F_base_5F_code::constructor_MOVWF (SOURCE_FILE_AT_LINE (352)) ;
    } break ;
    default:
      break ;
    }
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_registerExpression var_registerExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_F::constructor_new (var_instructionLocation, var_FAinstruction, var_registerExpression COMMA_SOURCE_FILE_AT_LINE (357)) ;
  } break ;
  case 3: {
    GALGAS_baseline_5F_bit_5F_oriented_5F_op var_bitOrientedOp ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_13 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_bcf) COMMA_SOURCE_FILE_AT_LINE (365)) ;
      var_bitOrientedOp = GALGAS_baseline_5F_bit_5F_oriented_5F_op::constructor_BCF (SOURCE_FILE_AT_LINE (365)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_bsf) COMMA_SOURCE_FILE_AT_LINE (367)) ;
      var_bitOrientedOp = GALGAS_baseline_5F_bit_5F_oriented_5F_op::constructor_BSF (SOURCE_FILE_AT_LINE (367)) ;
    } break ;
    default:
      break ;
    }
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_registerExpression var_registerExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (372)) ;
    GALGAS_bitNumberExpression var_bitNumberExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_bit_5F_number_5F_parsing_ (var_bitNumberExpression, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_FB::constructor_new (var_instructionLocation, var_bitOrientedOp, var_registerExpression, var_bitNumberExpression COMMA_SOURCE_FILE_AT_LINE (375)) ;
  } break ;
  case 4: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_goto) COMMA_SOURCE_FILE_AT_LINE (382)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_targetLabelName = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (384)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_GOTO::constructor_new (var_instructionLocation, var_targetLabelName COMMA_SOURCE_FILE_AT_LINE (385)) ;
  } break ;
  case 5: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_call) COMMA_SOURCE_FILE_AT_LINE (390)) ;
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_targetLabelName = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (392)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_CALL::constructor_new (var_instructionLocation, var_targetLabelName COMMA_SOURCE_FILE_AT_LINE (393)) ;
  } break ;
  case 6: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrw) COMMA_SOURCE_FILE_AT_LINE (398)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_WO_5F_OPERAND::constructor_new (inCompiler->here (), GALGAS_baseline_5F_WO_5F_OPERAND_5F_group::constructor_CLRW (SOURCE_FILE_AT_LINE (399)) COMMA_SOURCE_FILE_AT_LINE (399)) ;
  } break ;
  case 7: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrwdt) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_WO_5F_OPERAND::constructor_new (inCompiler->here (), GALGAS_baseline_5F_WO_5F_OPERAND_5F_group::constructor_CLRWDT (SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) ;
  } break ;
  case 8: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_nop) COMMA_SOURCE_FILE_AT_LINE (404)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_WO_5F_OPERAND::constructor_new (inCompiler->here (), GALGAS_baseline_5F_WO_5F_OPERAND_5F_group::constructor_NOP (SOURCE_FILE_AT_LINE (405)) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  } break ;
  case 9: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_option) COMMA_SOURCE_FILE_AT_LINE (407)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_WO_5F_OPERAND::constructor_new (inCompiler->here (), GALGAS_baseline_5F_WO_5F_OPERAND_5F_group::constructor_OPTION_5F_ (SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)) ;
  } break ;
  case 10: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_sleep) COMMA_SOURCE_FILE_AT_LINE (410)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_WO_5F_OPERAND::constructor_new (inCompiler->here (), GALGAS_baseline_5F_WO_5F_OPERAND_5F_group::constructor_SLEEP (SOURCE_FILE_AT_LINE (411)) COMMA_SOURCE_FILE_AT_LINE (411)) ;
  } break ;
  case 11: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_tris) COMMA_SOURCE_FILE_AT_LINE (413)) ;
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_operand = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (414)) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_TRIS::constructor_new (inCompiler->here (), var_operand COMMA_SOURCE_FILE_AT_LINE (415)) ;
  } break ;
  case 12: {
    GALGAS_baseline_5F_literal_5F_instruction_5F_opcode var_literalInstruction ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_14 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_andlw) COMMA_SOURCE_FILE_AT_LINE (419)) ;
      var_literalInstruction = GALGAS_baseline_5F_literal_5F_instruction_5F_opcode::constructor_ANDLW (SOURCE_FILE_AT_LINE (419)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_iorlw) COMMA_SOURCE_FILE_AT_LINE (421)) ;
      var_literalInstruction = GALGAS_baseline_5F_literal_5F_instruction_5F_opcode::constructor_IORLW (SOURCE_FILE_AT_LINE (421)) ;
    } break ;
    case 3: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movlw) COMMA_SOURCE_FILE_AT_LINE (423)) ;
      var_literalInstruction = GALGAS_baseline_5F_literal_5F_instruction_5F_opcode::constructor_MOVLW (SOURCE_FILE_AT_LINE (423)) ;
    } break ;
    case 4: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_xorlw) COMMA_SOURCE_FILE_AT_LINE (425)) ;
      var_literalInstruction = GALGAS_baseline_5F_literal_5F_instruction_5F_opcode::constructor_XORLW (SOURCE_FILE_AT_LINE (425)) ;
    } break ;
    default:
      break ;
    }
    GALGAS_location var_instructionLocation = inCompiler->here () ;
    GALGAS_immediatExpression var_expression ;
    //-------- @nonterminalInstructionForGeneration
    nt_immediate_5F_expression_ (var_expression, inCompiler) ;
    outArgument_outInstruction = GALGAS_baseline_5F_instruction_5F_literalOperation::constructor_new (var_instructionLocation, var_literalInstruction, var_expression COMMA_SOURCE_FILE_AT_LINE (430)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_simple_5F_instruction_i5_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_10 (inCompiler)) {
  case 1: {
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_11 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_addwf) COMMA_SOURCE_FILE_AT_LINE (298)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_andwf) COMMA_SOURCE_FILE_AT_LINE (301)) ;
    } break ;
    case 3: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_comf) COMMA_SOURCE_FILE_AT_LINE (304)) ;
    } break ;
    case 4: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (307)) ;
    } break ;
    case 5: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (310)) ;
    } break ;
    case 6: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_iorwf) COMMA_SOURCE_FILE_AT_LINE (313)) ;
    } break ;
    case 7: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movf) COMMA_SOURCE_FILE_AT_LINE (316)) ;
    } break ;
    case 8: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_rlf) COMMA_SOURCE_FILE_AT_LINE (319)) ;
    } break ;
    case 9: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_rrf) COMMA_SOURCE_FILE_AT_LINE (322)) ;
    } break ;
    case 10: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_subwf) COMMA_SOURCE_FILE_AT_LINE (325)) ;
    } break ;
    case 11: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_swapf) COMMA_SOURCE_FILE_AT_LINE (328)) ;
    } break ;
    case 12: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_xorwf) COMMA_SOURCE_FILE_AT_LINE (331)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
    //-------- @nonterminalInstructionForGeneration
    nt_optional_5F_w_5F_as_5F_dest_parse (inCompiler) ;
  } break ;
  case 2: {
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_12 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrf) COMMA_SOURCE_FILE_AT_LINE (348)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movwf) COMMA_SOURCE_FILE_AT_LINE (351)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
  } break ;
  case 3: {
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_13 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_bcf) COMMA_SOURCE_FILE_AT_LINE (365)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_bsf) COMMA_SOURCE_FILE_AT_LINE (367)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (372)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_bit_5F_number_5F_parsing_parse (inCompiler) ;
  } break ;
  case 4: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_goto) COMMA_SOURCE_FILE_AT_LINE (382)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (384)) ;
  } break ;
  case 5: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_call) COMMA_SOURCE_FILE_AT_LINE (390)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  } break ;
  case 6: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrw) COMMA_SOURCE_FILE_AT_LINE (398)) ;
  } break ;
  case 7: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_clrwdt) COMMA_SOURCE_FILE_AT_LINE (401)) ;
  } break ;
  case 8: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_nop) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  } break ;
  case 9: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_option) COMMA_SOURCE_FILE_AT_LINE (407)) ;
  } break ;
  case 10: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_sleep) COMMA_SOURCE_FILE_AT_LINE (410)) ;
  } break ;
  case 11: {
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_tris) COMMA_SOURCE_FILE_AT_LINE (413)) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (414)) ;
  } break ;
  case 12: {
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_14 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_andlw) COMMA_SOURCE_FILE_AT_LINE (419)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_iorlw) COMMA_SOURCE_FILE_AT_LINE (421)) ;
    } break ;
    case 3: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_movlw) COMMA_SOURCE_FILE_AT_LINE (423)) ;
    } break ;
    case 4: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_xorlw) COMMA_SOURCE_FILE_AT_LINE (425)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_immediate_5F_expression_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i6_ (GALGAS_baseline_5F_conditionExpression & outArgument_outCondition,
                                                                                              C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outCondition.drop () ; // Release 'out' argument
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__21_) COMMA_SOURCE_FILE_AT_LINE (443)) ;
  GALGAS_baseline_5F_conditionExpression var_condition ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_factor_ (var_condition, inCompiler) ;
  outArgument_outCondition = GALGAS_baseline_5F_negateCondition::constructor_new (var_condition COMMA_SOURCE_FILE_AT_LINE (446)) ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i6_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__21_) COMMA_SOURCE_FILE_AT_LINE (443)) ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_factor_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i7_ (GALGAS_baseline_5F_conditionExpression & outArgument_outCondition,
                                                                                              C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outCondition.drop () ; // Release 'out' argument
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_expression_ (outArgument_outCondition, inCompiler) ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i7_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_expression_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i8_ (GALGAS_baseline_5F_conditionExpression & outArgument_outCondition,
                                                                                              C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outCondition.drop () ; // Release 'out' argument
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_15 (inCompiler)) {
  case 1: {
    GALGAS_bool var_isIncrement ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_16 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (465)) ;
      var_isIncrement = GALGAS_bool (true) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (467)) ;
      var_isIncrement = GALGAS_bool (false) ;
    } break ;
    default:
      break ;
    }
    GALGAS_registerExpression var_registerExpression ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    GALGAS_bool var_W_5F_isDestination ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_17 (inCompiler)) {
    case 1: {
      var_W_5F_isDestination = GALGAS_bool (false) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE_AT_LINE (475)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_w) COMMA_SOURCE_FILE_AT_LINE (475)) ;
      var_W_5F_isDestination = GALGAS_bool (true) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    GALGAS_lstring var_conditionString = inCompiler->synthetizedAttribute_tokenString () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (477)) ;
    GALGAS_string var_condition = var_conditionString.reader_string (SOURCE_FILE_AT_LINE (478)).reader_uppercaseString (SOURCE_FILE_AT_LINE (478)) ;
    GALGAS_bool var_branchIfZero ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_condition.objectCompare (GALGAS_string ("Z"))).boolEnum () ;
    if (kBoolTrue == test_0) {
      var_branchIfZero = GALGAS_bool (true) ;
    }else if (kBoolFalse == test_0) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_condition.objectCompare (GALGAS_string ("NZ"))).boolEnum () ;
      if (kBoolTrue == test_1) {
        var_branchIfZero = GALGAS_bool (false) ;
      }else if (kBoolFalse == test_1) {
        GALGAS_location location_2 (var_conditionString.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_2, GALGAS_string ("invalid '").operator_concat (var_conditionString.reader_string (SOURCE_FILE_AT_LINE (485)) COMMA_SOURCE_FILE_AT_LINE (485)).operator_concat (GALGAS_string ("' condition; valid ones are: 'z' and 'nz'") COMMA_SOURCE_FILE_AT_LINE (486)) COMMA_SOURCE_FILE_AT_LINE (485)) ;
        var_branchIfZero.drop () ; // Release error dropped variable
      }
    }
    outArgument_outCondition = GALGAS_baseline_5F_incDecRegisterInCondition::constructor_new (var_registerExpression, var_isIncrement, var_W_5F_isDestination, var_branchIfZero COMMA_SOURCE_FILE_AT_LINE (490)) ;
  } break ;
  case 2: {
    GALGAS_registerExpression var_registerExpression ;
    GALGAS_bitNumberExpression var_bitNumberExpression ;
    GALGAS_bool var_BTFSSinstruction ;
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_ (var_registerExpression, inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (501)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_bit_5F_number_5F_parsing_ (var_bitNumberExpression, inCompiler) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_18 (inCompiler)) {
    case 1: {
      var_BTFSSinstruction = GALGAS_bool (false) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      GALGAS_lstring var_conditionString = inCompiler->synthetizedAttribute_tokenString () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (506)) ;
      GALGAS_string var_condition = var_conditionString.reader_string (SOURCE_FILE_AT_LINE (507)).reader_uppercaseString (SOURCE_FILE_AT_LINE (507)) ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, var_condition.objectCompare (GALGAS_string ("Z"))).boolEnum () ;
      if (kBoolTrue == test_3) {
        var_BTFSSinstruction = GALGAS_bool (true) ;
        GALGAS_string var_s = GALGAS_string ("! ").operator_concat (var_registerExpression.reader_mRegisterName (SOURCE_FILE_AT_LINE (510)).reader_string (SOURCE_FILE_AT_LINE (510)) COMMA_SOURCE_FILE_AT_LINE (510)) ;
        const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, var_registerExpression.reader_mOffset (SOURCE_FILE_AT_LINE (511)).reader_uint (SOURCE_FILE_AT_LINE (511)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
        if (kBoolTrue == test_4) {
          var_s.dotAssign_operation (GALGAS_string (" [").operator_concat (var_registerExpression.reader_mOffset (SOURCE_FILE_AT_LINE (512)).reader_uint (SOURCE_FILE_AT_LINE (512)).reader_string (SOURCE_FILE_AT_LINE (512)) COMMA_SOURCE_FILE_AT_LINE (512)).operator_concat (GALGAS_string ("]") COMMA_SOURCE_FILE_AT_LINE (512)) COMMA_SOURCE_FILE_AT_LINE (512)) ;
        }
        var_s.dotAssign_operation (GALGAS_string (".") COMMA_SOURCE_FILE_AT_LINE (514)) ;
        callCategoryMethod_display ((const cPtr_bitNumberExpression *) var_bitNumberExpression.ptr (), var_s, inCompiler COMMA_SOURCE_FILE_AT_LINE (514)) ;
        GALGAS_location location_5 (var_conditionString.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_5, GALGAS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '").operator_concat (var_s COMMA_SOURCE_FILE_AT_LINE (515)).operator_concat (GALGAS_string ("' instead") COMMA_SOURCE_FILE_AT_LINE (515)) COMMA_SOURCE_FILE_AT_LINE (515)) ;
      }else if (kBoolFalse == test_3) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_condition.objectCompare (GALGAS_string ("NZ"))).boolEnum () ;
        if (kBoolTrue == test_6) {
          var_BTFSSinstruction = GALGAS_bool (false) ;
          GALGAS_string var_s = var_registerExpression.reader_mRegisterName (SOURCE_FILE_AT_LINE (518)).reader_string (SOURCE_FILE_AT_LINE (518)) ;
          const enumGalgasBool test_7 = GALGAS_bool (kIsStrictSup, var_registerExpression.reader_mOffset (SOURCE_FILE_AT_LINE (519)).reader_uint (SOURCE_FILE_AT_LINE (519)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
          if (kBoolTrue == test_7) {
            var_s.dotAssign_operation (GALGAS_string (" [").operator_concat (var_registerExpression.reader_mOffset (SOURCE_FILE_AT_LINE (520)).reader_uint (SOURCE_FILE_AT_LINE (520)).reader_string (SOURCE_FILE_AT_LINE (520)) COMMA_SOURCE_FILE_AT_LINE (520)).operator_concat (GALGAS_string ("]") COMMA_SOURCE_FILE_AT_LINE (520)) COMMA_SOURCE_FILE_AT_LINE (520)) ;
          }
          var_s.dotAssign_operation (GALGAS_string (".") COMMA_SOURCE_FILE_AT_LINE (522)) ;
          callCategoryMethod_display ((const cPtr_bitNumberExpression *) var_bitNumberExpression.ptr (), var_s, inCompiler COMMA_SOURCE_FILE_AT_LINE (522)) ;
          GALGAS_location location_8 (var_conditionString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticWarning (location_8, GALGAS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '").operator_concat (var_s COMMA_SOURCE_FILE_AT_LINE (523)).operator_concat (GALGAS_string ("' instead") COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
        }else if (kBoolFalse == test_6) {
          GALGAS_location location_9 (var_conditionString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_9, GALGAS_string ("invalid '").operator_concat (var_conditionString.reader_string (SOURCE_FILE_AT_LINE (525)) COMMA_SOURCE_FILE_AT_LINE (525)).operator_concat (GALGAS_string ("' condition; valid ones are: 'z' and 'nz'") COMMA_SOURCE_FILE_AT_LINE (526)) COMMA_SOURCE_FILE_AT_LINE (525)) ;
          var_BTFSSinstruction.drop () ; // Release error dropped variable
        }
      }
    } break ;
    default:
      break ;
    }
    outArgument_outCondition = GALGAS_baseline_5F_bitTest_5F_in_5F_structured_5F_if_5F_condition::constructor_new (var_registerExpression, var_bitNumberExpression, var_BTFSSinstruction COMMA_SOURCE_FILE_AT_LINE (531)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_factor_i8_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @selectInstructionForGeneration
  switch (select_baseline_5F_syntax_15 (inCompiler)) {
  case 1: {
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_16 (inCompiler)) {
    case 1: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_incf) COMMA_SOURCE_FILE_AT_LINE (465)) ;
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_decf) COMMA_SOURCE_FILE_AT_LINE (467)) ;
    } break ;
    default:
      break ;
    }
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_17 (inCompiler)) {
    case 1: {
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE_AT_LINE (475)) ;
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_w) COMMA_SOURCE_FILE_AT_LINE (475)) ;
    } break ;
    default:
      break ;
    }
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (477)) ;
  } break ;
  case 2: {
    //-------- @nonterminalInstructionForGeneration
    nt_register_5F_parsing_parse (inCompiler) ;
    //-------- @terminalCheckInstructionForGeneration
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__2E_) COMMA_SOURCE_FILE_AT_LINE (501)) ;
    //-------- @nonterminalInstructionForGeneration
    nt_bit_5F_number_5F_parsing_parse (inCompiler) ;
    //-------- @selectInstructionForGeneration
    switch (select_baseline_5F_syntax_18 (inCompiler)) {
    case 1: {
    } break ;
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken_identifier) COMMA_SOURCE_FILE_AT_LINE (506)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_expression_i9_ (GALGAS_baseline_5F_conditionExpression & outArgument_outCondition,
                                                                                                  C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outCondition.drop () ; // Release 'out' argument
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__28_) COMMA_SOURCE_FILE_AT_LINE (544)) ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_term_ (outArgument_outCondition, inCompiler) ;
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_19 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7C_) COMMA_SOURCE_FILE_AT_LINE (548)) ;
      GALGAS_baseline_5F_conditionExpression var_c ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_term_ (var_c, inCompiler) ;
      GALGAS_baseline_5F_conditionExpression var_rc = GALGAS_baseline_5F_negateCondition::constructor_new (var_c COMMA_SOURCE_FILE_AT_LINE (551)) ;
      GALGAS_baseline_5F_conditionExpression var_lc = GALGAS_baseline_5F_negateCondition::constructor_new (outArgument_outCondition COMMA_SOURCE_FILE_AT_LINE (552)) ;
      outArgument_outCondition = GALGAS_baseline_5F_negateCondition::constructor_new (GALGAS_baseline_5F_andCondition::constructor_new (var_lc, var_rc COMMA_SOURCE_FILE_AT_LINE (553)) COMMA_SOURCE_FILE_AT_LINE (553)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__29_) COMMA_SOURCE_FILE_AT_LINE (555)) ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_expression_i9_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__28_) COMMA_SOURCE_FILE_AT_LINE (544)) ;
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_term_parse (inCompiler) ;
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_19 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__7C_) COMMA_SOURCE_FILE_AT_LINE (548)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_term_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  //-------- @terminalCheckInstructionForGeneration
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__29_) COMMA_SOURCE_FILE_AT_LINE (555)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_term_i10_ (GALGAS_baseline_5F_conditionExpression & outArgument_outCondition,
                                                                                             C_Lexique_piccolo_5F_lexique * inCompiler) {
  outArgument_outCondition.drop () ; // Release 'out' argument
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_factor_ (outArgument_outCondition, inCompiler) ;
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_20 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__26_) COMMA_SOURCE_FILE_AT_LINE (566)) ;
      GALGAS_baseline_5F_conditionExpression var_c ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_factor_ (var_c, inCompiler) ;
      outArgument_outCondition = GALGAS_baseline_5F_andCondition::constructor_new (outArgument_outCondition, var_c COMMA_SOURCE_FILE_AT_LINE (569)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------*

void cParser_baseline_5F_syntax::rule_baseline_5F_syntax_baseline_5F_condition_5F_term_i10_parse (C_Lexique_piccolo_5F_lexique * inCompiler) {
  //-------- @nonterminalInstructionForGeneration
  nt_baseline_5F_condition_5F_factor_parse (inCompiler) ;
  //-------- @repeatInstructionForGeneration
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_baseline_5F_syntax_20 (inCompiler)) {
    case 2: {
      //-------- @terminalCheckInstructionForGeneration
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_piccolo_5F_lexique::kToken__26_) COMMA_SOURCE_FILE_AT_LINE (566)) ;
      //-------- @nonterminalInstructionForGeneration
      nt_baseline_5F_condition_5F_factor_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


