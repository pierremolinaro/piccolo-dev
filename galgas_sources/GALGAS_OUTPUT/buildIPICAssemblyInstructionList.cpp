//---------------------------------------------------------------------------*
//                                                                           *
//               File 'buildIPICAssemblyInstructionList.cpp'                 *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 27th, 2008, at 19h55'24"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "buildIPICAssemblyInstructionList.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "buildIPICAssemblyInstructionList.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_610,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_610 != NULL) {
    if (((operand_610->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (20)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_610->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_610->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (21))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (21)) ;
    }
    var_cas_outBitNumber = operand_610->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_1044,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1044 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_1175 = var_cas_inBitSliceTable ;
    if (_temp_1175._isBuilt ()) {
      _temp_1175 (HERE)->method_searchKey (_inLexique, operand_1044->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (34)) ;
    }
    if (((operand_1044->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (35)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_1044->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_1044->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (36))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (37))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (37)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_1044->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)) COMMA_SOURCE_FILE_AT_LINE (39)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@registerExpression.resolveAccess'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__resolveAccess (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_1603,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_ipic_registerExpression & var_cas_outIPICregisterDescription,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1603 != NULL) {
    GGS_string var_cas_assemblyString ;
    var_cas_assemblyString = operand_1603->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
    if (((operand_1603->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_assemblyString.writeString (" + ") ;
      var_cas_assemblyString._dotAssign_operation (operand_1603->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (53))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_uint  var_cas_registerAddress ;
    var_cas_registerAddress = GGS_uint (true, 0U) ;
    const GGS_registerTable  _temp_2061 = var_cas_inRegisterTable ;
    if (_temp_2061._isBuilt ()) {
      _temp_2061 (HERE)->method_searchKey (_inLexique, operand_1603->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (59)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_2169 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_2169 = NULL ;
      while (((operand_2169 = enumerator_2169.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_2169) ;
        var_cas_found = ((operand_2169->mValue)._operator_strictInf (var_cas_inAccessBankSplitOffset))._operator_or ((operand_2169->mValue)._operator_supOrEqual (GGS_uint (true, 3840U)._add_operation (_inLexique, var_cas_inAccessBankSplitOffset COMMA_SOURCE_FILE_AT_LINE (62)))) ;
        var_cas_registerAddress = operand_2169->mValue ;
      }
    }
    GGS_bool var_cas_needsBSRaccess ;
    var_cas_needsBSRaccess = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_needsBSRaccess = GGS_bool (true, true) ;
      const GGS_uintlist  _temp_2463 = var_cas_registerAddressList ;
      if (_temp_2463._isBuilt ()) {
        _temp_2463 (HERE)->method_first (_inLexique, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (68)) ;
      }
    }
    var_cas_outIPICregisterDescription = GGS_ipic_registerExpression::constructor_new (var_cas_assemblyString, var_cas_registerAddress._add_operation (_inLexique, operand_1603->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (73)) COMMA_SOURCE_FILE_AT_LINE (73)), var_cas_needsBSRaccess) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@registerExpression.resolveAccess'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__resolveAccess> gDispatchTableFor__registerExpression__resolveAccess ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__resolveAccess (typeCategoryMethod__registerExpression__resolveAccess inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__resolveAccess.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__resolveAccess
findCategoryMethod__registerExpression__resolveAccess (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__resolveAccess result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__resolveAccess.count ()) {
    result = gDispatchTableFor__registerExpression__resolveAccess (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__resolveAccess (superClassPtr) ;
      gDispatchTableFor__registerExpression__resolveAccess.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableFor__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableFor__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@pseudo_LABEL.buildIPICinstructionList'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_3161,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3161 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_3161->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_3543,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3543 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_3802 = operand_3543->mRegisterExpression ;
    if (_temp_3802._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_3802._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3802 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (111)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, operand_3543->mInstructionLocation, operand_3543->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_3543->m_W_isDestination COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_4187,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4187 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_4446 = operand_4187->mRegisterExpression ;
    if (_temp_4446._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_4446._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4446 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (134)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FA ::constructor_new (_inLexique, operand_4187->mInstructionLocation, operand_4187->mFAinstruction, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_4798,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4798 != NULL) {
    GGS_ipic_registerExpression var_cas_sourceIPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_5063 = operand_4798->mSourceRegisterName ;
    if (_temp_5063._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_5063._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5063 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (156)) ;
      }
    }
    GGS_ipic_registerExpression var_cas_destinationIPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_3 ;
    const GGS_registerExpression  _temp_5267 = operand_4798->mDestinationRegisterName ;
    if (_temp_5267._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_5267._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5267 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (163)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVFF ::constructor_new (_inLexique, operand_4798->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_5657,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5657 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_5949 = operand_5657->mRegisterExpression ;
    if (_temp_5949._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_5949._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5949 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (186)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_6101 = operand_5657->mBitNumber ;
    if (_temp_6101._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_6101._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6101 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (193)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, operand_5657->mInstructionLocation, operand_5657->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_conditionalBranch.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_6428,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6428 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_6428->mInstructionLocation, operand_6428->mBranchMode, operand_6428->mConditionalBranch, operand_6428->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_BRA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_6894,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6894 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_6894->mInstructionLocation, operand_6894->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CALL.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_7306,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7306 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_CALL ::constructor_new (_inLexique, operand_7306->mInstructionLocation, operand_7306->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_GOTO.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_7719,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7719 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_GOTO ::constructor_new (_inLexique, operand_7719->mInstructionLocation, operand_7719->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RCALL.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_8133,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8133 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RCALL ::constructor_new (_inLexique, operand_8133->mInstructionLocation, operand_8133->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_8549,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8549 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_CLRWDT ::constructor_new (_inLexique, operand_8549->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_8945,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8945 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_DAW ::constructor_new (_inLexique, operand_8945->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_9338,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9338 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_NOP ::constructor_new (_inLexique, operand_9338->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_9731,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9731 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_POP ::constructor_new (_inLexique, operand_9731->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_10125,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10125 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_PUSH ::constructor_new (_inLexique, operand_10125->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_10521,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10521 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RESET ::constructor_new (_inLexique, operand_10521->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RETURN.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_10919,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10919 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, operand_10919->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RETFIE.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETFIE__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RETFIE * operand_11318,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11318 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, operand_11318->mInstructionLocation, operand_11318->mFastReturn COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_11733,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11733 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_SLEEP ::constructor_new (_inLexique, operand_11733->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_12141,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12141 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, operand_12141->mInstructionLocation, operand_12141->mLiteralInstruction, operand_12141->mLiteralValue COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_12592,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12592 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_12851 = operand_12592->mRegisterExpression ;
    if (_temp_12851._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_12851._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_12851 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (419)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_LFSR ::constructor_new (_inLexique, operand_12592->mInstructionLocation, operand_12592->mFSRindex, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVLB.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_13200,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13200 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVLB ::constructor_new (_inLexique, operand_13200->mInstructionLocation, operand_13200->mPageIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVAW.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_13613,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13613 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_13872 = operand_13613->mRegisterExpression ;
    if (_temp_13872._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_13872._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_13872 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (455)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVAW ::constructor_new (_inLexique, operand_13613->mInstructionLocation, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_14212,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14212 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_TBLRD ::constructor_new (_inLexique, operand_14212->mInstructionLocation, operand_14212->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_14622,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14622 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_TBLWT ::constructor_new (_inLexique, operand_14622->mInstructionLocation, operand_14622->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_15041,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15041 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_retlw ::constructor_new (_inLexique, operand_15041->mInstructionLocation, operand_15041->mLiteralValues, operand_15041->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_15489,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15489 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MNOP ::constructor_new (_inLexique, operand_15489->mInstructionLocation, operand_15489->mOccurrenceFactor COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_15915,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15915 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_bra ::constructor_new (_inLexique, operand_15915->mInstructionLocation, operand_15915->mTargetLabels, operand_15915->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_16369,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16369 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_goto ::constructor_new (_inLexique, operand_16369->mInstructionLocation, operand_16369->mTargetLabels, operand_16369->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_16818,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16818 != NULL) {
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (563))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (564)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_16818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_17197 (operand_16818->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_17197 = NULL ;
      while (((operand_17197 = enumerator_17197.nextObject ()))) {
        macroValidPointer (operand_17197) ;
        const GGS_piccolo_instruction  _temp_17235 = operand_17197->mInstruction ;
        if (_temp_17235._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_17235._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_17235 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (567)) ;
          }
        }
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_16818->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_16818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_17618,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17618 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_17618->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_18209 = operand_17618->mRegisterExpression ;
    if (_temp_18209._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_18209._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18209 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (588)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FA ::constructor_new (_inLexique, operand_17618->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_18489 = operand_17618->mInstruction ;
    if (_temp_18489._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_18489._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_18489 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (600)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_18719,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18719 != NULL) {
    GGS_bit_oriented_op var_cas_baseCode ;
    if ((operand_18719->mSkipIfSet).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_19159 = operand_18719->mRegisterExpression ;
    if (_temp_19159._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_19159._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_19159 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (619)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_19311 = operand_18719->mBitNumber ;
    if (_temp_19311._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_19311._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_19311 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (626)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, operand_18719->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_19554 = operand_18719->mInstruction ;
    if (_temp_19554._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_19554._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_19554 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (637)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_20165,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20165 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (_inLexique,  operand_20165->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (664)) ;
    }else{
      var_cas_condition = operand_20165->mCondition ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_20958,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20958 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_20958->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (689)) ;
    }else{
      var_cas_comparison = operand_20958->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_21507 = operand_20958->mRegisterExpression ;
    if (_temp_21507._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_21507._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21507 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (696)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_21934,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21934 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_22295 = operand_21934->mRegisterExpression ;
    if (_temp_22295._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_22295._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22295 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (724)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_21934->mIncrement, operand_21934->m_W_isDestination, (operand_21934->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_22782,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22782 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_23143 = operand_22782->mRegisterExpression ;
    if (_temp_23143._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_23143._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23143 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (754)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_22782->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_23578,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23578 != NULL) {
    const GGS_conditionExpression  _temp_23870 = operand_23578->mCondition ;
    if (_temp_23870._isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_23870._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23870 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch)._operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (781)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_24194,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24194 != NULL) {
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      const GGS_conditionExpression  _temp_24525 = operand_24194->mLeftExpression ;
      if (_temp_24525._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_24525._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_24525 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (804)) ;
        }
      }
      const GGS_conditionExpression  _temp_24765 = operand_24194->mRightExpression ;
      if (_temp_24765._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_24765._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_24765 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (813)) ;
        }
      }
    }else{
      GGS_string var_cas_label0 ;
      var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (823))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (823)) ;
      const GGS_conditionExpression  _temp_25097 = operand_24194->mLeftExpression ;
      if (_temp_25097._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_25097._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_25097 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (824)) ;
        }
      }
      const GGS_conditionExpression  _temp_25330 = operand_24194->mRightExpression ;
      if (_temp_25330._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_25330._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_25330 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (833)) ;
        }
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_25792,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25792 != NULL) {
    GGS_bit_oriented_op var_cas_op ;
    if (((operand_25792->mBTFSSinstruction)._operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_26354 = operand_25792->mRegisterExpression ;
    if (_temp_26354._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_26354._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26354 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (865)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_26506 = operand_25792->mBitNumber ;
    if (_temp_26506._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_26506._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26506 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (872)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_op, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_26958,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26958 != NULL) {
    GGS_string var_cas_label_nextCondition ;
    var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (894))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (894)) ;
    GGS_string var_cas_label_endOfIfinstruction ;
    var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (895))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (895)) ;
    const GGS_conditionExpression  _temp_27379 = operand_26958->mIfCondition ;
    if (_temp_27379._isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_27379._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27379 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_26958->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (897)) ;
      }
    }
    {
      GGS_instructionList::cEnumerator enumerator_27621 (operand_26958->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_27621 = NULL ;
      while (((operand_27621 = enumerator_27621.nextObject ()))) {
        macroValidPointer (operand_27621) ;
        const GGS_piccolo_instruction  _temp_27663 = operand_27621->mInstruction ;
        if (_temp_27663._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_27663._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_27663 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (908)) ;
          }
        }
      }
    }
    {
      GGS_partList::cEnumerator enumerator_27827 (operand_26958->mElsifPartList, true) ;
      const GGS_partList::cElement * operand_27827 = NULL ;
      while (((operand_27827 = enumerator_27827.nextObject ()))) {
        macroValidPointer (operand_27827) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_26958->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_26958->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_26958->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (914))) ;
        var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (914)) ;
        const GGS_conditionExpression  _temp_28224 = operand_27827->mCondition ;
        if (_temp_28224._isBuilt ()) {
          typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_28224._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_28224 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_26958->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (915)) ;
          }
        }
        {
          GGS_instructionList::cEnumerator enumerator_28459 (operand_27827->mInstructionList, true) ;
          const GGS_instructionList::cElement * operand_28459 = NULL ;
          while (((operand_28459 = enumerator_28459.nextObject ()))) {
            macroValidPointer (operand_28459) ;
            const GGS_piccolo_instruction  _temp_28499 = operand_28459->mInstruction ;
            if (_temp_28499._isBuilt ()) {
              typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_28499._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_28499 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (925)) ;
              }
            }
          }
        }
      }
    }
    if (((operand_26958->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (929)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_26958->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_26958->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_26958->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_29012 (operand_26958->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_29012 = NULL ;
      while (((operand_29012 = enumerator_29012.nextObject ()))) {
        macroValidPointer (operand_29012) ;
        const GGS_piccolo_instruction  _temp_29054 = operand_29012->mInstruction ;
        if (_temp_29054._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_29054._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_29054 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (934)) ;
          }
        }
      }
    }
    if ((((operand_26958->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (936)))._operator_strictSup (GGS_uint (true, 0U)))._operator_or ((operand_26958->mElsifPartList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (936)))._operator_strictSup (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_26958->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_29513,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29513 != NULL) {
    GGS_string var_cas_labelInstructionBegin ;
    var_cas_labelInstructionBegin = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (950))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (950)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_29513->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_29984 (operand_29513->mRepeatedInstructionList, true) ;
      const GGS_instructionList::cElement * operand_29984 = NULL ;
      while (((operand_29984 = enumerator_29984.nextObject ()))) {
        macroValidPointer (operand_29984) ;
        const GGS_piccolo_instruction  _temp_30030 = operand_29984->mInstruction ;
        if (_temp_30030._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_30030._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_30030 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (955)) ;
          }
        }
      }
    }
    {
      GGS_partList::cEnumerator enumerator_30192 (operand_29513->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_30192 = NULL ;
      while (((operand_30192 = enumerator_30192.nextObject ()))) {
        macroValidPointer (operand_30192) ;
        if (((operand_30192->mInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (959)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          const GGS_conditionExpression  _temp_30271 = operand_30192->mCondition ;
          if (_temp_30271._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_30271._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_30271 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_29513->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (960)) ;
            }
          }
        }else{
          GGS_string var_cas_nextBranchLabel ;
          var_cas_nextBranchLabel = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (970))) ;
          var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (970)) ;
          const GGS_conditionExpression  _temp_30637 = operand_30192->mCondition ;
          if (_temp_30637._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_30637._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_30637 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_29513->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (971)) ;
            }
          }
          {
            GGS_instructionList::cEnumerator enumerator_30886 (operand_30192->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_30886 = NULL ;
            while (((operand_30886 = enumerator_30886.nextObject ()))) {
              macroValidPointer (operand_30886) ;
              const GGS_piccolo_instruction  _temp_30928 = operand_30886->mInstruction ;
              if (_temp_30928._isBuilt ()) {
                typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_30928._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_30928 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (981)) ;
                }
              }
            }
          }
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_nextBranchLabel, operand_29513->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_31325,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31325 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_31325->mIncrement)._operator_and (operand_31325->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_31325->mIncrement)._operator_and ((operand_31325->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_31325->mIncrement)._operator_not ())._operator_and (operand_31325->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_31982 = operand_31325->mRegisterExpression ;
    if (_temp_31982._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_31982._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31982 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1009)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, operand_31325->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_31325->m_W_isDestination COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_32294 = operand_31325->mInstruction ;
    if (_temp_32294._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_32294._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_32294 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (1023)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "buildIPICAssemblyInstructionList"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildIPICAssemblyInstructionList (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic_instructionList  & var_cas_outGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildIPICAssemblyInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outGeneratedInstructionList = GGS_ipic_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  if (((var_cas_inHasLowInterrupt)._operator_or (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_GOTO ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inHasLowInterrupt)._operator_and (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_33569 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_33569 = NULL ;
      while (((operand_33569 = enumerator_33569.nextObject ()))) {
        macroValidPointer (operand_33569) ;
        if (((operand_33569->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1052)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_33677 (operand_33569->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_33677 = NULL ;
            while (((operand_33677 = enumerator_33677.nextObject ()))) {
              macroValidPointer (operand_33677) ;
              const GGS_piccolo_instruction  _temp_33721 = operand_33677->mInstruction ;
              if (_temp_33721._isBuilt ()) {
                typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_33721._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_33721 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (1054)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_34340 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1068)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_34340 = NULL ;
      while (((operand_34340 = enumerator_34340.nextObject ()))) {
        macroValidPointer (operand_34340) ;
        if (((operand_34340->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1069)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_34449 (operand_34340->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_34449 = NULL ;
            while (((operand_34449 = enumerator_34449.nextObject ()))) {
              macroValidPointer (operand_34449) ;
              const GGS_piccolo_instruction  _temp_34493 = operand_34449->mInstruction ;
              if (_temp_34493._isBuilt ()) {
                typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_34493._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_34493 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (1071)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_34833 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1079)), true) ;
    const GGS_routineDefinitionList::cElement * operand_34833 = NULL ;
    while (((operand_34833 = enumerator_34833.nextObject ()))) {
      macroValidPointer (operand_34833) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_34833->mRoutineName COMMA_HERE)) ;
      {
        GGS_instructionList::cEnumerator enumerator_34965 (operand_34833->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_34965 = NULL ;
        while (((operand_34965 = enumerator_34965.nextObject ()))) {
          macroValidPointer (operand_34965) ;
          const GGS_piccolo_instruction  _temp_35005 = operand_34965->mInstruction ;
          if (_temp_35005._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_35005._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_35005 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (1082)) ;
            }
          }
        }
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister ;
  var_cas_WREGregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_11 ;
  const GGS_registerExpression  _temp_35362 = var_cas_WREGregister ;
  if (_temp_35362._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_35362._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_35362 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (1088)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister ;
  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_12 ;
  const GGS_registerExpression  _temp_35677 = var_cas_TOSLregister ;
  if (_temp_35677._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_35677._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_35677 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (1097)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister ;
  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_13 ;
  const GGS_registerExpression  _temp_35992 = var_cas_TOSHregister ;
  if (_temp_35992._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_35992._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_35992 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (1106)) ;
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1113))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1122))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1125)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1125)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_TOSL_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSH_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildIPICAssemblyInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_buildIPICAssemblyInstructionList (void) {
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__registerExpression__resolveAccess (category_method__registerExpression__resolveAccess, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__pseudo_LABEL__buildIPICinstructionList, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_conditionalBranch__buildIPICinstructionList, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_BRA__buildIPICinstructionList, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CALL__buildIPICinstructionList, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_GOTO__buildIPICinstructionList, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RCALL__buildIPICinstructionList, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RETURN__buildIPICinstructionList, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RETFIE__buildIPICinstructionList, gClassInfoFor__instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVLB__buildIPICinstructionList, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVAW__buildIPICinstructionList, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_buildIPICAssemblyInstructionList (prologueRoutineFor_buildIPICAssemblyInstructionList,
                                   NULL) ;

//---------------------------------------------------------------------------*

