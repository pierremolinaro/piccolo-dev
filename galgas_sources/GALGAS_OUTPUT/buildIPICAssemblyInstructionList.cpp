//---------------------------------------------------------------------------*
//                                                                           *
//               File 'buildIPICAssemblyInstructionList.cpp'                 *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 18th, 2008, at 12h32'56"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "buildIPICAssemblyInstructionList.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "buildIPICAssemblyInstructionList.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn (),
mRequiredBank (),
mReturnedBank (),
mPreservesBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mReturnedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mPreservesBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * _p = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mIsNoReturn._operator_isEqual (_p->mInfo.mIsNoReturn)).boolValue ()
           && (mInfo.mRequiredBank._operator_isEqual (_p->mInfo.mRequiredBank)).boolValue ()
           && (mInfo.mReturnedBank._operator_isEqual (_p->mInfo.mReturnedBank)).boolValue ()
           && (mInfo.mPreservesBank._operator_isEqual (_p->mInfo.mPreservesBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_bool& inParameter0,
                const GGS_uint & inParameter1,
                const GGS_uint & inParameter2,
                const GGS_bool& inParameter3,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inParameter2._isBuilt ()
   && inParameter3._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    info.mRequiredBank = inParameter1 ;
    info.mReturnedBank = inParameter2 ;
    info.mPreservesBank = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_uint   & outParameter1,
               GGS_uint   & outParameter2,
               GGS_bool  & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    outParameter2._drop () ;
    outParameter3._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    outParameter1 = node->mInfo.mRequiredBank ;
    outParameter2 = node->mInfo.mReturnedBank ;
    outParameter3 = node->mInfo.mPreservesBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMIsNoReturnForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mIsNoReturn = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMRequiredBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMReturnedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMReturnedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mReturnedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMPreservesBankForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMPreservesBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mPreservesBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_bool  & outParameter3 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  outParameter2,
                  outParameter3,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0,
                                const GGS_uint & inParameter1,
                                const GGS_uint & inParameter2,
                                const GGS_bool& inParameter3 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mReturnedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mReturnedBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mPreservesBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mPreservesBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_routineKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@immediatExpression.eval'        *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__immediatExpression__eval> gDispatchTableFor__immediatExpression__eval ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__immediatExpression__eval (typeCategoryMethod__immediatExpression__eval inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__immediatExpression__eval.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__immediatExpression__eval
findCategoryMethod__immediatExpression__eval (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__immediatExpression__eval result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__immediatExpression__eval.count ()) {
    result = gDispatchTableFor__immediatExpression__eval (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__immediatExpression__eval (superClassPtr) ;
      gDispatchTableFor__immediatExpression__eval.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatInteger.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatInteger__eval (C_Compiler & _inLexique,
                                const cPtr_immediatInteger * operand_1679,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1679 != NULL) {
    var_cas_outResult = operand_1679->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatRegister.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRegister__eval (C_Compiler & _inLexique,
                                const cPtr_immediatRegister * operand_1913,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1913 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    GGS_string automatic_var_1 ;
    const GGS_registerTable  _temp_2047 = var_cas_inRegisterTable ;
    if (_temp_2047._isBuilt ()) {
      _temp_2047 (HERE)->method_searchKey (_inLexique, operand_1913->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)), var_cas_registerAddressList, var_cas_size, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (58)) ;
    }
    GGS_uint  var_cas_registerAddress ;
    const GGS_uintlist  _temp_2163 = var_cas_registerAddressList ;
    if (_temp_2163._isBuilt ()) {
      _temp_2163 (HERE)->method_first (_inLexique, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (59)) ;
    }
    if (((operand_1913->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
      operand_1913->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_1913->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (61))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (61))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (62)) ;
    }
    var_cas_outResult = var_cas_registerAddress._add_operation (_inLexique, operand_1913->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (63)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAdd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAdd__eval (C_Compiler & _inLexique,
                                const cPtr_immediatAdd * operand_2572,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2572 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_2671 = operand_2572->mLeftExpression ;
    if (_temp_2671._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_2671._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2671 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_2748 = operand_2572->mRightExpression ;
    if (_temp_2748._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_2748._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2748 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._add_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (74)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatSub.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSub__eval (C_Compiler & _inLexique,
                                const cPtr_immediatSub * operand_2951,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2951 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_3050 = operand_2951->mLeftExpression ;
    if (_temp_3050._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3050._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3050 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_3127 = operand_2951->mRightExpression ;
    if (_temp_3127._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3127._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3127 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (84)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._substract_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (85)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMul.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMul__eval (C_Compiler & _inLexique,
                                const cPtr_immediatMul * operand_3330,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3330 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_3429 = operand_3330->mLeftExpression ;
    if (_temp_3429._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3429._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3429 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (94)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_3506 = operand_3330->mRightExpression ;
    if (_temp_3506._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3506._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3506 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._multiply_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatDiv.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatDiv__eval (C_Compiler & _inLexique,
                                const cPtr_immediatDiv * operand_3709,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3709 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_3808 = operand_3709->mLeftExpression ;
    if (_temp_3808._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3808._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3808 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_3885 = operand_3709->mRightExpression ;
    if (_temp_3885._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_3885._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3885 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._divide_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMod.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMod__eval (C_Compiler & _inLexique,
                                const cPtr_immediatMod * operand_4088,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4088 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4187 = operand_4088->mLeftExpression ;
    if (_temp_4187._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4187._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4187 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_4264 = operand_4088->mRightExpression ;
    if (_temp_4264._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4264._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4264 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (117)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._modulo_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (118)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAnd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAnd__eval (C_Compiler & _inLexique,
                                const cPtr_immediatAnd * operand_4469,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4469 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4568 = operand_4469->mLeftExpression ;
    if (_temp_4568._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4568._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4568 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (127)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_4645 = operand_4469->mRightExpression ;
    if (_temp_4645._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4645._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4645 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (128)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_and (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Category method '@immediatOr.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatOr__eval (C_Compiler & _inLexique,
                                const cPtr_immediatOr * operand_4847,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4847 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4946 = operand_4847->mLeftExpression ;
    if (_temp_4946._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4946._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4946 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (138)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5023 = operand_4847->mRightExpression ;
    if (_temp_5023._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5023._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5023 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (139)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_or (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatXor.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatXor__eval (C_Compiler & _inLexique,
                                const cPtr_immediatXor * operand_5226,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5226 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_5325 = operand_5226->mLeftExpression ;
    if (_temp_5325._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5325._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5325 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (149)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5402 = operand_5226->mRightExpression ;
    if (_temp_5402._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5402._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5402 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (150)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_xor (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLeftShift.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLeftShift__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLeftShift * operand_5611,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5611 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_5710 = operand_5611->mLeftExpression ;
    if (_temp_5710._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5710._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5710 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (160)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5787 = operand_5611->mRightExpression ;
    if (_temp_5787._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5787._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5787 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (161)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._left_shift_operation (_inLexique, var_cas_rightResult.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)) COMMA_SOURCE_FILE_AT_LINE (162)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatRightShift.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRightShift__eval (C_Compiler & _inLexique,
                                const cPtr_immediatRightShift * operand_6005,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6005 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_6104 = operand_6005->mLeftExpression ;
    if (_temp_6104._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6104._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6104 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (171)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_6181 = operand_6005->mRightExpression ;
    if (_temp_6181._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6181._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6181 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (172)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._right_shift_operation (_inLexique, var_cas_rightResult.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (173)) COMMA_SOURCE_FILE_AT_LINE (173)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatEqualTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatEqualTest * operand_6398,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6398 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_6497 = operand_6398->mLeftExpression ;
    if (_temp_6497._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6497._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6497 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_6574 = operand_6398->mRightExpression ;
    if (_temp_6574._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6574._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6574 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (183)) ;
      }
    }
    if (((var_cas_leftResult)._operator_isEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatNotEqualTest.eval'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNotEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatNotEqualTest * operand_6842,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6842 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_6941 = operand_6842->mLeftExpression ;
    if (_temp_6941._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6941._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6941 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_7018 = operand_6842->mRightExpression ;
    if (_temp_7018._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7018._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7018 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (198)) ;
      }
    }
    if (((var_cas_leftResult)._operator_isNotEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@immediatGreaterOrEqualTest.eval'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterOrEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatGreaterOrEqualTest * operand_7292,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7292 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_7391 = operand_7292->mLeftExpression ;
    if (_temp_7391._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7391._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7391 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_7468 = operand_7292->mRightExpression ;
    if (_temp_7468._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7468._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7468 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (213)) ;
      }
    }
    if (((var_cas_leftResult)._operator_supOrEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@immediatLowerOrEqualTest.eval'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerOrEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLowerOrEqualTest * operand_7740,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7740 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_7839 = operand_7740->mLeftExpression ;
    if (_temp_7839._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7839._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7839 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (227)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_7916 = operand_7740->mRightExpression ;
    if (_temp_7916._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7916._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7916 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    if (((var_cas_leftResult)._operator_infOrEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatGreaterTest.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatGreaterTest * operand_8183,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8183 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_8282 = operand_8183->mLeftExpression ;
    if (_temp_8282._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8282._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8282 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (242)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_8359 = operand_8183->mRightExpression ;
    if (_temp_8359._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8359._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8359 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (243)) ;
      }
    }
    if (((var_cas_leftResult)._operator_strictSup (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLowerTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLowerTest * operand_8623,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8623 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_8722 = operand_8623->mLeftExpression ;
    if (_temp_8722._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8722._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8722 (HERE), var_cas_inRegisterTable, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (257)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_8799 = operand_8623->mRightExpression ;
    if (_temp_8799._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8799._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8799 (HERE), var_cas_inRegisterTable, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    if (((var_cas_leftResult)._operator_strictInf (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatNegate.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNegate__eval (C_Compiler & _inLexique,
                                const cPtr_immediatNegate * operand_9060,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9060 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_9151 = operand_9060->mExpression ;
    if (_temp_9151._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_9151._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9151 (HERE), var_cas_inRegisterTable, var_cas_result COMMA_SOURCE_FILE_AT_LINE (272)) ;
      }
    }
    var_cas_outResult = var_cas_result._operator_unary_minus (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatComplement.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatComplement__eval (C_Compiler & _inLexique,
                                const cPtr_immediatComplement * operand_9340,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9340 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_9431 = operand_9340->mExpression ;
    if (_temp_9431._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_9431._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9431 (HERE), var_cas_inRegisterTable, var_cas_result COMMA_SOURCE_FILE_AT_LINE (282)) ;
      }
    }
    var_cas_outResult = (var_cas_result)._operator_tilde () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatSlice.eval'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSlice__eval (C_Compiler & _inLexique,
                                const cPtr_immediatSlice * operand_9615,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9615 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    var_cas_outResult = GGS_sint (true, 0L) ;
    GGS_uintlist  automatic_var_2 ;
    GGS_uint  automatic_var_3 ;
    GGS_string automatic_var_4 ;
    const GGS_registerTable  _temp_9753 = var_cas_inRegisterTable ;
    if (_temp_9753._isBuilt ()) {
      _temp_9753 (HERE)->method_searchKey (_inLexique, operand_9615->mRegisterName, automatic_var_2, automatic_var_3, var_cas_bitSliceTable, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (294)) ;
    }
    GGS_stringset  var_cas_sliceNameSet ;
    var_cas_sliceNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_immediatSliceExpressionList::cEnumerator enumerator_9866 (operand_9615->mSliceExpressionList, true) ;
      const GGS_immediatSliceExpressionList::cElement * operand_9866 = NULL ;
      while (((operand_9866 = enumerator_9866.nextObject ()))) {
        macroValidPointer (operand_9866) ;
        if ((var_cas_sliceNameSet.reader_hasKey (_inLexique, operand_9866->mSliceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (297)) COMMA_SOURCE_FILE_AT_LINE (297))).isBuiltAndTrue ()) {
          operand_9866->mSliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_9866->mSliceName))._operator_concat (GGS_string (true, "' bit field has been already defined")) COMMA_SOURCE_FILE_AT_LINE (299)) ;
        }else{
          var_cas_sliceNameSet._addAssign_operation (operand_9866->mSliceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
          GGS_uint  var_cas_sliceIndex ;
          GGS_uint  var_cas_sliceSize ;
          const GGS_bitSliceTable  _temp_10145 = var_cas_bitSliceTable ;
          if (_temp_10145._isBuilt ()) {
            _temp_10145 (HERE)->method_searchKey (_inLexique, operand_9866->mSliceName, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (303)) ;
          }
          GGS_sint  var_cas_result ;
          const GGS_immediatExpression  _temp_10222 = operand_9866->mExpression ;
          if (_temp_10222._isBuilt ()) {
            typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_10222._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_10222 (HERE), var_cas_inRegisterTable, var_cas_result COMMA_SOURCE_FILE_AT_LINE (304)) ;
            }
          }
          if ((((var_cas_result)._operator_strictInf (GGS_sint (true, 0L)))._operator_or ((var_cas_result)._operator_strictSup (GGS_sint (true, 1L)._left_shift_operation (_inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (305))._substract_operation (_inLexique, GGS_sint (true, 1L) COMMA_SOURCE_FILE_AT_LINE (305))))).isBuiltAndTrue ()) {
            operand_9866->mSliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "invalid immediat value associated to the '"))._operator_concat (operand_9866->mSliceName))._operator_concat (GGS_string (true, "' bit field, evaluated as ")))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (306))))._operator_concat (GGS_string (true, " (should be between 0 and ")))._operator_concat (GGS_uint (true, 1U)._left_shift_operation (_inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (307))._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (307)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (307))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (308)) ;
          }
          var_cas_outResult = (var_cas_outResult)._operator_or (var_cas_result._left_shift_operation (_inLexique, var_cas_sliceIndex COMMA_SOURCE_FILE_AT_LINE (309))) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_11281,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11281 != NULL) {
    if (((operand_11281->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (331)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_11281->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_11281->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (332)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (332))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (333)) ;
    }
    var_cas_outBitNumber = operand_11281->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (334)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_11715,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11715 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_11844 = var_cas_inBitSliceTable ;
    if (_temp_11844._isBuilt ()) {
      _temp_11844 (HERE)->method_searchKey (_inLexique, operand_11715->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (345)) ;
    }
    if (((operand_11715->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (346)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_11715->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_11715->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (349)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_11715->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (350)) COMMA_SOURCE_FILE_AT_LINE (350)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@registerExpression.resolveAccess'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__resolveAccess (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_12275,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_ipic_registerExpression & var_cas_outIPICregisterDescription,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12275 != NULL) {
    GGS_string var_cas_assemblyString ;
    var_cas_assemblyString = operand_12275->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
    if (((operand_12275->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_assemblyString.writeString (" + ") ;
      var_cas_assemblyString._dotAssign_operation (operand_12275->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (364))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_uint  var_cas_registerAddress ;
    var_cas_registerAddress = GGS_uint (true, 0U) ;
    GGS_string automatic_var_5 ;
    const GGS_registerTable  _temp_12730 = var_cas_inRegisterTable ;
    if (_temp_12730._isBuilt ()) {
      _temp_12730 (HERE)->method_searchKey (_inLexique, operand_12275->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (370)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_12851 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_12851 = NULL ;
      while (((operand_12851 = enumerator_12851.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_12851) ;
        var_cas_found = ((operand_12851->mValue)._operator_strictInf (var_cas_inAccessBankSplitOffset))._operator_or ((operand_12851->mValue)._operator_supOrEqual (GGS_uint (true, 3840U)._add_operation (_inLexique, var_cas_inAccessBankSplitOffset COMMA_SOURCE_FILE_AT_LINE (373)))) ;
        var_cas_registerAddress = operand_12851->mValue ;
      }
    }
    GGS_bool var_cas_needsBSRaccess ;
    var_cas_needsBSRaccess = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_needsBSRaccess = GGS_bool (true, true) ;
      const GGS_uintlist  _temp_13131 = var_cas_registerAddressList ;
      if (_temp_13131._isBuilt ()) {
        _temp_13131 (HERE)->method_first (_inLexique, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (379)) ;
      }
    }
    var_cas_outIPICregisterDescription = GGS_ipic_registerExpression::constructor_new (var_cas_assemblyString, var_cas_registerAddress._add_operation (_inLexique, operand_12275->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)) COMMA_SOURCE_FILE_AT_LINE (384)), var_cas_needsBSRaccess) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@registerExpression.resolveAccess'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__resolveAccess> gDispatchTableFor__registerExpression__resolveAccess ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__resolveAccess (typeCategoryMethod__registerExpression__resolveAccess inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__resolveAccess.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__resolveAccess
findCategoryMethod__registerExpression__resolveAccess (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__resolveAccess result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__resolveAccess.count ()) {
    result = gDispatchTableFor__registerExpression__resolveAccess (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__resolveAccess (superClassPtr) ;
      gDispatchTableFor__registerExpression__resolveAccess.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableFor__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableFor__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & _inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_14496 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_14496 = NULL ;
    while (((operand_14496 = enumerator_14496.nextObject ()))) {
      macroValidPointer (operand_14496) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_14496->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (424)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (425)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_14704 = operand_14496->mInstruction ;
      if (_temp_14704._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_14704._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_14704 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (427)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_nobanksel * operand_15126,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15126 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_15126->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \n"
        "obank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (458)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_savebank * operand_15865,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15865 != NULL) {
    GGS_registerExpression  var_cas_BSRregister ;
    var_cas_BSRregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "BSR"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_ipic_registerExpression var_cas_BSR_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_16414 = var_cas_BSRregister ;
    if (_temp_16414._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_16414._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_16414 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (480)) ;
      }
    }
    GGS_ipic_registerExpression var_cas_save_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_16640 = operand_15865->mRegister ;
    if (_temp_16640._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_16640._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_16640 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_save_IPICregisterDescription, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (488)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVFF ::constructor_new (_inLexique, operand_15865->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_15865->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (true, false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (502)) ;
    if (((var_cas_ioContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
      operand_15865->mEndOfSaveBankInstruction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (517)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVFF ::constructor_new (_inLexique, operand_15865->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_banksel * operand_17830,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17830 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_17830->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (542)) ;
    }
    if (((operand_17830->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (543)))._operator_strictSup (GGS_uint (true, 15U))).isBuiltAndTrue ()) {
      operand_17830->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "selected bank index should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (545)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }else if (((operand_17830->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (546)))._operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_17830->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "useless instruction: the bank "))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (547))))._operator_concat (GGS_string (true, " is already selected")) COMMA_SOURCE_FILE_AT_LINE (547)) ;
    }else{
      var_cas_ioCurrentBank = operand_17830->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (549)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVLB ::constructor_new (_inLexique, operand_17830->mInstructionLocation, operand_17830->mBankIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_18983,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18983 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_19451 = operand_18983->mRegisterExpression ;
    if (_temp_19451._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_19451._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_19451 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (570)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, operand_18983->mInstructionLocation, operand_18983->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_18983->m_W_isDestination COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_19846,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19846 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_20314 = operand_19846->mRegisterExpression ;
    if (_temp_20314._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_20314._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20314 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (599)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FA ::constructor_new (_inLexique, operand_19846->mInstructionLocation, operand_19846->mFAinstruction, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_20676,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20676 != NULL) {
    GGS_ipic_registerExpression var_cas_sourceIPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_21150 = operand_20676->mSourceRegisterName ;
    if (_temp_21150._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_21150._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21150 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (627)) ;
      }
    }
    GGS_ipic_registerExpression var_cas_destinationIPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_11 ;
    const GGS_registerExpression  _temp_21354 = operand_20676->mDestinationRegisterName ;
    if (_temp_21354._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_21354._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21354 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MOVFF ::constructor_new (_inLexique, operand_20676->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_21754,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21754 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_22255 = operand_21754->mRegisterExpression ;
    if (_temp_22255._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_22255._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22255 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (663)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_22406 = operand_21754->mBitNumber ;
    if (_temp_22406._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_22406._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22406 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (670)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, operand_21754->mInstructionLocation, operand_21754->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_22730,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22730 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  _temp_23248 = var_cas_inRoutineMap ;
    if (_temp_23248._isBuilt ()) {
      _temp_23248 (HERE)->method_searchKey (_inLexique, operand_22730->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (701)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_22730->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (703))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (708))) ;
      }
      operand_22730->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (711)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_22730->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (714)) ;
    }
    if (((var_cas_preservesBank)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JSR ::constructor_new (_inLexique, operand_22730->mInstructionLocation, operand_22730->mTargetLabel, operand_22730->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_24238,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24238 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_12 ;
    GGS_bool automatic_var_13 ;
    const GGS_routineMap  _temp_24702 = var_cas_inRoutineMap ;
    if (_temp_24702._isBuilt ()) {
      _temp_24702 (HERE)->method_searchKey (_inLexique, operand_24238->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_12, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (743)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_24238->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (745))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (750))) ;
      }
      operand_24238->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (753)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_24238->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (756)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_24238->mInstructionLocation, operand_24238->mTargetLabel, operand_24238->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_25627,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25627 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_14 ;
    GGS_bool automatic_var_15 ;
    const GGS_routineMap  _temp_26080 = var_cas_inRoutineMap ;
    if (_temp_26080._isBuilt ()) {
      _temp_26080 (HERE)->method_searchKey (_inLexique, operand_25627->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_14, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (783)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_25627->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (785))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
      }
      operand_25627->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (793)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_25627->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (796)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    if ((operand_25627->mIsBcc).isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }else{
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_25627->mInstructionLocation, var_cas_mode, operand_25627->mConditionalBranch, operand_25627->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_27171,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27171 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_CLRWDT ::constructor_new (_inLexique, operand_27171->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_27786,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27786 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_DAW ::constructor_new (_inLexique, operand_27786->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_28398,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28398 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_NOP ::constructor_new (_inLexique, operand_28398->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_29010,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29010 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_POP ::constructor_new (_inLexique, operand_29010->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_29623,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29623 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_PUSH ::constructor_new (_inLexique, operand_29623->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_30238,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30238 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RESET ::constructor_new (_inLexique, operand_30238->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_30854,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30854 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_SLEEP ::constructor_new (_inLexique, operand_30854->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_31481,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31481 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_31909 = operand_31481->mImmediatExpression ;
    if (_temp_31909._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_31909._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31909 (HERE), var_cas_inRegisterTable, var_cas_result COMMA_SOURCE_FILE_AT_LINE (959)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_31481->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (962))))._operator_concat (GGS_string (true, " (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (963)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, operand_31481->mInstructionLocation, operand_31481->mLiteralInstruction, (var_cas_result)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (968)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_32425,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32425 != NULL) {
    if (((operand_32425->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (986)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_32425->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_32425->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (987)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (987))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (988)) ;
    }
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_33014 = operand_32425->mImmediatExpression ;
    if (_temp_33014._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_33014._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_33014 (HERE), var_cas_inRegisterTable, var_cas_result COMMA_SOURCE_FILE_AT_LINE (990)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 4095L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 0L)))).isBuiltAndTrue ()) {
      operand_32425->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (993))))._operator_concat (GGS_string (true, " (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (994)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_LFSR ::constructor_new (_inLexique, operand_32425->mInstructionLocation, operand_32425->mFSRindex, var_cas_result.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (998)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_33484,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33484 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_TBLRD ::constructor_new (_inLexique, operand_33484->mInstructionLocation, operand_33484->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_34113,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34113 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_TBLWT ::constructor_new (_inLexique, operand_34113->mInstructionLocation, operand_34113->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_34751,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34751 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (1063)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_35517 = operand_34751->mSizeExpression ;
    if (_temp_35517._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_35517._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_35517 (HERE), var_cas_inRegisterTable, var_cas_size COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1067))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (1068)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1069))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (1070)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1070)))._operator_isNotEqual (operand_34751->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1070)))).isBuiltAndTrue ()) {
      operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the constant list length ("))._operator_concat (operand_34751->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1071)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1071))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1071))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (1072)) ;
    }
    GGS_uintlist  var_cas_literalValues ;
    var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_36137 (operand_34751->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_36137 = NULL ;
      while (((operand_36137 = enumerator_36137.nextObject ()))) {
        macroValidPointer (operand_36137) ;
        GGS_sint  var_cas_v ;
        const GGS_immediatExpression  _temp_36177 = operand_36137->mExpression ;
        if (_temp_36177._isBuilt ()) {
          typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_36177._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_36177 (HERE), var_cas_inRegisterTable, var_cas_v COMMA_SOURCE_FILE_AT_LINE (1076)) ;
          }
        }
        if ((((var_cas_v)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_v)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_34751->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "immediate value with index "))._operator_concat (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1078))))._operator_concat (GGS_string (true, " is evaluated as ")))._operator_concat (var_cas_v.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1078))))._operator_concat (GGS_string (true, " (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (1079)) ;
        }
        var_cas_literalValues._addAssign_operation ((var_cas_v)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1080))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_retlw ::constructor_new (_inLexique, operand_34751->mInstructionLocation, var_cas_literalValues, operand_34751->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_36731,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36731 != NULL) {
    if (((operand_36731->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1105)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_36731->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (1106)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_MNOP ::constructor_new (_inLexique, operand_36731->mInstructionLocation, operand_36731->mOccurrenceFactor COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_37518,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37518 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_37904 (operand_37518->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_37904 = NULL ;
      while (((operand_37904 = enumerator_37904.nextObject ()))) {
        macroValidPointer (operand_37904) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_16 ;
        GGS_bool automatic_var_17 ;
        const GGS_routineMap  _temp_37983 = var_cas_inRoutineMap ;
        if (_temp_37983._isBuilt ()) {
          _temp_37983 (HERE)->method_searchKey (_inLexique, operand_37904->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_16, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (1133)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_37904->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1135))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1140))) ;
          }
          operand_37904->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1143)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_37904->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra, the '"))._operator_concat (operand_37904->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (1146)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_37518->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_37518->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (1155)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_39072 = operand_37518->mSizeExpression ;
    if (_temp_39072._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_39072._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_39072 (HERE), var_cas_inRegisterTable, var_cas_size COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_37518->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1159))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (1160)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_37518->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1161))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (1162)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1162)))._operator_isNotEqual (operand_37518->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1162)))).isBuiltAndTrue ()) {
      operand_37518->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_37518->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (1164)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_bra ::constructor_new (_inLexique, operand_37518->mInstructionLocation, operand_37518->mTargetLabels, operand_37518->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_39879,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39879 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_40265 (operand_39879->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_40265 = NULL ;
      while (((operand_40265 = enumerator_40265.nextObject ()))) {
        macroValidPointer (operand_40265) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_18 ;
        GGS_bool automatic_var_19 ;
        const GGS_routineMap  _temp_40344 = var_cas_inRoutineMap ;
        if (_temp_40344._isBuilt ()) {
          _temp_40344 (HERE)->method_searchKey (_inLexique, operand_40265->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_18, automatic_var_19 COMMA_SOURCE_FILE_AT_LINE (1191)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_40265->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1193))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1198))) ;
          }
          operand_40265->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1201)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_40265->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_40265->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (1204)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_39879->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_39879->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (1213)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_41436 = operand_39879->mSizeExpression ;
    if (_temp_41436._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_41436._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_41436 (HERE), var_cas_inRegisterTable, var_cas_size COMMA_SOURCE_FILE_AT_LINE (1215)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_39879->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1217))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 64L))).isBuiltAndTrue ()) {
      operand_39879->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1219))))._operator_concat (GGS_string (true, ") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (1220)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1220)))._operator_isNotEqual (operand_39879->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1220)))).isBuiltAndTrue ()) {
      operand_39879->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_39879->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (1222)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_computed_goto ::constructor_new (_inLexique, operand_39879->mInstructionLocation, operand_39879->mTargetLabels, operand_39879->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_42236,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42236 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_42236->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_42236->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1251)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1254))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1255)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_42236->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    ::routine_handleInstructionList (_inLexique,  operand_42236->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_42236->mEndOfInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1272)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_42236->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_42236->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_43953,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43953 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_43953->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_20 ;
    const GGS_registerExpression  _temp_44718 = operand_43953->mRegisterExpression ;
    if (_temp_44718._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_44718._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_44718 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (1301)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FA ::constructor_new (_inLexique, operand_43953->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_45053 = operand_43953->mInstruction ;
    if (_temp_45053._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_45053._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45053 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1314)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_45440,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45440 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_45899 = operand_45440->mRegisterExpression ;
    if (_temp_45899._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_45899._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45899 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_46050 = operand_45440->mBitNumber ;
    if (_temp_46050._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_46050._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_46050 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BitTestSkip ::constructor_new (_inLexique, operand_45440->mInstructionLocation, operand_45440->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_46359 = operand_45440->mInstruction ;
    if (_temp_46359._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_46359._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_46359 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1363)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableFor__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_47366,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47366 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (_inLexique,  operand_47366->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1411)) ;
    }else{
      var_cas_condition = operand_47366->mCondition ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_48203,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48203 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_48450,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48450 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_48450->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1446)) ;
    }else{
      var_cas_comparison = operand_48450->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_21 ;
    const GGS_registerExpression  _temp_49019 = operand_48450->mRegisterExpression ;
    if (_temp_49019._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_49019._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49019 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_21 COMMA_SOURCE_FILE_AT_LINE (1452)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_49469,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49469 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_49469->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1476)) ;
    }else{
      var_cas_comparison = operand_49469->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (_inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1480)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_49936,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49936 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_22 ;
    const GGS_registerExpression  _temp_50317 = operand_49936->mRegisterExpression ;
    if (_temp_50317._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_50317._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_50317 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_22 COMMA_SOURCE_FILE_AT_LINE (1496)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_49936->mIncrement, operand_49936->m_W_isDestination, (operand_49936->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_50829,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50829 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_51070,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51070 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_23 ;
    const GGS_registerExpression  _temp_51451 = operand_51070->mRegisterExpression ;
    if (_temp_51451._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_51451._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_51451 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (1536)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_51070->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_51913,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51913 != NULL) {
    if (((operand_51913->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (true, 3U) ;
    }else{
      var_cas_outInstructionCount = GGS_uint (true, 2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_52240,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52240 != NULL) {
    const GGS_conditionExpression  _temp_52564 = operand_52240->mCondition ;
    if (_temp_52564._isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_52564._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_52564 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch)._operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1577)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_52918,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52918 != NULL) {
    const GGS_conditionExpression  _temp_53031 = operand_52918->mCondition ;
    if (_temp_53031._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_53031._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_53031 (HERE), (var_cas_inComplementaryBranch)._operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1595)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_53226,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53226 != NULL) {
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      const GGS_conditionExpression  _temp_53589 = operand_53226->mLeftExpression ;
      if (_temp_53589._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_53589._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_53589 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1614)) ;
        }
      }
      const GGS_conditionExpression  _temp_53856 = operand_53226->mRightExpression ;
      if (_temp_53856._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_53856._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_53856 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1624)) ;
        }
      }
    }else{
      GGS_string var_cas_label0 ;
      var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1635))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1635)) ;
      const GGS_conditionExpression  _temp_54215 = operand_53226->mLeftExpression ;
      if (_temp_54215._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_54215._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_54215 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1636)) ;
        }
      }
      const GGS_conditionExpression  _temp_54475 = operand_53226->mRightExpression ;
      if (_temp_54475._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_54475._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_54475 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1646)) ;
        }
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_54944,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54944 != NULL) {
    GGS_uint  var_cas_countLeft ;
    const GGS_conditionExpression  _temp_55082 = operand_54944->mLeftExpression ;
    if (_temp_55082._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_55082._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_55082 (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1667)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    const GGS_conditionExpression  _temp_55206 = operand_54944->mLeftExpression ;
    if (_temp_55206._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_55206._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_55206 (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1672)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft._add_operation (_inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1676)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_55460,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55460 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_55874 = operand_55460->mRegisterExpression ;
    if (_temp_55874._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_55874._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_55874 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1693)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_56025 = operand_55460->mBitNumber ;
    if (_temp_56025._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_56025._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_56025 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1700)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BitTestSkip ::constructor_new (_inLexique, var_cas_inInstructionLocation, (operand_55460->mBTFSSinstruction)._operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_56581,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56581 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_56818,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56818 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition ;
    var_cas_generateComplementaryCondition = GGS_bool (true, false) ;
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (1738)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      const GGS_conditionExpression  _temp_57362 = operand_56818->mIfCondition ;
      if (_temp_57362._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_57362._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_57362 (HERE), GGS_bool (true, true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1739)) ;
        }
      }
      if (((operand_56818->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1740)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_directCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1741)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      const GGS_conditionExpression  _temp_57547 = operand_56818->mIfCondition ;
      if (_temp_57547._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_57547._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_57547 (HERE), GGS_bool (true, false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1743)) ;
        }
      }
      if (((operand_56818->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1744)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_complementaryCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) ;
      }
      if (((var_cas_complementaryCount)._operator_strictInf (var_cas_directCount)).isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true, true) ;
        var_cas_ioListFileContents.writeString ("  line ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1749)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1749))) ;
        var_cas_ioListFileContents.writeString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1750)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1750))) ;
        var_cas_ioListFileContents.writeString (" instruction") ;
        if (((var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1751)))._operator_strictSup (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("s") ;
        }
        var_cas_ioListFileContents.writeString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank ;
    var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank ;
    var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    if ((var_cas_generateComplementaryCondition).isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1763))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1764))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1764)) ;
      const GGS_conditionExpression  _temp_58612 = operand_56818->mIfCondition ;
      if (_temp_58612._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_58612._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_58612 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_56818->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1766)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_56818->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1777)) ;
      if (((operand_56818->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1791)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_56818->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_56818->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_56818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_56818->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1795)) ;
      if (((operand_56818->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1808)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_56818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }else{
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1813))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1813)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1814))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) ;
      const GGS_conditionExpression  _temp_60385 = operand_56818->mIfCondition ;
      if (_temp_60385._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_60385._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_60385 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_56818->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1816)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_56818->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1827)) ;
      if (((operand_56818->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1841)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_56818->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_56818->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_56818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_56818->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1845)) ;
      if (((operand_56818->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1858)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_56818->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }
    if (((var_cas_elseBranchFinalBank)._operator_isEqual (var_cas_thenBranchFinalBank)).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else{
      operand_56818->mEndOfElsePartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence)._operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_62367,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62367 != NULL) {
    GGS_string var_cas_labelInstructionBegin ;
    var_cas_labelInstructionBegin = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1887))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1887)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_62367->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_62367->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1892)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_62367->mEndOfRepeatedInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1907)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_63493 (operand_62367->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_63493 = NULL ;
      while (((operand_63493 = enumerator_63493.nextObject ()))) {
        macroValidPointer (operand_63493) ;
        if (((operand_63493->mInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1910)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          const GGS_conditionExpression  _temp_63590 = operand_63493->mCondition ;
          if (_temp_63590._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_63590._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_63590 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_62367->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1911)) ;
            }
          }
        }else{
          GGS_string var_cas_nextBranchLabel ;
          var_cas_nextBranchLabel = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1922))) ;
          var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1922)) ;
          const GGS_conditionExpression  _temp_63985 = operand_63493->mCondition ;
          if (_temp_63985._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_63985._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_63985 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_62367->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1923)) ;
            }
          }
          GGS_uint  var_cas_bank ;
          var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (_inLexique,  operand_63493->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1934)) ;
          if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
            operand_63493->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1949)) ;
          }
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_62367->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_62367->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_nextBranchLabel, operand_62367->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_65178,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65178 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_65178->mIncrement)._operator_and (operand_65178->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_65178->mIncrement)._operator_and ((operand_65178->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_65178->mIncrement)._operator_not ())._operator_and (operand_65178->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_24 ;
    const GGS_registerExpression  _temp_66009 = operand_65178->mRegisterExpression ;
    if (_temp_66009._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_66009._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_66009 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_24 COMMA_SOURCE_FILE_AT_LINE (1983)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, operand_65178->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_65178->m_W_isDestination COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_66375 = operand_65178->mInstruction ;
    if (_temp_66375._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_66375._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_66375 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1998)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "buildIPICAssemblyInstructionList"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildIPICAssemblyInstructionList (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildIPICAssemblyInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages ;
  var_cas_generationOptimizationMessages = GGS_string (true, "") ;
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDefinitionList::cEnumerator enumerator_67134 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2026)), true) ;
    const GGS_routineDefinitionList::cElement * operand_67134 = NULL ;
    while (((operand_67134 = enumerator_67134.nextObject ()))) {
      macroValidPointer (operand_67134) ;
      if ((((operand_67134->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2027)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_67134->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2027)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_67134->mRequiredBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (2029)) ;
      }
      if ((((operand_67134->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2030)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_67134->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2030)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_67134->mReturnedBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (2032)) ;
      }
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_67134->mRoutineName, operand_67134->mIsNoReturn, operand_67134->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2033)), operand_67134->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2033)), operand_67134->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (2033)) ;
    }
  }
  if ((var_cas_routineMap.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (2036))).isBuiltAndTrue ()) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_25 ;
    GGS_bool automatic_var_26 ;
    const GGS_routineMap  _temp_67848 = var_cas_routineMap ;
    if (_temp_67848._isBuilt ()) {
      _temp_67848 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_25, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (2039)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (2042)) ;
    }
    if (((var_cas_requiredBank)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (2045)) ;
    }
  }else{
    var_cas_inPiccoloModel.reader_mEndOfProgram (_inLexique COMMA_SOURCE_FILE_AT_LINE (2047)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (2048)) ;
  }
  var_cas_outGeneratedInstructionList = GGS_ipic_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  if (((var_cas_inHasLowInterrupt)._operator_and (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_69168 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2062)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_69168 = NULL ;
      while (((operand_69168 = enumerator_69168.nextObject ()))) {
        macroValidPointer (operand_69168) ;
        if (((operand_69168->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2063)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_69168->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_69168->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2066)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_69168->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2081)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), operand_69168->mFastReturn COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_70399 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2094)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_70399 = NULL ;
      while (((operand_70399 = enumerator_70399.nextObject ()))) {
        macroValidPointer (operand_70399) ;
        if (((operand_70399->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2095)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_70399->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_70399->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2098)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_70399->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2113)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_71343 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2120)), true) ;
    const GGS_routineDefinitionList::cElement * operand_71343 = NULL ;
    while (((operand_71343 = enumerator_71343.nextObject ()))) {
      macroValidPointer (operand_71343) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_71343->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2122)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_71343->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_71343->mRoutineName COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_71343->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_71343->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (2130)) ;
      if (((((operand_71343->mIsNoReturn)._operator_not ())._operator_and ((operand_71343->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2143)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))))._operator_and ((var_cas_currentBank)._operator_isNotEqual (operand_71343->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2143))))).isBuiltAndTrue ()) {
        operand_71343->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "execution will not set BSR to "))._operator_concat (operand_71343->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2144)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2144))) COMMA_SOURCE_FILE_AT_LINE (2145)) ;
      }
      if (((operand_71343->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_71343->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (2148)) ;
      }
      if (((operand_71343->mIsNoReturn)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, operand_71343->mRoutineName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2151)) COMMA_HERE)) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister ;
  var_cas_WREGregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_27 ;
  const GGS_registerExpression  _temp_72836 = var_cas_WREGregister ;
  if (_temp_72836._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_72836._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_72836 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_27 COMMA_SOURCE_FILE_AT_LINE (2157)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister ;
  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_28 ;
  const GGS_registerExpression  _temp_73151 = var_cas_TOSLregister ;
  if (_temp_73151._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_73151._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_73151 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_28 COMMA_SOURCE_FILE_AT_LINE (2166)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister ;
  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_29 ;
  const GGS_registerExpression  _temp_73466 = var_cas_TOSHregister ;
  if (_temp_73466._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_73466._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_73466 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_29 COMMA_SOURCE_FILE_AT_LINE (2175)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister ;
  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSU"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_30 ;
  const GGS_registerExpression  _temp_73781 = var_cas_TOSUregister ;
  if (_temp_73781._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_73781._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_73781 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_30 COMMA_SOURCE_FILE_AT_LINE (2184)) ;
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2191))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2200))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2203)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2203)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSL_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_uint (true, 0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSH_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSU_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (2238)))).isBuiltAndTrue ()) {
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2239))) ;
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("*") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2240))) ;
    var_cas_ioListFileContents.writeString ("*\n") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2241))) ;
    var_cas_ioListFileContents.writeString ("\n"
      "\n") ;
    if (((var_cas_generationOptimizationMessages.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (2242)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioListFileContents.writeString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.writeString ("\n") ;
    }
    var_cas_ioListFileContents.writeString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (true, 0U) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = GGS_uint (true, 0U) ;
    {
      GGS_ipic_instructionList::cEnumerator enumerator_76272 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic_instructionList::cElement * operand_76272 = NULL ;
      while (((operand_76272 = enumerator_76272.nextObject ()))) {
        macroValidPointer (operand_76272) ;
        const GGS_ipic_instruction  _temp_76313 = operand_76272->mInstruction ;
        if (_temp_76313._isBuilt ()) {
          _temp_76313 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2251)) ;
        }
        var_cas_ioListFileContents._dotAssign_operation (var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2252)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 5U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2252))) ;
        var_cas_ioListFileContents.writeString (": ") ;
        const GGS_ipic_instruction  _temp_76458 = operand_76272->mInstruction ;
        if (_temp_76458._isBuilt ()) {
          _temp_76458 (HERE)->method_displayIPICinstruction (_inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2253)) ;
        }
        var_cas_ioListFileContents.writeString ("\n") ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (2255)) ;
      }
    }
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2258))) ;
    var_cas_ioListFileContents.writeString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildIPICAssemblyInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_buildIPICAssemblyInstructionList (void) {
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatInteger__eval, gClassInfoFor__immediatInteger.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRegister__eval, gClassInfoFor__immediatRegister.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAdd__eval, gClassInfoFor__immediatAdd.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSub__eval, gClassInfoFor__immediatSub.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMul__eval, gClassInfoFor__immediatMul.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatDiv__eval, gClassInfoFor__immediatDiv.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMod__eval, gClassInfoFor__immediatMod.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAnd__eval, gClassInfoFor__immediatAnd.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatOr__eval, gClassInfoFor__immediatOr.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatXor__eval, gClassInfoFor__immediatXor.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLeftShift__eval, gClassInfoFor__immediatLeftShift.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRightShift__eval, gClassInfoFor__immediatRightShift.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatEqualTest__eval, gClassInfoFor__immediatEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNotEqualTest__eval, gClassInfoFor__immediatNotEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterOrEqualTest__eval, gClassInfoFor__immediatGreaterOrEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerOrEqualTest__eval, gClassInfoFor__immediatLowerOrEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterTest__eval, gClassInfoFor__immediatGreaterTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerTest__eval, gClassInfoFor__immediatLowerTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNegate__eval, gClassInfoFor__immediatNegate.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatComplement__eval, gClassInfoFor__immediatComplement.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSlice__eval, gClassInfoFor__immediatSlice.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__registerExpression__resolveAccess (category_method__registerExpression__resolveAccess, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_buildIPICAssemblyInstructionList (prologueRoutineFor_buildIPICAssemblyInstructionList,
                                   NULL) ;

//---------------------------------------------------------------------------*

