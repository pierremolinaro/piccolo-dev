//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'generic_metamodel.cpp'                        *
//             Generated by version version GALGAS_BETA_VERSION              *
//                      july 10th, 2011, at 15h15'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "generic_metamodel.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "generic_metamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

cMapElement_bitSliceTable::cMapElement_bitSliceTable (const GALGAS_lstring & inKey,
                                                      const GALGAS_uint & in_mSliceIndex,
                                                      const GALGAS_uint & in_mSliceSize
                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mSliceIndex (in_mSliceIndex),
mAttribute_mSliceSize (in_mSliceSize) {
}

//---------------------------------------------------------------------------*

bool cMapElement_bitSliceTable::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mSliceIndex.isValid () && mAttribute_mSliceSize.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_bitSliceTable::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_bitSliceTable (mAttribute_lkey, mAttribute_mSliceIndex, mAttribute_mSliceSize COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_bitSliceTable::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSliceIndex" ":" ;
  mAttribute_mSliceIndex.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSliceSize" ":" ;
  mAttribute_mSliceSize.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_bitSliceTable::compare (const cCollectionElement * inOperand) const {
  cMapElement_bitSliceTable * operand = (cMapElement_bitSliceTable *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mSliceIndex.objectCompare (operand->mAttribute_mSliceIndex) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSliceSize.objectCompare (operand->mAttribute_mSliceSize) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable::GALGAS_bitSliceTable (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable::GALGAS_bitSliceTable (const GALGAS_bitSliceTable & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable & GALGAS_bitSliceTable::operator = (const GALGAS_bitSliceTable & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_bitSliceTable::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_bitSliceTable result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_bitSliceTable::constructor_mapWithMapToOverride (const GALGAS_bitSliceTable & inMapToOverride
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_bitSliceTable result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_bitSliceTable::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_bitSliceTable result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_bitSliceTable::modifier_insertKey (GALGAS_lstring inKey,
                                               GALGAS_uint inArgument0,
                                               GALGAS_uint inArgument1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_bitSliceTable * p = NULL ;
  macroMyNew (p, cMapElement_bitSliceTable (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' slice is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_bitSliceTable_searchKey = "the '%K' slice is not declared" ;

//---------------------------------------------------------------------------*

void GALGAS_bitSliceTable::method_searchKey (GALGAS_lstring inKey,
                                             GALGAS_uint & outArgument0,
                                             GALGAS_uint & outArgument1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_bitSliceTable * p = (const cMapElement_bitSliceTable *) performSearch (inKey,
                                                                                             inCompiler,
                                                                                             kSearchErrorMessage_bitSliceTable_searchKey
                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_bitSliceTable) ;
    outArgument0 = p->mAttribute_mSliceIndex ;
    outArgument1 = p->mAttribute_mSliceSize ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_bitSliceTable::reader_mSliceIndexForKey (const GALGAS_string & inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_bitSliceTable * p = (const cMapElement_bitSliceTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_bitSliceTable) ;
    result = p->mAttribute_mSliceIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_bitSliceTable::reader_mSliceSizeForKey (const GALGAS_string & inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_bitSliceTable * p = (const cMapElement_bitSliceTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_bitSliceTable) ;
    result = p->mAttribute_mSliceSize ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bitSliceTable::modifier_setMSliceIndexForKey (GALGAS_uint inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_bitSliceTable * p = (cMapElement_bitSliceTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_bitSliceTable) ;
    p->mAttribute_mSliceIndex = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_bitSliceTable::modifier_setMSliceSizeForKey (GALGAS_uint inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_bitSliceTable * p = (cMapElement_bitSliceTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_bitSliceTable) ;
    p->mAttribute_mSliceSize = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_bitSliceTable * GALGAS_bitSliceTable::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                            const GALGAS_string & inKey
                                                                                            COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_bitSliceTable * result = (cMapElement_bitSliceTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_bitSliceTable) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_bitSliceTable * GALGAS_bitSliceTable::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                               const GALGAS_lstring & inKey
                                                                                               COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_bitSliceTable_searchKey COMMA_THERE) ;
  cMapElement_bitSliceTable * result = (cMapElement_bitSliceTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_bitSliceTable) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_bitSliceTable::cEnumerator_bitSliceTable (const GALGAS_bitSliceTable & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_bitSliceTable::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_bitSliceTable::current_mSliceIndex (LOCATION_ARGS) const {
  const cMapElement_bitSliceTable * p = (const cMapElement_bitSliceTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_bitSliceTable) ;
  return p->mAttribute_mSliceIndex ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_bitSliceTable::current_mSliceSize (LOCATION_ARGS) const {
  const cMapElement_bitSliceTable * p = (const cMapElement_bitSliceTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_bitSliceTable) ;
  return p->mAttribute_mSliceSize ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @bitSliceTable type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bitSliceTable ("bitSliceTable",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bitSliceTable::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitSliceTable ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bitSliceTable::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bitSliceTable (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_bitSliceTable::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler,
                                                          const GALGAS_location & inErrorLocation
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_bitSliceTable result ;
  const GALGAS_bitSliceTable * p = (const GALGAS_bitSliceTable *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bitSliceTable *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bitSliceTable", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@declarationInRamList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_declarationInRamList : public cCollectionElement {
//--- List attributes
  public : GALGAS_declarationInRam mAttribute_mDeclarationInRAM ;

//--- Constructor
  public : cCollectionElement_declarationInRamList (const GALGAS_declarationInRam & in_mDeclarationInRAM
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_declarationInRamList::cCollectionElement_declarationInRamList (const GALGAS_declarationInRam & in_mDeclarationInRAM
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mDeclarationInRAM (in_mDeclarationInRAM) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_declarationInRamList::isValid (void) const {
  return mAttribute_mDeclarationInRAM.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_declarationInRamList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_declarationInRamList (mAttribute_mDeclarationInRAM COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_declarationInRamList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeclarationInRAM" ":" ;
  mAttribute_mDeclarationInRAM.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_declarationInRamList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_declarationInRamList * operand = (cCollectionElement_declarationInRamList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mDeclarationInRAM.objectCompare (operand->mAttribute_mDeclarationInRAM) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList::GALGAS_declarationInRamList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList::GALGAS_declarationInRamList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_declarationInRamList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::constructor_listWithValue (const GALGAS_declarationInRam & inOperand0
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_declarationInRamList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_declarationInRamList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_declarationInRam & in_mDeclarationInRAM
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_declarationInRamList * p = NULL ;
  macroMyNew (p, cCollectionElement_declarationInRamList (in_mDeclarationInRAM COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::addAssign_operation (const GALGAS_declarationInRam & inOperand0
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_declarationInRamList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::modifier_prependValue (GALGAS_declarationInRam inOperand0
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_declarationInRamList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::modifier_popFirst (GALGAS_declarationInRam & outOperand0,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_declarationInRamList * p = (cCollectionElement_declarationInRamList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_declarationInRamList) ;
    outOperand0 = p->mAttribute_mDeclarationInRAM ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::modifier_popLast (GALGAS_declarationInRam & outOperand0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_declarationInRamList * p = (cCollectionElement_declarationInRamList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_declarationInRamList) ;
    outOperand0 = p->mAttribute_mDeclarationInRAM ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::method_first (GALGAS_declarationInRam & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_declarationInRamList * p = (cCollectionElement_declarationInRamList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_declarationInRamList) ;
    outOperand0 = p->mAttribute_mDeclarationInRAM ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::method_last (GALGAS_declarationInRam & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_declarationInRamList * p = (cCollectionElement_declarationInRamList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_declarationInRamList) ;
    outOperand0 = p->mAttribute_mDeclarationInRAM ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::operator_concat (const GALGAS_declarationInRamList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_declarationInRamList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                  const GALGAS_uint & inLength,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_declarationInRamList result = GALGAS_declarationInRamList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_declarationInRamList result = GALGAS_declarationInRamList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_declarationInRamList::dotAssign_operation (const GALGAS_declarationInRamList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRam GALGAS_declarationInRamList::reader_mDeclarationInRAMAtIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_declarationInRamList * p = (cCollectionElement_declarationInRamList *) attributes.ptr () ;
  GALGAS_declarationInRam result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_declarationInRamList) ;
    result = p->mAttribute_mDeclarationInRAM ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_declarationInRamList::cEnumerator_declarationInRamList (const GALGAS_declarationInRamList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRam cEnumerator_declarationInRamList::current_mDeclarationInRAM (LOCATION_ARGS) const {
  const cCollectionElement_declarationInRamList * p = (const cCollectionElement_declarationInRamList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_declarationInRamList) ;
  return p->mAttribute_mDeclarationInRAM ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @declarationInRamList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declarationInRamList ("declarationInRamList",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declarationInRamList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declarationInRamList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declarationInRamList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declarationInRamList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_declarationInRamList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_declarationInRamList result ;
  const GALGAS_declarationInRamList * p = (const GALGAS_declarationInRamList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declarationInRamList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "declarationInRamList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@commonBranchList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_commonBranchList : public cCollectionElement {
//--- List attributes
  public : GALGAS_declarationInRamList mAttribute_mDeclarations ;
  public : GALGAS_location mAttribute_mEndOfBranchLocation ;

//--- Constructor
  public : cCollectionElement_commonBranchList (const GALGAS_declarationInRamList & in_mDeclarations,
                                                const GALGAS_location & in_mEndOfBranchLocation
                                                COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_commonBranchList::cCollectionElement_commonBranchList (const GALGAS_declarationInRamList & in_mDeclarations,
                                                                          const GALGAS_location & in_mEndOfBranchLocation
                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mDeclarations (in_mDeclarations),
mAttribute_mEndOfBranchLocation (in_mEndOfBranchLocation) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_commonBranchList::isValid (void) const {
  return mAttribute_mDeclarations.isValid () && mAttribute_mEndOfBranchLocation.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_commonBranchList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_commonBranchList (mAttribute_mDeclarations, mAttribute_mEndOfBranchLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_commonBranchList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeclarations" ":" ;
  mAttribute_mDeclarations.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEndOfBranchLocation" ":" ;
  mAttribute_mEndOfBranchLocation.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_commonBranchList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_commonBranchList * operand = (cCollectionElement_commonBranchList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mDeclarations.objectCompare (operand->mAttribute_mDeclarations) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfBranchLocation.objectCompare (operand->mAttribute_mEndOfBranchLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList::GALGAS_commonBranchList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList::GALGAS_commonBranchList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_commonBranchList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::constructor_listWithValue (const GALGAS_declarationInRamList & inOperand0,
                                                                            const GALGAS_location & inOperand1
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_commonBranchList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_commonBranchList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                         const GALGAS_declarationInRamList & in_mDeclarations,
                                                         const GALGAS_location & in_mEndOfBranchLocation
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_commonBranchList * p = NULL ;
  macroMyNew (p, cCollectionElement_commonBranchList (in_mDeclarations,
                                                         in_mEndOfBranchLocation COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::addAssign_operation (const GALGAS_declarationInRamList & inOperand0,
                                                   const GALGAS_location & inOperand1
                                                   COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_commonBranchList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::modifier_prependValue (GALGAS_declarationInRamList inOperand0,
                                                     GALGAS_location inOperand1
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_commonBranchList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::modifier_popFirst (GALGAS_declarationInRamList & outOperand0,
                                                 GALGAS_location & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    outOperand0 = p->mAttribute_mDeclarations ;
    outOperand1 = p->mAttribute_mEndOfBranchLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::modifier_popLast (GALGAS_declarationInRamList & outOperand0,
                                                GALGAS_location & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    outOperand0 = p->mAttribute_mDeclarations ;
    outOperand1 = p->mAttribute_mEndOfBranchLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::method_first (GALGAS_declarationInRamList & outOperand0,
                                            GALGAS_location & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    outOperand0 = p->mAttribute_mDeclarations ;
    outOperand1 = p->mAttribute_mEndOfBranchLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::method_last (GALGAS_declarationInRamList & outOperand0,
                                           GALGAS_location & outOperand1,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    outOperand0 = p->mAttribute_mDeclarations ;
    outOperand1 = p->mAttribute_mEndOfBranchLocation ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::operator_concat (const GALGAS_commonBranchList & inOperand
                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_commonBranchList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                          const GALGAS_uint & inLength,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_commonBranchList result = GALGAS_commonBranchList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_commonBranchList result = GALGAS_commonBranchList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_commonBranchList::dotAssign_operation (const GALGAS_commonBranchList inOperand
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_commonBranchList::reader_mDeclarationsAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  GALGAS_declarationInRamList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    result = p->mAttribute_mDeclarations ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_commonBranchList::reader_mEndOfBranchLocationAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_commonBranchList * p = (cCollectionElement_commonBranchList *) attributes.ptr () ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_commonBranchList) ;
    result = p->mAttribute_mEndOfBranchLocation ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_commonBranchList::cEnumerator_commonBranchList (const GALGAS_commonBranchList & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList cEnumerator_commonBranchList::current_mDeclarations (LOCATION_ARGS) const {
  const cCollectionElement_commonBranchList * p = (const cCollectionElement_commonBranchList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_commonBranchList) ;
  return p->mAttribute_mDeclarations ;
}

//---------------------------------------------------------------------------*

GALGAS_location cEnumerator_commonBranchList::current_mEndOfBranchLocation (LOCATION_ARGS) const {
  const cCollectionElement_commonBranchList * p = (const cCollectionElement_commonBranchList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_commonBranchList) ;
  return p->mAttribute_mEndOfBranchLocation ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @commonBranchList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_commonBranchList ("commonBranchList",
                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_commonBranchList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_commonBranchList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_commonBranchList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_commonBranchList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonBranchList::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler,
                                                                const GALGAS_location & inErrorLocation
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_commonBranchList result ;
  const GALGAS_commonBranchList * p = (const GALGAS_commonBranchList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_commonBranchList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "commonBranchList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@ramDefinitionList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_ramDefinitionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mBankName ;
  public : GALGAS_declarationInRamList mAttribute_mDeclaration ;

//--- Constructor
  public : cCollectionElement_ramDefinitionList (const GALGAS_lstring & in_mBankName,
                                                 const GALGAS_declarationInRamList & in_mDeclaration
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_ramDefinitionList::cCollectionElement_ramDefinitionList (const GALGAS_lstring & in_mBankName,
                                                                            const GALGAS_declarationInRamList & in_mDeclaration
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mBankName (in_mBankName),
mAttribute_mDeclaration (in_mDeclaration) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_ramDefinitionList::isValid (void) const {
  return mAttribute_mBankName.isValid () && mAttribute_mDeclaration.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_ramDefinitionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_ramDefinitionList (mAttribute_mBankName, mAttribute_mDeclaration COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_ramDefinitionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBankName" ":" ;
  mAttribute_mBankName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDeclaration" ":" ;
  mAttribute_mDeclaration.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_ramDefinitionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_ramDefinitionList * operand = (cCollectionElement_ramDefinitionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mBankName.objectCompare (operand->mAttribute_mBankName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDeclaration.objectCompare (operand->mAttribute_mDeclaration) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList::GALGAS_ramDefinitionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList::GALGAS_ramDefinitionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_ramDefinitionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_declarationInRamList & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_ramDefinitionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_ramDefinitionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mBankName,
                                                          const GALGAS_declarationInRamList & in_mDeclaration
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_ramDefinitionList * p = NULL ;
  macroMyNew (p, cCollectionElement_ramDefinitionList (in_mBankName,
                                                          in_mDeclaration COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_declarationInRamList & inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ramDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                      GALGAS_declarationInRamList inOperand1
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_ramDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_declarationInRamList & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    outOperand0 = p->mAttribute_mBankName ;
    outOperand1 = p->mAttribute_mDeclaration ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_declarationInRamList & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    outOperand0 = p->mAttribute_mBankName ;
    outOperand1 = p->mAttribute_mDeclaration ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_declarationInRamList & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    outOperand0 = p->mAttribute_mBankName ;
    outOperand1 = p->mAttribute_mDeclaration ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_declarationInRamList & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    outOperand0 = p->mAttribute_mBankName ;
    outOperand1 = p->mAttribute_mDeclaration ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::operator_concat (const GALGAS_ramDefinitionList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_ramDefinitionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                            const GALGAS_uint & inLength,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_ramDefinitionList result = GALGAS_ramDefinitionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_ramDefinitionList result = GALGAS_ramDefinitionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_ramDefinitionList::dotAssign_operation (const GALGAS_ramDefinitionList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_ramDefinitionList::reader_mBankNameAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    result = p->mAttribute_mBankName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList GALGAS_ramDefinitionList::reader_mDeclarationAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_ramDefinitionList * p = (cCollectionElement_ramDefinitionList *) attributes.ptr () ;
  GALGAS_declarationInRamList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_ramDefinitionList) ;
    result = p->mAttribute_mDeclaration ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_ramDefinitionList::cEnumerator_ramDefinitionList (const GALGAS_ramDefinitionList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_ramDefinitionList::current_mBankName (LOCATION_ARGS) const {
  const cCollectionElement_ramDefinitionList * p = (const cCollectionElement_ramDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_ramDefinitionList) ;
  return p->mAttribute_mBankName ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRamList cEnumerator_ramDefinitionList::current_mDeclaration (LOCATION_ARGS) const {
  const cCollectionElement_ramDefinitionList * p = (const cCollectionElement_ramDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_ramDefinitionList) ;
  return p->mAttribute_mDeclaration ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @ramDefinitionList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ramDefinitionList ("ramDefinitionList",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ramDefinitionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ramDefinitionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ramDefinitionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ramDefinitionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_ramDefinitionList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_ramDefinitionList result ;
  const GALGAS_ramDefinitionList * p = (const GALGAS_ramDefinitionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ramDefinitionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ramDefinitionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for element of '@configSettingList' list               *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_configSettingList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mSettingName ;
  public : GALGAS_lstring mAttribute_mSettingValue ;

//--- Constructor
  public : cCollectionElement_configSettingList (const GALGAS_lstring & in_mSettingName,
                                                 const GALGAS_lstring & in_mSettingValue
                                                 COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_configSettingList::cCollectionElement_configSettingList (const GALGAS_lstring & in_mSettingName,
                                                                            const GALGAS_lstring & in_mSettingValue
                                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mSettingName (in_mSettingName),
mAttribute_mSettingValue (in_mSettingValue) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_configSettingList::isValid (void) const {
  return mAttribute_mSettingName.isValid () && mAttribute_mSettingValue.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_configSettingList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_configSettingList (mAttribute_mSettingName, mAttribute_mSettingValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_configSettingList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSettingName" ":" ;
  mAttribute_mSettingName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSettingValue" ":" ;
  mAttribute_mSettingValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_configSettingList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_configSettingList * operand = (cCollectionElement_configSettingList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mSettingName.objectCompare (operand->mAttribute_mSettingName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSettingValue.objectCompare (operand->mAttribute_mSettingValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList::GALGAS_configSettingList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList::GALGAS_configSettingList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_configSettingList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_lstring & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_configSettingList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_configSettingList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                          const GALGAS_lstring & in_mSettingName,
                                                          const GALGAS_lstring & in_mSettingValue
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_configSettingList * p = NULL ;
  macroMyNew (p, cCollectionElement_configSettingList (in_mSettingName,
                                                          in_mSettingValue COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                    const GALGAS_lstring & inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_configSettingList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                      GALGAS_lstring inOperand1
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_configSettingList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                  GALGAS_lstring & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    outOperand0 = p->mAttribute_mSettingName ;
    outOperand1 = p->mAttribute_mSettingValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                 GALGAS_lstring & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    outOperand0 = p->mAttribute_mSettingName ;
    outOperand1 = p->mAttribute_mSettingValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::method_first (GALGAS_lstring & outOperand0,
                                             GALGAS_lstring & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    outOperand0 = p->mAttribute_mSettingName ;
    outOperand1 = p->mAttribute_mSettingValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::method_last (GALGAS_lstring & outOperand0,
                                            GALGAS_lstring & outOperand1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    outOperand0 = p->mAttribute_mSettingName ;
    outOperand1 = p->mAttribute_mSettingValue ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::operator_concat (const GALGAS_configSettingList & inOperand
                                                                    COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_configSettingList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                            const GALGAS_uint & inLength,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_configSettingList result = GALGAS_configSettingList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  GALGAS_configSettingList result = GALGAS_configSettingList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_configSettingList::dotAssign_operation (const GALGAS_configSettingList inOperand
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configSettingList::reader_mSettingNameAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    result = p->mAttribute_mSettingName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configSettingList::reader_mSettingValueAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_configSettingList * p = (cCollectionElement_configSettingList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_configSettingList) ;
    result = p->mAttribute_mSettingValue ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_configSettingList::cEnumerator_configSettingList (const GALGAS_configSettingList & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configSettingList::current_mSettingName (LOCATION_ARGS) const {
  const cCollectionElement_configSettingList * p = (const cCollectionElement_configSettingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_configSettingList) ;
  return p->mAttribute_mSettingName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configSettingList::current_mSettingValue (LOCATION_ARGS) const {
  const cCollectionElement_configSettingList * p = (const cCollectionElement_configSettingList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_configSettingList) ;
  return p->mAttribute_mSettingValue ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                          @configSettingList type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configSettingList ("configSettingList",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configSettingList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configSettingList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configSettingList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configSettingList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configSettingList::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_configSettingList result ;
  const GALGAS_configSettingList * p = (const GALGAS_configSettingList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configSettingList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "configSettingList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@configDefinitionList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_configDefinitionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_location mAttribute_mDefinitionLocation ;
  public : GALGAS_configSettingList mAttribute_mSettingList ;

//--- Constructor
  public : cCollectionElement_configDefinitionList (const GALGAS_location & in_mDefinitionLocation,
                                                    const GALGAS_configSettingList & in_mSettingList
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_configDefinitionList::cCollectionElement_configDefinitionList (const GALGAS_location & in_mDefinitionLocation,
                                                                                  const GALGAS_configSettingList & in_mSettingList
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mDefinitionLocation (in_mDefinitionLocation),
mAttribute_mSettingList (in_mSettingList) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_configDefinitionList::isValid (void) const {
  return mAttribute_mDefinitionLocation.isValid () && mAttribute_mSettingList.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_configDefinitionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_configDefinitionList (mAttribute_mDefinitionLocation, mAttribute_mSettingList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_configDefinitionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefinitionLocation" ":" ;
  mAttribute_mDefinitionLocation.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSettingList" ":" ;
  mAttribute_mSettingList.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_configDefinitionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_configDefinitionList * operand = (cCollectionElement_configDefinitionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mDefinitionLocation.objectCompare (operand->mAttribute_mDefinitionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSettingList.objectCompare (operand->mAttribute_mSettingList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList::GALGAS_configDefinitionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList::GALGAS_configDefinitionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_configDefinitionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::constructor_listWithValue (const GALGAS_location & inOperand0,
                                                                                    const GALGAS_configSettingList & inOperand1
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_configDefinitionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_configDefinitionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_location & in_mDefinitionLocation,
                                                             const GALGAS_configSettingList & in_mSettingList
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_configDefinitionList * p = NULL ;
  macroMyNew (p, cCollectionElement_configDefinitionList (in_mDefinitionLocation,
                                                             in_mSettingList COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::addAssign_operation (const GALGAS_location & inOperand0,
                                                       const GALGAS_configSettingList & inOperand1
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_configDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::modifier_prependValue (GALGAS_location inOperand0,
                                                         GALGAS_configSettingList inOperand1
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_configDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::modifier_popFirst (GALGAS_location & outOperand0,
                                                     GALGAS_configSettingList & outOperand1,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    outOperand0 = p->mAttribute_mDefinitionLocation ;
    outOperand1 = p->mAttribute_mSettingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::modifier_popLast (GALGAS_location & outOperand0,
                                                    GALGAS_configSettingList & outOperand1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    outOperand0 = p->mAttribute_mDefinitionLocation ;
    outOperand1 = p->mAttribute_mSettingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::method_first (GALGAS_location & outOperand0,
                                                GALGAS_configSettingList & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    outOperand0 = p->mAttribute_mDefinitionLocation ;
    outOperand1 = p->mAttribute_mSettingList ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::method_last (GALGAS_location & outOperand0,
                                               GALGAS_configSettingList & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    outOperand0 = p->mAttribute_mDefinitionLocation ;
    outOperand1 = p->mAttribute_mSettingList ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::operator_concat (const GALGAS_configDefinitionList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_configDefinitionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                  const GALGAS_uint & inLength,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_configDefinitionList result = GALGAS_configDefinitionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_configDefinitionList result = GALGAS_configDefinitionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_configDefinitionList::dotAssign_operation (const GALGAS_configDefinitionList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_configDefinitionList::reader_mDefinitionLocationAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    result = p->mAttribute_mDefinitionLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList GALGAS_configDefinitionList::reader_mSettingListAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_configDefinitionList * p = (cCollectionElement_configDefinitionList *) attributes.ptr () ;
  GALGAS_configSettingList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_configDefinitionList) ;
    result = p->mAttribute_mSettingList ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_configDefinitionList::cEnumerator_configDefinitionList (const GALGAS_configDefinitionList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_location cEnumerator_configDefinitionList::current_mDefinitionLocation (LOCATION_ARGS) const {
  const cCollectionElement_configDefinitionList * p = (const cCollectionElement_configDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_configDefinitionList) ;
  return p->mAttribute_mDefinitionLocation ;
}

//---------------------------------------------------------------------------*

GALGAS_configSettingList cEnumerator_configDefinitionList::current_mSettingList (LOCATION_ARGS) const {
  const cCollectionElement_configDefinitionList * p = (const cCollectionElement_configDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_configDefinitionList) ;
  return p->mAttribute_mSettingList ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @configDefinitionList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configDefinitionList ("configDefinitionList",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configDefinitionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configDefinitionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configDefinitionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configDefinitionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_configDefinitionList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_configDefinitionList result ;
  const GALGAS_configDefinitionList * p = (const GALGAS_configDefinitionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configDefinitionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "configDefinitionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@immediatExpressionList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_immediatExpressionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_immediatExpression mAttribute_mExpression ;

//--- Constructor
  public : cCollectionElement_immediatExpressionList (const GALGAS_immediatExpression & in_mExpression
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_immediatExpressionList::cCollectionElement_immediatExpressionList (const GALGAS_immediatExpression & in_mExpression
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mExpression (in_mExpression) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_immediatExpressionList::isValid (void) const {
  return mAttribute_mExpression.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_immediatExpressionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_immediatExpressionList (mAttribute_mExpression COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_immediatExpressionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mExpression" ":" ;
  mAttribute_mExpression.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_immediatExpressionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_immediatExpressionList * operand = (cCollectionElement_immediatExpressionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mExpression.objectCompare (operand->mAttribute_mExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList::GALGAS_immediatExpressionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList::GALGAS_immediatExpressionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_immediatExpressionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::constructor_listWithValue (const GALGAS_immediatExpression & inOperand0
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatExpressionList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_immediatExpressionList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_immediatExpression & in_mExpression
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_immediatExpressionList * p = NULL ;
  macroMyNew (p, cCollectionElement_immediatExpressionList (in_mExpression COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::addAssign_operation (const GALGAS_immediatExpression & inOperand0
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_immediatExpressionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::modifier_prependValue (GALGAS_immediatExpression inOperand0
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_immediatExpressionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::modifier_popFirst (GALGAS_immediatExpression & outOperand0,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatExpressionList * p = (cCollectionElement_immediatExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatExpressionList) ;
    outOperand0 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::modifier_popLast (GALGAS_immediatExpression & outOperand0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatExpressionList * p = (cCollectionElement_immediatExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatExpressionList) ;
    outOperand0 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::method_first (GALGAS_immediatExpression & outOperand0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatExpressionList * p = (cCollectionElement_immediatExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatExpressionList) ;
    outOperand0 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::method_last (GALGAS_immediatExpression & outOperand0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatExpressionList * p = (cCollectionElement_immediatExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatExpressionList) ;
    outOperand0 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::operator_concat (const GALGAS_immediatExpressionList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpressionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                      const GALGAS_uint & inLength,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_immediatExpressionList result = GALGAS_immediatExpressionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_immediatExpressionList result = GALGAS_immediatExpressionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatExpressionList::dotAssign_operation (const GALGAS_immediatExpressionList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatExpressionList::reader_mExpressionAtIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatExpressionList * p = (cCollectionElement_immediatExpressionList *) attributes.ptr () ;
  GALGAS_immediatExpression result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_immediatExpressionList) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_immediatExpressionList::cEnumerator_immediatExpressionList (const GALGAS_immediatExpressionList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cEnumerator_immediatExpressionList::current_mExpression (LOCATION_ARGS) const {
  const cCollectionElement_immediatExpressionList * p = (const cCollectionElement_immediatExpressionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_immediatExpressionList) ;
  return p->mAttribute_mExpression ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @immediatExpressionList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatExpressionList ("immediatExpressionList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatExpressionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatExpressionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatExpressionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatExpressionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_immediatExpressionList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_immediatExpressionList result ;
  const GALGAS_immediatExpressionList * p = (const GALGAS_immediatExpressionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatExpressionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatExpressionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Class for element of '@immediatSliceExpressionList' list          *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_immediatSliceExpressionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mSliceName ;
  public : GALGAS_immediatExpression mAttribute_mExpression ;

//--- Constructor
  public : cCollectionElement_immediatSliceExpressionList (const GALGAS_lstring & in_mSliceName,
                                                           const GALGAS_immediatExpression & in_mExpression
                                                           COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_immediatSliceExpressionList::cCollectionElement_immediatSliceExpressionList (const GALGAS_lstring & in_mSliceName,
                                                                                                const GALGAS_immediatExpression & in_mExpression
                                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mSliceName (in_mSliceName),
mAttribute_mExpression (in_mExpression) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_immediatSliceExpressionList::isValid (void) const {
  return mAttribute_mSliceName.isValid () && mAttribute_mExpression.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_immediatSliceExpressionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_immediatSliceExpressionList (mAttribute_mSliceName, mAttribute_mExpression COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_immediatSliceExpressionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSliceName" ":" ;
  mAttribute_mSliceName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mExpression" ":" ;
  mAttribute_mExpression.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_immediatSliceExpressionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_immediatSliceExpressionList * operand = (cCollectionElement_immediatSliceExpressionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mSliceName.objectCompare (operand->mAttribute_mSliceName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExpression.objectCompare (operand->mAttribute_mExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList::GALGAS_immediatSliceExpressionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList::GALGAS_immediatSliceExpressionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_immediatSliceExpressionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                                  const GALGAS_immediatExpression & inOperand1
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatSliceExpressionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_immediatSliceExpressionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                    const GALGAS_lstring & in_mSliceName,
                                                                    const GALGAS_immediatExpression & in_mExpression
                                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_immediatSliceExpressionList * p = NULL ;
  macroMyNew (p, cCollectionElement_immediatSliceExpressionList (in_mSliceName,
                                                                    in_mExpression COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                              const GALGAS_immediatExpression & inOperand1
                                                              COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_immediatSliceExpressionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                                GALGAS_immediatExpression inOperand1
                                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_immediatSliceExpressionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                            GALGAS_immediatExpression & outOperand1,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    outOperand0 = p->mAttribute_mSliceName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                           GALGAS_immediatExpression & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    outOperand0 = p->mAttribute_mSliceName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::method_first (GALGAS_lstring & outOperand0,
                                                       GALGAS_immediatExpression & outOperand1,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    outOperand0 = p->mAttribute_mSliceName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::method_last (GALGAS_lstring & outOperand0,
                                                      GALGAS_immediatExpression & outOperand1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    outOperand0 = p->mAttribute_mSliceName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::operator_concat (const GALGAS_immediatSliceExpressionList & inOperand
                                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatSliceExpressionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                                const GALGAS_uint & inLength,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_immediatSliceExpressionList result = GALGAS_immediatSliceExpressionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_immediatSliceExpressionList result = GALGAS_immediatSliceExpressionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSliceExpressionList::dotAssign_operation (const GALGAS_immediatSliceExpressionList inOperand
                                                              COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_immediatSliceExpressionList::reader_mSliceNameAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    result = p->mAttribute_mSliceName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatSliceExpressionList::reader_mExpressionAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_immediatSliceExpressionList * p = (cCollectionElement_immediatSliceExpressionList *) attributes.ptr () ;
  GALGAS_immediatExpression result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_immediatSliceExpressionList) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_immediatSliceExpressionList::cEnumerator_immediatSliceExpressionList (const GALGAS_immediatSliceExpressionList & inEnumeratedObject,
                                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_immediatSliceExpressionList::current_mSliceName (LOCATION_ARGS) const {
  const cCollectionElement_immediatSliceExpressionList * p = (const cCollectionElement_immediatSliceExpressionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_immediatSliceExpressionList) ;
  return p->mAttribute_mSliceName ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cEnumerator_immediatSliceExpressionList::current_mExpression (LOCATION_ARGS) const {
  const cCollectionElement_immediatSliceExpressionList * p = (const cCollectionElement_immediatSliceExpressionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_immediatSliceExpressionList) ;
  return p->mAttribute_mExpression ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                     @immediatSliceExpressionList type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatSliceExpressionList ("immediatSliceExpressionList",
                                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatSliceExpressionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatSliceExpressionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatSliceExpressionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatSliceExpressionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSliceExpressionList::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatSliceExpressionList result ;
  const GALGAS_immediatSliceExpressionList * p = (const GALGAS_immediatSliceExpressionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatSliceExpressionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatSliceExpressionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@constantDefinitionList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_constantDefinitionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_lstring mAttribute_mConstantName ;
  public : GALGAS_immediatExpression mAttribute_mExpression ;

//--- Constructor
  public : cCollectionElement_constantDefinitionList (const GALGAS_lstring & in_mConstantName,
                                                      const GALGAS_immediatExpression & in_mExpression
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_constantDefinitionList::cCollectionElement_constantDefinitionList (const GALGAS_lstring & in_mConstantName,
                                                                                      const GALGAS_immediatExpression & in_mExpression
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mConstantName (in_mConstantName),
mAttribute_mExpression (in_mExpression) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_constantDefinitionList::isValid (void) const {
  return mAttribute_mConstantName.isValid () && mAttribute_mExpression.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_constantDefinitionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_constantDefinitionList (mAttribute_mConstantName, mAttribute_mExpression COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_constantDefinitionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mConstantName" ":" ;
  mAttribute_mConstantName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mExpression" ":" ;
  mAttribute_mExpression.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_constantDefinitionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_constantDefinitionList * operand = (cCollectionElement_constantDefinitionList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mConstantName.objectCompare (operand->mAttribute_mConstantName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExpression.objectCompare (operand->mAttribute_mExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList::GALGAS_constantDefinitionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList::GALGAS_constantDefinitionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_constantDefinitionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_immediatExpression & inOperand1
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_constantDefinitionList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_constantDefinitionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_lstring & in_mConstantName,
                                                               const GALGAS_immediatExpression & in_mExpression
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_constantDefinitionList * p = NULL ;
  macroMyNew (p, cCollectionElement_constantDefinitionList (in_mConstantName,
                                                               in_mExpression COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                         const GALGAS_immediatExpression & inOperand1
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_constantDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                           GALGAS_immediatExpression inOperand1
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_constantDefinitionList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                       GALGAS_immediatExpression & outOperand1,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    outOperand0 = p->mAttribute_mConstantName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                      GALGAS_immediatExpression & outOperand1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    outOperand0 = p->mAttribute_mConstantName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::method_first (GALGAS_lstring & outOperand0,
                                                  GALGAS_immediatExpression & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    outOperand0 = p->mAttribute_mConstantName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::method_last (GALGAS_lstring & outOperand0,
                                                 GALGAS_immediatExpression & outOperand1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    outOperand0 = p->mAttribute_mConstantName ;
    outOperand1 = p->mAttribute_mExpression ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::operator_concat (const GALGAS_constantDefinitionList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_constantDefinitionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                      const GALGAS_uint & inLength,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_constantDefinitionList result = GALGAS_constantDefinitionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_constantDefinitionList result = GALGAS_constantDefinitionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_constantDefinitionList::dotAssign_operation (const GALGAS_constantDefinitionList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_constantDefinitionList::reader_mConstantNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    result = p->mAttribute_mConstantName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_constantDefinitionList::reader_mExpressionAtIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_constantDefinitionList * p = (cCollectionElement_constantDefinitionList *) attributes.ptr () ;
  GALGAS_immediatExpression result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_constantDefinitionList) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_constantDefinitionList::cEnumerator_constantDefinitionList (const GALGAS_constantDefinitionList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_constantDefinitionList::current_mConstantName (LOCATION_ARGS) const {
  const cCollectionElement_constantDefinitionList * p = (const cCollectionElement_constantDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_constantDefinitionList) ;
  return p->mAttribute_mConstantName ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cEnumerator_constantDefinitionList::current_mExpression (LOCATION_ARGS) const {
  const cCollectionElement_constantDefinitionList * p = (const cCollectionElement_constantDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_constantDefinitionList) ;
  return p->mAttribute_mExpression ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @constantDefinitionList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantDefinitionList ("constantDefinitionList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantDefinitionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantDefinitionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantDefinitionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantDefinitionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_constantDefinitionList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_constantDefinitionList result ;
  const GALGAS_constantDefinitionList * p = (const GALGAS_constantDefinitionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantDefinitionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "constantDefinitionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_actualConfigurationMap::cMapElement_actualConfigurationMap (const GALGAS_lstring & inKey,
                                                                        const GALGAS_uint & in_mRegisterAddress,
                                                                        const GALGAS_uint & in_mRegisterValue
                                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterAddress (in_mRegisterAddress),
mAttribute_mRegisterValue (in_mRegisterValue) {
}

//---------------------------------------------------------------------------*

bool cMapElement_actualConfigurationMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddress.isValid () && mAttribute_mRegisterValue.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_actualConfigurationMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_actualConfigurationMap (mAttribute_lkey, mAttribute_mRegisterAddress, mAttribute_mRegisterValue COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_actualConfigurationMap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddress" ":" ;
  mAttribute_mRegisterAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterValue" ":" ;
  mAttribute_mRegisterValue.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_actualConfigurationMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_actualConfigurationMap * operand = (cMapElement_actualConfigurationMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddress.objectCompare (operand->mAttribute_mRegisterAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterValue.objectCompare (operand->mAttribute_mRegisterValue) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap::GALGAS_actualConfigurationMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap::GALGAS_actualConfigurationMap (const GALGAS_actualConfigurationMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap & GALGAS_actualConfigurationMap::operator = (const GALGAS_actualConfigurationMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap GALGAS_actualConfigurationMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_actualConfigurationMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap GALGAS_actualConfigurationMap::constructor_mapWithMapToOverride (const GALGAS_actualConfigurationMap & inMapToOverride
                                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_actualConfigurationMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap GALGAS_actualConfigurationMap::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_actualConfigurationMap result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_actualConfigurationMap::modifier_insertKey (GALGAS_lstring inKey,
                                                        GALGAS_uint inArgument0,
                                                        GALGAS_uint inArgument1,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cMapElement_actualConfigurationMap * p = NULL ;
  macroMyNew (p, cMapElement_actualConfigurationMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_actualConfigurationMap_searchKey = "the '%K' configuration register is not declared" ;

//---------------------------------------------------------------------------*

void GALGAS_actualConfigurationMap::method_searchKey (GALGAS_lstring inKey,
                                                      GALGAS_uint & outArgument0,
                                                      GALGAS_uint & outArgument1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  const cMapElement_actualConfigurationMap * p = (const cMapElement_actualConfigurationMap *) performSearch (inKey,
                                                                                                               inCompiler,
                                                                                                               kSearchErrorMessage_actualConfigurationMap_searchKey
                                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_actualConfigurationMap) ;
    outArgument0 = p->mAttribute_mRegisterAddress ;
    outArgument1 = p->mAttribute_mRegisterValue ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_actualConfigurationMap::reader_mRegisterAddressForKey (const GALGAS_string & inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_actualConfigurationMap * p = (const cMapElement_actualConfigurationMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_actualConfigurationMap) ;
    result = p->mAttribute_mRegisterAddress ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_actualConfigurationMap::reader_mRegisterValueForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_actualConfigurationMap * p = (const cMapElement_actualConfigurationMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_actualConfigurationMap) ;
    result = p->mAttribute_mRegisterValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_actualConfigurationMap::modifier_setMRegisterAddressForKey (GALGAS_uint inAttributeValue,
                                                                        GALGAS_string inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_actualConfigurationMap * p = (cMapElement_actualConfigurationMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_actualConfigurationMap) ;
    p->mAttribute_mRegisterAddress = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_actualConfigurationMap::modifier_setMRegisterValueForKey (GALGAS_uint inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_actualConfigurationMap * p = (cMapElement_actualConfigurationMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_actualConfigurationMap) ;
    p->mAttribute_mRegisterValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_actualConfigurationMap * GALGAS_actualConfigurationMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                              const GALGAS_string & inKey
                                                                                                              COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_actualConfigurationMap * result = (cMapElement_actualConfigurationMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_actualConfigurationMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_actualConfigurationMap * GALGAS_actualConfigurationMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                                 const GALGAS_lstring & inKey
                                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_actualConfigurationMap_searchKey COMMA_THERE) ;
  cMapElement_actualConfigurationMap * result = (cMapElement_actualConfigurationMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_actualConfigurationMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_actualConfigurationMap::cEnumerator_actualConfigurationMap (const GALGAS_actualConfigurationMap & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_actualConfigurationMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_actualConfigurationMap::current_mRegisterAddress (LOCATION_ARGS) const {
  const cMapElement_actualConfigurationMap * p = (const cMapElement_actualConfigurationMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_actualConfigurationMap) ;
  return p->mAttribute_mRegisterAddress ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_actualConfigurationMap::current_mRegisterValue (LOCATION_ARGS) const {
  const cMapElement_actualConfigurationMap * p = (const cMapElement_actualConfigurationMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_actualConfigurationMap) ;
  return p->mAttribute_mRegisterValue ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @actualConfigurationMap type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_actualConfigurationMap ("actualConfigurationMap",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_actualConfigurationMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_actualConfigurationMap ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_actualConfigurationMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_actualConfigurationMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_actualConfigurationMap GALGAS_actualConfigurationMap::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_actualConfigurationMap result ;
  const GALGAS_actualConfigurationMap * p = (const GALGAS_actualConfigurationMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_actualConfigurationMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "actualConfigurationMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bitNumberExpression::objectCompare (const GALGAS_bitNumberExpression & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression::GALGAS_bitNumberExpression (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression::GALGAS_bitNumberExpression (const cPtr_bitNumberExpression * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bitNumberExpression) ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @bitNumberExpression class                *
//---------------------------------------------------------------------------*

cPtr_bitNumberExpression::cPtr_bitNumberExpression (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @bitNumberExpression type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bitNumberExpression ("bitNumberExpression",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bitNumberExpression::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitNumberExpression ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bitNumberExpression::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bitNumberExpression (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression GALGAS_bitNumberExpression::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bitNumberExpression result ;
  const GALGAS_bitNumberExpression * p = (const GALGAS_bitNumberExpression *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bitNumberExpression *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bitNumberExpression", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bitNumberLabelValue::objectCompare (const GALGAS_bitNumberLabelValue & inOperand) const {
  typeComparisonResult result = GALGAS_bitNumberExpression::objectCompare (inOperand) ;
  const cPtr_bitNumberLabelValue * p = (const cPtr_bitNumberLabelValue *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_bitNumberLabelValue) ;
  const cPtr_bitNumberLabelValue * q = (const cPtr_bitNumberLabelValue *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_bitNumberLabelValue) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mBitNumberLabelValue.objectCompare (q->mAttribute_mBitNumberLabelValue) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mBitNumberIndexValue.objectCompare (q->mAttribute_mBitNumberIndexValue) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_bitNumberLabelValue::GALGAS_bitNumberLabelValue (void) :
GALGAS_bitNumberExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLabelValue::GALGAS_bitNumberLabelValue (const cPtr_bitNumberLabelValue * inSourcePtr) :
GALGAS_bitNumberExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bitNumberLabelValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLabelValue GALGAS_bitNumberLabelValue::constructor_new (const GALGAS_lstring & inAttribute_mBitNumberLabelValue,
                                                                        const GALGAS_luint & inAttribute_mBitNumberIndexValue
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_bitNumberLabelValue result ;
  if (inAttribute_mBitNumberLabelValue.isValid () && inAttribute_mBitNumberIndexValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_bitNumberLabelValue (inAttribute_mBitNumberLabelValue, inAttribute_mBitNumberIndexValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bitNumberLabelValue::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_bitNumberLabelValue * p = (cPtr_bitNumberLabelValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_bitNumberLabelValue) ;
    cPtr_bitNumberLabelValue * r = NULL ;
    macroMyNew (r, cPtr_bitNumberLabelValue (p->mAttribute_mBitNumberLabelValue, p->mAttribute_mBitNumberIndexValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bitNumberLabelValue::reader_mBitNumberLabelValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitNumberLabelValue * p = (const cPtr_bitNumberLabelValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitNumberLabelValue) ;
    result = p->mAttribute_mBitNumberLabelValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_bitNumberLabelValue::reader_mBitNumberIndexValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitNumberLabelValue * p = (const cPtr_bitNumberLabelValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitNumberLabelValue) ;
    result = p->mAttribute_mBitNumberIndexValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @bitNumberLabelValue class                *
//---------------------------------------------------------------------------*

cPtr_bitNumberLabelValue::cPtr_bitNumberLabelValue (const GALGAS_lstring & in_mBitNumberLabelValue,
                                                    const GALGAS_luint & in_mBitNumberIndexValue
                                                    COMMA_LOCATION_ARGS) :
cPtr_bitNumberExpression (THERE),
mAttribute_mBitNumberLabelValue (in_mBitNumberLabelValue),
mAttribute_mBitNumberIndexValue (in_mBitNumberIndexValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_bitNumberLabelValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitNumberLabelValue ;
}

void cPtr_bitNumberLabelValue::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@bitNumberLabelValue:" ;
  mAttribute_mBitNumberLabelValue.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitNumberIndexValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @bitNumberLabelValue type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bitNumberLabelValue ("bitNumberLabelValue",
                                            & kTypeDescriptor_GALGAS_bitNumberExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bitNumberLabelValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitNumberLabelValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bitNumberLabelValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bitNumberLabelValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLabelValue GALGAS_bitNumberLabelValue::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bitNumberLabelValue result ;
  const GALGAS_bitNumberLabelValue * p = (const GALGAS_bitNumberLabelValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bitNumberLabelValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bitNumberLabelValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bitNumberLiteralValue::objectCompare (const GALGAS_bitNumberLiteralValue & inOperand) const {
  typeComparisonResult result = GALGAS_bitNumberExpression::objectCompare (inOperand) ;
  const cPtr_bitNumberLiteralValue * p = (const cPtr_bitNumberLiteralValue *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_bitNumberLiteralValue) ;
  const cPtr_bitNumberLiteralValue * q = (const cPtr_bitNumberLiteralValue *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_bitNumberLiteralValue) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mBitNumberLiteralValue.objectCompare (q->mAttribute_mBitNumberLiteralValue) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_bitNumberLiteralValue::GALGAS_bitNumberLiteralValue (void) :
GALGAS_bitNumberExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLiteralValue::GALGAS_bitNumberLiteralValue (const cPtr_bitNumberLiteralValue * inSourcePtr) :
GALGAS_bitNumberExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bitNumberLiteralValue) ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLiteralValue GALGAS_bitNumberLiteralValue::constructor_new (const GALGAS_luint & inAttribute_mBitNumberLiteralValue
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_bitNumberLiteralValue result ;
  if (inAttribute_mBitNumberLiteralValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_bitNumberLiteralValue (inAttribute_mBitNumberLiteralValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bitNumberLiteralValue::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_bitNumberLiteralValue * p = (cPtr_bitNumberLiteralValue *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_bitNumberLiteralValue) ;
    cPtr_bitNumberLiteralValue * r = NULL ;
    macroMyNew (r, cPtr_bitNumberLiteralValue (p->mAttribute_mBitNumberLiteralValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_bitNumberLiteralValue::reader_mBitNumberLiteralValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitNumberLiteralValue * p = (const cPtr_bitNumberLiteralValue *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitNumberLiteralValue) ;
    result = p->mAttribute_mBitNumberLiteralValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @bitNumberLiteralValue class               *
//---------------------------------------------------------------------------*

cPtr_bitNumberLiteralValue::cPtr_bitNumberLiteralValue (const GALGAS_luint & in_mBitNumberLiteralValue
                                                        COMMA_LOCATION_ARGS) :
cPtr_bitNumberExpression (THERE),
mAttribute_mBitNumberLiteralValue (in_mBitNumberLiteralValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_bitNumberLiteralValue::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitNumberLiteralValue ;
}

void cPtr_bitNumberLiteralValue::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@bitNumberLiteralValue:" ;
  mAttribute_mBitNumberLiteralValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @bitNumberLiteralValue type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bitNumberLiteralValue ("bitNumberLiteralValue",
                                              & kTypeDescriptor_GALGAS_bitNumberExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bitNumberLiteralValue::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitNumberLiteralValue ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bitNumberLiteralValue::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bitNumberLiteralValue (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberLiteralValue GALGAS_bitNumberLiteralValue::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_bitNumberLiteralValue result ;
  const GALGAS_bitNumberLiteralValue * p = (const GALGAS_bitNumberLiteralValue *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bitNumberLiteralValue *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bitNumberLiteralValue", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_declarationInRam::objectCompare (const GALGAS_declarationInRam & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_declarationInRam::GALGAS_declarationInRam (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRam::GALGAS_declarationInRam (const cPtr_declarationInRam * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_declarationInRam) ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @declarationInRam class                 *
//---------------------------------------------------------------------------*

cPtr_declarationInRam::cPtr_declarationInRam (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @declarationInRam type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declarationInRam ("declarationInRam",
                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declarationInRam::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declarationInRam ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declarationInRam::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declarationInRam (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declarationInRam GALGAS_declarationInRam::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler,
                                                                const GALGAS_location & inErrorLocation
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_declarationInRam result ;
  const GALGAS_declarationInRam * p = (const GALGAS_declarationInRam *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declarationInRam *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "declarationInRam", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_byteDeclarationInRam::objectCompare (const GALGAS_byteDeclarationInRam & inOperand) const {
  typeComparisonResult result = GALGAS_declarationInRam::objectCompare (inOperand) ;
  const cPtr_byteDeclarationInRam * p = (const cPtr_byteDeclarationInRam *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_byteDeclarationInRam) ;
  const cPtr_byteDeclarationInRam * q = (const cPtr_byteDeclarationInRam *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_byteDeclarationInRam) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mName.objectCompare (q->mAttribute_mName) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mSize.objectCompare (q->mAttribute_mSize) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mBitSliceTable.objectCompare (q->mAttribute_mBitSliceTable) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mBitDefinitionString.objectCompare (q->mAttribute_mBitDefinitionString) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_byteDeclarationInRam::GALGAS_byteDeclarationInRam (void) :
GALGAS_declarationInRam () {
}

//---------------------------------------------------------------------------*

GALGAS_byteDeclarationInRam::GALGAS_byteDeclarationInRam (const cPtr_byteDeclarationInRam * inSourcePtr) :
GALGAS_declarationInRam (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_byteDeclarationInRam) ;
}

//---------------------------------------------------------------------------*

GALGAS_byteDeclarationInRam GALGAS_byteDeclarationInRam::constructor_new (const GALGAS_lstring & inAttribute_mName,
                                                                          const GALGAS_luint & inAttribute_mSize,
                                                                          const GALGAS_bitSliceTable & inAttribute_mBitSliceTable,
                                                                          const GALGAS_string & inAttribute_mBitDefinitionString
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_byteDeclarationInRam result ;
  if (inAttribute_mName.isValid () && inAttribute_mSize.isValid () && inAttribute_mBitSliceTable.isValid () && inAttribute_mBitDefinitionString.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_byteDeclarationInRam (inAttribute_mName, inAttribute_mSize, inAttribute_mBitSliceTable, inAttribute_mBitDefinitionString COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_byteDeclarationInRam::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_byteDeclarationInRam * p = (cPtr_byteDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_byteDeclarationInRam) ;
    cPtr_byteDeclarationInRam * r = NULL ;
    macroMyNew (r, cPtr_byteDeclarationInRam (p->mAttribute_mName, p->mAttribute_mSize, p->mAttribute_mBitSliceTable, p->mAttribute_mBitDefinitionString COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_byteDeclarationInRam::reader_mName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_byteDeclarationInRam * p = (const cPtr_byteDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_byteDeclarationInRam) ;
    result = p->mAttribute_mName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_byteDeclarationInRam::reader_mSize (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_byteDeclarationInRam * p = (const cPtr_byteDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_byteDeclarationInRam) ;
    result = p->mAttribute_mSize ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_byteDeclarationInRam::reader_mBitSliceTable (UNUSED_LOCATION_ARGS) const {
  GALGAS_bitSliceTable result ;
  if (NULL != mObjectPtr) {
    const cPtr_byteDeclarationInRam * p = (const cPtr_byteDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_byteDeclarationInRam) ;
    result = p->mAttribute_mBitSliceTable ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_byteDeclarationInRam::reader_mBitDefinitionString (UNUSED_LOCATION_ARGS) const {
  GALGAS_string result ;
  if (NULL != mObjectPtr) {
    const cPtr_byteDeclarationInRam * p = (const cPtr_byteDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_byteDeclarationInRam) ;
    result = p->mAttribute_mBitDefinitionString ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @byteDeclarationInRam class               *
//---------------------------------------------------------------------------*

cPtr_byteDeclarationInRam::cPtr_byteDeclarationInRam (const GALGAS_lstring & in_mName,
                                                      const GALGAS_luint & in_mSize,
                                                      const GALGAS_bitSliceTable & in_mBitSliceTable,
                                                      const GALGAS_string & in_mBitDefinitionString
                                                      COMMA_LOCATION_ARGS) :
cPtr_declarationInRam (THERE),
mAttribute_mName (in_mName),
mAttribute_mSize (in_mSize),
mAttribute_mBitSliceTable (in_mBitSliceTable),
mAttribute_mBitDefinitionString (in_mBitDefinitionString) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_byteDeclarationInRam::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_byteDeclarationInRam ;
}

void cPtr_byteDeclarationInRam::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@byteDeclarationInRam:" ;
  mAttribute_mName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSize.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitSliceTable.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitDefinitionString.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @byteDeclarationInRam type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_byteDeclarationInRam ("byteDeclarationInRam",
                                             & kTypeDescriptor_GALGAS_declarationInRam) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_byteDeclarationInRam::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_byteDeclarationInRam ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_byteDeclarationInRam::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_byteDeclarationInRam (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_byteDeclarationInRam GALGAS_byteDeclarationInRam::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_byteDeclarationInRam result ;
  const GALGAS_byteDeclarationInRam * p = (const GALGAS_byteDeclarationInRam *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_byteDeclarationInRam *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "byteDeclarationInRam", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_commonDeclarationInRam::objectCompare (const GALGAS_commonDeclarationInRam & inOperand) const {
  typeComparisonResult result = GALGAS_declarationInRam::objectCompare (inOperand) ;
  const cPtr_commonDeclarationInRam * p = (const cPtr_commonDeclarationInRam *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_commonDeclarationInRam) ;
  const cPtr_commonDeclarationInRam * q = (const cPtr_commonDeclarationInRam *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_commonDeclarationInRam) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mBranchList.objectCompare (q->mAttribute_mBranchList) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_commonDeclarationInRam::GALGAS_commonDeclarationInRam (void) :
GALGAS_declarationInRam () {
}

//---------------------------------------------------------------------------*

GALGAS_commonDeclarationInRam::GALGAS_commonDeclarationInRam (const cPtr_commonDeclarationInRam * inSourcePtr) :
GALGAS_declarationInRam (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_commonDeclarationInRam) ;
}

//---------------------------------------------------------------------------*

GALGAS_commonDeclarationInRam GALGAS_commonDeclarationInRam::constructor_new (const GALGAS_commonBranchList & inAttribute_mBranchList
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_commonDeclarationInRam result ;
  if (inAttribute_mBranchList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_commonDeclarationInRam (inAttribute_mBranchList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_commonDeclarationInRam::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_commonDeclarationInRam * p = (cPtr_commonDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_commonDeclarationInRam) ;
    cPtr_commonDeclarationInRam * r = NULL ;
    macroMyNew (r, cPtr_commonDeclarationInRam (p->mAttribute_mBranchList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_commonBranchList GALGAS_commonDeclarationInRam::reader_mBranchList (UNUSED_LOCATION_ARGS) const {
  GALGAS_commonBranchList result ;
  if (NULL != mObjectPtr) {
    const cPtr_commonDeclarationInRam * p = (const cPtr_commonDeclarationInRam *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_commonDeclarationInRam) ;
    result = p->mAttribute_mBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @commonDeclarationInRam class              *
//---------------------------------------------------------------------------*

cPtr_commonDeclarationInRam::cPtr_commonDeclarationInRam (const GALGAS_commonBranchList & in_mBranchList
                                                          COMMA_LOCATION_ARGS) :
cPtr_declarationInRam (THERE),
mAttribute_mBranchList (in_mBranchList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_commonDeclarationInRam::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_commonDeclarationInRam ;
}

void cPtr_commonDeclarationInRam::description (C_String & ioString,
                                               const PMSInt32 inIndentation) const {
  ioString << "[@commonDeclarationInRam:" ;
  mAttribute_mBranchList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @commonDeclarationInRam type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_commonDeclarationInRam ("commonDeclarationInRam",
                                               & kTypeDescriptor_GALGAS_declarationInRam) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_commonDeclarationInRam::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_commonDeclarationInRam ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_commonDeclarationInRam::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_commonDeclarationInRam (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_commonDeclarationInRam GALGAS_commonDeclarationInRam::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_commonDeclarationInRam result ;
  const GALGAS_commonDeclarationInRam * p = (const GALGAS_commonDeclarationInRam *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_commonDeclarationInRam *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "commonDeclarationInRam", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatExpression::objectCompare (const GALGAS_immediatExpression & inOperand) const {
  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatExpression::GALGAS_immediatExpression (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression::GALGAS_immediatExpression (const cPtr_immediatExpression * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatExpression) ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatExpression class                *
//---------------------------------------------------------------------------*

cPtr_immediatExpression::cPtr_immediatExpression (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @immediatExpression type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatExpression ("immediatExpression",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatExpression::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatExpression ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatExpression::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatExpression (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatExpression::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatExpression result ;
  const GALGAS_immediatExpression * p = (const GALGAS_immediatExpression *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatExpression *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatExpression", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatAdd::objectCompare (const GALGAS_immediatAdd & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatAdd * p = (const cPtr_immediatAdd *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatAdd) ;
  const cPtr_immediatAdd * q = (const cPtr_immediatAdd *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatAdd) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatAdd::GALGAS_immediatAdd (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatAdd::GALGAS_immediatAdd (const cPtr_immediatAdd * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatAdd) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatAdd GALGAS_immediatAdd::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatAdd result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatAdd (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatAdd::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatAdd * p = (cPtr_immediatAdd *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatAdd) ;
    cPtr_immediatAdd * r = NULL ;
    macroMyNew (r, cPtr_immediatAdd (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatAdd::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatAdd * p = (const cPtr_immediatAdd *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatAdd) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatAdd::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatAdd * p = (const cPtr_immediatAdd *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatAdd) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatAdd class                    *
//---------------------------------------------------------------------------*

cPtr_immediatAdd::cPtr_immediatAdd (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatAdd::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatAdd ;
}

void cPtr_immediatAdd::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatAdd:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatAdd type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatAdd ("immediatAdd",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatAdd::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatAdd ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatAdd::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatAdd (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatAdd GALGAS_immediatAdd::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatAdd result ;
  const GALGAS_immediatAdd * p = (const GALGAS_immediatAdd *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatAdd *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatAdd", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatAnd::objectCompare (const GALGAS_immediatAnd & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatAnd * p = (const cPtr_immediatAnd *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatAnd) ;
  const cPtr_immediatAnd * q = (const cPtr_immediatAnd *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatAnd) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatAnd::GALGAS_immediatAnd (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatAnd::GALGAS_immediatAnd (const cPtr_immediatAnd * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatAnd) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatAnd GALGAS_immediatAnd::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatAnd result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatAnd (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatAnd::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatAnd * p = (cPtr_immediatAnd *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatAnd) ;
    cPtr_immediatAnd * r = NULL ;
    macroMyNew (r, cPtr_immediatAnd (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatAnd::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatAnd * p = (const cPtr_immediatAnd *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatAnd) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatAnd::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatAnd * p = (const cPtr_immediatAnd *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatAnd) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatAnd class                    *
//---------------------------------------------------------------------------*

cPtr_immediatAnd::cPtr_immediatAnd (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatAnd::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatAnd ;
}

void cPtr_immediatAnd::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatAnd:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatAnd type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatAnd ("immediatAnd",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatAnd::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatAnd ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatAnd::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatAnd (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatAnd GALGAS_immediatAnd::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatAnd result ;
  const GALGAS_immediatAnd * p = (const GALGAS_immediatAnd *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatAnd *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatAnd", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatComplement::objectCompare (const GALGAS_immediatComplement & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatComplement * p = (const cPtr_immediatComplement *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatComplement) ;
  const cPtr_immediatComplement * q = (const cPtr_immediatComplement *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatComplement) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mExpression.objectCompare (q->mAttribute_mExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatComplement::GALGAS_immediatComplement (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatComplement::GALGAS_immediatComplement (const cPtr_immediatComplement * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatComplement) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatComplement GALGAS_immediatComplement::constructor_new (const GALGAS_immediatExpression & inAttribute_mExpression
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatComplement result ;
  if (inAttribute_mExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatComplement (inAttribute_mExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatComplement::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatComplement * p = (cPtr_immediatComplement *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatComplement) ;
    cPtr_immediatComplement * r = NULL ;
    macroMyNew (r, cPtr_immediatComplement (p->mAttribute_mExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatComplement::reader_mExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatComplement * p = (const cPtr_immediatComplement *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatComplement) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatComplement class                *
//---------------------------------------------------------------------------*

cPtr_immediatComplement::cPtr_immediatComplement (const GALGAS_immediatExpression & in_mExpression
                                                  COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mExpression (in_mExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatComplement::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatComplement ;
}

void cPtr_immediatComplement::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@immediatComplement:" ;
  mAttribute_mExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @immediatComplement type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatComplement ("immediatComplement",
                                           & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatComplement::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatComplement ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatComplement::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatComplement (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatComplement GALGAS_immediatComplement::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatComplement result ;
  const GALGAS_immediatComplement * p = (const GALGAS_immediatComplement *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatComplement *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatComplement", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatDiv::objectCompare (const GALGAS_immediatDiv & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatDiv * p = (const cPtr_immediatDiv *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatDiv) ;
  const cPtr_immediatDiv * q = (const cPtr_immediatDiv *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatDiv) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatDiv::GALGAS_immediatDiv (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatDiv::GALGAS_immediatDiv (const cPtr_immediatDiv * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatDiv) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatDiv GALGAS_immediatDiv::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatDiv result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatDiv (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatDiv::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatDiv * p = (cPtr_immediatDiv *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatDiv) ;
    cPtr_immediatDiv * r = NULL ;
    macroMyNew (r, cPtr_immediatDiv (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatDiv::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatDiv * p = (const cPtr_immediatDiv *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatDiv) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatDiv::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatDiv * p = (const cPtr_immediatDiv *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatDiv) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatDiv class                    *
//---------------------------------------------------------------------------*

cPtr_immediatDiv::cPtr_immediatDiv (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatDiv::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatDiv ;
}

void cPtr_immediatDiv::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatDiv:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatDiv type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatDiv ("immediatDiv",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatDiv::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatDiv ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatDiv::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatDiv (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatDiv GALGAS_immediatDiv::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatDiv result ;
  const GALGAS_immediatDiv * p = (const GALGAS_immediatDiv *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatDiv *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatDiv", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatEqualTest::objectCompare (const GALGAS_immediatEqualTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatEqualTest * p = (const cPtr_immediatEqualTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatEqualTest) ;
  const cPtr_immediatEqualTest * q = (const cPtr_immediatEqualTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatEqualTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatEqualTest::GALGAS_immediatEqualTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatEqualTest::GALGAS_immediatEqualTest (const cPtr_immediatEqualTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatEqualTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatEqualTest GALGAS_immediatEqualTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                    const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatEqualTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatEqualTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatEqualTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatEqualTest * p = (cPtr_immediatEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatEqualTest) ;
    cPtr_immediatEqualTest * r = NULL ;
    macroMyNew (r, cPtr_immediatEqualTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatEqualTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatEqualTest * p = (const cPtr_immediatEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatEqualTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatEqualTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatEqualTest * p = (const cPtr_immediatEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatEqualTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatEqualTest class                 *
//---------------------------------------------------------------------------*

cPtr_immediatEqualTest::cPtr_immediatEqualTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                const GALGAS_immediatExpression & in_mRightExpression
                                                COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatEqualTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatEqualTest ;
}

void cPtr_immediatEqualTest::description (C_String & ioString,
                                          const PMSInt32 inIndentation) const {
  ioString << "[@immediatEqualTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @immediatEqualTest type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatEqualTest ("immediatEqualTest",
                                          & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatEqualTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatEqualTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatEqualTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatEqualTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatEqualTest GALGAS_immediatEqualTest::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatEqualTest result ;
  const GALGAS_immediatEqualTest * p = (const GALGAS_immediatEqualTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatEqualTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatEqualTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatGreaterOrEqualTest::objectCompare (const GALGAS_immediatGreaterOrEqualTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatGreaterOrEqualTest * p = (const cPtr_immediatGreaterOrEqualTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatGreaterOrEqualTest) ;
  const cPtr_immediatGreaterOrEqualTest * q = (const cPtr_immediatGreaterOrEqualTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatGreaterOrEqualTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatGreaterOrEqualTest::GALGAS_immediatGreaterOrEqualTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterOrEqualTest::GALGAS_immediatGreaterOrEqualTest (const cPtr_immediatGreaterOrEqualTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatGreaterOrEqualTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterOrEqualTest GALGAS_immediatGreaterOrEqualTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                                      const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatGreaterOrEqualTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatGreaterOrEqualTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatGreaterOrEqualTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatGreaterOrEqualTest * p = (cPtr_immediatGreaterOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatGreaterOrEqualTest) ;
    cPtr_immediatGreaterOrEqualTest * r = NULL ;
    macroMyNew (r, cPtr_immediatGreaterOrEqualTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatGreaterOrEqualTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatGreaterOrEqualTest * p = (const cPtr_immediatGreaterOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatGreaterOrEqualTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatGreaterOrEqualTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatGreaterOrEqualTest * p = (const cPtr_immediatGreaterOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatGreaterOrEqualTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @immediatGreaterOrEqualTest class            *
//---------------------------------------------------------------------------*

cPtr_immediatGreaterOrEqualTest::cPtr_immediatGreaterOrEqualTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                                  const GALGAS_immediatExpression & in_mRightExpression
                                                                  COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatGreaterOrEqualTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatGreaterOrEqualTest ;
}

void cPtr_immediatGreaterOrEqualTest::description (C_String & ioString,
                                                   const PMSInt32 inIndentation) const {
  ioString << "[@immediatGreaterOrEqualTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @immediatGreaterOrEqualTest type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatGreaterOrEqualTest ("immediatGreaterOrEqualTest",
                                                   & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatGreaterOrEqualTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatGreaterOrEqualTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatGreaterOrEqualTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatGreaterOrEqualTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterOrEqualTest GALGAS_immediatGreaterOrEqualTest::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler,
                                                                                    const GALGAS_location & inErrorLocation
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatGreaterOrEqualTest result ;
  const GALGAS_immediatGreaterOrEqualTest * p = (const GALGAS_immediatGreaterOrEqualTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatGreaterOrEqualTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatGreaterOrEqualTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatGreaterTest::objectCompare (const GALGAS_immediatGreaterTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatGreaterTest * p = (const cPtr_immediatGreaterTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatGreaterTest) ;
  const cPtr_immediatGreaterTest * q = (const cPtr_immediatGreaterTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatGreaterTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatGreaterTest::GALGAS_immediatGreaterTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterTest::GALGAS_immediatGreaterTest (const cPtr_immediatGreaterTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatGreaterTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterTest GALGAS_immediatGreaterTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatGreaterTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatGreaterTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatGreaterTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatGreaterTest * p = (cPtr_immediatGreaterTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatGreaterTest) ;
    cPtr_immediatGreaterTest * r = NULL ;
    macroMyNew (r, cPtr_immediatGreaterTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatGreaterTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatGreaterTest * p = (const cPtr_immediatGreaterTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatGreaterTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatGreaterTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatGreaterTest * p = (const cPtr_immediatGreaterTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatGreaterTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @immediatGreaterTest class                *
//---------------------------------------------------------------------------*

cPtr_immediatGreaterTest::cPtr_immediatGreaterTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                    const GALGAS_immediatExpression & in_mRightExpression
                                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatGreaterTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatGreaterTest ;
}

void cPtr_immediatGreaterTest::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@immediatGreaterTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @immediatGreaterTest type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatGreaterTest ("immediatGreaterTest",
                                            & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatGreaterTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatGreaterTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatGreaterTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatGreaterTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatGreaterTest GALGAS_immediatGreaterTest::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatGreaterTest result ;
  const GALGAS_immediatGreaterTest * p = (const GALGAS_immediatGreaterTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatGreaterTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatGreaterTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatInteger::objectCompare (const GALGAS_immediatInteger & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatInteger * p = (const cPtr_immediatInteger *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatInteger) ;
  const cPtr_immediatInteger * q = (const cPtr_immediatInteger *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatInteger) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mValue.objectCompare (q->mAttribute_mValue) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatInteger::GALGAS_immediatInteger (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatInteger::GALGAS_immediatInteger (const cPtr_immediatInteger * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatInteger) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatInteger GALGAS_immediatInteger::constructor_new (const GALGAS_luint & inAttribute_mValue
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_immediatInteger result ;
  if (inAttribute_mValue.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatInteger (inAttribute_mValue COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatInteger::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatInteger * p = (cPtr_immediatInteger *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatInteger) ;
    cPtr_immediatInteger * r = NULL ;
    macroMyNew (r, cPtr_immediatInteger (p->mAttribute_mValue COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_immediatInteger::reader_mValue (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatInteger * p = (const cPtr_immediatInteger *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatInteger) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @immediatInteger class                  *
//---------------------------------------------------------------------------*

cPtr_immediatInteger::cPtr_immediatInteger (const GALGAS_luint & in_mValue
                                            COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mValue (in_mValue) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatInteger::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatInteger ;
}

void cPtr_immediatInteger::description (C_String & ioString,
                                        const PMSInt32 inIndentation) const {
  ioString << "[@immediatInteger:" ;
  mAttribute_mValue.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @immediatInteger type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatInteger ("immediatInteger",
                                        & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatInteger::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatInteger ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatInteger::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatInteger (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatInteger GALGAS_immediatInteger::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_immediatInteger result ;
  const GALGAS_immediatInteger * p = (const GALGAS_immediatInteger *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatInteger *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatInteger", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatLeftShift::objectCompare (const GALGAS_immediatLeftShift & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatLeftShift * p = (const cPtr_immediatLeftShift *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatLeftShift) ;
  const cPtr_immediatLeftShift * q = (const cPtr_immediatLeftShift *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatLeftShift) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatLeftShift::GALGAS_immediatLeftShift (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatLeftShift::GALGAS_immediatLeftShift (const cPtr_immediatLeftShift * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatLeftShift) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLeftShift GALGAS_immediatLeftShift::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                    const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatLeftShift result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatLeftShift (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatLeftShift::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatLeftShift * p = (cPtr_immediatLeftShift *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatLeftShift) ;
    cPtr_immediatLeftShift * r = NULL ;
    macroMyNew (r, cPtr_immediatLeftShift (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLeftShift::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLeftShift * p = (const cPtr_immediatLeftShift *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLeftShift) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLeftShift::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLeftShift * p = (const cPtr_immediatLeftShift *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLeftShift) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatLeftShift class                 *
//---------------------------------------------------------------------------*

cPtr_immediatLeftShift::cPtr_immediatLeftShift (const GALGAS_immediatExpression & in_mLeftExpression,
                                                const GALGAS_immediatExpression & in_mRightExpression
                                                COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatLeftShift::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLeftShift ;
}

void cPtr_immediatLeftShift::description (C_String & ioString,
                                          const PMSInt32 inIndentation) const {
  ioString << "[@immediatLeftShift:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @immediatLeftShift type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatLeftShift ("immediatLeftShift",
                                          & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatLeftShift::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLeftShift ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatLeftShift::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatLeftShift (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLeftShift GALGAS_immediatLeftShift::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatLeftShift result ;
  const GALGAS_immediatLeftShift * p = (const GALGAS_immediatLeftShift *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatLeftShift *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatLeftShift", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatLowerOrEqualTest::objectCompare (const GALGAS_immediatLowerOrEqualTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatLowerOrEqualTest * p = (const cPtr_immediatLowerOrEqualTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatLowerOrEqualTest) ;
  const cPtr_immediatLowerOrEqualTest * q = (const cPtr_immediatLowerOrEqualTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatLowerOrEqualTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatLowerOrEqualTest::GALGAS_immediatLowerOrEqualTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerOrEqualTest::GALGAS_immediatLowerOrEqualTest (const cPtr_immediatLowerOrEqualTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatLowerOrEqualTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerOrEqualTest GALGAS_immediatLowerOrEqualTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                                  const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatLowerOrEqualTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatLowerOrEqualTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatLowerOrEqualTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatLowerOrEqualTest * p = (cPtr_immediatLowerOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatLowerOrEqualTest) ;
    cPtr_immediatLowerOrEqualTest * r = NULL ;
    macroMyNew (r, cPtr_immediatLowerOrEqualTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLowerOrEqualTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLowerOrEqualTest * p = (const cPtr_immediatLowerOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLowerOrEqualTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLowerOrEqualTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLowerOrEqualTest * p = (const cPtr_immediatLowerOrEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLowerOrEqualTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @immediatLowerOrEqualTest class             *
//---------------------------------------------------------------------------*

cPtr_immediatLowerOrEqualTest::cPtr_immediatLowerOrEqualTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                              const GALGAS_immediatExpression & in_mRightExpression
                                                              COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatLowerOrEqualTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLowerOrEqualTest ;
}

void cPtr_immediatLowerOrEqualTest::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@immediatLowerOrEqualTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @immediatLowerOrEqualTest type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatLowerOrEqualTest ("immediatLowerOrEqualTest",
                                                 & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatLowerOrEqualTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLowerOrEqualTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatLowerOrEqualTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatLowerOrEqualTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerOrEqualTest GALGAS_immediatLowerOrEqualTest::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler,
                                                                                const GALGAS_location & inErrorLocation
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_immediatLowerOrEqualTest result ;
  const GALGAS_immediatLowerOrEqualTest * p = (const GALGAS_immediatLowerOrEqualTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatLowerOrEqualTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatLowerOrEqualTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatLowerTest::objectCompare (const GALGAS_immediatLowerTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatLowerTest * p = (const cPtr_immediatLowerTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatLowerTest) ;
  const cPtr_immediatLowerTest * q = (const cPtr_immediatLowerTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatLowerTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatLowerTest::GALGAS_immediatLowerTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerTest::GALGAS_immediatLowerTest (const cPtr_immediatLowerTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatLowerTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerTest GALGAS_immediatLowerTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                    const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatLowerTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatLowerTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatLowerTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatLowerTest * p = (cPtr_immediatLowerTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatLowerTest) ;
    cPtr_immediatLowerTest * r = NULL ;
    macroMyNew (r, cPtr_immediatLowerTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLowerTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLowerTest * p = (const cPtr_immediatLowerTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLowerTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatLowerTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatLowerTest * p = (const cPtr_immediatLowerTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatLowerTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatLowerTest class                 *
//---------------------------------------------------------------------------*

cPtr_immediatLowerTest::cPtr_immediatLowerTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                const GALGAS_immediatExpression & in_mRightExpression
                                                COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatLowerTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLowerTest ;
}

void cPtr_immediatLowerTest::description (C_String & ioString,
                                          const PMSInt32 inIndentation) const {
  ioString << "[@immediatLowerTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @immediatLowerTest type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatLowerTest ("immediatLowerTest",
                                          & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatLowerTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatLowerTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatLowerTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatLowerTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatLowerTest GALGAS_immediatLowerTest::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatLowerTest result ;
  const GALGAS_immediatLowerTest * p = (const GALGAS_immediatLowerTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatLowerTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatLowerTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatMod::objectCompare (const GALGAS_immediatMod & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatMod * p = (const cPtr_immediatMod *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatMod) ;
  const cPtr_immediatMod * q = (const cPtr_immediatMod *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatMod) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatMod::GALGAS_immediatMod (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatMod::GALGAS_immediatMod (const cPtr_immediatMod * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatMod) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatMod GALGAS_immediatMod::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatMod result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatMod (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatMod::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatMod * p = (cPtr_immediatMod *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatMod) ;
    cPtr_immediatMod * r = NULL ;
    macroMyNew (r, cPtr_immediatMod (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatMod::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatMod * p = (const cPtr_immediatMod *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatMod) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatMod::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatMod * p = (const cPtr_immediatMod *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatMod) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatMod class                    *
//---------------------------------------------------------------------------*

cPtr_immediatMod::cPtr_immediatMod (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatMod::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatMod ;
}

void cPtr_immediatMod::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatMod:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatMod type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatMod ("immediatMod",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatMod::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatMod ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatMod::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatMod (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatMod GALGAS_immediatMod::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatMod result ;
  const GALGAS_immediatMod * p = (const GALGAS_immediatMod *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatMod *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatMod", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatMul::objectCompare (const GALGAS_immediatMul & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatMul * p = (const cPtr_immediatMul *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatMul) ;
  const cPtr_immediatMul * q = (const cPtr_immediatMul *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatMul) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatMul::GALGAS_immediatMul (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatMul::GALGAS_immediatMul (const cPtr_immediatMul * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatMul) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatMul GALGAS_immediatMul::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatMul result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatMul (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatMul::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatMul * p = (cPtr_immediatMul *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatMul) ;
    cPtr_immediatMul * r = NULL ;
    macroMyNew (r, cPtr_immediatMul (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatMul::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatMul * p = (const cPtr_immediatMul *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatMul) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatMul::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatMul * p = (const cPtr_immediatMul *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatMul) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatMul class                    *
//---------------------------------------------------------------------------*

cPtr_immediatMul::cPtr_immediatMul (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatMul::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatMul ;
}

void cPtr_immediatMul::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatMul:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatMul type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatMul ("immediatMul",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatMul::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatMul ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatMul::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatMul (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatMul GALGAS_immediatMul::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatMul result ;
  const GALGAS_immediatMul * p = (const GALGAS_immediatMul *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatMul *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatMul", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatNegate::objectCompare (const GALGAS_immediatNegate & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatNegate * p = (const cPtr_immediatNegate *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatNegate) ;
  const cPtr_immediatNegate * q = (const cPtr_immediatNegate *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatNegate) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mExpression.objectCompare (q->mAttribute_mExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatNegate::GALGAS_immediatNegate (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatNegate::GALGAS_immediatNegate (const cPtr_immediatNegate * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatNegate) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatNegate GALGAS_immediatNegate::constructor_new (const GALGAS_immediatExpression & inAttribute_mExpression
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_immediatNegate result ;
  if (inAttribute_mExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatNegate (inAttribute_mExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatNegate::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatNegate * p = (cPtr_immediatNegate *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatNegate) ;
    cPtr_immediatNegate * r = NULL ;
    macroMyNew (r, cPtr_immediatNegate (p->mAttribute_mExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatNegate::reader_mExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatNegate * p = (const cPtr_immediatNegate *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatNegate) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @immediatNegate class                  *
//---------------------------------------------------------------------------*

cPtr_immediatNegate::cPtr_immediatNegate (const GALGAS_immediatExpression & in_mExpression
                                          COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mExpression (in_mExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatNegate::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatNegate ;
}

void cPtr_immediatNegate::description (C_String & ioString,
                                       const PMSInt32 inIndentation) const {
  ioString << "[@immediatNegate:" ;
  mAttribute_mExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @immediatNegate type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatNegate ("immediatNegate",
                                       & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatNegate::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatNegate ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatNegate::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatNegate (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatNegate GALGAS_immediatNegate::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler,
                                                            const GALGAS_location & inErrorLocation
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_immediatNegate result ;
  const GALGAS_immediatNegate * p = (const GALGAS_immediatNegate *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatNegate *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatNegate", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatNotEqualTest::objectCompare (const GALGAS_immediatNotEqualTest & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatNotEqualTest * p = (const cPtr_immediatNotEqualTest *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatNotEqualTest) ;
  const cPtr_immediatNotEqualTest * q = (const cPtr_immediatNotEqualTest *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatNotEqualTest) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatNotEqualTest::GALGAS_immediatNotEqualTest (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatNotEqualTest::GALGAS_immediatNotEqualTest (const cPtr_immediatNotEqualTest * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatNotEqualTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatNotEqualTest GALGAS_immediatNotEqualTest::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                          const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_immediatNotEqualTest result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatNotEqualTest (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatNotEqualTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatNotEqualTest * p = (cPtr_immediatNotEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatNotEqualTest) ;
    cPtr_immediatNotEqualTest * r = NULL ;
    macroMyNew (r, cPtr_immediatNotEqualTest (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatNotEqualTest::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatNotEqualTest * p = (const cPtr_immediatNotEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatNotEqualTest) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatNotEqualTest::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatNotEqualTest * p = (const cPtr_immediatNotEqualTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatNotEqualTest) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @immediatNotEqualTest class               *
//---------------------------------------------------------------------------*

cPtr_immediatNotEqualTest::cPtr_immediatNotEqualTest (const GALGAS_immediatExpression & in_mLeftExpression,
                                                      const GALGAS_immediatExpression & in_mRightExpression
                                                      COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatNotEqualTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatNotEqualTest ;
}

void cPtr_immediatNotEqualTest::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@immediatNotEqualTest:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @immediatNotEqualTest type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatNotEqualTest ("immediatNotEqualTest",
                                             & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatNotEqualTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatNotEqualTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatNotEqualTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatNotEqualTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatNotEqualTest GALGAS_immediatNotEqualTest::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatNotEqualTest result ;
  const GALGAS_immediatNotEqualTest * p = (const GALGAS_immediatNotEqualTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatNotEqualTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatNotEqualTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatOr::objectCompare (const GALGAS_immediatOr & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatOr * p = (const cPtr_immediatOr *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatOr) ;
  const cPtr_immediatOr * q = (const cPtr_immediatOr *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatOr) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatOr::GALGAS_immediatOr (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatOr::GALGAS_immediatOr (const cPtr_immediatOr * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatOr) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatOr GALGAS_immediatOr::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                      const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatOr result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatOr (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatOr::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatOr * p = (cPtr_immediatOr *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatOr) ;
    cPtr_immediatOr * r = NULL ;
    macroMyNew (r, cPtr_immediatOr (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatOr::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatOr * p = (const cPtr_immediatOr *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatOr) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatOr::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatOr * p = (const cPtr_immediatOr *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatOr) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                    Pointer class for @immediatOr class                    *
//---------------------------------------------------------------------------*

cPtr_immediatOr::cPtr_immediatOr (const GALGAS_immediatExpression & in_mLeftExpression,
                                  const GALGAS_immediatExpression & in_mRightExpression
                                  COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatOr::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatOr ;
}

void cPtr_immediatOr::description (C_String & ioString,
                                   const PMSInt32 inIndentation) const {
  ioString << "[@immediatOr:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatOr type                              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatOr ("immediatOr",
                                   & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatOr::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatOr ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatOr::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatOr (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatOr GALGAS_immediatOr::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler,
                                                    const GALGAS_location & inErrorLocation
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatOr result ;
  const GALGAS_immediatOr * p = (const GALGAS_immediatOr *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatOr *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatOr", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatRegister::objectCompare (const GALGAS_immediatRegister & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatRegister * p = (const cPtr_immediatRegister *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatRegister) ;
  const cPtr_immediatRegister * q = (const cPtr_immediatRegister *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatRegister) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mRegister.objectCompare (q->mAttribute_mRegister) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatRegister::GALGAS_immediatRegister (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatRegister::GALGAS_immediatRegister (const cPtr_immediatRegister * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatRegister) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatRegister GALGAS_immediatRegister::constructor_new (const GALGAS_registerExpression & inAttribute_mRegister
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_immediatRegister result ;
  if (inAttribute_mRegister.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatRegister (inAttribute_mRegister COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatRegister::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatRegister * p = (cPtr_immediatRegister *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatRegister) ;
    cPtr_immediatRegister * r = NULL ;
    macroMyNew (r, cPtr_immediatRegister (p->mAttribute_mRegister COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_immediatRegister::reader_mRegister (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatRegister * p = (const cPtr_immediatRegister *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatRegister) ;
    result = p->mAttribute_mRegister ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @immediatRegister class                 *
//---------------------------------------------------------------------------*

cPtr_immediatRegister::cPtr_immediatRegister (const GALGAS_registerExpression & in_mRegister
                                              COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mRegister (in_mRegister) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatRegister::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatRegister ;
}

void cPtr_immediatRegister::description (C_String & ioString,
                                         const PMSInt32 inIndentation) const {
  ioString << "[@immediatRegister:" ;
  mAttribute_mRegister.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @immediatRegister type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatRegister ("immediatRegister",
                                         & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatRegister::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatRegister ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatRegister::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatRegister (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatRegister GALGAS_immediatRegister::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler,
                                                                const GALGAS_location & inErrorLocation
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_immediatRegister result ;
  const GALGAS_immediatRegister * p = (const GALGAS_immediatRegister *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatRegister *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatRegister", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatRightShift::objectCompare (const GALGAS_immediatRightShift & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatRightShift * p = (const cPtr_immediatRightShift *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatRightShift) ;
  const cPtr_immediatRightShift * q = (const cPtr_immediatRightShift *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatRightShift) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatRightShift::GALGAS_immediatRightShift (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatRightShift::GALGAS_immediatRightShift (const cPtr_immediatRightShift * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatRightShift) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatRightShift GALGAS_immediatRightShift::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                                      const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatRightShift result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatRightShift (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatRightShift::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatRightShift * p = (cPtr_immediatRightShift *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatRightShift) ;
    cPtr_immediatRightShift * r = NULL ;
    macroMyNew (r, cPtr_immediatRightShift (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatRightShift::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatRightShift * p = (const cPtr_immediatRightShift *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatRightShift) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatRightShift::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatRightShift * p = (const cPtr_immediatRightShift *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatRightShift) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @immediatRightShift class                *
//---------------------------------------------------------------------------*

cPtr_immediatRightShift::cPtr_immediatRightShift (const GALGAS_immediatExpression & in_mLeftExpression,
                                                  const GALGAS_immediatExpression & in_mRightExpression
                                                  COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatRightShift::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatRightShift ;
}

void cPtr_immediatRightShift::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@immediatRightShift:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @immediatRightShift type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatRightShift ("immediatRightShift",
                                           & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatRightShift::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatRightShift ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatRightShift::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatRightShift (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatRightShift GALGAS_immediatRightShift::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_immediatRightShift result ;
  const GALGAS_immediatRightShift * p = (const GALGAS_immediatRightShift *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatRightShift *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatRightShift", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatSlice::objectCompare (const GALGAS_immediatSlice & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatSlice * p = (const cPtr_immediatSlice *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatSlice) ;
  const cPtr_immediatSlice * q = (const cPtr_immediatSlice *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatSlice) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mRegisterName.objectCompare (q->mAttribute_mRegisterName) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mSliceExpressionList.objectCompare (q->mAttribute_mSliceExpressionList) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatSlice::GALGAS_immediatSlice (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatSlice::GALGAS_immediatSlice (const cPtr_immediatSlice * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatSlice) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSlice GALGAS_immediatSlice::constructor_new (const GALGAS_lstring & inAttribute_mRegisterName,
                                                            const GALGAS_immediatSliceExpressionList & inAttribute_mSliceExpressionList
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_immediatSlice result ;
  if (inAttribute_mRegisterName.isValid () && inAttribute_mSliceExpressionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatSlice (inAttribute_mRegisterName, inAttribute_mSliceExpressionList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSlice::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatSlice * p = (cPtr_immediatSlice *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatSlice) ;
    cPtr_immediatSlice * r = NULL ;
    macroMyNew (r, cPtr_immediatSlice (p->mAttribute_mRegisterName, p->mAttribute_mSliceExpressionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_immediatSlice::reader_mRegisterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatSlice * p = (const cPtr_immediatSlice *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatSlice) ;
    result = p->mAttribute_mRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSliceExpressionList GALGAS_immediatSlice::reader_mSliceExpressionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatSliceExpressionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatSlice * p = (const cPtr_immediatSlice *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatSlice) ;
    result = p->mAttribute_mSliceExpressionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @immediatSlice class                   *
//---------------------------------------------------------------------------*

cPtr_immediatSlice::cPtr_immediatSlice (const GALGAS_lstring & in_mRegisterName,
                                        const GALGAS_immediatSliceExpressionList & in_mSliceExpressionList
                                        COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mRegisterName (in_mRegisterName),
mAttribute_mSliceExpressionList (in_mSliceExpressionList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatSlice::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatSlice ;
}

void cPtr_immediatSlice::description (C_String & ioString,
                                      const PMSInt32 inIndentation) const {
  ioString << "[@immediatSlice:" ;
  mAttribute_mRegisterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSliceExpressionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @immediatSlice type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatSlice ("immediatSlice",
                                      & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatSlice::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatSlice ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatSlice::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatSlice (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSlice GALGAS_immediatSlice::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler,
                                                          const GALGAS_location & inErrorLocation
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_immediatSlice result ;
  const GALGAS_immediatSlice * p = (const GALGAS_immediatSlice *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatSlice *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatSlice", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatSub::objectCompare (const GALGAS_immediatSub & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatSub * p = (const cPtr_immediatSub *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatSub) ;
  const cPtr_immediatSub * q = (const cPtr_immediatSub *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatSub) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatSub::GALGAS_immediatSub (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatSub::GALGAS_immediatSub (const cPtr_immediatSub * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatSub) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSub GALGAS_immediatSub::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatSub result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatSub (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatSub::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatSub * p = (cPtr_immediatSub *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatSub) ;
    cPtr_immediatSub * r = NULL ;
    macroMyNew (r, cPtr_immediatSub (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatSub::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatSub * p = (const cPtr_immediatSub *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatSub) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatSub::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatSub * p = (const cPtr_immediatSub *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatSub) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatSub class                    *
//---------------------------------------------------------------------------*

cPtr_immediatSub::cPtr_immediatSub (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatSub::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatSub ;
}

void cPtr_immediatSub::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatSub:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatSub type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatSub ("immediatSub",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatSub::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatSub ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatSub::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatSub (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatSub GALGAS_immediatSub::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatSub result ;
  const GALGAS_immediatSub * p = (const GALGAS_immediatSub *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatSub *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatSub", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_immediatXor::objectCompare (const GALGAS_immediatXor & inOperand) const {
  typeComparisonResult result = GALGAS_immediatExpression::objectCompare (inOperand) ;
  const cPtr_immediatXor * p = (const cPtr_immediatXor *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_immediatXor) ;
  const cPtr_immediatXor * q = (const cPtr_immediatXor *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_immediatXor) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mLeftExpression.objectCompare (q->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mRightExpression.objectCompare (q->mAttribute_mRightExpression) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_immediatXor::GALGAS_immediatXor (void) :
GALGAS_immediatExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_immediatXor::GALGAS_immediatXor (const cPtr_immediatXor * inSourcePtr) :
GALGAS_immediatExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_immediatXor) ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatXor GALGAS_immediatXor::constructor_new (const GALGAS_immediatExpression & inAttribute_mLeftExpression,
                                                        const GALGAS_immediatExpression & inAttribute_mRightExpression
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_immediatXor result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_immediatXor (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_immediatXor::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_immediatXor * p = (cPtr_immediatXor *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_immediatXor) ;
    cPtr_immediatXor * r = NULL ;
    macroMyNew (r, cPtr_immediatXor (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatXor::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatXor * p = (const cPtr_immediatXor *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatXor) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_immediatXor::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_immediatXor * p = (const cPtr_immediatXor *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_immediatXor) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @immediatXor class                    *
//---------------------------------------------------------------------------*

cPtr_immediatXor::cPtr_immediatXor (const GALGAS_immediatExpression & in_mLeftExpression,
                                    const GALGAS_immediatExpression & in_mRightExpression
                                    COMMA_LOCATION_ARGS) :
cPtr_immediatExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_immediatXor::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatXor ;
}

void cPtr_immediatXor::description (C_String & ioString,
                                    const PMSInt32 inIndentation) const {
  ioString << "[@immediatXor:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @immediatXor type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_immediatXor ("immediatXor",
                                    & kTypeDescriptor_GALGAS_immediatExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_immediatXor::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_immediatXor ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_immediatXor::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_immediatXor (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatXor GALGAS_immediatXor::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_immediatXor result ;
  const GALGAS_immediatXor * p = (const GALGAS_immediatXor *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_immediatXor *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "immediatXor", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_registerExpression::objectCompare (const GALGAS_registerExpression & inOperand) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_registerExpression * p = (const cPtr_registerExpression *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_registerExpression) ;
  const cPtr_registerExpression * q = (const cPtr_registerExpression *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_registerExpression) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mRegisterName.objectCompare (q->mAttribute_mRegisterName) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mOffset.objectCompare (q->mAttribute_mOffset) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_registerExpression::GALGAS_registerExpression (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression::GALGAS_registerExpression (const cPtr_registerExpression * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_registerExpression) ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_registerExpression::constructor_new (const GALGAS_lstring & inAttribute_mRegisterName,
                                                                      const GALGAS_luint & inAttribute_mOffset
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_registerExpression result ;
  if (inAttribute_mRegisterName.isValid () && inAttribute_mOffset.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_registerExpression (inAttribute_mRegisterName, inAttribute_mOffset COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_registerExpression::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_registerExpression * p = (cPtr_registerExpression *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_registerExpression) ;
    cPtr_registerExpression * r = NULL ;
    macroMyNew (r, cPtr_registerExpression (p->mAttribute_mRegisterName, p->mAttribute_mOffset COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_registerExpression::reader_mRegisterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerExpression * p = (const cPtr_registerExpression *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerExpression) ;
    result = p->mAttribute_mRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_registerExpression::reader_mOffset (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerExpression * p = (const cPtr_registerExpression *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerExpression) ;
    result = p->mAttribute_mOffset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @registerExpression class                *
//---------------------------------------------------------------------------*

cPtr_registerExpression::cPtr_registerExpression (const GALGAS_lstring & in_mRegisterName,
                                                  const GALGAS_luint & in_mOffset
                                                  COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mRegisterName (in_mRegisterName),
mAttribute_mOffset (in_mOffset) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_registerExpression::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerExpression ;
}

void cPtr_registerExpression::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@registerExpression:" ;
  mAttribute_mRegisterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOffset.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @registerExpression type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerExpression ("registerExpression",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerExpression::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerExpression ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerExpression::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerExpression (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_registerExpression::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_registerExpression result ;
  const GALGAS_registerExpression * p = (const GALGAS_registerExpression *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerExpression *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "registerExpression", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Abstract category method '@bitNumberExpression display'          *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_bitNumberExpression_display> gCategoryMethodTable_bitNumberExpression_display ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_display (const PMSInt32 inClassIndex,
                                  categoryMethodSignature_bitNumberExpression_display inMethod) {
  gCategoryMethodTable_bitNumberExpression_display.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_bitNumberExpression_display (void) {
  gCategoryMethodTable_bitNumberExpression_display.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberExpression_display (NULL,
                                                        freeCategoryMethod_bitNumberExpression_display) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_display (const cPtr_bitNumberExpression * inObject,
                                 GALGAS_string & io_ioString,
                                 C_Compiler * inCompiler
                                 COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_bitNumberExpression) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_bitNumberExpression_display f = NULL ;
    if (classIndex < gCategoryMethodTable_bitNumberExpression_display.count ()) {
      f = gCategoryMethodTable_bitNumberExpression_display (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_bitNumberExpression_display.count ()) {
           f = gCategoryMethodTable_bitNumberExpression_display (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_bitNumberExpression_display.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    f (inObject, io_ioString, inCompiler COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Overriding category method '@bitNumberLiteralValue display'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_bitNumberLiteralValue_display (const cPtr_bitNumberExpression * inObject,
                                                          GALGAS_string & ioArgument_ioString,
                                                          C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_bitNumberLiteralValue * object = (const cPtr_bitNumberLiteralValue *) inObject ;
  macroValidSharedObject (object, const cPtr_bitNumberLiteralValue) ;
  //-------- @concatInstructionForGeneration
  ioArgument_ioString.dotAssign_operation (object->mAttribute_mBitNumberLiteralValue.reader_uint (SOURCE_FILE_AT_LINE (268)).reader_string (SOURCE_FILE_AT_LINE (268)) COMMA_SOURCE_FILE_AT_LINE (268)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_bitNumberLiteralValue_display (void) {
  enterCategoryMethod_display (kTypeDescriptor_GALGAS_bitNumberLiteralValue.mSlotID,
                               categoryMethod_bitNumberLiteralValue_display) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberLiteralValue_display (defineCategoryMethod_bitNumberLiteralValue_display, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Overriding category method '@bitNumberLabelValue display'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_bitNumberLabelValue_display (const cPtr_bitNumberExpression * inObject,
                                                        GALGAS_string & ioArgument_ioString,
                                                        C_Compiler * /* inCompiler */
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_bitNumberLabelValue * object = (const cPtr_bitNumberLabelValue *) inObject ;
  macroValidSharedObject (object, const cPtr_bitNumberLabelValue) ;
  //-------- @concatInstructionForGeneration
  ioArgument_ioString.dotAssign_operation (object->mAttribute_mBitNumberLabelValue.reader_string (SOURCE_FILE_AT_LINE (281)).operator_concat (GALGAS_string (" [") COMMA_SOURCE_FILE_AT_LINE (281)).operator_concat (object->mAttribute_mBitNumberIndexValue.reader_uint (SOURCE_FILE_AT_LINE (281)).reader_string (SOURCE_FILE_AT_LINE (281)) COMMA_SOURCE_FILE_AT_LINE (281)).operator_concat (GALGAS_string ("]") COMMA_SOURCE_FILE_AT_LINE (281)) COMMA_SOURCE_FILE_AT_LINE (281)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_bitNumberLabelValue_display (void) {
  enterCategoryMethod_display (kTypeDescriptor_GALGAS_bitNumberLabelValue.mSlotID,
                               categoryMethod_bitNumberLabelValue_display) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberLabelValue_display (defineCategoryMethod_bitNumberLabelValue_display, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


