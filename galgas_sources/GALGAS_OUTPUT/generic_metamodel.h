//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'generic_metamodel.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 11th, 2009, at 11h51'12"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef generic_metamodel_DEFINED
#define generic_metamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitSliceTable ;
class GGS_registerExpression ;
class cPtr_registerExpression ;
class GGS_declarationInRam ;
class cPtr_declarationInRam ;
class GGS_byteDeclarationInRam ;
class cPtr_byteDeclarationInRam ;
class GGS_declarationInRamList ;
class GGS_commonBranchList ;
class GGS_commonDeclarationInRam ;
class cPtr_commonDeclarationInRam ;
class GGS_ramDefinitionList ;
class GGS_configSettingList ;
class GGS_configDefinitionList ;
class GGS_immediatExpression ;
class cPtr_immediatExpression ;
class GGS_immediatExpressionList ;
class GGS_immediatInteger ;
class cPtr_immediatInteger ;
class GGS_immediatRegister ;
class cPtr_immediatRegister ;
class GGS_immediatAdd ;
class cPtr_immediatAdd ;
class GGS_immediatSub ;
class cPtr_immediatSub ;
class GGS_immediatMul ;
class cPtr_immediatMul ;
class GGS_immediatDiv ;
class cPtr_immediatDiv ;
class GGS_immediatMod ;
class cPtr_immediatMod ;
class GGS_immediatOr ;
class cPtr_immediatOr ;
class GGS_immediatAnd ;
class cPtr_immediatAnd ;
class GGS_immediatXor ;
class cPtr_immediatXor ;
class GGS_immediatLeftShift ;
class cPtr_immediatLeftShift ;
class GGS_immediatRightShift ;
class cPtr_immediatRightShift ;
class GGS_immediatEqualTest ;
class cPtr_immediatEqualTest ;
class GGS_immediatNotEqualTest ;
class cPtr_immediatNotEqualTest ;
class GGS_immediatGreaterTest ;
class cPtr_immediatGreaterTest ;
class GGS_immediatGreaterOrEqualTest ;
class cPtr_immediatGreaterOrEqualTest ;
class GGS_immediatLowerTest ;
class cPtr_immediatLowerTest ;
class GGS_immediatLowerOrEqualTest ;
class cPtr_immediatLowerOrEqualTest ;
class GGS_immediatNegate ;
class cPtr_immediatNegate ;
class GGS_immediatComplement ;
class cPtr_immediatComplement ;
class GGS_immediatSliceExpressionList ;
class GGS_immediatSlice ;
class cPtr_immediatSlice ;
class GGS_constantDefinitionList ;
class GGS_actualConfigurationMap ;
class GGS_bitNumberExpression ;
class cPtr_bitNumberExpression ;
class GGS_bitNumberLiteralValue ;
class cPtr_bitNumberLiteralValue ;
class GGS_bitNumberLabelValue ;
class cPtr_bitNumberLabelValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@bitSliceTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_bitSliceTable ;

class GGS_bitSliceTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_bitSliceTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_bitSliceTable & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_bitSliceTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_bitSliceTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_bitSliceTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_bitSliceTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_bitSliceTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_bitSliceTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_bitSliceTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_bitSliceTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_bitSliceTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mSliceIndex (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mSliceSize (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_registerExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_registerExpression (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_registerExpression (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_registerExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_registerExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_registerExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_registerExpression * getPtr (void) const {
    return (cPtr_registerExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mOffset (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_registerExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_registerExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_registerExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__registerExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_declarationInRam'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_declarationInRam : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_declarationInRam (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_declarationInRam (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_declarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_declarationInRam
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_declarationInRam * getPtr (void) const {
    return (cPtr_declarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_declarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_declarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_declarationInRam *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__declarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_byteDeclarationInRam'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_byteDeclarationInRam : public GGS_declarationInRam {
//--- Default constructor
  public : inline GGS_byteDeclarationInRam (void) :
  GGS_declarationInRam () {}

//--- Pointer assignment constructor
  public : GGS_byteDeclarationInRam (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_byteDeclarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_byteDeclarationInRam
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_byteDeclarationInRam constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bitSliceTable & argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_byteDeclarationInRam * getPtr (void) const {
    return (cPtr_byteDeclarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mSize (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitSliceTable  reader_mBitSliceTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mBitDefinitionString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_byteDeclarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_byteDeclarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_byteDeclarationInRam *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__byteDeclarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@declarationInRamList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_declarationInRamList ;

class GGS_declarationInRamList : public AC_galgas_list {
  public : typedef elementOf_GGS_declarationInRamList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_declarationInRamList constructor_emptyList (void) ;
  public : static GGS_declarationInRamList constructor_listWithValue (const GGS_declarationInRam & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_declarationInRamList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_declarationInRamList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_declarationInRamList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_declarationInRamList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_declarationInRam & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_declarationInRam & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_declarationInRam & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_declarationInRam & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_declarationInRamList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_declarationInRam & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_declarationInRamList operator_concat (const GGS_declarationInRamList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_declarationInRam 
  reader_mDeclarationInRAMAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMDeclarationInRAMAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRam  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_declarationInRamList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_declarationInRam   & _mDeclarationInRAM (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@commonBranchList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_commonBranchList ;

class GGS_commonBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_commonBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_commonBranchList constructor_emptyList (void) ;
  public : static GGS_commonBranchList constructor_listWithValue (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_commonBranchList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_commonBranchList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_commonBranchList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_commonBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_declarationInRamList & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_declarationInRamList & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_declarationInRamList & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_declarationInRamList & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_commonBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_commonBranchList operator_concat (const GGS_commonBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_declarationInRamList 
  reader_mDeclarationsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfBranchLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMDeclarationsAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRamList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfBranchLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_commonBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_declarationInRamList   & _mDeclarations (LOCATION_ARGS) const ;
    public : /* const */ GGS_location   & _mEndOfBranchLocation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_commonDeclarationInRam'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_commonDeclarationInRam : public GGS_declarationInRam {
//--- Default constructor
  public : inline GGS_commonDeclarationInRam (void) :
  GGS_declarationInRam () {}

//--- Pointer assignment constructor
  public : GGS_commonDeclarationInRam (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_commonDeclarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_commonDeclarationInRam
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_commonDeclarationInRam constructor_new (C_Compiler & inLexique,
                                const GGS_commonBranchList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_commonDeclarationInRam * getPtr (void) const {
    return (cPtr_commonDeclarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_commonBranchList  reader_mBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_commonDeclarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_commonDeclarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_commonDeclarationInRam *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__commonDeclarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@ramDefinitionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList ;

class GGS_ramDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_ramDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ramDefinitionList constructor_emptyList (void) ;
  public : static GGS_ramDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ramDefinitionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_ramDefinitionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ramDefinitionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_ramDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_declarationInRamList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_declarationInRamList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_declarationInRamList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_declarationInRamList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_ramDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_ramDefinitionList operator_concat (const GGS_ramDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mBankNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_declarationInRamList 
  reader_mDeclarationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMBankNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMDeclarationAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRamList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ramDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mBankName (LOCATION_ARGS) const ;
    public : /* const */ GGS_declarationInRamList   & _mDeclaration (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@configSettingList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configSettingList ;

class GGS_configSettingList : public AC_galgas_list {
  public : typedef elementOf_GGS_configSettingList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_configSettingList constructor_emptyList (void) ;
  public : static GGS_configSettingList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_configSettingList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_configSettingList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_configSettingList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_configSettingList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_configSettingList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_configSettingList operator_concat (const GGS_configSettingList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mSettingNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSettingValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSettingNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSettingValueAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_configSettingList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mSettingName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mSettingValue (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@configDefinitionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configDefinitionList ;

class GGS_configDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_configDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_configDefinitionList constructor_emptyList (void) ;
  public : static GGS_configDefinitionList constructor_listWithValue (const GGS_location & argument_0,
                                const GGS_configSettingList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_configDefinitionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_configDefinitionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_configDefinitionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_configDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_location & _out_0,
                              GGS_configSettingList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_location & _out_0,
                             GGS_configSettingList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_location & _out_0,
                                GGS_configSettingList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_location & _out_0,
                                 GGS_configSettingList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_configDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_location & argument_0,
                                const GGS_configSettingList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_configDefinitionList operator_concat (const GGS_configDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_configSettingList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_configSettingList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_configSettingList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_location 
  reader_mDefinitionLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_configSettingList 
  reader_mSettingListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMDefinitionLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSettingListAtIndex (C_Compiler & inLexique,
                              const GGS_configSettingList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_configDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_location   & _mDefinitionLocation (LOCATION_ARGS) const ;
    public : /* const */ GGS_configSettingList   & _mSettingList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_immediatExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_immediatExpression (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_immediatExpression (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatExpression * getPtr (void) const {
    return (cPtr_immediatExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__immediatExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@immediatExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_immediatExpressionList ;

class GGS_immediatExpressionList : public AC_galgas_list {
  public : typedef elementOf_GGS_immediatExpressionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_immediatExpressionList constructor_emptyList (void) ;
  public : static GGS_immediatExpressionList constructor_listWithValue (const GGS_immediatExpression & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_immediatExpressionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_immediatExpressionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_immediatExpressionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_immediatExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_immediatExpression & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_immediatExpression & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_immediatExpression & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_immediatExpression & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_immediatExpressionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_immediatExpression & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_immediatExpressionList operator_concat (const GGS_immediatExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_immediatExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_immediatExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_immediatExpression 
  reader_mExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_immediatExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_immediatExpressionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_immediatExpression   & _mExpression (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_immediatInteger'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatInteger : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatInteger (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatInteger (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatInteger (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatInteger
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatInteger constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatInteger * getPtr (void) const {
    return (cPtr_immediatInteger *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatInteger * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatInteger * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatInteger *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatInteger ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_immediatRegister'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatRegister : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatRegister (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatRegister (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatRegister (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatRegister
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatRegister constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatRegister * getPtr (void) const {
    return (cPtr_immediatRegister *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegister (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatRegister * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatRegister * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatRegister *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatRegister ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatAdd'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatAdd : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatAdd (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatAdd (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatAdd (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatAdd
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatAdd constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatAdd * getPtr (void) const {
    return (cPtr_immediatAdd *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatAdd * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatAdd * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatAdd *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatAdd ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatSub'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatSub : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatSub (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatSub (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatSub (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatSub
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatSub constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatSub * getPtr (void) const {
    return (cPtr_immediatSub *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatSub * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatSub * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatSub *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatSub ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatMul'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatMul : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatMul (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatMul (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatMul (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatMul
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatMul constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatMul * getPtr (void) const {
    return (cPtr_immediatMul *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatMul * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatMul * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatMul *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatMul ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatDiv'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatDiv : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatDiv (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatDiv (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatDiv (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatDiv
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatDiv constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatDiv * getPtr (void) const {
    return (cPtr_immediatDiv *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatDiv * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatDiv * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatDiv *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatDiv ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatMod'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatMod : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatMod (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatMod (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatMod (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatMod
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatMod constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatMod * getPtr (void) const {
    return (cPtr_immediatMod *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatMod * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatMod * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatMod *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatMod ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatOr'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatOr : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatOr (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatOr (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatOr (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatOr
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatOr constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatOr * getPtr (void) const {
    return (cPtr_immediatOr *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatOr * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatOr * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatOr *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatOr ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatAnd'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatAnd : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatAnd (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatAnd (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatAnd (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatAnd
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatAnd constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatAnd * getPtr (void) const {
    return (cPtr_immediatAnd *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatAnd * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatAnd * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatAnd *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatAnd ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_immediatXor'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatXor : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatXor (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatXor (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatXor (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatXor
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatXor constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatXor * getPtr (void) const {
    return (cPtr_immediatXor *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatXor * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatXor * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatXor *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatXor ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_immediatLeftShift'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatLeftShift : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatLeftShift (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatLeftShift (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatLeftShift (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatLeftShift
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatLeftShift constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatLeftShift * getPtr (void) const {
    return (cPtr_immediatLeftShift *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatLeftShift * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatLeftShift * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatLeftShift *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatLeftShift ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_immediatRightShift'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatRightShift : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatRightShift (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatRightShift (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatRightShift (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatRightShift
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatRightShift constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatRightShift * getPtr (void) const {
    return (cPtr_immediatRightShift *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatRightShift * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatRightShift * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatRightShift *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatRightShift ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_immediatEqualTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatEqualTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatEqualTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatEqualTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatEqualTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatEqualTest * getPtr (void) const {
    return (cPtr_immediatEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatEqualTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatEqualTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_immediatNotEqualTest'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatNotEqualTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatNotEqualTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatNotEqualTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatNotEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatNotEqualTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatNotEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatNotEqualTest * getPtr (void) const {
    return (cPtr_immediatNotEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatNotEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatNotEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatNotEqualTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatNotEqualTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_immediatGreaterTest'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatGreaterTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatGreaterTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatGreaterTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatGreaterTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatGreaterTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatGreaterTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatGreaterTest * getPtr (void) const {
    return (cPtr_immediatGreaterTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatGreaterTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatGreaterTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatGreaterTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatGreaterTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_immediatGreaterOrEqualTest'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatGreaterOrEqualTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatGreaterOrEqualTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatGreaterOrEqualTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatGreaterOrEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatGreaterOrEqualTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatGreaterOrEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatGreaterOrEqualTest * getPtr (void) const {
    return (cPtr_immediatGreaterOrEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatGreaterOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatGreaterOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatGreaterOrEqualTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatGreaterOrEqualTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_immediatLowerTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatLowerTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatLowerTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatLowerTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatLowerTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatLowerTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatLowerTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatLowerTest * getPtr (void) const {
    return (cPtr_immediatLowerTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatLowerTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatLowerTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatLowerTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatLowerTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_immediatLowerOrEqualTest'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatLowerOrEqualTest : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatLowerOrEqualTest (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatLowerOrEqualTest (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatLowerOrEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatLowerOrEqualTest
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatLowerOrEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatLowerOrEqualTest * getPtr (void) const {
    return (cPtr_immediatLowerOrEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatLowerOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatLowerOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatLowerOrEqualTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatLowerOrEqualTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_immediatNegate'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatNegate : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatNegate (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatNegate (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatNegate (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatNegate
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatNegate constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatNegate * getPtr (void) const {
    return (cPtr_immediatNegate *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatNegate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatNegate * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatNegate *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatNegate ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_immediatComplement'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatComplement : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatComplement (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatComplement (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatComplement (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatComplement
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatComplement constructor_new (C_Compiler & inLexique,
                                const GGS_immediatExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatComplement * getPtr (void) const {
    return (cPtr_immediatComplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_immediatExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatComplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatComplement * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatComplement *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatComplement ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@immediatSliceExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_immediatSliceExpressionList ;

class GGS_immediatSliceExpressionList : public AC_galgas_list {
  public : typedef elementOf_GGS_immediatSliceExpressionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_immediatSliceExpressionList constructor_emptyList (void) ;
  public : static GGS_immediatSliceExpressionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_immediatSliceExpressionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_immediatSliceExpressionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_immediatSliceExpressionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_immediatSliceExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_immediatExpression & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_immediatExpression & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_immediatExpression & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_immediatExpression & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_immediatSliceExpressionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_immediatSliceExpressionList operator_concat (const GGS_immediatSliceExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mSliceNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression 
  reader_mExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSliceNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_immediatExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_immediatSliceExpressionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mSliceName (LOCATION_ARGS) const ;
    public : /* const */ GGS_immediatExpression   & _mExpression (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_immediatSlice'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_immediatSlice : public GGS_immediatExpression {
//--- Default constructor
  public : inline GGS_immediatSlice (void) :
  GGS_immediatExpression () {}

//--- Pointer assignment constructor
  public : GGS_immediatSlice (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_immediatSlice (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_immediatSlice
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_immediatSlice constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_immediatSliceExpressionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_immediatSlice * getPtr (void) const {
    return (cPtr_immediatSlice *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatSliceExpressionList  reader_mSliceExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_immediatSlice * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_immediatSlice * operator () (LOCATION_ARGS) const {
      return (cPtr_immediatSlice *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__immediatSlice ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@constantDefinitionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constantDefinitionList ;

class GGS_constantDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_constantDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_constantDefinitionList constructor_emptyList (void) ;
  public : static GGS_constantDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_constantDefinitionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_constantDefinitionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_constantDefinitionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_constantDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_immediatExpression & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_immediatExpression & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_immediatExpression & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_immediatExpression & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_constantDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_constantDefinitionList operator_concat (const GGS_constantDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_immediatExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mConstantNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_immediatExpression 
  reader_mExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMConstantNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_immediatExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_constantDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mConstantName (LOCATION_ARGS) const ;
    public : /* const */ GGS_immediatExpression   & _mExpression (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map '@actualConfigurationMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualConfigurationMap ;

class GGS_actualConfigurationMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_actualConfigurationMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_actualConfigurationMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_actualConfigurationMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_actualConfigurationMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_actualConfigurationMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_actualConfigurationMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRegisterValueForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_actualConfigurationMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_actualConfigurationMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_actualConfigurationMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_actualConfigurationMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_actualConfigurationMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRegisterAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mRegisterValue (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_bitNumberExpression (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberExpression (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_bitNumberExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberExpression * getPtr (void) const {
    return (cPtr_bitNumberExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__bitNumberExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_bitNumberLiteralValue'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLiteralValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLiteralValue (void) :
  GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLiteralValue (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLiteralValue (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_bitNumberLiteralValue
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLiteralValue constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLiteralValue * getPtr (void) const {
    return (cPtr_bitNumberLiteralValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mBitNumberLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLiteralValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLiteralValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberLabelValue'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLabelValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLabelValue (void) :
  GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLabelValue (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLabelValue (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_bitNumberLabelValue
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLabelValue constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLabelValue * getPtr (void) const {
    return (cPtr_bitNumberLabelValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mBitNumberLabelValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mBitNumberIndexValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLabelValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLabelValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@bitSliceTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_bitSliceTable {
  public : GGS_uint  mSliceIndex ;
  public : GGS_uint  mSliceSize ;

  public : e_bitSliceTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_bitSliceTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_bitSliceTable (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_bitSliceTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_bitSliceTable * nextObject (void) const { return (elementOf_GGS_bitSliceTable *) mNextItem ; }
  public : inline elementOf_GGS_bitSliceTable * infObject (void) const { return (elementOf_GGS_bitSliceTable *) mInfPtr ; }
  public : inline elementOf_GGS_bitSliceTable * supObject (void) const { return (elementOf_GGS_bitSliceTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_bitSliceTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_registerExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_registerExpression : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_registerExpression (const GGS_lstring & ,
                                const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_registerExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mRegisterName ;
  public : GGS_luint  mOffset ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_declarationInRam'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_declarationInRam : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_declarationInRam (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_declarationInRam (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_byteDeclarationInRam'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_byteDeclarationInRam : public cPtr_declarationInRam {
  private : typedef cPtr_declarationInRam inherited ;
//--- Constructor
  public : cPtr_byteDeclarationInRam (const GGS_lstring & ,
                                const GGS_luint & ,
                                const GGS_bitSliceTable & ,
                                const GGS_string& 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_byteDeclarationInRam (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_luint  mSize ;
  public : GGS_bitSliceTable  mBitSliceTable ;
  public : GGS_string mBitDefinitionString ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@declarationInRamList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_declarationInRamList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_declarationInRam  mDeclarationInRAM ;
//--- Constructor
  public : elementOf_GGS_declarationInRamList (const GGS_declarationInRam & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_declarationInRamList * nextObject (void) const { return (elementOf_GGS_declarationInRamList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_declarationInRamList * previousObject (void) const { return (elementOf_GGS_declarationInRamList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_declarationInRamList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@commonBranchList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_commonBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_declarationInRamList  mDeclarations ;
  public : GGS_location  mEndOfBranchLocation ;
//--- Constructor
  public : elementOf_GGS_commonBranchList (const GGS_declarationInRamList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_commonBranchList * nextObject (void) const { return (elementOf_GGS_commonBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_commonBranchList * previousObject (void) const { return (elementOf_GGS_commonBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_commonBranchList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_commonDeclarationInRam'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_commonDeclarationInRam : public cPtr_declarationInRam {
  private : typedef cPtr_declarationInRam inherited ;
//--- Constructor
  public : cPtr_commonDeclarationInRam (const GGS_commonBranchList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_commonDeclarationInRam (void) {}
  #endif

//--- Attributes
  public : GGS_commonBranchList  mBranchList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@ramDefinitionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mBankName ;
  public : GGS_declarationInRamList  mDeclaration ;
//--- Constructor
  public : elementOf_GGS_ramDefinitionList (const GGS_lstring & ,
                                const GGS_declarationInRamList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ramDefinitionList * nextObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ramDefinitionList * previousObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_ramDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@configSettingList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configSettingList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mSettingName ;
  public : GGS_lstring  mSettingValue ;
//--- Constructor
  public : elementOf_GGS_configSettingList (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_configSettingList * nextObject (void) const { return (elementOf_GGS_configSettingList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_configSettingList * previousObject (void) const { return (elementOf_GGS_configSettingList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_configSettingList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@configDefinitionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_location  mDefinitionLocation ;
  public : GGS_configSettingList  mSettingList ;
//--- Constructor
  public : elementOf_GGS_configDefinitionList (const GGS_location & ,
                                const GGS_configSettingList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_configDefinitionList * nextObject (void) const { return (elementOf_GGS_configDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_configDefinitionList * previousObject (void) const { return (elementOf_GGS_configDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_configDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatExpression : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_immediatExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@immediatExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_immediatExpressionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_immediatExpression  mExpression ;
//--- Constructor
  public : elementOf_GGS_immediatExpressionList (const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_immediatExpressionList * nextObject (void) const { return (elementOf_GGS_immediatExpressionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_immediatExpressionList * previousObject (void) const { return (elementOf_GGS_immediatExpressionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_immediatExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_immediatInteger'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatInteger : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatInteger (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatInteger (void) {}
  #endif

//--- Attributes
  public : GGS_luint  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_immediatRegister'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatRegister : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatRegister (const GGS_registerExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatRegister (void) {}
  #endif

//--- Attributes
  public : GGS_registerExpression  mRegister ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatAdd'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatAdd : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatAdd (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatAdd (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatSub'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatSub : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatSub (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatSub (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatMul'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatMul : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatMul (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatMul (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatDiv'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatDiv : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatDiv (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatDiv (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatMod'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatMod : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatMod (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatMod (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     abstract class 'cPtr_immediatOr'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatOr : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatOr (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatOr (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatAnd'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatAnd : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatAnd (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatAnd (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_immediatXor'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatXor : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatXor (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatXor (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatLeftShift'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatLeftShift : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatLeftShift (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatLeftShift (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatRightShift'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatRightShift : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatRightShift (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatRightShift (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatEqualTest'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatEqualTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatEqualTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatEqualTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_immediatNotEqualTest'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatNotEqualTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatNotEqualTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatNotEqualTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_immediatGreaterTest'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatGreaterTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatGreaterTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatGreaterTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_immediatGreaterOrEqualTest'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatGreaterOrEqualTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatGreaterOrEqualTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatGreaterOrEqualTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatLowerTest'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatLowerTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatLowerTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatLowerTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_immediatLowerOrEqualTest'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatLowerOrEqualTest : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatLowerOrEqualTest (const GGS_immediatExpression & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatLowerOrEqualTest (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mLeftExpression ;
  public : GGS_immediatExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_immediatNegate'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatNegate : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatNegate (const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatNegate (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_immediatComplement'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatComplement : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatComplement (const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatComplement (void) {}
  #endif

//--- Attributes
  public : GGS_immediatExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@immediatSliceExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_immediatSliceExpressionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mSliceName ;
  public : GGS_immediatExpression  mExpression ;
//--- Constructor
  public : elementOf_GGS_immediatSliceExpressionList (const GGS_lstring & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_immediatSliceExpressionList * nextObject (void) const { return (elementOf_GGS_immediatSliceExpressionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_immediatSliceExpressionList * previousObject (void) const { return (elementOf_GGS_immediatSliceExpressionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_immediatSliceExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_immediatSlice'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_immediatSlice : public cPtr_immediatExpression {
  private : typedef cPtr_immediatExpression inherited ;
//--- Constructor
  public : cPtr_immediatSlice (const GGS_lstring & ,
                                const GGS_immediatSliceExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_immediatSlice (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mRegisterName ;
  public : GGS_immediatSliceExpressionList  mSliceExpressionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@constantDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constantDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mConstantName ;
  public : GGS_immediatExpression  mExpression ;
//--- Constructor
  public : elementOf_GGS_constantDefinitionList (const GGS_lstring & ,
                                const GGS_immediatExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_constantDefinitionList * nextObject (void) const { return (elementOf_GGS_constantDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_constantDefinitionList * previousObject (void) const { return (elementOf_GGS_constantDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_constantDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@actualConfigurationMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_actualConfigurationMap {
  public : GGS_uint  mRegisterAddress ;
  public : GGS_uint  mRegisterValue ;

  public : e_actualConfigurationMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_actualConfigurationMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_actualConfigurationMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_actualConfigurationMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_actualConfigurationMap * nextObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mNextItem ; }
  public : inline elementOf_GGS_actualConfigurationMap * infObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mInfPtr ; }
  public : inline elementOf_GGS_actualConfigurationMap * supObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_actualConfigurationMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_bitNumberExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_bitNumberExpression : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_bitNumberExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_bitNumberExpression (void) {}
  #endif

//--- Attributes
//--- Method 'display'
  public : virtual void method_display (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const = 0 ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_bitNumberLiteralValue'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_bitNumberLiteralValue : public cPtr_bitNumberExpression {
  private : typedef cPtr_bitNumberExpression inherited ;
//--- Constructor
  public : cPtr_bitNumberLiteralValue (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_bitNumberLiteralValue (void) {}
  #endif

//--- Attributes
  public : GGS_luint  mBitNumberLiteralValue ;
//--- Method 'display'
  public : virtual void method_display (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_bitNumberLabelValue'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_bitNumberLabelValue : public cPtr_bitNumberExpression {
  private : typedef cPtr_bitNumberExpression inherited ;
//--- Constructor
  public : cPtr_bitNumberLabelValue (const GGS_lstring & ,
                                const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_bitNumberLabelValue (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mBitNumberLabelValue ;
  public : GGS_luint  mBitNumberIndexValue ;
//--- Method 'display'
  public : virtual void method_display (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
