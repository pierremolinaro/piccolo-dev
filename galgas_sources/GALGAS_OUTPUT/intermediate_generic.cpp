//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'intermediate_generic.cpp'                       *
//                        Generated by version 2.5.4                         *
//                    february 17th, 2014, at 13h27'44"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "intermediate_generic.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*


//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "intermediate_generic.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                     Routine 'checkCurrentEmitAddress'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (const GALGAS_uint constinArgument_inCurrentAddress,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint var_addr ;
  {
  routine_currentEmitAddress (var_addr, inCompiler COMMA_SOURCE_FILE_AT_LINE (42)) ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (43)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).operator_and (GALGAS_bool (kIsNotEqual, var_addr.objectCompare (constinArgument_inCurrentAddress)) COMMA_SOURCE_FILE_AT_LINE (43)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("internal error: current emit address is ").operator_concat (var_addr.reader_hexString (SOURCE_FILE_AT_LINE (44)) COMMA_SOURCE_FILE_AT_LINE (44)).operator_concat (GALGAS_string ("; it should be ") COMMA_SOURCE_FILE_AT_LINE (44)).operator_concat (constinArgument_inCurrentAddress.reader_hexString (SOURCE_FILE_AT_LINE (45)) COMMA_SOURCE_FILE_AT_LINE (45)) COMMA_SOURCE_FILE_AT_LINE (44)) ;
  }
}


//-----------------------------------------------------------------------------*

cMapElement_constantMap::cMapElement_constantMap (const GALGAS_lstring & inKey,
                                                  const GALGAS_sint_36__34_ & in_mValue
                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mValue (in_mValue) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_constantMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValue.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_constantMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_constantMap (mAttribute_lkey, mAttribute_mValue COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_constantMap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mValue" ":" ;
  mAttribute_mValue.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_constantMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_constantMap * operand = (cMapElement_constantMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (operand->mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap::GALGAS_constantMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap::GALGAS_constantMap (const GALGAS_constantMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap & GALGAS_constantMap::operator = (const GALGAS_constantMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap GALGAS_constantMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_constantMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap GALGAS_constantMap::constructor_mapWithMapToOverride (const GALGAS_constantMap & inMapToOverride
                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_constantMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap GALGAS_constantMap::reader_overriddenMap (C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_constantMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_constantMap::modifier_insertKey (GALGAS_lstring inKey,
                                             GALGAS_sint_36__34_ inArgument0,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  cMapElement_constantMap * p = NULL ;
  macroMyNew (p, cMapElement_constantMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constant is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_constantMap_searchKey = "the '%K' constant is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_constantMap::method_searchKey (GALGAS_lstring inKey,
                                           GALGAS_sint_36__34_ & outArgument0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  const cMapElement_constantMap * p = (const cMapElement_constantMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kSearchErrorMessage_constantMap_searchKey
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_constantMap) ;
    outArgument0 = p->mAttribute_mValue ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_sint_36__34_ GALGAS_constantMap::reader_mValueForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_constantMap * p = (const cMapElement_constantMap *) attributes ;
  GALGAS_sint_36__34_ result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_constantMap) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantMap::modifier_setMValueForKey (GALGAS_sint_36__34_ inAttributeValue,
                                                   GALGAS_string inKey,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constantMap * p = (cMapElement_constantMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constantMap) ;
    p->mAttribute_mValue = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_constantMap * GALGAS_constantMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & inKey
                                                                                        COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constantMap * result = (cMapElement_constantMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_constantMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_constantMap * GALGAS_constantMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                           const GALGAS_lstring & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_constantMap_searchKey COMMA_THERE) ;
  cMapElement_constantMap * result = (cMapElement_constantMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_constantMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_constantMap::cEnumerator_constantMap (const GALGAS_constantMap & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element cEnumerator_constantMap::current (LOCATION_ARGS) const {
  const cMapElement_constantMap * p = (const cMapElement_constantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_constantMap) ;
  return GALGAS_constantMap_2E_element (p->mAttribute_lkey, p->mAttribute_mValue) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_constantMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_sint_36__34_ cEnumerator_constantMap::current_mValue (LOCATION_ARGS) const {
  const cMapElement_constantMap * p = (const cMapElement_constantMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_constantMap) ;
  return p->mAttribute_mValue ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                             @constantMap type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantMap ("constantMap",
                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap GALGAS_constantMap::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_constantMap result ;
  const GALGAS_constantMap * p = (const GALGAS_constantMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_routineMap::cMapElement_routineMap (const GALGAS_lstring & inKey,
                                                const GALGAS_bool & in_mIsNoReturn,
                                                const GALGAS_uint & in_mRequiredBank,
                                                const GALGAS_uint & in_mReturnedBank,
                                                const GALGAS_bool & in_mPreservesBank
                                                COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mIsNoReturn (in_mIsNoReturn),
mAttribute_mRequiredBank (in_mRequiredBank),
mAttribute_mReturnedBank (in_mReturnedBank),
mAttribute_mPreservesBank (in_mPreservesBank) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_routineMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIsNoReturn.isValid () && mAttribute_mRequiredBank.isValid () && mAttribute_mReturnedBank.isValid () && mAttribute_mPreservesBank.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_routineMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_routineMap (mAttribute_lkey, mAttribute_mIsNoReturn, mAttribute_mRequiredBank, mAttribute_mReturnedBank, mAttribute_mPreservesBank COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_routineMap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsNoReturn" ":" ;
  mAttribute_mIsNoReturn.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredBank" ":" ;
  mAttribute_mRequiredBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mReturnedBank" ":" ;
  mAttribute_mReturnedBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreservesBank" ":" ;
  mAttribute_mPreservesBank.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_routineMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_routineMap * operand = (cMapElement_routineMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mIsNoReturn.objectCompare (operand->mAttribute_mIsNoReturn) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRequiredBank.objectCompare (operand->mAttribute_mRequiredBank) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mReturnedBank.objectCompare (operand->mAttribute_mReturnedBank) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mPreservesBank.objectCompare (operand->mAttribute_mPreservesBank) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap::GALGAS_routineMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap::GALGAS_routineMap (const GALGAS_routineMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap & GALGAS_routineMap::operator = (const GALGAS_routineMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap GALGAS_routineMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_routineMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap GALGAS_routineMap::constructor_mapWithMapToOverride (const GALGAS_routineMap & inMapToOverride
                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_routineMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap GALGAS_routineMap::reader_overriddenMap (C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  GALGAS_routineMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_routineMap::modifier_insertKey (GALGAS_lstring inKey,
                                            GALGAS_bool inArgument0,
                                            GALGAS_uint inArgument1,
                                            GALGAS_uint inArgument2,
                                            GALGAS_bool inArgument3,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  cMapElement_routineMap * p = NULL ;
  macroMyNew (p, cMapElement_routineMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' routine is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_routineMap_searchKey = "the '%K' routine is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_routineMap::method_searchKey (GALGAS_lstring inKey,
                                          GALGAS_bool & outArgument0,
                                          GALGAS_uint & outArgument1,
                                          GALGAS_uint & outArgument2,
                                          GALGAS_bool & outArgument3,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) performSearch (inKey,
                                                                                       inCompiler,
                                                                                       kSearchErrorMessage_routineMap_searchKey
                                                                                       COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_routineMap) ;
    outArgument0 = p->mAttribute_mIsNoReturn ;
    outArgument1 = p->mAttribute_mRequiredBank ;
    outArgument2 = p->mAttribute_mReturnedBank ;
    outArgument3 = p->mAttribute_mPreservesBank ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineMap::reader_mIsNoReturnForKey (const GALGAS_string & inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_routineMap) ;
    result = p->mAttribute_mIsNoReturn ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_routineMap::reader_mRequiredBankForKey (const GALGAS_string & inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_routineMap) ;
    result = p->mAttribute_mRequiredBank ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_routineMap::reader_mReturnedBankForKey (const GALGAS_string & inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_routineMap) ;
    result = p->mAttribute_mReturnedBank ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineMap::reader_mPreservesBankForKey (const GALGAS_string & inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_routineMap) ;
    result = p->mAttribute_mPreservesBank ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap::modifier_setMIsNoReturnForKey (GALGAS_bool inAttributeValue,
                                                       GALGAS_string inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineMap * p = (cMapElement_routineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineMap) ;
    p->mAttribute_mIsNoReturn = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap::modifier_setMRequiredBankForKey (GALGAS_uint inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineMap * p = (cMapElement_routineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineMap) ;
    p->mAttribute_mRequiredBank = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap::modifier_setMReturnedBankForKey (GALGAS_uint inAttributeValue,
                                                         GALGAS_string inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineMap * p = (cMapElement_routineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineMap) ;
    p->mAttribute_mReturnedBank = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap::modifier_setMPreservesBankForKey (GALGAS_bool inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineMap * p = (cMapElement_routineMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_routineMap) ;
    p->mAttribute_mPreservesBank = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_routineMap * GALGAS_routineMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                      const GALGAS_string & inKey
                                                                                      COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_routineMap * result = (cMapElement_routineMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_routineMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_routineMap * GALGAS_routineMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                         const GALGAS_lstring & inKey
                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_routineMap_searchKey COMMA_THERE) ;
  cMapElement_routineMap * result = (cMapElement_routineMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_routineMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_routineMap::cEnumerator_routineMap (const GALGAS_routineMap & inEnumeratedObject,
                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element cEnumerator_routineMap::current (LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_routineMap) ;
  return GALGAS_routineMap_2E_element (p->mAttribute_lkey, p->mAttribute_mIsNoReturn, p->mAttribute_mRequiredBank, p->mAttribute_mReturnedBank, p->mAttribute_mPreservesBank) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_routineMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineMap::current_mIsNoReturn (LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_routineMap) ;
  return p->mAttribute_mIsNoReturn ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_routineMap::current_mRequiredBank (LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_routineMap) ;
  return p->mAttribute_mRequiredBank ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_routineMap::current_mReturnedBank (LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_routineMap) ;
  return p->mAttribute_mReturnedBank ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineMap::current_mPreservesBank (LOCATION_ARGS) const {
  const cMapElement_routineMap * p = (const cMapElement_routineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_routineMap) ;
  return p->mAttribute_mPreservesBank ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                             @routineMap type                              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineMap ("routineMap",
                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap GALGAS_routineMap::extractObject (const GALGAS_object & inObject,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  GALGAS_routineMap result ;
  const GALGAS_routineMap * p = (const GALGAS_routineMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("routineMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineKind::GALGAS_routineKind (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_routineKind GALGAS_routineKind::constructor_regularRoutine (UNUSED_LOCATION_ARGS) {
  GALGAS_routineKind result ;
  result.mEnum = kEnum_regularRoutine ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineKind GALGAS_routineKind::constructor_noReturnRoutine (UNUSED_LOCATION_ARGS) {
  GALGAS_routineKind result ;
  result.mEnum = kEnum_noReturnRoutine ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineKind GALGAS_routineKind::constructor_interruptRoutine (UNUSED_LOCATION_ARGS) {
  GALGAS_routineKind result ;
  result.mEnum = kEnum_interruptRoutine ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_routineKind [4] = {
  "(not built)",
  "regularRoutine",
  "noReturnRoutine",
  "interruptRoutine"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_routineKind::description (C_String & ioString,
                                      const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @routineKind: " << gEnumNameArrayFor_routineKind [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_routineKind::objectCompare (const GALGAS_routineKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                             @routineKind type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineKind ("routineKind",
                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineKind ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineKind (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineKind GALGAS_routineKind::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_routineKind result ;
  const GALGAS_routineKind * p = (const GALGAS_routineKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("routineKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_symbolTableForOptimizations::cMapElement_symbolTableForOptimizations (const GALGAS_lstring & inKey,
                                                                                  const GALGAS_uint & in_mDefinitionLineIndex,
                                                                                  const GALGAS_bool & in_mIsDeletable
                                                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mDefinitionLineIndex (in_mDefinitionLineIndex),
mAttribute_mIsDeletable (in_mIsDeletable) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_symbolTableForOptimizations::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mDefinitionLineIndex.isValid () && mAttribute_mIsDeletable.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_symbolTableForOptimizations::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_symbolTableForOptimizations (mAttribute_lkey, mAttribute_mDefinitionLineIndex, mAttribute_mIsDeletable COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_symbolTableForOptimizations::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDefinitionLineIndex" ":" ;
  mAttribute_mDefinitionLineIndex.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsDeletable" ":" ;
  mAttribute_mIsDeletable.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_symbolTableForOptimizations::compare (const cCollectionElement * inOperand) const {
  cMapElement_symbolTableForOptimizations * operand = (cMapElement_symbolTableForOptimizations *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mDefinitionLineIndex.objectCompare (operand->mAttribute_mDefinitionLineIndex) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsDeletable.objectCompare (operand->mAttribute_mIsDeletable) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations::GALGAS_symbolTableForOptimizations (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations::GALGAS_symbolTableForOptimizations (const GALGAS_symbolTableForOptimizations & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations & GALGAS_symbolTableForOptimizations::operator = (const GALGAS_symbolTableForOptimizations & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations GALGAS_symbolTableForOptimizations::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_symbolTableForOptimizations result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations GALGAS_symbolTableForOptimizations::constructor_mapWithMapToOverride (const GALGAS_symbolTableForOptimizations & inMapToOverride
                                                                                                         COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForOptimizations result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations GALGAS_symbolTableForOptimizations::reader_overriddenMap (C_Compiler * inCompiler
                                                                                             COMMA_LOCATION_ARGS) const {
  GALGAS_symbolTableForOptimizations result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations::modifier_insertKey (GALGAS_lstring inKey,
                                                             GALGAS_uint inArgument0,
                                                             GALGAS_bool inArgument1,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_symbolTableForOptimizations * p = NULL ;
  macroMyNew (p, cMapElement_symbolTableForOptimizations (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' label is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_symbolTableForOptimizations_searchKey = "the '%K' label is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations::method_searchKey (GALGAS_lstring inKey,
                                                           GALGAS_uint & outArgument0,
                                                           GALGAS_bool & outArgument1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) const {
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) performSearch (inKey,
                                                                                                                         inCompiler,
                                                                                                                         kSearchErrorMessage_symbolTableForOptimizations_searchKey
                                                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
    outArgument0 = p->mAttribute_mDefinitionLineIndex ;
    outArgument1 = p->mAttribute_mIsDeletable ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations::modifier_removeKey (GALGAS_lstring inKey,
                                                             GALGAS_uint & outArgument0,
                                                             GALGAS_bool & outArgument1,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  const char * kRemoveErrorMessage = "the '%K' label is not declared" ;
  capCollectionElement attributes ;
  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;
  cMapElement_symbolTableForOptimizations * p = (cMapElement_symbolTableForOptimizations *) attributes.ptr () ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForOptimizations) ;
    outArgument0 = p->mAttribute_mDefinitionLineIndex ;
    outArgument1 = p->mAttribute_mIsDeletable ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_symbolTableForOptimizations::reader_mDefinitionLineIndexForKey (const GALGAS_string & inKey,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
    result = p->mAttribute_mDefinitionLineIndex ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_symbolTableForOptimizations::reader_mIsDeletableForKey (const GALGAS_string & inKey,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) attributes ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
    result = p->mAttribute_mIsDeletable ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations::modifier_setMDefinitionLineIndexForKey (GALGAS_uint inAttributeValue,
                                                                                 GALGAS_string inKey,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForOptimizations * p = (cMapElement_symbolTableForOptimizations *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForOptimizations) ;
    p->mAttribute_mDefinitionLineIndex = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations::modifier_setMIsDeletableForKey (GALGAS_bool inAttributeValue,
                                                                         GALGAS_string inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForOptimizations * p = (cMapElement_symbolTableForOptimizations *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_symbolTableForOptimizations) ;
    p->mAttribute_mIsDeletable = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_symbolTableForOptimizations * GALGAS_symbolTableForOptimizations::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                                        const GALGAS_string & inKey
                                                                                                                        COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_symbolTableForOptimizations * result = (cMapElement_symbolTableForOptimizations *) p ;
  macroNullOrValidSharedObject (result, cMapElement_symbolTableForOptimizations) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_symbolTableForOptimizations * GALGAS_symbolTableForOptimizations::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                                           const GALGAS_lstring & inKey
                                                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_symbolTableForOptimizations_searchKey COMMA_THERE) ;
  cMapElement_symbolTableForOptimizations * result = (cMapElement_symbolTableForOptimizations *) p ;
  macroNullOrValidSharedObject (result, cMapElement_symbolTableForOptimizations) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_symbolTableForOptimizations::cEnumerator_symbolTableForOptimizations (const GALGAS_symbolTableForOptimizations & inEnumeratedObject,
                                                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element cEnumerator_symbolTableForOptimizations::current (LOCATION_ARGS) const {
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
  return GALGAS_symbolTableForOptimizations_2E_element (p->mAttribute_lkey, p->mAttribute_mDefinitionLineIndex, p->mAttribute_mIsDeletable) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_symbolTableForOptimizations::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_symbolTableForOptimizations::current_mDefinitionLineIndex (LOCATION_ARGS) const {
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
  return p->mAttribute_mDefinitionLineIndex ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool cEnumerator_symbolTableForOptimizations::current_mIsDeletable (LOCATION_ARGS) const {
  const cMapElement_symbolTableForOptimizations * p = (const cMapElement_symbolTableForOptimizations *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_symbolTableForOptimizations) ;
  return p->mAttribute_mIsDeletable ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @symbolTableForOptimizations type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_symbolTableForOptimizations ("symbolTableForOptimizations",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_symbolTableForOptimizations::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_symbolTableForOptimizations ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_symbolTableForOptimizations::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_symbolTableForOptimizations (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations GALGAS_symbolTableForOptimizations::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForOptimizations result ;
  const GALGAS_symbolTableForOptimizations * p = (const GALGAS_symbolTableForOptimizations *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_symbolTableForOptimizations *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("symbolTableForOptimizations", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Routine 'print_constant_definition'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_print_5F_constant_5F_definition (const GALGAS_constantMap constinArgument_inConstantMap,
                                              GALGAS_string & ioArgument_ioListFileContents,
                                              C_Compiler * /* inCompiler */
                                              COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inConstantMap.reader_count (SOURCE_FILE_AT_LINE (474)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (475)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (475)) COMMA_SOURCE_FILE_AT_LINE (475)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*").operator_concat (GALGAS_string ("CONSTANTS").reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (476)) COMMA_SOURCE_FILE_AT_LINE (476)).operator_concat (GALGAS_string ("*\n") COMMA_SOURCE_FILE_AT_LINE (476)) COMMA_SOURCE_FILE_AT_LINE (476)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (477)).operator_concat (GALGAS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (477)) COMMA_SOURCE_FILE_AT_LINE (477)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("Constant").reader_stringByLeftPadding (GALGAS_uint ((PMUInt32) 40U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (478)).operator_concat (GALGAS_string (" Value\n") COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478)) ;
    cEnumerator_constantMap enumerator_18094 (constinArgument_inConstantMap, kEnumeration_up) ;
    while (enumerator_18094.hasCurrentObject ()) {
      ioArgument_ioListFileContents.dotAssign_operation (enumerator_18094.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (480)).reader_stringByLeftPadding (GALGAS_uint ((PMUInt32) 40U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (480)).operator_concat (GALGAS_string (" ") COMMA_SOURCE_FILE_AT_LINE (480)).operator_concat (enumerator_18094.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (480)) COMMA_SOURCE_FILE_AT_LINE (480)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (480)) COMMA_SOURCE_FILE_AT_LINE (480)) ;
      enumerator_18094.gotoNextObject () ;
    }
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (482)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                     Category Reader '@uint x4String'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_x_34_String (const GALGAS_uint & inObject,
                                          C_Compiler * /* inCompiler */
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_uint temp_0 = inObject ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, temp_0.objectCompare (GALGAS_uint ((PMUInt32) 65535U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result_outResult = GALGAS_string ("****") ;
  }else if (kBoolFalse == test_1) {
    //--- @selfCopyInExpressionForGeneration
    const GALGAS_uint temp_2 = inObject ;
    result_outResult = temp_2.right_shift_operation (GALGAS_uint ((PMUInt32) 12U) COMMA_SOURCE_FILE_AT_LINE (32)).reader_xString (SOURCE_FILE_AT_LINE (32)) ;
    //--- @selfCopyInExpressionForGeneration
    const GALGAS_uint temp_3 = inObject ;
    result_outResult.dotAssign_operation (temp_3.right_shift_operation (GALGAS_uint ((PMUInt32) 8U) COMMA_SOURCE_FILE_AT_LINE (33)).operator_and (GALGAS_uint ((PMUInt32) 15U) COMMA_SOURCE_FILE_AT_LINE (33)).reader_xString (SOURCE_FILE_AT_LINE (33)) COMMA_SOURCE_FILE_AT_LINE (33)) ;
    //--- @selfCopyInExpressionForGeneration
    const GALGAS_uint temp_4 = inObject ;
    result_outResult.dotAssign_operation (temp_4.right_shift_operation (GALGAS_uint ((PMUInt32) 4U) COMMA_SOURCE_FILE_AT_LINE (34)).operator_and (GALGAS_uint ((PMUInt32) 15U) COMMA_SOURCE_FILE_AT_LINE (34)).reader_xString (SOURCE_FILE_AT_LINE (34)) COMMA_SOURCE_FILE_AT_LINE (34)) ;
    //--- @selfCopyInExpressionForGeneration
    const GALGAS_uint temp_5 = inObject ;
    result_outResult.dotAssign_operation (temp_5.operator_and (GALGAS_uint ((PMUInt32) 15U) COMMA_SOURCE_FILE_AT_LINE (35)).reader_xString (SOURCE_FILE_AT_LINE (35)) COMMA_SOURCE_FILE_AT_LINE (35)) ;
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//            Abstract category method '@immediatExpression eval'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_immediatExpression_eval> gCategoryMethodTable_immediatExpression_eval ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_eval (const PMSInt32 inClassIndex,
                               categoryMethodSignature_immediatExpression_eval inMethod) {
  gCategoryMethodTable_immediatExpression_eval.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_immediatExpression_eval (void) {
  gCategoryMethodTable_immediatExpression_eval.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatExpression_eval (NULL,
                                                    freeCategoryMethod_immediatExpression_eval) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_eval (const cPtr_immediatExpression * inObject,
                              const GALGAS_registerTable constin_inRegisterTable,
                              const GALGAS_constantMap constin_inConstantMap,
                              GALGAS_sint_36__34_ & out_outResult,
                              GALGAS_stringset & io_ioUsedRegisters,
                              C_Compiler * inCompiler
                              COMMA_LOCATION_ARGS) {
//--- Drop output arguments
  out_outResult.drop () ;
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_immediatExpression) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_immediatExpression_eval f = NULL ;
    if (classIndex < gCategoryMethodTable_immediatExpression_eval.count ()) {
      f = gCategoryMethodTable_immediatExpression_eval (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_immediatExpression_eval.count ()) {
           f = gCategoryMethodTable_immediatExpression_eval (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_immediatExpression_eval.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inRegisterTable, constin_inConstantMap, out_outResult, io_ioUsedRegisters, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//            Overriding category method '@immediatInteger eval'             *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatInteger_eval (const cPtr_immediatExpression * inObject,
                                                 const GALGAS_registerTable /* constinArgument_inRegisterTable */,
                                                 const GALGAS_constantMap /* constinArgument_inConstantMap */,
                                                 GALGAS_sint_36__34_ & outArgument_outResult,
                                                 GALGAS_stringset & /* ioArgument_ioUsedRegisters */,
                                                 C_Compiler * /* inCompiler */
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatInteger * object = (const cPtr_immediatInteger *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatInteger) ;
  outArgument_outResult = object->mAttribute_mValue.reader_uint (SOURCE_FILE_AT_LINE (99)).reader_sint_36__34_ (SOURCE_FILE_AT_LINE (99)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatInteger_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatInteger.mSlotID,
                            categoryMethod_immediatInteger_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatInteger_eval (defineCategoryMethod_immediatInteger_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//            Overriding category method '@immediatRegister eval'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatRegister_eval (const cPtr_immediatExpression * inObject,
                                                  const GALGAS_registerTable constinArgument_inRegisterTable,
                                                  const GALGAS_constantMap constinArgument_inConstantMap,
                                                  GALGAS_sint_36__34_ & outArgument_outResult,
                                                  GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatRegister * object = (const cPtr_immediatRegister *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatRegister) ;
  const enumGalgasBool test_0 = constinArgument_inRegisterTable.reader_hasKey (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (110)).reader_string (SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)).boolEnum () ;
  if (kBoolTrue == test_0) {
    ioArgument_ioUsedRegisters.addAssign_operation (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (111)).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (111)) ;
    GALGAS_uintlist var_registerAddressList ;
    GALGAS_uint var_size ;
    GALGAS_bitSliceTable joker_4171_0 ; // Joker input parameter
    GALGAS_string joker_4174_0 ; // Joker input parameter
    constinArgument_inRegisterTable.method_searchKey (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (112)), var_registerAddressList, var_size, joker_4171_0, joker_4174_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (112)) ;
    GALGAS_uint var_registerAddress ;
    var_registerAddressList.method_first (var_registerAddress, inCompiler COMMA_SOURCE_FILE_AT_LINE (113)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsSupOrEqual, object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (114)).reader_uint (SOURCE_FILE_AT_LINE (114)).objectCompare (var_size)).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_location location_2 (object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (115)).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("index (").operator_concat (object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (115)).reader_uint (SOURCE_FILE_AT_LINE (115)).reader_string (SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)).operator_concat (GALGAS_string (") should be lower than size (") COMMA_SOURCE_FILE_AT_LINE (115)).operator_concat (var_size.reader_string (SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)).operator_concat (GALGAS_string (")") COMMA_SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)) ;
    }
    outArgument_outResult = var_registerAddress.add_operation (object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (117)).reader_uint (SOURCE_FILE_AT_LINE (117)), inCompiler COMMA_SOURCE_FILE_AT_LINE (117)).reader_sint_36__34_ (SOURCE_FILE_AT_LINE (117)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_3 = constinArgument_inConstantMap.reader_hasKey (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (118)).reader_string (SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)).boolEnum () ;
    if (kBoolTrue == test_3) {
      constinArgument_inConstantMap.method_searchKey (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (119)), outArgument_outResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (119)) ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (120)).reader_uint (SOURCE_FILE_AT_LINE (120)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        GALGAS_location location_5 (object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (121)).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_5, GALGAS_string ("index notation (").operator_concat (object->mAttribute_mRegister.reader_mOffset (SOURCE_FILE_AT_LINE (121)).reader_uint (SOURCE_FILE_AT_LINE (121)).reader_string (SOURCE_FILE_AT_LINE (121)) COMMA_SOURCE_FILE_AT_LINE (121)).operator_concat (GALGAS_string (") cannot be used with a constant") COMMA_SOURCE_FILE_AT_LINE (121)) COMMA_SOURCE_FILE_AT_LINE (121)) ;
      }
    }else if (kBoolFalse == test_3) {
      GALGAS_location location_6 (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (124)).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_6, GALGAS_string ("'").operator_concat (object->mAttribute_mRegister.reader_mRegisterName (SOURCE_FILE_AT_LINE (124)).reader_string (SOURCE_FILE_AT_LINE (124)) COMMA_SOURCE_FILE_AT_LINE (124)).operator_concat (GALGAS_string ("' should be declared as ram register or as constant") COMMA_SOURCE_FILE_AT_LINE (124)) COMMA_SOURCE_FILE_AT_LINE (124)) ;
      outArgument_outResult.drop () ; // Release error dropped variable
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatRegister_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatRegister.mSlotID,
                            categoryMethod_immediatRegister_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatRegister_eval (defineCategoryMethod_immediatRegister_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatAdd eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatAdd_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatAdd * object = (const cPtr_immediatAdd *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatAdd) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (136)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (137)) ;
  outArgument_outResult = var_leftResult.add_operation (var_rightResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (138)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatAdd_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatAdd.mSlotID,
                            categoryMethod_immediatAdd_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatAdd_eval (defineCategoryMethod_immediatAdd_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatSub eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatSub_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatSub * object = (const cPtr_immediatSub *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatSub) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (149)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (150)) ;
  outArgument_outResult = var_leftResult.substract_operation (var_rightResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (151)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatSub_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatSub.mSlotID,
                            categoryMethod_immediatSub_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatSub_eval (defineCategoryMethod_immediatSub_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatMul eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatMul_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatMul * object = (const cPtr_immediatMul *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatMul) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (162)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (163)) ;
  outArgument_outResult = var_leftResult.multiply_operation (var_rightResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (164)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatMul_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatMul.mSlotID,
                            categoryMethod_immediatMul_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatMul_eval (defineCategoryMethod_immediatMul_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatDiv eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatDiv_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatDiv * object = (const cPtr_immediatDiv *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatDiv) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (175)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (176)) ;
  outArgument_outResult = var_leftResult.divide_operation (var_rightResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (177)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatDiv_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatDiv.mSlotID,
                            categoryMethod_immediatDiv_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatDiv_eval (defineCategoryMethod_immediatDiv_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatMod eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatMod_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatMod * object = (const cPtr_immediatMod *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatMod) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (188)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (189)) ;
  outArgument_outResult = var_leftResult.modulo_operation (var_rightResult, inCompiler COMMA_SOURCE_FILE_AT_LINE (190)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatMod_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatMod.mSlotID,
                            categoryMethod_immediatMod_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatMod_eval (defineCategoryMethod_immediatMod_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatAnd eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatAnd_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatAnd * object = (const cPtr_immediatAnd *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatAnd) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (201)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (202)) ;
  outArgument_outResult = var_leftResult.operator_and (var_rightResult COMMA_SOURCE_FILE_AT_LINE (203)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatAnd_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatAnd.mSlotID,
                            categoryMethod_immediatAnd_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatAnd_eval (defineCategoryMethod_immediatAnd_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//               Overriding category method '@immediatOr eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatOr_eval (const cPtr_immediatExpression * inObject,
                                            const GALGAS_registerTable constinArgument_inRegisterTable,
                                            const GALGAS_constantMap constinArgument_inConstantMap,
                                            GALGAS_sint_36__34_ & outArgument_outResult,
                                            GALGAS_stringset & ioArgument_ioUsedRegisters,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatOr * object = (const cPtr_immediatOr *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatOr) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (214)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (215)) ;
  outArgument_outResult = var_leftResult.operator_or (var_rightResult COMMA_SOURCE_FILE_AT_LINE (216)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatOr_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatOr.mSlotID,
                            categoryMethod_immediatOr_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatOr_eval (defineCategoryMethod_immediatOr_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//              Overriding category method '@immediatXor eval'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatXor_eval (const cPtr_immediatExpression * inObject,
                                             const GALGAS_registerTable constinArgument_inRegisterTable,
                                             const GALGAS_constantMap constinArgument_inConstantMap,
                                             GALGAS_sint_36__34_ & outArgument_outResult,
                                             GALGAS_stringset & ioArgument_ioUsedRegisters,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatXor * object = (const cPtr_immediatXor *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatXor) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (227)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (228)) ;
  outArgument_outResult = var_leftResult.operator_xor (var_rightResult COMMA_SOURCE_FILE_AT_LINE (229)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatXor_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatXor.mSlotID,
                            categoryMethod_immediatXor_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatXor_eval (defineCategoryMethod_immediatXor_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@immediatLeftShift eval'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatLeftShift_eval (const cPtr_immediatExpression * inObject,
                                                   const GALGAS_registerTable constinArgument_inRegisterTable,
                                                   const GALGAS_constantMap constinArgument_inConstantMap,
                                                   GALGAS_sint_36__34_ & outArgument_outResult,
                                                   GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatLeftShift * object = (const cPtr_immediatLeftShift *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatLeftShift) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (240)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (241)) ;
  outArgument_outResult = var_leftResult.left_shift_operation (var_rightResult.reader_uint (inCompiler COMMA_SOURCE_FILE_AT_LINE (242)) COMMA_SOURCE_FILE_AT_LINE (242)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatLeftShift_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatLeftShift.mSlotID,
                            categoryMethod_immediatLeftShift_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatLeftShift_eval (defineCategoryMethod_immediatLeftShift_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@immediatRightShift eval'           *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatRightShift_eval (const cPtr_immediatExpression * inObject,
                                                    const GALGAS_registerTable constinArgument_inRegisterTable,
                                                    const GALGAS_constantMap constinArgument_inConstantMap,
                                                    GALGAS_sint_36__34_ & outArgument_outResult,
                                                    GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatRightShift * object = (const cPtr_immediatRightShift *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatRightShift) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (253)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (254)) ;
  outArgument_outResult = var_leftResult.right_shift_operation (var_rightResult.reader_uint (inCompiler COMMA_SOURCE_FILE_AT_LINE (255)) COMMA_SOURCE_FILE_AT_LINE (255)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatRightShift_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatRightShift.mSlotID,
                            categoryMethod_immediatRightShift_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatRightShift_eval (defineCategoryMethod_immediatRightShift_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@immediatEqualTest eval'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatEqualTest_eval (const cPtr_immediatExpression * inObject,
                                                   const GALGAS_registerTable constinArgument_inRegisterTable,
                                                   const GALGAS_constantMap constinArgument_inConstantMap,
                                                   GALGAS_sint_36__34_ & outArgument_outResult,
                                                   GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatEqualTest * object = (const cPtr_immediatEqualTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatEqualTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (266)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (267)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatEqualTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatEqualTest.mSlotID,
                            categoryMethod_immediatEqualTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatEqualTest_eval (defineCategoryMethod_immediatEqualTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//          Overriding category method '@immediatNotEqualTest eval'          *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatNotEqualTest_eval (const cPtr_immediatExpression * inObject,
                                                      const GALGAS_registerTable constinArgument_inRegisterTable,
                                                      const GALGAS_constantMap constinArgument_inConstantMap,
                                                      GALGAS_sint_36__34_ & outArgument_outResult,
                                                      GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatNotEqualTest * object = (const cPtr_immediatNotEqualTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatNotEqualTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (283)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (284)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatNotEqualTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatNotEqualTest.mSlotID,
                            categoryMethod_immediatNotEqualTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatNotEqualTest_eval (defineCategoryMethod_immediatNotEqualTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//       Overriding category method '@immediatGreaterOrEqualTest eval'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatGreaterOrEqualTest_eval (const cPtr_immediatExpression * inObject,
                                                            const GALGAS_registerTable constinArgument_inRegisterTable,
                                                            const GALGAS_constantMap constinArgument_inConstantMap,
                                                            GALGAS_sint_36__34_ & outArgument_outResult,
                                                            GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                            C_Compiler * inCompiler
                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatGreaterOrEqualTest * object = (const cPtr_immediatGreaterOrEqualTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatGreaterOrEqualTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (300)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (301)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsSupOrEqual, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatGreaterOrEqualTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatGreaterOrEqualTest.mSlotID,
                            categoryMethod_immediatGreaterOrEqualTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatGreaterOrEqualTest_eval (defineCategoryMethod_immediatGreaterOrEqualTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        Overriding category method '@immediatLowerOrEqualTest eval'        *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatLowerOrEqualTest_eval (const cPtr_immediatExpression * inObject,
                                                          const GALGAS_registerTable constinArgument_inRegisterTable,
                                                          const GALGAS_constantMap constinArgument_inConstantMap,
                                                          GALGAS_sint_36__34_ & outArgument_outResult,
                                                          GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                          C_Compiler * inCompiler
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatLowerOrEqualTest * object = (const cPtr_immediatLowerOrEqualTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatLowerOrEqualTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (317)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (318)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsInfOrEqual, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatLowerOrEqualTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatLowerOrEqualTest.mSlotID,
                            categoryMethod_immediatLowerOrEqualTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatLowerOrEqualTest_eval (defineCategoryMethod_immediatLowerOrEqualTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//          Overriding category method '@immediatGreaterTest eval'           *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatGreaterTest_eval (const cPtr_immediatExpression * inObject,
                                                     const GALGAS_registerTable constinArgument_inRegisterTable,
                                                     const GALGAS_constantMap constinArgument_inConstantMap,
                                                     GALGAS_sint_36__34_ & outArgument_outResult,
                                                     GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatGreaterTest * object = (const cPtr_immediatGreaterTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatGreaterTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (334)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (335)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatGreaterTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatGreaterTest.mSlotID,
                            categoryMethod_immediatGreaterTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatGreaterTest_eval (defineCategoryMethod_immediatGreaterTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@immediatLowerTest eval'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatLowerTest_eval (const cPtr_immediatExpression * inObject,
                                                   const GALGAS_registerTable constinArgument_inRegisterTable,
                                                   const GALGAS_constantMap constinArgument_inConstantMap,
                                                   GALGAS_sint_36__34_ & outArgument_outResult,
                                                   GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatLowerTest * object = (const cPtr_immediatLowerTest *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatLowerTest) ;
  GALGAS_sint_36__34_ var_leftResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mLeftExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_leftResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (351)) ;
  GALGAS_sint_36__34_ var_rightResult ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mRightExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_rightResult, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (352)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictInf, var_leftResult.objectCompare (var_rightResult)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 1LL) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatLowerTest_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatLowerTest.mSlotID,
                            categoryMethod_immediatLowerTest_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatLowerTest_eval (defineCategoryMethod_immediatLowerTest_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//             Overriding category method '@immediatNegate eval'             *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatNegate_eval (const cPtr_immediatExpression * inObject,
                                                const GALGAS_registerTable constinArgument_inRegisterTable,
                                                const GALGAS_constantMap constinArgument_inConstantMap,
                                                GALGAS_sint_36__34_ & outArgument_outResult,
                                                GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatNegate * object = (const cPtr_immediatNegate *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatNegate) ;
  GALGAS_sint_36__34_ var_result ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_result, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (368)) ;
  outArgument_outResult = var_result.operator_unary_minus (inCompiler COMMA_SOURCE_FILE_AT_LINE (369)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatNegate_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatNegate.mSlotID,
                            categoryMethod_immediatNegate_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatNegate_eval (defineCategoryMethod_immediatNegate_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@immediatComplement eval'           *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatComplement_eval (const cPtr_immediatExpression * inObject,
                                                    const GALGAS_registerTable constinArgument_inRegisterTable,
                                                    const GALGAS_constantMap constinArgument_inConstantMap,
                                                    GALGAS_sint_36__34_ & outArgument_outResult,
                                                    GALGAS_stringset & ioArgument_ioUsedRegisters,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatComplement * object = (const cPtr_immediatComplement *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatComplement) ;
  GALGAS_sint_36__34_ var_result ;
  callCategoryMethod_eval ((const cPtr_immediatExpression *) object->mAttribute_mExpression.ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_result, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (380)) ;
  outArgument_outResult = var_result.operator_tilde (SOURCE_FILE_AT_LINE (381)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatComplement_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatComplement.mSlotID,
                            categoryMethod_immediatComplement_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatComplement_eval (defineCategoryMethod_immediatComplement_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//             Overriding category method '@immediatSlice eval'              *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_immediatSlice_eval (const cPtr_immediatExpression * inObject,
                                               const GALGAS_registerTable constinArgument_inRegisterTable,
                                               const GALGAS_constantMap constinArgument_inConstantMap,
                                               GALGAS_sint_36__34_ & outArgument_outResult,
                                               GALGAS_stringset & ioArgument_ioUsedRegisters,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_immediatSlice * object = (const cPtr_immediatSlice *) inObject ;
  macroValidSharedObject (object, const cPtr_immediatSlice) ;
  GALGAS_bitSliceTable var_bitSliceTable ;
  outArgument_outResult = GALGAS_sint_36__34_ ((PMSInt64) 0LL) ;
  ioArgument_ioUsedRegisters.addAssign_operation (object->mAttribute_mRegisterName.mAttribute_string COMMA_SOURCE_FILE_AT_LINE (394)) ;
  GALGAS_uintlist joker_14382_0 ; // Joker input parameter
  GALGAS_uint joker_14385_0 ; // Joker input parameter
  GALGAS_string joker_14404_0 ; // Joker input parameter
  constinArgument_inRegisterTable.method_searchKey (object->mAttribute_mRegisterName, joker_14382_0, joker_14385_0, var_bitSliceTable, joker_14404_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (395)) ;
  GALGAS_stringset var_sliceNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (396)) ;
  cEnumerator_immediatSliceExpressionList enumerator_14478 (object->mAttribute_mSliceExpressionList, kEnumeration_up) ;
  while (enumerator_14478.hasCurrentObject ()) {
    const enumGalgasBool test_0 = var_sliceNameSet.reader_hasKey (enumerator_14478.current_mSliceName (HERE).reader_string (SOURCE_FILE_AT_LINE (398)) COMMA_SOURCE_FILE_AT_LINE (398)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (enumerator_14478.current_mSliceName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_14478.current_mSliceName (HERE).reader_string (SOURCE_FILE_AT_LINE (399)) COMMA_SOURCE_FILE_AT_LINE (399)).operator_concat (GALGAS_string ("' bit field has been already defined") COMMA_SOURCE_FILE_AT_LINE (399)) COMMA_SOURCE_FILE_AT_LINE (399)) ;
    }else if (kBoolFalse == test_0) {
      var_sliceNameSet.addAssign_operation (enumerator_14478.current_mSliceName (HERE).reader_string (SOURCE_FILE_AT_LINE (401)) COMMA_SOURCE_FILE_AT_LINE (401)) ;
      GALGAS_uint var_sliceIndex ;
      GALGAS_uint var_sliceSize ;
      var_bitSliceTable.method_searchKey (enumerator_14478.current_mSliceName (HERE), var_sliceIndex, var_sliceSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (404)) ;
      GALGAS_sint_36__34_ var_result ;
      callCategoryMethod_eval ((const cPtr_immediatExpression *) enumerator_14478.current_mExpression (HERE).ptr (), constinArgument_inRegisterTable, constinArgument_inConstantMap, var_result, ioArgument_ioUsedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (405)) ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictInf, var_result.objectCompare (GALGAS_sint_36__34_ ((PMSInt64) 0LL))).operator_or (GALGAS_bool (kIsStrictSup, var_result.objectCompare (GALGAS_sint_36__34_ ((PMSInt64) 1LL).left_shift_operation (var_sliceSize COMMA_SOURCE_FILE_AT_LINE (406)).substract_operation (GALGAS_sint_36__34_ ((PMSInt64) 1LL), inCompiler COMMA_SOURCE_FILE_AT_LINE (406)))) COMMA_SOURCE_FILE_AT_LINE (406)).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_location location_3 (enumerator_14478.current_mSliceName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_3, GALGAS_string ("invalid immediat value associated to the '").operator_concat (enumerator_14478.current_mSliceName (HERE).reader_string (SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (GALGAS_string ("' bit field, evaluated as ") COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (var_result.reader_string (SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (GALGAS_string (" (should be between 0 and ") COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (GALGAS_uint ((PMUInt32) 1U).left_shift_operation (var_sliceSize COMMA_SOURCE_FILE_AT_LINE (408)).substract_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (408)).reader_string (SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)).operator_concat (GALGAS_string (")") COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
      }
      outArgument_outResult = outArgument_outResult.operator_or (var_result.left_shift_operation (var_sliceIndex COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)) ;
    }
    enumerator_14478.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_immediatSlice_eval (void) {
  enterCategoryMethod_eval (kTypeDescriptor_GALGAS_immediatSlice.mSlotID,
                            categoryMethod_immediatSlice_eval) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_immediatSlice_eval (defineCategoryMethod_immediatSlice_eval, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//       Abstract category method '@bitNumberExpression getBitNumber'        *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_bitNumberExpression_getBitNumber> gCategoryMethodTable_bitNumberExpression_getBitNumber ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_getBitNumber (const PMSInt32 inClassIndex,
                                       categoryMethodSignature_bitNumberExpression_getBitNumber inMethod) {
  gCategoryMethodTable_bitNumberExpression_getBitNumber.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_bitNumberExpression_getBitNumber (void) {
  gCategoryMethodTable_bitNumberExpression_getBitNumber.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberExpression_getBitNumber (NULL,
                                                             freeCategoryMethod_bitNumberExpression_getBitNumber) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_getBitNumber (const cPtr_bitNumberExpression * inObject,
                                      const GALGAS_bitSliceTable constin_inBitSliceTable,
                                      GALGAS_uint & out_outBitNumber,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) {
//--- Drop output arguments
  out_outBitNumber.drop () ;
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_bitNumberExpression) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_bitNumberExpression_getBitNumber f = NULL ;
    if (classIndex < gCategoryMethodTable_bitNumberExpression_getBitNumber.count ()) {
      f = gCategoryMethodTable_bitNumberExpression_getBitNumber (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_bitNumberExpression_getBitNumber.count ()) {
           f = gCategoryMethodTable_bitNumberExpression_getBitNumber (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_bitNumberExpression_getBitNumber.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inBitSliceTable, out_outBitNumber, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@bitNumberLiteralValue getBitNumber'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_bitNumberLiteralValue_getBitNumber (const cPtr_bitNumberExpression * inObject,
                                                               const GALGAS_bitSliceTable /* constinArgument_inBitSliceTable */,
                                                               GALGAS_uint & outArgument_outBitNumber,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_bitNumberLiteralValue * object = (const cPtr_bitNumberLiteralValue *) inObject ;
  macroValidSharedObject (object, const cPtr_bitNumberLiteralValue) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, object->mAttribute_mBitNumberLiteralValue.reader_uint (SOURCE_FILE_AT_LINE (432)).objectCompare (GALGAS_uint ((PMUInt32) 7U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mBitNumberLiteralValue.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("The bit number is ").operator_concat (object->mAttribute_mBitNumberLiteralValue.reader_uint (SOURCE_FILE_AT_LINE (433)).reader_string (SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)).operator_concat (GALGAS_string (" (should be <= 7)") COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)) ;
  }
  outArgument_outBitNumber = object->mAttribute_mBitNumberLiteralValue.reader_uint (SOURCE_FILE_AT_LINE (435)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_bitNumberLiteralValue_getBitNumber (void) {
  enterCategoryMethod_getBitNumber (kTypeDescriptor_GALGAS_bitNumberLiteralValue.mSlotID,
                                    categoryMethod_bitNumberLiteralValue_getBitNumber) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberLiteralValue_getBitNumber (defineCategoryMethod_bitNumberLiteralValue_getBitNumber, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@bitNumberLabelValue getBitNumber'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_bitNumberLabelValue_getBitNumber (const cPtr_bitNumberExpression * inObject,
                                                             const GALGAS_bitSliceTable constinArgument_inBitSliceTable,
                                                             GALGAS_uint & outArgument_outBitNumber,
                                                             C_Compiler * inCompiler
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_bitNumberLabelValue * object = (const cPtr_bitNumberLabelValue *) inObject ;
  macroValidSharedObject (object, const cPtr_bitNumberLabelValue) ;
  GALGAS_uint var_sliceIndex ;
  GALGAS_uint var_sliceSize ;
  constinArgument_inBitSliceTable.method_searchKey (object->mAttribute_mBitNumberLabelValue, var_sliceIndex, var_sliceSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (446)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, object->mAttribute_mBitNumberIndexValue.reader_uint (SOURCE_FILE_AT_LINE (447)).objectCompare (var_sliceSize)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mBitNumberIndexValue.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("The ").operator_concat (object->mAttribute_mBitNumberIndexValue.reader_uint (SOURCE_FILE_AT_LINE (448)).reader_string (SOURCE_FILE_AT_LINE (448)) COMMA_SOURCE_FILE_AT_LINE (448)).operator_concat (GALGAS_string (" index is too large (should be < ") COMMA_SOURCE_FILE_AT_LINE (448)).operator_concat (var_sliceSize.reader_string (SOURCE_FILE_AT_LINE (449)) COMMA_SOURCE_FILE_AT_LINE (449)).operator_concat (GALGAS_string (")") COMMA_SOURCE_FILE_AT_LINE (449)) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  }
  outArgument_outBitNumber = var_sliceIndex.add_operation (object->mAttribute_mBitNumberIndexValue.reader_uint (SOURCE_FILE_AT_LINE (451)), inCompiler COMMA_SOURCE_FILE_AT_LINE (451)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_bitNumberLabelValue_getBitNumber (void) {
  enterCategoryMethod_getBitNumber (kTypeDescriptor_GALGAS_bitNumberLabelValue.mSlotID,
                                    categoryMethod_bitNumberLabelValue_getBitNumber) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_bitNumberLabelValue_getBitNumber (defineCategoryMethod_bitNumberLabelValue_getBitNumber, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element::GALGAS_constantMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mValue () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element::~ GALGAS_constantMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element::GALGAS_constantMap_2E_element (const GALGAS_lstring & inOperand0,
                                                              const GALGAS_sint_36__34_ & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mValue (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element GALGAS_constantMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_constantMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                        GALGAS_sint_36__34_::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element GALGAS_constantMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                              const GALGAS_sint_36__34_ & inOperand1 
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_constantMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_constantMap_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_constantMap_2E_element::objectCompare (const GALGAS_constantMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mValue.objectCompare (inOperand.mAttribute_mValue) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_constantMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValue.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mValue.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantMap_2E_element::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "<struct @constantMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mValue.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_constantMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_sint_36__34_ GALGAS_constantMap_2E_element::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @constantMap.element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantMap_2E_element ("constantMap.element",
                                               NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantMap_2E_element GALGAS_constantMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_constantMap_2E_element result ;
  const GALGAS_constantMap_2E_element * p = (const GALGAS_constantMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element::GALGAS_routineMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mIsNoReturn (),
mAttribute_mRequiredBank (),
mAttribute_mReturnedBank (),
mAttribute_mPreservesBank () {
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element::~ GALGAS_routineMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element::GALGAS_routineMap_2E_element (const GALGAS_lstring & inOperand0,
                                                            const GALGAS_bool & inOperand1,
                                                            const GALGAS_uint & inOperand2,
                                                            const GALGAS_uint & inOperand3,
                                                            const GALGAS_bool & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mIsNoReturn (inOperand1),
mAttribute_mRequiredBank (inOperand2),
mAttribute_mReturnedBank (inOperand3),
mAttribute_mPreservesBank (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element GALGAS_routineMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_routineMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                       GALGAS_bool::constructor_default (HERE),
                                       GALGAS_uint::constructor_default (HERE),
                                       GALGAS_uint::constructor_default (HERE),
                                       GALGAS_bool::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element GALGAS_routineMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                            const GALGAS_bool & inOperand1,
                                                                            const GALGAS_uint & inOperand2,
                                                                            const GALGAS_uint & inOperand3,
                                                                            const GALGAS_bool & inOperand4 
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_routineMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_routineMap_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_routineMap_2E_element::objectCompare (const GALGAS_routineMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsNoReturn.objectCompare (inOperand.mAttribute_mIsNoReturn) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredBank.objectCompare (inOperand.mAttribute_mRequiredBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mReturnedBank.objectCompare (inOperand.mAttribute_mReturnedBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPreservesBank.objectCompare (inOperand.mAttribute_mPreservesBank) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_routineMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIsNoReturn.isValid () && mAttribute_mRequiredBank.isValid () && mAttribute_mReturnedBank.isValid () && mAttribute_mPreservesBank.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mIsNoReturn.drop () ;
  mAttribute_mRequiredBank.drop () ;
  mAttribute_mReturnedBank.drop () ;
  mAttribute_mPreservesBank.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_routineMap_2E_element::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "<struct @routineMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsNoReturn.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mReturnedBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPreservesBank.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_routineMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineMap_2E_element::reader_mIsNoReturn (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsNoReturn ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_routineMap_2E_element::reader_mRequiredBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredBank ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_routineMap_2E_element::reader_mReturnedBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mReturnedBank ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineMap_2E_element::reader_mPreservesBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreservesBank ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @routineMap.element type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineMap_2E_element ("routineMap.element",
                                              NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_routineMap_2E_element GALGAS_routineMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_routineMap_2E_element result ;
  const GALGAS_routineMap_2E_element * p = (const GALGAS_routineMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("routineMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element::GALGAS_symbolTableForOptimizations_2E_element (void) :
mAttribute_lkey (),
mAttribute_mDefinitionLineIndex (),
mAttribute_mIsDeletable () {
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element::~ GALGAS_symbolTableForOptimizations_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element::GALGAS_symbolTableForOptimizations_2E_element (const GALGAS_lstring & inOperand0,
                                                                                              const GALGAS_uint & inOperand1,
                                                                                              const GALGAS_bool & inOperand2) :
mAttribute_lkey (inOperand0),
mAttribute_mDefinitionLineIndex (inOperand1),
mAttribute_mIsDeletable (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element GALGAS_symbolTableForOptimizations_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_symbolTableForOptimizations_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                        GALGAS_uint::constructor_default (HERE),
                                                        GALGAS_bool::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element GALGAS_symbolTableForOptimizations_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                              const GALGAS_uint & inOperand1,
                                                                                                              const GALGAS_bool & inOperand2 
                                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_symbolTableForOptimizations_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_symbolTableForOptimizations_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_symbolTableForOptimizations_2E_element::objectCompare (const GALGAS_symbolTableForOptimizations_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDefinitionLineIndex.objectCompare (inOperand.mAttribute_mDefinitionLineIndex) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsDeletable.objectCompare (inOperand.mAttribute_mIsDeletable) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_symbolTableForOptimizations_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mDefinitionLineIndex.isValid () && mAttribute_mIsDeletable.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mDefinitionLineIndex.drop () ;
  mAttribute_mIsDeletable.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_symbolTableForOptimizations_2E_element::description (C_String & ioString,
                                                                 const PMSInt32 inIndentation) const {
  ioString << "<struct @symbolTableForOptimizations.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDefinitionLineIndex.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsDeletable.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_symbolTableForOptimizations_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_symbolTableForOptimizations_2E_element::reader_mDefinitionLineIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDefinitionLineIndex ;
}

//-----------------------------------------------------------------------------*

GALGAS_bool GALGAS_symbolTableForOptimizations_2E_element::reader_mIsDeletable (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsDeletable ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                 @symbolTableForOptimizations.element type                 *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_symbolTableForOptimizations_2E_element ("symbolTableForOptimizations.element",
                                                               NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_symbolTableForOptimizations_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_symbolTableForOptimizations_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_symbolTableForOptimizations_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_symbolTableForOptimizations_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_symbolTableForOptimizations_2E_element GALGAS_symbolTableForOptimizations_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                            C_Compiler * inCompiler
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_symbolTableForOptimizations_2E_element result ;
  const GALGAS_symbolTableForOptimizations_2E_element * p = (const GALGAS_symbolTableForOptimizations_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_symbolTableForOptimizations_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("symbolTableForOptimizations.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


