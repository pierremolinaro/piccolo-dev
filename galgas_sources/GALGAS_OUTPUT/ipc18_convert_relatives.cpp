//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'ipc18_convert_relatives.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 13th, 2009, at 19h19'58"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipc18_convert_relatives.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipc18_convert_relatives.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            class 'e_ipic18_symbolTableForConvertingRelatives'             *
//                                                                           *
//---------------------------------------------------------------------------*

e_ipic18_symbolTableForConvertingRelatives::e_ipic18_symbolTableForConvertingRelatives (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//          class map '@ipic18_symbolTableForConvertingRelatives'            *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_ipic18_symbolTableForConvertingRelatives::
elementOf_GGS_ipic18_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_ipic18_symbolTableForConvertingRelatives & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ipic18_symbolTableForConvertingRelatives::
appendForMapDescription (C_Compiler & inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ipic18_symbolTableForConvertingRelatives::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_ipic18_symbolTableForConvertingRelatives * ptr = dynamic_cast <const elementOf_GGS_ipic18_symbolTableForConvertingRelatives *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress.operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_ipic18_symbolTableForConvertingRelatives::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_ipic18_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_ipic18_symbolTableForConvertingRelatives * info = (e_ipic18_symbolTableForConvertingRelatives *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_ipic18_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_ipic18_symbolTableForConvertingRelatives * info = (e_ipic18_symbolTableForConvertingRelatives *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTableForConvertingRelatives GGS_ipic18_symbolTableForConvertingRelatives::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTableForConvertingRelatives result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_ipic18_symbolTableForConvertingRelatives info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTableForConvertingRelatives::
operator_isEqual (const GGS_ipic18_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTableForConvertingRelatives::
operator_isNotEqual (const GGS_ipic18_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_ipic18_symbolTableForConvertingRelatives info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTableForConvertingRelatives::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTableForConvertingRelatives::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTableForConvertingRelatives::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTableForConvertingRelatives GGS_ipic18_symbolTableForConvertingRelatives::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_ipic18_symbolTableForConvertingRelatives & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTableForConvertingRelatives result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTableForConvertingRelatives GGS_ipic18_symbolTableForConvertingRelatives::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ipic18_symbolTableForConvertingRelatives result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ipic18_symbolTableForConvertingRelatives::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @ipic18_symbolTableForConvertingRelatives " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ipic18_symbolTableForConvertingRelatives::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.defineLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__defineLabelAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_890,
                                GGS_ipic18_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_890 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.defineLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__defineLabelAtAddress> gDispatchTableForMethod__ipic18_instruction__defineLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__defineLabelAtAddress (typeCategoryMethod__ipic18_instruction__defineLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__defineLabelAtAddress
findCategoryMethod__ipic18_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__defineLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__defineLabelAtAddress.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__defineLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__defineLabelAtAddress (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_pseudo_LABEL.defineLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1143,
                                GGS_ipic18_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1143 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1143->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (32)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_ORG.defineLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_1438,
                                GGS_ipic18_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1438 != NULL) {
    if (((var_cas_ioAddress).operator_strictSup (operand_1438->mOrigin)).isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("internal error: current address (")).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_concat (GGS_string (") is greater than origin ("))).operator_concat (operand_1438->mOrigin.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
    }
    var_cas_ioAddress = operand_1438->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.defineLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_actualInstruction * operand_1899,
                                GGS_ipic18_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1899 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1899->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (57)) ;
    var_cas_ioAddress = var_cas_ioAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (58)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.checkRelativeBranch'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__checkRelativeBranch> gDispatchTableForMethod__ipic18_instruction__checkRelativeBranch ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__checkRelativeBranch (typeCategoryMethod__ipic18_instruction__checkRelativeBranch inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__checkRelativeBranch.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__checkRelativeBranch
findCategoryMethod__ipic18_instruction__checkRelativeBranch (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__checkRelativeBranch result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__checkRelativeBranch.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__checkRelativeBranch (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__checkRelativeBranch (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__checkRelativeBranch.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_NULL.checkRelativeBranch'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__checkRelativeBranch (C_Compiler &,
                                const cPtr_ipic_NULL * operand_2983,
                                const GGS_ipic18_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2983 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.checkRelativeBranch'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__checkRelativeBranch (C_Compiler &,
                                const cPtr_ipic_actualInstruction * operand_3407,
                                const GGS_ipic18_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3407 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.checkRelativeBranch'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__checkRelativeBranch (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_3824,
                                const GGS_ipic18_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3824 != NULL) {
    var_cas_ioAddress = operand_3824->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.checkRelativeBranch'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_4280,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4280 != NULL) {
    switch (operand_4280->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_4607 = var_cas_inRoutineSymbolTable ;
      if (temp_4607.isBuilt ()) {
        temp_4607 (HERE)->method_searchKey (inLexique, operand_4280->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (127)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (128)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (128)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (128)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (127L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_4280->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("displacement (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))).operator_concat (GGS_string (") too large for Bcc instruction (limited to [-128, 127])")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicNative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_5012 = var_cas_inRoutineSymbolTable ;
      if (temp_5012.isBuilt ()) {
        temp_5012 (HERE)->method_searchKey (inLexique, operand_4280->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (134)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (135)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) COMMA_SOURCE_FILE_AT_LINE (135)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (135)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (127L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))) ;
        var_cas_ioListFileContents.appendCString (":  native Bcc overflow, converted to Bcc with BRA\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_4280->mInstructionLocation, GGS_condionalBranchMode::constructor_ipicBRA (inLexique COMMA_HERE), operand_4280->mConditionalBranch, operand_4280->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_5734 = var_cas_inRoutineSymbolTable ;
      if (temp_5734.isBuilt ()) {
        temp_5734 (HERE)->method_searchKey (inLexique, operand_4280->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (149)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (150)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (150)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) COMMA_SOURCE_FILE_AT_LINE (150)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (150)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153))) ;
        var_cas_ioListFileContents.appendCString (":  Bcc with BRA overflow, converted to Bcc with GOTO\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_4280->mInstructionLocation, GGS_condionalBranchMode::constructor_ipicGOTO (inLexique COMMA_HERE), operand_4280->mConditionalBranch, operand_4280->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (160)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_jump_test_register.checkRelativeBranch'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_6597,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6597 != NULL) {
    if ((operand_6597->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (177)) ;
      if ((operand_6597->mBranchIfZero).isBuiltAndTrue ()) {
        var_cas_BRAaddress = var_cas_BRAaddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (179)) ;
      }
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_7022 = var_cas_inRoutineSymbolTable ;
      if (temp_7022.isBuilt ()) {
        temp_7022 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_6597->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (183)).substract_operation (inLexique, var_cas_BRAaddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) COMMA_SOURCE_FILE_AT_LINE (183)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (183)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
        var_cas_ioListFileContents.appendCString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_jump_test_register ::constructor_new (inLexique, operand_6597->mInstructionLocation, operand_6597->mRegisterDescription, operand_6597->mTargetLabel, operand_6597->mBranchIfZero, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (194)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic_registerComparisonCondition.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_7857,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7857 != NULL) {
    GGS_bool var_cas_uses ;
    operand_7857->method_usesIntermediateBRA (inLexique, var_cas_uses COMMA_SOURCE_FILE_AT_LINE (209)) ;
    if ((operand_7857->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (211)) ;
      if ((var_cas_uses).isBuiltAndTrue ()) {
        var_cas_BRAaddress = var_cas_BRAaddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (213)) ;
      }
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_8323 = var_cas_inRoutineSymbolTable ;
      if (temp_8323.isBuilt ()) {
        temp_8323 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_7857->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (216)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (217)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (217)).substract_operation (inLexique, var_cas_BRAaddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (217)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220))) ;
        var_cas_ioListFileContents.appendCString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_registerComparisonCondition ::constructor_new (inLexique, operand_7857->mInstructionLocation, operand_7857->mRegisterDescription, operand_7857->mTargetLabel, operand_7857->mComparison, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_incDecRegisterInCondition.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_9163,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9163 != NULL) {
    if ((operand_9163->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (244)) ;
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_9512 = var_cas_inRoutineSymbolTable ;
      if (temp_9512.isBuilt ()) {
        temp_9512 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_9163->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (246)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (247)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (247)).substract_operation (inLexique, var_cas_BRAaddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (247)) COMMA_SOURCE_FILE_AT_LINE (247)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (247)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (250))) ;
        var_cas_ioListFileContents.appendCString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_incDecRegisterInCondition ::constructor_new (inLexique, operand_9163->mInstructionLocation, operand_9163->mRegisterDescription, operand_9163->mTargetLabel, operand_9163->mIncrement, operand_9163->m_W_isDestination, operand_9163->mBranchIfZero, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_JUMP.checkRelativeBranch'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_10378,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10378 != NULL) {
    switch (operand_10378->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_10705 = var_cas_inRoutineSymbolTable ;
      if (temp_10705.isBuilt ()) {
        temp_10705 (HERE)->method_searchKey (inLexique, operand_10378->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (278)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (279)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (279)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (279)) COMMA_SOURCE_FILE_AT_LINE (279)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (279)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282))) ;
        var_cas_ioListFileContents.appendCString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_JUMP ::constructor_new (inLexique, operand_10378->mInstructionLocation, operand_10378->mTargetLabel, GGS_jumpInstructionKind::constructor_ipicAbsolute (inLexique COMMA_HERE) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (288)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_11412 = var_cas_inRoutineSymbolTable ;
      if (temp_11412.isBuilt ()) {
        temp_11412 (HERE)->method_searchKey (inLexique, operand_10378->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (294)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (294)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (294)) COMMA_SOURCE_FILE_AT_LINE (294)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (294)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_10378->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("displacement (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_concat (GGS_string (") too large for BRA instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (297)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_JSR.checkRelativeBranch'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_11917,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11917 != NULL) {
    switch (operand_11917->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_12244 = var_cas_inRoutineSymbolTable ;
      if (temp_12244.isBuilt ()) {
        temp_12244 (HERE)->method_searchKey (inLexique, operand_11917->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (315)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (316)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (316)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (316)) COMMA_SOURCE_FILE_AT_LINE (316)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (316)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (318))) ;
        var_cas_ioListFileContents.appendCString (":  JSR with RCALL overflow, converted to JSR with CALL\n") ;
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_JSR ::constructor_new (inLexique, operand_11917->mInstructionLocation, operand_11917->mTargetLabel, GGS_jumpInstructionKind::constructor_ipicAbsolute (inLexique COMMA_HERE) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (325)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_12950 = var_cas_inRoutineSymbolTable ;
      if (temp_12950.isBuilt ()) {
        temp_12950 (HERE)->method_searchKey (inLexique, operand_11917->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (330)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (331)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (331)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (331)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (331)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_11917->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("displacement (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333)))).operator_concat (GGS_string (") too large for RCALL instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.checkRelativeBranch'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_13466,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13466 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTableForConvertingRelatives  temp_13780 = var_cas_inRoutineSymbolTable ;
    if (temp_13780.isBuilt ()) {
      temp_13780 (HERE)->method_searchKey (inLexique, operand_13466->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (350)) ;
    }
    if (((var_cas_targetAddress).operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_13466->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '")).operator_concat (operand_13466->mLabel)).operator_concat (GGS_string ("' label gets "))).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (353)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (354)))).operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (355)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_computed_retlw.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_14225,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14225 != NULL) {
    if ((operand_14225->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_14536 = var_cas_inRoutineSymbolTable ;
      if (temp_14536.isBuilt ()) {
        temp_14536 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (370)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (371)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (371)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) COMMA_SOURCE_FILE_AT_LINE (371)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (371)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (374))) ;
        var_cas_ioListFileContents.appendCString (":  COMPUTED RETLW with RCALL overflow, converted to COMPUTED RETLW with CALL\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_computed_retlw ::constructor_new (inLexique, operand_14225->mInstructionLocation, operand_14225->mLiteralValues, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (380)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_bra.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_15356,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15356 != NULL) {
    if ((operand_15356->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_15667 = var_cas_inRoutineSymbolTable ;
      if (temp_15667.isBuilt ()) {
        temp_15667 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (397)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (398)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (398)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (398)) COMMA_SOURCE_FILE_AT_LINE (398)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (398)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (401))) ;
        var_cas_ioListFileContents.appendCString (":  COMPUTED BRA with RCALL overflow, converted to COMPUTED BRA with CALL\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_computed_bra ::constructor_new (inLexique, operand_15356->mInstructionLocation, operand_15356->mTargetLabels, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (407)) ;
      }
    }
    GGS_uint  var_cas_addressForCheckingBRA ;
    var_cas_addressForCheckingBRA = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (410)) ;
    if (((operand_15356->mUsesRCALL).operator_not ()).isBuiltAndTrue ()) {
      var_cas_addressForCheckingBRA = var_cas_addressForCheckingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (412)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_16509 (operand_15356->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_16509 = NULL ;
      while (((operand_16509 = enumerator_16509.nextObject ()))) {
        macroValidPointer (operand_16509) ;
        GGS_uint  var_cas_targetAddress ;
        const GGS_ipic18_symbolTableForConvertingRelatives  temp_16574 = var_cas_inRoutineSymbolTable ;
        if (temp_16574.isBuilt ()) {
          temp_16574 (HERE)->method_searchKey (inLexique, operand_16509->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (416)) ;
        }
        GGS_sint  var_cas_displacement ;
        var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (417)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (417)).substract_operation (inLexique, var_cas_addressForCheckingBRA.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) COMMA_SOURCE_FILE_AT_LINE (417)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (417)) ;
        if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_16509->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("displacement (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (419)))).operator_concat (GGS_string (") too large for BRA instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (420)) ;
        }
        var_cas_addressForCheckingBRA = var_cas_addressForCheckingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (421)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_computed_goto.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_17130,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17130 != NULL) {
    if ((operand_17130->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_17441 = var_cas_inRoutineSymbolTable ;
      if (temp_17441.isBuilt ()) {
        temp_17441 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (437)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (438)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (438)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (438)) COMMA_SOURCE_FILE_AT_LINE (438)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (438)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (441))) ;
        var_cas_ioListFileContents.appendCString (":  COMPUTED GOTO with RCALL overflow, converted to COMPUTED GOTO with CALL\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_computed_goto ::constructor_new (inLexique, operand_17130->mInstructionLocation, operand_17130->mTargetLabels, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (447)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_computed_rcall.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__checkRelativeBranch (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_18355,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18355 != NULL) {
    if ((operand_18355->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_ipic18_symbolTableForConvertingRelatives  temp_18666 = var_cas_inRoutineSymbolTable ;
      if (temp_18666.isBuilt ()) {
        temp_18666 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (467)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (468)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (468)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (468)) COMMA_SOURCE_FILE_AT_LINE (468)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (468)) ;
      if ((((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (471))) ;
        var_cas_ioListFileContents.appendCString (":  COMPUTED RCALL with RCALL overflow, converted to COMPUTED RCALL with CALL\n") ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic18_instruction_computed_rcall ::constructor_new (inLexique, operand_18355->mInstructionLocation, operand_18355->mTargetLabels, operand_18355->mEndOfInstructionLabel, GGS_bool (false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "ipic18_convertRelativeBranchsToAbsoluteWhenNeeded"*
//                                                                           *
//---------------------------------------------------------------------------*

void routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (C_Compiler & inLexique,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (496))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("CONVERT RELATIVES").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (497))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (498))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  GGS_bool var_cas_relativeBranchOverflow ;
  var_cas_relativeBranchOverflow = GGS_bool (true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (0U) ;
  GGS_uint _variant_21865 = var_cas_ioGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (501)) ;
  GGS_bool _condition_21865 (_variant_21865.isBuilt (), true) ;
  while (_condition_21865.isBuiltAndTrue ()) {
    _condition_21865 = var_cas_relativeBranchOverflow ;
    if (_condition_21865.isBuiltAndTrue ()) {
      if (_variant_21865.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (531)) ;
        _condition_21865 = GGS_bool (false) ;
      }else{
        _variant_21865.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_relativeBranchOverflow = GGS_bool (false) ;
        var_cas_iteration.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) ;
        var_cas_ioListFileContents.appendCString ("Pass ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_iteration.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (506))) ;
        var_cas_ioListFileContents.appendCString (":\n") ;
        GGS_ipic18_symbolTableForConvertingRelatives  var_cas_symbolTable ;
        var_cas_symbolTable = GGS_ipic18_symbolTableForConvertingRelatives ::constructor_emptyMap (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (0U) ;
        {
          GGS_ipic18_instructionList::cEnumerator enumerator_20732 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_20732 = NULL ;
          while (((operand_20732 = enumerator_20732.nextObject ()))) {
            macroValidPointer (operand_20732) ;
            const GGS_ipic18_instruction  temp_20776 = operand_20732->mInstruction ;
            if (temp_20776.isBuilt ()) {
              typeCategoryMethod__ipic18_instruction__defineLabelAtAddress method = findCategoryMethod__ipic18_instruction__defineLabelAtAddress (temp_20776.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_20776 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (511)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_lastAddressForFirstPass ;
        var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (0U) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic18_instructionList::cEnumerator enumerator_21010 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_21010 = NULL ;
          while (((operand_21010 = enumerator_21010.nextObject ()))) {
            macroValidPointer (operand_21010) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_ipic18_instruction  temp_21087 = operand_21010->mInstruction ;
            if (temp_21087.isBuilt ()) {
              temp_21087 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (518)) ;
            }
            const GGS_ipic18_instruction  temp_21149 = operand_21010->mInstruction ;
            if (temp_21149.isBuilt ()) {
              typeCategoryMethod__ipic18_instruction__checkRelativeBranch method = findCategoryMethod__ipic18_instruction__checkRelativeBranch (temp_21149.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_21149 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_relativeBranchOverflow, var_cas_ioGeneratedInstructionList, var_cas_idx, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (519)) ;
              }
            }
            var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (520)) ;
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_lastAddressForFirstPass).operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets ")).operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (523)))).operator_concat (GGS_string (" value when checking relative branches, while it gets "))).operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (525)))).operator_concat (GGS_string (" value when computing routine map")) COMMA_SOURCE_FILE_AT_LINE (526)) ;
        }
        if (((var_cas_relativeBranchOverflow).operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("  No relative to convert\n"
            "\n") ;
          var_cas_ioListFileContents.appendCString ("Program size: ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (529))) ;
          var_cas_ioListFileContents.appendCString (" bytes\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipc18_convert_relatives (void) {
 enterCategoryMethod__ipic18_instruction__defineLabelAtAddress (category_method__ipic18_instruction__defineLabelAtAddress, gClassInfoFor__ipic18_instruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic18_instruction__defineLabelAtAddress) category_method__ipic_pseudo_LABEL__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic18_instruction__defineLabelAtAddress) category_method__ipic_pseudo_ORG__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic18_instruction__defineLabelAtAddress) category_method__ipic_actualInstruction__defineLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_NULL__checkRelativeBranch, gClassInfoFor__ipic_NULL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_actualInstruction__checkRelativeBranch, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_pseudo_ORG__checkRelativeBranch, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic18_instruction_conditionalBranch__checkRelativeBranch, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_jump_test_register__checkRelativeBranch, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_registerComparisonCondition__checkRelativeBranch, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_incDecRegisterInCondition__checkRelativeBranch, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_JUMP__checkRelativeBranch, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_JSR__checkRelativeBranch, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic_pseudo_LABEL__checkRelativeBranch, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic18_instruction_computed_retlw__checkRelativeBranch, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic18_instruction_computed_bra__checkRelativeBranch, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic18_instruction_computed_goto__checkRelativeBranch, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__checkRelativeBranch ((typeCategoryMethod__ipic18_instruction__checkRelativeBranch) category_method__ipic18_instruction_computed_rcall__checkRelativeBranch, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipc18_convert_relatives (prologueRoutineFor_ipc18_convert_relatives,
                                   NULL) ;

//---------------------------------------------------------------------------*

