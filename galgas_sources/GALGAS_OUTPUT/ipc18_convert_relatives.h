//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'ipc18_convert_relatives.h'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 29th, 2009, at 21h29'0"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef ipc18_convert_relatives_DEFINED
#define ipc18_convert_relatives_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "ipic18_metamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic18_symbolTableForConvertingRelatives ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Map '@ipic18_symbolTableForConvertingRelatives'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ipic18_symbolTableForConvertingRelatives ;

class GGS_ipic18_symbolTableForConvertingRelatives : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_ipic18_symbolTableForConvertingRelatives cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_ipic18_symbolTableForConvertingRelatives & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_ipic18_symbolTableForConvertingRelatives & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_ipic18_symbolTableForConvertingRelatives * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_ipic18_symbolTableForConvertingRelatives * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_ipic18_symbolTableForConvertingRelatives constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_ipic18_symbolTableForConvertingRelatives constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_ipic18_symbolTableForConvertingRelatives & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_ipic18_symbolTableForConvertingRelatives reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_ipic18_symbolTableForConvertingRelatives & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_ipic18_symbolTableForConvertingRelatives & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRoutineAddress (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.defineLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__ipic18_instruction__defineLabelAtAddress)  (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction * inObjectPtr,
                                GGS_ipic18_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__defineLabelAtAddress (typeCategoryMethod__ipic18_instruction__defineLabelAtAddress inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__defineLabelAtAddress
findCategoryMethod__ipic18_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.checkRelativeBranch'          *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__ipic18_instruction__checkRelativeBranch)  (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction * inObjectPtr,
                                const GGS_ipic18_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__checkRelativeBranch (typeCategoryMethod__ipic18_instruction__checkRelativeBranch inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__checkRelativeBranch
findCategoryMethod__ipic18_instruction__checkRelativeBranch (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//       Routine 'ipic18_convertRelativeBranchsToAbsoluteWhenNeeded'         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (C_Compiler &,
                                GGS_ipic18_instructionList  &,
                                GGS_string & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Element of map '@ipic18_symbolTableForConvertingRelatives'         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_ipic18_symbolTableForConvertingRelatives {
  public : GGS_uint  mRoutineAddress ;

  public : e_ipic18_symbolTableForConvertingRelatives (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_ipic18_symbolTableForConvertingRelatives : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_ipic18_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_ipic18_symbolTableForConvertingRelatives & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_ipic18_symbolTableForConvertingRelatives * nextObject (void) const { return (elementOf_GGS_ipic18_symbolTableForConvertingRelatives *) mNextItem ; }
  public : inline elementOf_GGS_ipic18_symbolTableForConvertingRelatives * infObject (void) const { return (elementOf_GGS_ipic18_symbolTableForConvertingRelatives *) mInfPtr ; }
  public : inline elementOf_GGS_ipic18_symbolTableForConvertingRelatives * supObject (void) const { return (elementOf_GGS_ipic18_symbolTableForConvertingRelatives *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_ipic18_symbolTableForConvertingRelatives mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
