//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'ipic18_build_assembly_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 7th, 2009, at 14h40'57"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic18_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__buildAssemblyCode> gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__buildAssemblyCode (typeCategoryMethod__ipic18_instruction__buildAssemblyCode inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__buildAssemblyCode
findCategoryMethod__ipic18_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_NULL.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_NULL * operand_664,
                                GGS_string & /* var_cas_ioString */,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_664 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic_pseudo_ORG.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_849,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_849 != NULL) {
    var_cas_ioString.appendCString ("  ORG ") ;
    var_cas_ioString.dotAssign_operation (operand_849->mOrigin.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (30))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_LABEL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1082,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1082 != NULL) {
    var_cas_ioString.dotAssign_operation (operand_1082->mLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (39))) ;
    var_cas_ioString.appendCString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_FDA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_1306,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1306 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_1306->mInstruction_FDA_base_code.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_1306->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
    const GGS_bool cond_1577 = (operand_1306->m_W_isDestination).operator_and (operand_1306->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) ;
    if (cond_1577.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", W, BSR_ACCESS") ;
    }else if (cond_1577.isBuiltAndFalse ()) {
      const GGS_bool cond_1659 = operand_1306->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
      if (cond_1659.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString (", F, BSR_ACCESS") ;
      }else if (cond_1659.isBuiltAndFalse ()) {
        const GGS_bool cond_1713 = operand_1306->m_W_isDestination ;
        if (cond_1713.isBuiltAndTrue ()) {
          var_cas_ioString.appendCString (", W") ;
        }else if (cond_1713.isBuiltAndFalse ()) {
          var_cas_ioString.appendCString (", F") ;
        }
      }
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_MOVFF.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_1899,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1899 != NULL) {
    var_cas_ioString.appendCString ("  MOVFF ") ;
    var_cas_ioString.dotAssign_operation (operand_1899->mSourceRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_1899->mDestinationRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_FBA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_2278,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2278 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_2278->mBitOrientedOp.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_2278->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_2278->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82))) ;
    const GGS_bool cond_2570 = operand_2278->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
    if (cond_2570.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_BitTestSkip.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_2732,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2732 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    const GGS_bool cond_2863 = operand_2732->mSkipIfSet ;
    if (cond_2863.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("BTFSS") ;
    }else if (cond_2863.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("BTFSC") ;
    }
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_2732->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (101))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_2732->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
    const GGS_bool cond_3087 = operand_2732->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    if (cond_3087.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction_FA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3240,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3240 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_3240->mFAinstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_3240->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
    const GGS_bool cond_3474 = operand_3240->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
    if (cond_3474.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_3642,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3642 != NULL) {
    switch (operand_3642->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioString.appendCString ("  ") ;
      var_cas_ioString.dotAssign_operation (operand_3642->mConditionalBranch.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (130))) ;
      var_cas_ioString.appendCString (" ") ;
      var_cas_ioString.dotAssign_operation (operand_3642->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_3642->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (133)) ;
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      var_cas_ioString.appendCString ("  ") ;
      var_cas_ioString.dotAssign_operation (var_cas_complementary.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
      var_cas_ioString.appendCString (" ") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.appendCString ("  BRA ") ;
      var_cas_ioString.dotAssign_operation (operand_3642->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_3642->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (140)) ;
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
      var_cas_ioString.appendCString ("  ") ;
      var_cas_ioString.dotAssign_operation (var_cas_complementary.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (142))) ;
      var_cas_ioString.appendCString (" ") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.appendCString ("  GOTO ") ;
      var_cas_ioString.dotAssign_operation (operand_3642->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143))) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_jump_test_register.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_4712,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4712 != NULL) {
    var_cas_ioString.appendCString ("  "
    "TSTFSZ ") ;
    var_cas_ioString.dotAssign_operation (operand_4712->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (154))) ;
    const GGS_bool cond_4917 = operand_4712->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
    if (cond_4917.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioString.appendCString ("\n") ;
    const GGS_bool cond_5282 = operand_4712->mBranchIfZero ;
    if (cond_5282.isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
      var_cas_ioString.appendCString ("  BRA ") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      const GGS_bool cond_5177 = operand_4712->mUsesBra ;
      if (cond_5177.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString ("  BRA ") ;
        var_cas_ioString.dotAssign_operation (operand_4712->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }else if (cond_5177.isBuiltAndFalse ()) {
        var_cas_ioString.appendCString ("  GOTO ") ;
        var_cas_ioString.dotAssign_operation (operand_4712->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString (":\n") ;
    }else if (cond_5282.isBuiltAndFalse ()) {
      const GGS_bool cond_5363 = operand_4712->mUsesBra ;
      if (cond_5363.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString ("  BRA ") ;
        var_cas_ioString.dotAssign_operation (operand_4712->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }else if (cond_5363.isBuiltAndFalse ()) {
        var_cas_ioString.appendCString ("  GOTO ") ;
        var_cas_ioString.dotAssign_operation (operand_4712->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_5575,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5575 != NULL) {
    const GGS_bool cond_5711 = (operand_5575->mBranchIfZero).operator_and (operand_5575->mIncrement) ;
    if (cond_5711.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  "
      "INFSNZ ") ;
    }else if (cond_5711.isBuiltAndFalse ()) {
      const GGS_bool cond_5790 = (operand_5575->mBranchIfZero).operator_and ((operand_5575->mIncrement).operator_not ()) ;
      if (cond_5790.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString ("  "
        "DCFSNZ ") ;
      }else if (cond_5790.isBuiltAndFalse ()) {
        const GGS_bool cond_5870 = ((operand_5575->mBranchIfZero).operator_not ()).operator_and (operand_5575->mIncrement) ;
        if (cond_5870.isBuiltAndTrue ()) {
          var_cas_ioString.appendCString ("  "
          "INCFSZ ") ;
        }else if (cond_5870.isBuiltAndFalse ()) {
          var_cas_ioString.appendCString ("  "
          "DECFSZ ") ;
        }
      }
    }
    var_cas_ioString.dotAssign_operation (operand_5575->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
    const GGS_bool cond_6078 = (operand_5575->m_W_isDestination).operator_and (operand_5575->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (193))) ;
    if (cond_6078.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", W, BSR_ACCESS") ;
    }else if (cond_6078.isBuiltAndFalse ()) {
      const GGS_bool cond_6160 = operand_5575->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
      if (cond_6160.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString (", F, BSR_ACCESS") ;
      }else if (cond_6160.isBuiltAndFalse ()) {
        const GGS_bool cond_6214 = operand_5575->m_W_isDestination ;
        if (cond_6214.isBuiltAndTrue ()) {
          var_cas_ioString.appendCString (", W") ;
        }else if (cond_6214.isBuiltAndFalse ()) {
          var_cas_ioString.appendCString (", F") ;
        }
      }
    }
    var_cas_ioString.appendCString ("\n") ;
    const GGS_bool cond_6345 = operand_5575->mUsesBra ;
    if (cond_6345.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  BRA ") ;
      var_cas_ioString.dotAssign_operation (operand_5575->mTargetLabel) ;
      var_cas_ioString.appendCString ("\n") ;
    }else if (cond_6345.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  GOTO ") ;
      var_cas_ioString.dotAssign_operation (operand_5575->mTargetLabel) ;
      var_cas_ioString.appendCString ("\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_registerComparisonCondition.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_6544,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6544 != NULL) {
    switch (operand_6544->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_ioString.appendCString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_ioString.appendCString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_ioString.appendCString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_ioString.appendCString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_ioString.appendCString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_ioString.appendCString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    var_cas_ioString.dotAssign_operation (operand_6544->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (224))) ;
    const GGS_bool cond_7039 = operand_6544->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
    if (cond_7039.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioString.appendCString ("\n") ;
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_6544->method_usesIntermediateBRA (inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (229)) ;
    const GGS_bool cond_7490 = var_cas_usesIntermediateBRA ;
    if (cond_7490.isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
      var_cas_ioString.appendCString ("  BRA ") ;
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      const GGS_bool cond_7385 = operand_6544->mUsesBra ;
      if (cond_7385.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString ("  BRA ") ;
        var_cas_ioString.dotAssign_operation (operand_6544->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }else if (cond_7385.isBuiltAndFalse ()) {
        var_cas_ioString.appendCString ("  GOTO ") ;
        var_cas_ioString.dotAssign_operation (operand_6544->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }
      var_cas_ioString.dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.appendCString (":\n") ;
    }else if (cond_7490.isBuiltAndFalse ()) {
      const GGS_bool cond_7571 = operand_6544->mUsesBra ;
      if (cond_7571.isBuiltAndTrue ()) {
        var_cas_ioString.appendCString ("  BRA ") ;
        var_cas_ioString.dotAssign_operation (operand_6544->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }else if (cond_7571.isBuiltAndFalse ()) {
        var_cas_ioString.appendCString ("  GOTO ") ;
        var_cas_ioString.dotAssign_operation (operand_6544->mTargetLabel) ;
        var_cas_ioString.appendCString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JUMP.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_7762,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7762 != NULL) {
    switch (operand_7762->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioString.appendCString ("  BRA   ") ;
      var_cas_ioString.dotAssign_operation (operand_7762->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioString.appendCString ("  GOTO  ") ;
      var_cas_ioString.dotAssign_operation (operand_7762->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (256))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioString.appendCString ("  BRA   ") ;
      var_cas_ioString.dotAssign_operation (operand_7762->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioString.appendCString ("  GOTO  ") ;
      var_cas_ioString.dotAssign_operation (operand_7762->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JSR.buildAssemblyCode'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_8282,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8282 != NULL) {
    switch (operand_8282->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioString.appendCString ("  RCALL ") ;
      var_cas_ioString.dotAssign_operation (operand_8282->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioString.appendCString ("  CALL  ") ;
      var_cas_ioString.dotAssign_operation (operand_8282->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (270))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioString.appendCString ("  RCALL ") ;
      var_cas_ioString.dotAssign_operation (operand_8282->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioString.appendCString ("  CALL  ") ;
      var_cas_ioString.dotAssign_operation (operand_8282->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
      var_cas_ioString.appendCString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_MOVLB.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_8818,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8818 != NULL) {
    var_cas_ioString.appendCString ("  MOVLB ") ;
    var_cas_ioString.dotAssign_operation (operand_8818->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (282)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (282))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_CLRWDT.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_CLRWDT * operand_9071,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9071 != NULL) {
    var_cas_ioString.appendCString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_DAW.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_DAW * operand_9284,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9284 != NULL) {
    var_cas_ioString.appendCString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_NOP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_NOP * operand_9494,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9494 != NULL) {
    var_cas_ioString.appendCString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_POP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_POP * operand_9704,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9704 != NULL) {
    var_cas_ioString.appendCString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_PUSH.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_PUSH * operand_9915,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9915 != NULL) {
    var_cas_ioString.appendCString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RESET.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RESET * operand_10128,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10128 != NULL) {
    var_cas_ioString.appendCString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RETURN.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RETURN * operand_10343,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10343 != NULL) {
    var_cas_ioString.appendCString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RETFIE.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RETFIE * operand_10560,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10560 != NULL) {
    var_cas_ioString.appendCString ("  RETFIE") ;
    const GGS_bool cond_10694 = operand_10560->mFastReturn ;
    if (cond_10694.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (" 1") ;
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_SLEEP.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_SLEEP * operand_10851,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10851 != NULL) {
    var_cas_ioString.appendCString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_literalOperation.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_11076,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11076 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_11076->mLiteralInstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (376))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_11076->mLiteralValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (376))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_LFSR.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_11357,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11357 != NULL) {
    var_cas_ioString.appendCString ("  LFSR ") ;
    var_cas_ioString.dotAssign_operation (operand_11357->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (385)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (385))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_11357->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (386))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_MNOP.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_11645,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11645 != NULL) {
    const GGS_bool cond_11800 = (operand_11645->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (395))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_11800.isBuiltAndTrue ()) {
      operand_11645->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (396)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_11949 = operand_11645->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (399)) ;
    GGS_bool _condition_11949 (_variant_11949.isBuilt (), true) ;
    while (_condition_11949.isBuiltAndTrue ()) {
      _condition_11949 = (var_cas_idx).operator_strictInf (operand_11645->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (400))) ;
      if (_condition_11949.isBuiltAndTrue ()) {
        if (_variant_11949.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (404)) ;
          _condition_11949 = GGS_bool (false) ;
        }else{
          _variant_11949.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_ioString.appendCString ("  NOP\n") ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (403)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_TBLRD.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLRD * operand_12086,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12086 != NULL) {
    var_cas_ioString.appendCString ("  TBLRD ") ;
    var_cas_ioString.dotAssign_operation (operand_12086->mOption.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (413))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_TBLWT.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLWT * operand_12327,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12327 != NULL) {
    var_cas_ioString.appendCString ("  TBLWT ") ;
    var_cas_ioString.dotAssign_operation (operand_12327->mOption.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_retlw.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_12577,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12577 != NULL) {
    const GGS_bool cond_12708 = operand_12577->mUsesRCALL ;
    if (cond_12708.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  RCALL _computed_goto_2\n") ;
    }else if (cond_12708.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_12790 (operand_12577->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_12790 = NULL ;
      while (((operand_12790 = enumerator_12790.nextObject ()))) {
        macroValidPointer (operand_12790) ;
        var_cas_ioString.appendCString ("  RETLW ") ;
        var_cas_ioString.dotAssign_operation (operand_12790->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (437))) ;
        var_cas_ioString.appendCString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_computed_bra.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_13003,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13003 != NULL) {
    const GGS_bool cond_13134 = operand_13003->mUsesRCALL ;
    if (cond_13134.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  RCALL _computed_goto_2\n") ;
    }else if (cond_13134.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13215 (operand_13003->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13215 = NULL ;
      while (((operand_13215 = enumerator_13215.nextObject ()))) {
        macroValidPointer (operand_13215) ;
        var_cas_ioString.appendCString ("  BRA ") ;
        var_cas_ioString.dotAssign_operation (operand_13215->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (453))) ;
        var_cas_ioString.appendCString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_goto.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_13424,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13424 != NULL) {
    const GGS_bool cond_13555 = operand_13424->mUsesRCALL ;
    if (cond_13555.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  RCALL _computed_goto_4\n") ;
    }else if (cond_13555.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13636 (operand_13424->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13636 = NULL ;
      while (((operand_13636 = enumerator_13636.nextObject ()))) {
        macroValidPointer (operand_13636) ;
        var_cas_ioString.appendCString ("  GOTO ") ;
        var_cas_ioString.dotAssign_operation (operand_13636->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (469))) ;
        var_cas_ioString.appendCString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_rcall.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_13847,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13847 != NULL) {
    const GGS_bool cond_13978 = operand_13847->mUsesRCALL ;
    if (cond_13978.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  RCALL _computed_goto_4\n") ;
    }else if (cond_13978.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  CALL _computed_goto_4\n") ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_14078 (operand_13847->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_14078 = NULL ;
      while (((operand_14078 = enumerator_14078.nextObject ()))) {
        macroValidPointer (operand_14078) ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (486)) ;
        var_cas_ioString.appendCString ("  RCALL ") ;
        var_cas_ioString.dotAssign_operation (operand_14078->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (487))) ;
        var_cas_ioString.appendCString ("\n") ;
        const GGS_bool cond_14260 = (var_cas_idx).operator_strictInf (operand_13847->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (488))) ;
        if (cond_14260.isBuiltAndTrue ()) {
          var_cas_ioString.appendCString ("  BRA   ") ;
          var_cas_ioString.dotAssign_operation (operand_13847->mEndOfInstructionLabel) ;
          var_cas_ioString.appendCString ("\n") ;
        }
      }
    }
    var_cas_ioString.dotAssign_operation (operand_13847->mEndOfInstructionLabel) ;
    var_cas_ioString.appendCString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "pic18_build_assembly_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_build_assembly_code (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_ipic18_instructionList   var_cas_inInstructionList,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_build_assembly_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string ("  PROCESSOR ")).operator_concat (var_cas_inProcessorName)).operator_concat (GGS_string ("\n")) ;
  var_cas_outAssemblyCode.appendCString (";--- Code\n") ;
  var_cas_outAssemblyCode.appendCString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_14865 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_14865 = NULL ;
    while (((operand_14865 = enumerator_14865.nextObject ()))) {
      macroValidPointer (operand_14865) ;
      const GGS_ipic18_instruction  temp_14904 = operand_14865->mInstruction ;
      if (temp_14904.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__buildAssemblyCode method = findCategoryMethod__ipic18_instruction__buildAssemblyCode (temp_14904.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_14904 (HERE), var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (511)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_15094 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_15094 = NULL ;
    while (((operand_15094 = enumerator_15094.nextObject ()))) {
      macroValidPointer (operand_15094) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  temp_15151 = operand_15094->mInfo.mRegisterAddressList ;
      if (temp_15151.isBuilt ()) {
        temp_15151 (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (517)) ;
      }
      var_cas_outAssemblyCode.dotAssign_operation (operand_15094->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (518))) ;
      var_cas_outAssemblyCode.appendCString (" EQU ") ;
      var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (518))) ;
      var_cas_outAssemblyCode.appendCString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_15420 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_15420 = NULL ;
    while (((operand_15420 = enumerator_15420.nextObject ()))) {
      macroValidPointer (operand_15420) ;
      const GGS_bool cond_15651 = (var_cas_inPredefinedRegisters.reader_hasKey (inLexique, operand_15420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (524)) COMMA_SOURCE_FILE_AT_LINE (524))).operator_not () ;
      if (cond_15651.isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  temp_15540 = operand_15420->mInfo.mRegisterAddressList ;
        if (temp_15540.isBuilt ()) {
          temp_15540 (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (525)) ;
        }
        var_cas_outAssemblyCode.dotAssign_operation (operand_15420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (526))) ;
        var_cas_outAssemblyCode.appendCString (" EQU ") ;
        var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (526))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.appendCString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.appendCString ("BSR_ACCESS EQU 1\n"
    "\n") ;
  const GGS_bool cond_16200 = (var_cas_inActualConfigurationMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (535))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_16200.isBuiltAndTrue ()) {
    var_cas_outAssemblyCode.appendCString (";--- Configuration\n"
      "\n") ;
    {
      GGS_actualConfigurationMap::cEnumerator enumerator_16052 (var_cas_inActualConfigurationMap, true) ;
      const GGS_actualConfigurationMap::cElement * operand_16052 = NULL ;
      while (((operand_16052 = enumerator_16052.nextObject ()))) {
        macroValidPointer (operand_16052) ;
        var_cas_outAssemblyCode.appendCString ("  __config ") ;
        var_cas_outAssemblyCode.dotAssign_operation (operand_16052->mInfo.mRegisterAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (538))) ;
        var_cas_outAssemblyCode.appendCString (", ") ;
        var_cas_outAssemblyCode.dotAssign_operation ((operand_16052->mInfo.mRegisterValue).operator_and (GGS_uint (255U)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (538))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.appendCString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_build_assembly_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_assembly_code (void) {
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_NULL__buildAssemblyCode, gClassInfoFor__ipic_NULL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FDA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MOVFF__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FBA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_BitTestSkip__buildAssemblyCode, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_jump_test_register__buildAssemblyCode, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_incDecRegisterInCondition__buildAssemblyCode, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_registerComparisonCondition__buildAssemblyCode, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_JUMP__buildAssemblyCode, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_JSR__buildAssemblyCode, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MOVLB__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_DAW__buildAssemblyCode, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_NOP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_POP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_PUSH__buildAssemblyCode, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RESET__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RETURN__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_LFSR__buildAssemblyCode, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MNOP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_TBLRD__buildAssemblyCode, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_TBLWT__buildAssemblyCode, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_bra__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_goto__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_rcall__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_build_assembly_code (prologueRoutineFor_ipic18_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

