//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'ipic18_build_assembly_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    february 21th, 2010, at 23h32'36"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic18_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__buildAssemblyCode> gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__buildAssemblyCode (typeCategoryMethod__ipic18_instruction__buildAssemblyCode inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__buildAssemblyCode
findCategoryMethod__ipic18_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_NULL.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_NULL * operand_671,
                                GGS_stringlist  & /* var_cas_ioStringList */,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_671 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic_pseudo_ORG.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_863,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_863 != NULL) {
    var_cas_ioStringList.addAssign_operation ((GGS_string ("  ORG ")).operator_concat (operand_863->mOrigin.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (30)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_LABEL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1102,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1102 != NULL) {
    var_cas_ioStringList.addAssign_operation ((operand_1102->mLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (39))).operator_concat (GGS_string (":"))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_FDA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_1337,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1337 != NULL) {
    GGS_string var_cas_s = (((GGS_string ("  ")).operator_concat (operand_1337->mInstruction_FDA_base_code.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (48)))).operator_concat (GGS_string (" "))).operator_concat (operand_1337->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
    const GGS_bool cond_1610 = (operand_1337->m_W_isDestination).operator_and (operand_1337->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) ;
    if (cond_1610.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", W, BSR_ACCESS") ;
    }else if (cond_1610.isBuiltAndFalse ()) {
      const GGS_bool cond_1685 = operand_1337->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
      if (cond_1685.isBuiltAndTrue ()) {
        var_cas_s.appendCString (", F, BSR_ACCESS") ;
      }else if (cond_1685.isBuiltAndFalse ()) {
        const GGS_bool cond_1732 = operand_1337->m_W_isDestination ;
        if (cond_1732.isBuiltAndTrue ()) {
          var_cas_s.appendCString (", W") ;
        }else if (cond_1732.isBuiltAndFalse ()) {
          var_cas_s.appendCString (", F") ;
        }
      }
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_MOVFF.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_1913,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1913 != NULL) {
    GGS_string var_cas_s = GGS_string ("  MOVFF ") ;
    var_cas_s.dotAssign_operation (operand_1913->mSourceRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
    var_cas_s.appendCString (", ") ;
    var_cas_s.dotAssign_operation (operand_1913->mDestinationRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_FBA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_2282,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2282 != NULL) {
    GGS_string var_cas_s = (GGS_string ("  ")).operator_concat (operand_2282->mBitOrientedOp.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
    var_cas_s.appendCString ("  ") ;
    var_cas_s.dotAssign_operation (operand_2282->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
    var_cas_s.appendCString (", ") ;
    var_cas_s.dotAssign_operation (operand_2282->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82))) ;
    const GGS_bool cond_2562 = operand_2282->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
    if (cond_2562.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_BitTestSkip.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_2726,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2726 != NULL) {
    GGS_string var_cas_s = GGS_string ("  ") ;
    const GGS_bool cond_2859 = operand_2726->mSkipIfSet ;
    if (cond_2859.isBuiltAndTrue ()) {
      var_cas_s.appendCString ("BTFSS") ;
    }else if (cond_2859.isBuiltAndFalse ()) {
      var_cas_s.appendCString ("BTFSC") ;
    }
    var_cas_s.appendCString ("  ") ;
    var_cas_s.dotAssign_operation (operand_2726->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (101))) ;
    var_cas_s.appendCString (", ") ;
    var_cas_s.dotAssign_operation (operand_2726->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
    const GGS_bool cond_3055 = operand_2726->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    if (cond_3055.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction_FA.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3210,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3210 != NULL) {
    GGS_string var_cas_s = (((GGS_string ("  ")).operator_concat (operand_3210->mFAinstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (115)))).operator_concat (GGS_string (" "))).operator_concat (operand_3210->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
    const GGS_bool cond_3446 = operand_3210->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
    if (cond_3446.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_3616,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3616 != NULL) {
    switch (operand_3616->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioStringList.addAssign_operation ((((GGS_string ("  ")).operator_concat (operand_3616->mConditionalBranch.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))).operator_concat (GGS_string (" "))).operator_concat (operand_3616->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_3616->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (133)) ;
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      var_cas_ioStringList.addAssign_operation ((((GGS_string ("  ")).operator_concat (var_cas_complementary.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (135)))).operator_concat (GGS_string (" "))).operator_concat (var_cas_aLabel)) ;
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_3616->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)))) ;
      var_cas_ioStringList.addAssign_operation ((var_cas_aLabel).operator_concat (GGS_string (":"))) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_3616->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (140)) ;
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
      var_cas_ioStringList.addAssign_operation ((((GGS_string ("  ")).operator_concat (var_cas_complementary.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" "))).operator_concat (var_cas_aLabel)) ;
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_3616->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143)))) ;
      var_cas_ioStringList.addAssign_operation ((var_cas_aLabel).operator_concat (GGS_string (":"))) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_jump_test_register.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_4690,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4690 != NULL) {
    GGS_string var_cas_s = (GGS_string ("  TSTFSZ ")).operator_concat (operand_4690->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (154))) ;
    const GGS_bool cond_4892 = operand_4690->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
    if (cond_4892.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
    const GGS_bool cond_5256 = operand_4690->mBranchIfZero ;
    if (cond_5256.isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (var_cas_aLabel)) ;
      const GGS_bool cond_5150 = operand_4690->mUsesBra ;
      if (cond_5150.isBuiltAndTrue ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_4690->mTargetLabel)) ;
      }else if (cond_5150.isBuiltAndFalse ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_4690->mTargetLabel)) ;
      }
      var_cas_ioStringList.addAssign_operation ((var_cas_aLabel).operator_concat (GGS_string (":"))) ;
    }else if (cond_5256.isBuiltAndFalse ()) {
      const GGS_bool cond_5335 = operand_4690->mUsesBra ;
      if (cond_5335.isBuiltAndTrue ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_4690->mTargetLabel)) ;
      }else if (cond_5335.isBuiltAndFalse ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_4690->mTargetLabel)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_5545,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5545 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    const GGS_bool cond_5697 = (operand_5545->mBranchIfZero).operator_and (operand_5545->mIncrement) ;
    if (cond_5697.isBuiltAndTrue ()) {
      var_cas_s.appendCString ("  INFSNZ ") ;
    }else if (cond_5697.isBuiltAndFalse ()) {
      const GGS_bool cond_5764 = (operand_5545->mBranchIfZero).operator_and ((operand_5545->mIncrement).operator_not ()) ;
      if (cond_5764.isBuiltAndTrue ()) {
        var_cas_s.appendCString ("  DCFSNZ ") ;
      }else if (cond_5764.isBuiltAndFalse ()) {
        const GGS_bool cond_5832 = ((operand_5545->mBranchIfZero).operator_not ()).operator_and (operand_5545->mIncrement) ;
        if (cond_5832.isBuiltAndTrue ()) {
          var_cas_s.appendCString ("  INCFSZ ") ;
        }else if (cond_5832.isBuiltAndFalse ()) {
          var_cas_s.appendCString ("  DECFSZ ") ;
        }
      }
    }
    var_cas_s.dotAssign_operation (operand_5545->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (193))) ;
    const GGS_bool cond_6014 = (operand_5545->m_W_isDestination).operator_and (operand_5545->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
    if (cond_6014.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", W, BSR_ACCESS") ;
    }else if (cond_6014.isBuiltAndFalse ()) {
      const GGS_bool cond_6089 = operand_5545->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
      if (cond_6089.isBuiltAndTrue ()) {
        var_cas_s.appendCString (", F, BSR_ACCESS") ;
      }else if (cond_6089.isBuiltAndFalse ()) {
        const GGS_bool cond_6136 = operand_5545->m_W_isDestination ;
        if (cond_6136.isBuiltAndTrue ()) {
          var_cas_s.appendCString (", W") ;
        }else if (cond_6136.isBuiltAndFalse ()) {
          var_cas_s.appendCString (", F") ;
        }
      }
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
    const GGS_bool cond_6260 = operand_5545->mUsesBra ;
    if (cond_6260.isBuiltAndTrue ()) {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_5545->mTargetLabel)) ;
    }else if (cond_6260.isBuiltAndFalse ()) {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_5545->mTargetLabel)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_registerComparisonCondition.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_6457,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6457 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    switch (operand_6457->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_s.appendCString ("  CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_s.appendCString ("  CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_s.appendCString ("  CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_s.appendCString ("  CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_s.appendCString ("  CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_s.appendCString ("  CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    var_cas_s.dotAssign_operation (operand_6457->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (226))) ;
    const GGS_bool cond_6930 = operand_6457->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
    if (cond_6930.isBuiltAndTrue ()) {
      var_cas_s.appendCString (", BSR_ACCESS") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_6457->method_usesIntermediateBRA (inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (231)) ;
    const GGS_bool cond_7380 = var_cas_usesIntermediateBRA ;
    if (cond_7380.isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel = (GGS_string ("_bcc_label_")).operator_concat (var_cas_ioBccLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
      var_cas_ioBccLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (var_cas_aLabel)) ;
      const GGS_bool cond_7274 = operand_6457->mUsesBra ;
      if (cond_7274.isBuiltAndTrue ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_6457->mTargetLabel)) ;
      }else if (cond_7274.isBuiltAndFalse ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_6457->mTargetLabel)) ;
      }
      var_cas_ioStringList.addAssign_operation ((var_cas_aLabel).operator_concat (GGS_string (":"))) ;
    }else if (cond_7380.isBuiltAndFalse ()) {
      const GGS_bool cond_7459 = operand_6457->mUsesBra ;
      if (cond_7459.isBuiltAndTrue ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_6457->mTargetLabel)) ;
      }else if (cond_7459.isBuiltAndFalse ()) {
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_6457->mTargetLabel)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JUMP.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_7648,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7648 != NULL) {
    switch (operand_7648->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA   ")).operator_concat (operand_7648->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO  ")).operator_concat (operand_7648->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA   ")).operator_concat (operand_7648->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO  ")).operator_concat (operand_7648->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JSR.buildAssemblyCode'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_8168,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8168 != NULL) {
    switch (operand_8168->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  RCALL ")).operator_concat (operand_8168->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  CALL  ")).operator_concat (operand_8168->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  RCALL ")).operator_concat (operand_8168->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioStringList.addAssign_operation ((GGS_string ("  CALL  ")).operator_concat (operand_8168->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)))) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_MOVLB.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_8704,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8704 != NULL) {
    var_cas_ioStringList.addAssign_operation ((GGS_string ("  MOVLB ")).operator_concat (operand_8704->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (284)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (284)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_CLRWDT.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_CLRWDT * operand_8963,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8963 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  CLRWDT")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_DAW.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_DAW * operand_9187,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9187 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  DAW")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_NOP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_NOP * operand_9408,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9408 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  NOP")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_POP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_POP * operand_9629,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9629 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  POP")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_PUSH.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_PUSH * operand_9851,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9851 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  PUSH")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RESET.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RESET * operand_10075,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10075 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  RESET")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RETURN.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RETURN * operand_10301,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10301 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  RETURN")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_RETFIE.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_RETFIE * operand_10529,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10529 != NULL) {
    GGS_string var_cas_s = GGS_string ("  RETFIE") ;
    const GGS_bool cond_10665 = operand_10529->mFastReturn ;
    if (cond_10665.isBuiltAndTrue ()) {
      var_cas_s.appendCString (" 1") ;
    }
    var_cas_ioStringList.addAssign_operation (var_cas_s) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_SLEEP.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic18_instruction_SLEEP * operand_10824,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10824 != NULL) {
    var_cas_ioStringList.addAssign_operation (GGS_string ("  SLEEP")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_literalOperation.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_11060,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11060 != NULL) {
    var_cas_ioStringList.addAssign_operation ((((GGS_string ("  ")).operator_concat (operand_11060->mLiteralInstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (378)))).operator_concat (GGS_string (" "))).operator_concat (operand_11060->mLiteralValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (378)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_LFSR.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_11347,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11347 != NULL) {
    var_cas_ioStringList.addAssign_operation ((((GGS_string ("  LFSR ")).operator_concat (operand_11347->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (387)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (387)))).operator_concat (GGS_string (", "))).operator_concat (operand_11347->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (387)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic18_instruction_MNOP.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_11627,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11627 != NULL) {
    const GGS_bool cond_11790 = (operand_11627->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (396))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_11790.isBuiltAndTrue ()) {
      operand_11627->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (397)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_11942 = operand_11627->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
    GGS_bool _condition_11942 (_variant_11942.isBuilt (), true) ;
    while (_condition_11942.isBuiltAndTrue ()) {
      _condition_11942 = (var_cas_idx).operator_strictInf (operand_11627->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (401))) ;
      if (_condition_11942.isBuiltAndTrue ()) {
        if (_variant_11942.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (405)) ;
          _condition_11942 = GGS_bool (false) ;
        }else{
          _variant_11942.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_ioStringList.addAssign_operation (GGS_string ("  NOP")) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_TBLRD.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLRD * operand_12079,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12079 != NULL) {
    var_cas_ioStringList.addAssign_operation ((GGS_string ("  TBLRD ")).operator_concat (operand_12079->mOption.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (414)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic18_instruction_TBLWT.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLWT * operand_12326,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12326 != NULL) {
    var_cas_ioStringList.addAssign_operation ((GGS_string ("  TBLWT ")).operator_concat (operand_12326->mOption.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (423)))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_retlw.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_12582,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12582 != NULL) {
    const GGS_bool cond_12724 = operand_12582->mUsesRCALL ;
    if (cond_12724.isBuiltAndTrue ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  RCALL _computed_goto_2")) ;
    }else if (cond_12724.isBuiltAndFalse ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  CALL _computed_goto_2")) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_12809 (operand_12582->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_12809 = NULL ;
      while (((operand_12809 = enumerator_12809.nextObject ()))) {
        macroValidPointer (operand_12809) ;
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  RETLW ")).operator_concat (operand_12809->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (438)))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_computed_bra.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_13020,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13020 != NULL) {
    const GGS_bool cond_13162 = operand_13020->mUsesRCALL ;
    if (cond_13162.isBuiltAndTrue ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  RCALL _computed_goto_2")) ;
    }else if (cond_13162.isBuiltAndFalse ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  CALL _computed_goto_2")) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13246 (operand_13020->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13246 = NULL ;
      while (((operand_13246 = enumerator_13246.nextObject ()))) {
        macroValidPointer (operand_13246) ;
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA ")).operator_concat (operand_13246->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (454)))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_goto.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_13453,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13453 != NULL) {
    const GGS_bool cond_13595 = operand_13453->mUsesRCALL ;
    if (cond_13595.isBuiltAndTrue ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  RCALL _computed_goto_4")) ;
    }else if (cond_13595.isBuiltAndFalse ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  CALL _computed_goto_4")) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13679 (operand_13453->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13679 = NULL ;
      while (((operand_13679 = enumerator_13679.nextObject ()))) {
        macroValidPointer (operand_13679) ;
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  GOTO ")).operator_concat (operand_13679->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (470)))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_computed_rcall.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_13888,
                                GGS_stringlist  & var_cas_ioStringList,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13888 != NULL) {
    const GGS_bool cond_14030 = operand_13888->mUsesRCALL ;
    if (cond_14030.isBuiltAndTrue ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  RCALL _computed_goto_4")) ;
    }else if (cond_14030.isBuiltAndFalse ()) {
      var_cas_ioStringList.addAssign_operation (GGS_string ("  CALL _computed_goto_4")) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_14133 (operand_13888->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_14133 = NULL ;
      while (((operand_14133 = enumerator_14133.nextObject ()))) {
        macroValidPointer (operand_14133) ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (487)) ;
        var_cas_ioStringList.addAssign_operation ((GGS_string ("  RCALL ")).operator_concat (operand_14133->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488)))) ;
        const GGS_bool cond_14311 = (var_cas_idx).operator_strictInf (operand_13888->mTargetLabels.reader_length ()) ;
        if (cond_14311.isBuiltAndTrue ()) {
          var_cas_ioStringList.addAssign_operation ((GGS_string ("  BRA   ")).operator_concat (operand_13888->mEndOfInstructionLabel)) ;
        }
      }
    }
    var_cas_ioStringList.addAssign_operation ((operand_13888->mEndOfInstructionLabel).operator_concat (GGS_string (":"))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "pic18_build_assembly_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_build_assembly_code (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_ipic18_instructionList   var_cas_inInstructionList,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_build_assembly_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string ("  PROCESSOR ")).operator_concat (var_cas_inProcessorName)).operator_concat (GGS_string ("\n")) ;
  var_cas_outAssemblyCode.appendCString (";--- Code\n") ;
  var_cas_outAssemblyCode.appendCString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_14919 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_14919 = NULL ;
    while (((operand_14919 = enumerator_14919.nextObject ()))) {
      macroValidPointer (operand_14919) ;
      GGS_stringlist  var_cas_lineList = GGS_stringlist ::constructor_emptyList () ;
      const GGS_ipic18_instruction  temp_14997 = operand_14919->mInstruction ;
      if (temp_14997.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__buildAssemblyCode method = findCategoryMethod__ipic18_instruction__buildAssemblyCode (temp_14997.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_14997 (HERE), var_cas_lineList, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (513)) ;
        }
      }
      {
        GGS_stringlist::cEnumerator enumerator_15048 (var_cas_lineList, true) ;
        const GGS_stringlist::cElement * operand_15048 = NULL ;
        while (((operand_15048 = enumerator_15048.nextObject ()))) {
          macroValidPointer (operand_15048) ;
          var_cas_outAssemblyCode.dotAssign_operation (operand_15048->mValue) ;
          var_cas_outAssemblyCode.appendCString ("\n") ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_15263 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_15263 = NULL ;
    while (((operand_15263 = enumerator_15263.nextObject ()))) {
      macroValidPointer (operand_15263) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  temp_15320 = operand_15263->mInfo.mRegisterAddressList ;
      if (temp_15320.isBuilt ()) {
        temp_15320 (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (522)) ;
      }
      var_cas_outAssemblyCode.dotAssign_operation (operand_15263->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523))) ;
      var_cas_outAssemblyCode.appendCString (" EQU ") ;
      var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (523))) ;
      var_cas_outAssemblyCode.appendCString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_15589 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_15589 = NULL ;
    while (((operand_15589 = enumerator_15589.nextObject ()))) {
      macroValidPointer (operand_15589) ;
      const GGS_bool cond_15820 = (var_cas_inPredefinedRegisters.reader_hasKey (operand_15589->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (529)))).operator_not () ;
      if (cond_15820.isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  temp_15709 = operand_15589->mInfo.mRegisterAddressList ;
        if (temp_15709.isBuilt ()) {
          temp_15709 (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (530)) ;
        }
        var_cas_outAssemblyCode.dotAssign_operation (operand_15589->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531))) ;
        var_cas_outAssemblyCode.appendCString (" EQU ") ;
        var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (531))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.appendCString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.appendCString ("BSR_ACCESS EQU 1\n"
    "\n") ;
  const GGS_bool cond_16369 = (var_cas_inActualConfigurationMap.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_16369.isBuiltAndTrue ()) {
    var_cas_outAssemblyCode.appendCString (";--- Configuration\n"
      "\n") ;
    {
      GGS_actualConfigurationMap::cEnumerator enumerator_16221 (var_cas_inActualConfigurationMap, true) ;
      const GGS_actualConfigurationMap::cElement * operand_16221 = NULL ;
      while (((operand_16221 = enumerator_16221.nextObject ()))) {
        macroValidPointer (operand_16221) ;
        var_cas_outAssemblyCode.appendCString ("  __config ") ;
        var_cas_outAssemblyCode.dotAssign_operation (operand_16221->mInfo.mRegisterAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (543))) ;
        var_cas_outAssemblyCode.appendCString (", ") ;
        var_cas_outAssemblyCode.dotAssign_operation ((operand_16221->mInfo.mRegisterValue).operator_and (GGS_uint (255U)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (543))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.appendCString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_build_assembly_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_assembly_code (void) {
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_NULL__buildAssemblyCode, gClassInfoFor__ipic_NULL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FDA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MOVFF__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FBA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_BitTestSkip__buildAssemblyCode, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_FA__buildAssemblyCode, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_jump_test_register__buildAssemblyCode, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_incDecRegisterInCondition__buildAssemblyCode, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_registerComparisonCondition__buildAssemblyCode, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_JUMP__buildAssemblyCode, gClassInfoFor__ipic_JUMP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic_JSR__buildAssemblyCode, gClassInfoFor__ipic_JSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MOVLB__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_DAW__buildAssemblyCode, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_NOP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_POP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_PUSH__buildAssemblyCode, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RESET__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RETURN__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_LFSR__buildAssemblyCode, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_MNOP__buildAssemblyCode, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_TBLRD__buildAssemblyCode, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_TBLWT__buildAssemblyCode, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_bra__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_goto__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__buildAssemblyCode ((typeCategoryMethod__ipic18_instruction__buildAssemblyCode) category_method__ipic18_instruction_computed_rcall__buildAssemblyCode, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_ipic18_build_assembly_code (void) {
  gDispatchTableForMethod__ipic18_instruction__buildAssemblyCode.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_ipic18_build_assembly_code (prologueRoutineFor_ipic18_build_assembly_code, epilogueRoutineFor_ipic18_build_assembly_code) ;

//---------------------------------------------------------------------------*

