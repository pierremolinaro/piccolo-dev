//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ipic18_build_binary_code.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     december 3rd, 2008, at 18h23'56"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipic18_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_ipic18_symbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_ipic18_symbolTable::e_ipic18_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@ipic18_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_ipic18_symbolTable::
elementOf_GGS_ipic18_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_ipic18_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ipic18_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ipic18_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_ipic18_symbolTable * _p = dynamic_cast <const elementOf_GGS_ipic18_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_ipic18_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_ipic18_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
_operator_isEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
_operator_isNotEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_ipic18_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_ipic18_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ipic18_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ipic18_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @ipic18_symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ipic18_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_967,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_967 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__enterLabelAtAddress> gDispatchTableFor__ipic18_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (typeCategoryMethod__ipic18_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__enterLabelAtAddress
findCategoryMethod__ipic18_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic18_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1197,
                                GGS_ipic18_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1197 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1197->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1469,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1469 != NULL) {
    var_cas_ioAddress = operand_1469->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_1722,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1722 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1722->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (54)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_NULL.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_NULL * operand_2611,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2611 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_2847,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2847 != NULL) {
    var_cas_ioAddress = operand_2847->mOrigin ;
    if (operand_2847->mOrigin._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_2847->mOrigin COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FDA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_3136,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3136 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3136->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (95)) ;
    if ((operand_3136->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_3136->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3136->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (102)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (103)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_FA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3675,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3675 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3675->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (113)) ;
    if ((operand_3675->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3675->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (117)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (118)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVFF.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_4146,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4146 != NULL) {
    if ((GGS_uint (true, 49152U))._operator_or (operand_4146->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (127)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (operand_4146->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (127))) COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (operand_4146->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (operand_4146->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))) COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FBA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_4532,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4532 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4532->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (138)) ;
    if ((operand_4532->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (139))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_4532->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_4532->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (143))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_5046,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5046 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5046->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (154)) ;
    if ((operand_5046->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (155))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5046->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)))._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_5046->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (159))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "getBccBaseCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBccBaseCode (C_Compiler &,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_uint  & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getBccBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inConditionalBranch.enumValue ()) {
  case GGS_conditional_branch::enum_bz:
    {
    var_cas_outBaseCode = GGS_uint (true, 57344U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnz:
    {
    var_cas_outBaseCode = GGS_uint (true, 57600U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bn:
    {
    var_cas_outBaseCode = GGS_uint (true, 58880U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnn:
    {
    var_cas_outBaseCode = GGS_uint (true, 59136U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bc:
    {
    var_cas_outBaseCode = GGS_uint (true, 57856U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnc:
    {
    var_cas_outBaseCode = GGS_uint (true, 58112U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bov:
    {
    var_cas_outBaseCode = GGS_uint (true, 58368U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnov:
    {
    var_cas_outBaseCode = GGS_uint (true, 58624U) ;
    }
    break ;
  case GGS_conditional_branch::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getBccBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (186)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (192)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (193)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))) COMMA_SOURCE_FILE_AT_LINE (193)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) COMMA_SOURCE_FILE_AT_LINE (203))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (203)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (206)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (208))) COMMA_SOURCE_FILE_AT_LINE (208)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_GOTOinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_GOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (217)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (217))) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_7554,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7554 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_7679 = var_cas_inRoutineSymbolTable ;
    if (_temp_7679._isBuilt ()) {
      _temp_7679 (HERE)->method_searchKey (_inLexique, operand_7554->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (227)) ;
    }
    switch (operand_7554->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_7554->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (234)),  operand_7554->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (231)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_7554->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (239)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (242)),  operand_7554->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (240)) ;
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (247)),  var_cas_targetAddress,  operand_7554->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (246)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_7554->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (253)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (256)),  operand_7554->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (257)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (254)) ;
      ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JUMP.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_8740,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8740 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_8865 = var_cas_inRoutineSymbolTable ;
    if (_temp_8865._isBuilt ()) {
      _temp_8865 (HERE)->method_searchKey (_inLexique, operand_8740->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (273)) ;
    }
    switch (operand_8740->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (276))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (276))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)) COMMA_SOURCE_FILE_AT_LINE (276))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (276)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_8740->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (279)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8740->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (283)) COMMA_SOURCE_FILE_AT_LINE (280)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (286)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_CALLinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_CALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (295)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (295)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (295)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (296)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (296))) COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (306))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (306))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (306)) COMMA_SOURCE_FILE_AT_LINE (306))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement too large ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (308))))._operator_concat (GGS_string (true, ") for RCALL instruction (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (309)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (311)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (311))) COMMA_SOURCE_FILE_AT_LINE (311)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JSR.generateBinaryCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_10378,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10378 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_10503 = var_cas_inRoutineSymbolTable ;
    if (_temp_10503._isBuilt ()) {
      _temp_10503 (HERE)->method_searchKey (_inLexique, operand_10378->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (321)) ;
    }
    switch (operand_10378->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (324))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (324))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (324)) COMMA_SOURCE_FILE_AT_LINE (324))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (324)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_10378->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (327)) ;
      }
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_10378->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (328)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (334)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_11148,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11148 != NULL) {
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (true, 26112U) ;
    if ((operand_11148->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (347))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_11148->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (350)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (351)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_11554 = var_cas_inRoutineSymbolTable ;
    if (_temp_11554._isBuilt ()) {
      _temp_11554 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_11148->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (354)) ;
    }
    if ((operand_11148->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_11148->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (358)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (360)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (363)),  var_cas_intermediateTargetAddress,  operand_11148->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (362)) ;
      if ((operand_11148->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (368)),  var_cas_targetAddress,  operand_11148->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (368)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (370)) ;
      }
    }else{
      if ((operand_11148->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (374)),  var_cas_targetAddress,  operand_11148->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (374)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (376)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_12434,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12434 != NULL) {
    GGS_uint  var_cas_code ;
    if (((operand_12434->mBranchIfZero)._operator_and (operand_12434->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 18432U) ;
    }else if (((operand_12434->mBranchIfZero)._operator_and ((operand_12434->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 19456U) ;
    }else if ((((operand_12434->mBranchIfZero)._operator_not ())._operator_and (operand_12434->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 15360U) ;
    }else{
      var_cas_code = GGS_uint (true, 11264U) ;
    }
    if (((operand_12434->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    if ((operand_12434->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (400))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_12434->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (404)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_13123 = var_cas_inRoutineSymbolTable ;
    if (_temp_13123._isBuilt ()) {
      _temp_13123 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12434->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (407)) ;
    }
    if ((operand_12434->mUsesBra).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (409)),  var_cas_targetAddress,  operand_12434->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (409)) ;
    }else{
      ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (411)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_13487,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13487 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_13487->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    if ((operand_13487->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (431))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_13487->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (434)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (435)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_14245 = var_cas_inRoutineSymbolTable ;
    if (_temp_14245._isBuilt ()) {
      _temp_14245 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_13487->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (438)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_13487->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (439)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_13487->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (443)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (445)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (448)),  var_cas_intermediateTargetAddress,  operand_13487->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (447)) ;
      if ((operand_13487->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (453)),  var_cas_targetAddress,  operand_13487->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (453)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (455)) ;
      }
    }else{
      if ((operand_13487->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (459)),  var_cas_targetAddress,  operand_13487->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (459)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (461)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_CLRWDT.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_CLRWDT * operand_15230,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15230 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (472)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_DAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_DAW * operand_15494,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15494 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (481)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_NOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_NOP * operand_15758,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15758 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_POP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_POP * operand_16022,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16022 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (499)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_PUSH.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_PUSH * operand_16287,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16287 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (508)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RESET.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_RESET * operand_16553,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16553 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (517)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETURN.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_RETURN * operand_16820,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16820 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (526)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETFIE.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_RETFIE * operand_17087,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17087 != NULL) {
    GGS_uint  var_cas_code ;
    if ((operand_17087->mFastReturn).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 17U) ;
    }else{
      var_cas_code = GGS_uint (true, 16U) ;
    }
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (542)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_SLEEP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_SLEEP * operand_17472,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17472 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (551)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_17749,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17749 != NULL) {
    GGS_uint  var_cas_code ;
    operand_17749->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (561)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_17749->mLiteralValue) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (563)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_LFSR.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_18103,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18103 != NULL) {
    if (((GGS_uint (true, 60928U))._operator_or (operand_18103->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (572))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (572))))._operator_or (operand_18103->mValue._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (572)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_18103->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (572))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (572))))._operator_or (operand_18103->mValue._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (572))) COMMA_SOURCE_FILE_AT_LINE (572)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((operand_18103->mValue)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((operand_18103->mValue)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (573)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVLB.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_18449,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18449 != NULL) {
    if ((GGS_uint (true, 256U))._operator_or (operand_18449->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (582)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 256U))._operator_or (operand_18449->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (582))) COMMA_SOURCE_FILE_AT_LINE (582)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_18728,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18728 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_18853 = var_cas_inRoutineSymbolTable ;
    if (_temp_18853._isBuilt ()) {
      _temp_18853 (HERE)->method_searchKey (_inLexique, operand_18728->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (592)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_18728->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_18728->mLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (595))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (596))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (597)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLRD.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_TBLRD * operand_19297,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19297 != NULL) {
    switch (operand_19297->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (607)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (608)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (609)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (610)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLWT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_TBLWT * operand_19742,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19742 != NULL) {
    switch (operand_19742->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (621)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (623)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_MNOP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_20186,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20186 != NULL) {
    if (((operand_20186->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (634)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_20186->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (635)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_20510 = operand_20186->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (638)) ;
    GGS_bool _condition_20510 (_variant_20510._isBuilt (), true) ;
    while (_condition_20510.isBuiltAndTrue ()) {
      _condition_20510 = (var_cas_idx)._operator_strictInf (operand_20186->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (639))) ;
      if (_condition_20510.isBuiltAndTrue ()) {
        if (_variant_20510.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (643)) ;
          _condition_20510 = GGS_bool (true, false) ;
        }else{
          _variant_20510._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (641)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_20690,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20690 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_20815 = var_cas_inRoutineSymbolTable ;
    if (_temp_20815._isBuilt ()) {
      _temp_20815 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (653)) ;
    }
    if ((operand_20690->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_20690->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (655)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_21063 (operand_20690->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_21063 = NULL ;
      while (((operand_21063 = enumerator_21063.nextObject ()))) {
        macroValidPointer (operand_21063) ;
        if ((GGS_uint (true, 3072U))._operator_or (operand_21063->mValue)._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_21063->mValue) COMMA_SOURCE_FILE_AT_LINE (660)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_21285,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21285 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_21410 = var_cas_inRoutineSymbolTable ;
    if (_temp_21410._isBuilt ()) {
      _temp_21410 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (671)) ;
    }
    if ((operand_21285->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_21285->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (673)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (675)) ;
    }
    GGS_uint  var_cas_addressForComputingBRA ;
    var_cas_addressForComputingBRA = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (678)) ;
    if (((operand_21285->mUsesRCALL)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (680)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_21838 (operand_21285->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_21838 = NULL ;
      while (((operand_21838 = enumerator_21838.nextObject ()))) {
        macroValidPointer (operand_21838) ;
        const GGS_ipic18_symbolTable  _temp_21877 = var_cas_inRoutineSymbolTable ;
        if (_temp_21877._isBuilt ()) {
          _temp_21877 (HERE)->method_searchKey (_inLexique, operand_21838->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (684)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_addressForComputingBRA,  var_cas_targetAddress,  operand_21838->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (688)) COMMA_SOURCE_FILE_AT_LINE (685)) ;
        var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (690)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_22255,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22255 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_22380 = var_cas_inRoutineSymbolTable ;
    if (_temp_22380._isBuilt ()) {
      _temp_22380 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (701)) ;
    }
    if ((operand_22255->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_22255->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (703)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (705)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22626 (operand_22255->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_22626 = NULL ;
      while (((operand_22626 = enumerator_22626.nextObject ()))) {
        macroValidPointer (operand_22626) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_ipic18_symbolTable  _temp_22698 = var_cas_inRoutineSymbolTable ;
        if (_temp_22698._isBuilt ()) {
          _temp_22698 (HERE)->method_searchKey (_inLexique, operand_22626->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (709)) ;
        }
        ::routine_emit_pic18_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_rcall.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_22971,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22971 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_23096 = var_cas_inRoutineSymbolTable ;
    if (_temp_23096._isBuilt ()) {
      _temp_23096 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (723)) ;
    }
    GGS_uint  var_cas_currentInstructionAddress ;
    if ((operand_22971->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_22971->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (726)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (727)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (729)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (730)) ;
    }
    GGS_uint  var_cas_nextInstructionAddress ;
    var_cas_nextInstructionAddress = var_cas_currentInstructionAddress._add_operation (_inLexique, operand_22971->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (732))._multiply_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (732)) COMMA_SOURCE_FILE_AT_LINE (732))._substract_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (732)) ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (true, 0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_23592 (operand_22971->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_23592 = NULL ;
      while (((operand_23592 = enumerator_23592.nextObject ()))) {
        macroValidPointer (operand_23592) ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (735)) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_ipic18_symbolTable  _temp_23679 = var_cas_inRoutineSymbolTable ;
        if (_temp_23679._isBuilt ()) {
          _temp_23679 (HERE)->method_searchKey (_inLexique, operand_23592->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (737)) ;
        }
        ::routine_emitRCALLinstruction (_inLexique,  var_cas_currentInstructionAddress,  var_cas_targetAddress,  operand_23592->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (738)) COMMA_SOURCE_FILE_AT_LINE (738)) ;
        var_cas_currentInstructionAddress = var_cas_currentInstructionAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (739)) ;
        if (((var_cas_index)._operator_strictInf (operand_22971->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (740)))).isBuiltAndTrue ()) {
          ::routine_emitBRAinstruction (_inLexique,  var_cas_currentInstructionAddress,  var_cas_nextInstructionAddress,  operand_23592->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (741)) COMMA_SOURCE_FILE_AT_LINE (741)) ;
          var_cas_currentInstructionAddress = var_cas_currentInstructionAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (742)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "build_ipic18_binary_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_binary_code (C_Compiler & _inLexique,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_24843 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_24843 = NULL ;
    while (((operand_24843 = enumerator_24843.nextObject ()))) {
      macroValidPointer (operand_24843) ;
      const GGS_ipic18_instruction  _temp_24884 = operand_24843->mInstruction ;
      if (_temp_24884._isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__enterLabelAtAddress _method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (_temp_24884._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_24884 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (762)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (767)) ;
  }
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_25130 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_25130 = NULL ;
    while (((operand_25130 = enumerator_25130.nextObject ()))) {
      macroValidPointer (operand_25130) ;
      const GGS_ipic18_instruction  _temp_25179 = operand_25130->mInstruction ;
      if (_temp_25179._isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (_temp_25179._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_25179 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (769)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic18_instruction  _temp_25278 = operand_25130->mInstruction ;
      if (_temp_25278._isBuilt ()) {
        _temp_25278 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (771)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (772)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (773)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (776))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (778))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (779)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (780))))._operator_concat (GGS_string (true, " bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (782))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (783)) ;
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_25975 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_25975 = NULL ;
    while (((operand_25975 = enumerator_25975.nextObject ()))) {
      macroValidPointer (operand_25975) ;
      if (operand_25975->mInfo.mRegisterAddress._isBuilt ()) {
        ::routine_setEmitAddress (_inLexique,  operand_25975->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (786)) ;
      }
      if (operand_25975->mInfo.mRegisterValue._isBuilt ()) {
        ::routine_emitByte (_inLexique,  operand_25975->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (787)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_binary_code (void) {
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (category_method__ipic18_instruction__enterLabelAtAddress, gClassInfoFor__ipic18_instruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_NULL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_NULL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_build_binary_code (prologueRoutineFor_ipic18_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

