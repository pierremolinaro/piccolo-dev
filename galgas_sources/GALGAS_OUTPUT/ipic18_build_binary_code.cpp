//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ipic18_build_binary_code.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 23th, 2010, at 16h3'24"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic18_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_ipic18_symbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_ipic18_symbolTable::e_ipic18_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@ipic18_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ipic18_symbolTable ("ipic18_symbolTable", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_ipic18_symbolTable::
elementOf_GGS_ipic18_symbolTable (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_ipic18_symbolTable & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ipic18_symbolTable::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ipic18_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_ipic18_symbolTable * ptr = dynamic_cast <const elementOf_GGS_ipic18_symbolTable *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress.operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_ipic18_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_ipic18_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
operator_isEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
operator_isNotEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_ipic18_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_ipic18_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ipic18_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ipic18_symbolTable::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @ipic18_symbolTable " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ipic18_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_ipic18_symbolTable::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ipic18_symbolTable * p = NULL ;
    macroMyNew (p, GGS_ipic18_symbolTable (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ipic18_symbolTable * p = dynamic_cast <const GGS_ipic18_symbolTable *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ipic18_symbolTable, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ipic18_symbolTable::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ipic18_symbolTable ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_1007,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1007 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__enterLabelAtAddress> gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (typeCategoryMethod__ipic18_instruction__enterLabelAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__enterLabelAtAddress
findCategoryMethod__ipic18_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1237,
                                GGS_ipic18_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1237 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1237->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (35)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1509,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1509 != NULL) {
    var_cas_ioAddress = operand_1509->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_actualInstruction * operand_1762,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1762 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1762->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (56)) ;
    var_cas_ioAddress = var_cas_ioAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (57)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@emittedCodeList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_emittedCodeList::
elementOf_GGS_emittedCodeList (const GGS_uintlist & argument_0
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mCode (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_emittedCodeList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_emittedCodeList * ptr = dynamic_cast <const elementOf_GGS_emittedCodeList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mCode.operator_isEqual (ptr->mCode).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_emittedCodeList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCode.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@emittedCodeList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_emittedCodeList ("emittedCodeList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalAppendValues (const GGS_uintlist & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalPrependValues (const GGS_uintlist & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
addAssign_operation (const GGS_uintlist & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
operator_concat (const GGS_emittedCodeList & inOperand) const {
  GGS_emittedCodeList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
dotAssign_operation (const GGS_emittedCodeList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_emittedCodeList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uintlist  p_0 = p->mCode ;
          internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_uintlist & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mCode
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList  GGS_emittedCodeList::
constructor_emptyList (void) {
  GGS_emittedCodeList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList  GGS_emittedCodeList::
constructor_listWithValue (const GGS_uintlist & argument_0) {
  GGS_emittedCodeList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalSubListWithRange (GGS_emittedCodeList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mCode) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_emittedCodeList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_emittedCodeList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_emittedCodeList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@emittedCodeList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
method_first (C_Compiler & inLexique,
              GGS_uintlist & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
method_last (C_Compiler & inLexique,
             GGS_uintlist & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_uintlist & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_popLast (C_Compiler & inLexique,
                GGS_uintlist & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_uintlist  GGS_emittedCodeList::
reader_mCodeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_uintlist  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCode ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_setMCodeAtIndex (C_Compiler & inLexique,
                              const GGS_uintlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCode = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uintlist  & GGS_emittedCodeList::cEnumerator::_mCode (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCode ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_emittedCodeList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_emittedCodeList * p = NULL ;
    macroMyNew (p, GGS_emittedCodeList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_emittedCodeList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_emittedCodeList * p = dynamic_cast <const GGS_emittedCodeList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_emittedCodeList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_emittedCodeList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_emittedCodeList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress> gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_NULL.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_NULL * operand_2792,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2792 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_3063,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3063 != NULL) {
    var_cas_ioAddress = operand_3063->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FDA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_3359,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3359 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3359->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (106)) ;
    const GGS_bool cond_3603 = operand_3359->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
    if (cond_3603.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    const GGS_bool cond_3674 = (operand_3359->m_W_isDestination).operator_not () ;
    if (cond_3674.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (512U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_3359->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (113))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_FA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3954,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3954 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3954->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (125)) ;
    const GGS_bool cond_4198 = operand_3954->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
    if (cond_4198.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_3954->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (129))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVFF.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_4481,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4481 != NULL) {
    GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
    var_cas_code.addAssign_operation ((GGS_uint (49152U)).operator_or (operand_4481->mSourceRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (141)))) ;
    var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (operand_4481->mDestinationRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))) ;
    var_cas_ioCode.addAssign_operation (var_cas_code) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FBA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_4944,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4944 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4944->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (154)) ;
    const GGS_bool cond_5188 = operand_4944->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
    if (cond_5188.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_4944->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (158))).operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_4944->mBitNumber.left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (159))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_5514,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5514 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5514->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (171)) ;
    const GGS_bool cond_5758 = operand_5514->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (172)) ;
    if (cond_5758.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_5514->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (175))).operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_5514->mBitNumber.left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (176))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "getBccBaseCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBccBaseCode (C_Compiler &,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_uint  & var_cas_outBaseCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getBccBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inConditionalBranch.enumValue ()) {
  case GGS_conditional_branch::enum_bz:
    {
    var_cas_outBaseCode = GGS_uint (57344U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnz:
    {
    var_cas_outBaseCode = GGS_uint (57600U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bn:
    {
    var_cas_outBaseCode = GGS_uint (58880U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnn:
    {
    var_cas_outBaseCode = GGS_uint (59136U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bc:
    {
    var_cas_outBaseCode = GGS_uint (57856U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnc:
    {
    var_cas_outBaseCode = GGS_uint (58112U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bov:
    {
    var_cas_outBaseCode = GGS_uint (58368U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnov:
    {
    var_cas_outBaseCode = GGS_uint (58624U) ;
    }
    break ;
  case GGS_conditional_branch::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getBccBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_emittedCodeList  & var_cas_ioCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (204)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (204)).substract_operation (inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (204)) COMMA_SOURCE_FILE_AT_LINE (204)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (204)) ;
  const GGS_bool cond_6993 = ((var_cas_displacement).operator_strictSup (GGS_sint (127L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_6993.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (207)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (210)) ;
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((var_cas_baseCode).operator_or ((var_cas_displacement).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (211))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_emittedCodeList  & var_cas_ioCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (222)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (222)).substract_operation (inLexique, var_cas_inBRAinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) COMMA_SOURCE_FILE_AT_LINE (222)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (222)) ;
  const GGS_bool cond_7647 = ((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_7647.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (225)) ;
  }
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (53248U)).operator_or ((var_cas_displacement).operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (227))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_GOTOinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_GOTOinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
  var_cas_code.addAssign_operation ((GGS_uint (61184U)).operator_or ((var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (237))).operator_and (GGS_uint (255U)))) ;
  var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (238)))) ;
  var_cas_ioCode.addAssign_operation (var_cas_code) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_8267,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8267 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_8267->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (250)) ;
    }
    switch (operand_8267->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8267->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (257)),  operand_8267->mConditionalBranch,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (254)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_8267->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (263)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (266)),  operand_8267->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (267)),  var_cas_complementary,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (264)) ;
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (272)),  var_cas_targetAddress,  operand_8267->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (274)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (271)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_8267->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (279)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (282)),  operand_8267->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (283)),  var_cas_complementary,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (280)) ;
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (287)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JUMP.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_9556,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9556 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_9556->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (302)) ;
    }
    switch (operand_9556->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (305)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (305)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) COMMA_SOURCE_FILE_AT_LINE (305)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (305)) ;
      const GGS_bool cond_10015 = ((var_cas_displacement).operator_strictSup (GGS_sint (2048L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (2048L).operator_unary_minus (inLexique COMMA_HERE))) ;
      if (cond_10015.isBuiltAndTrue ()) {
        operand_9556->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (308)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_9556->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (312)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (309)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (316)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_CALLinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_CALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
  var_cas_code.addAssign_operation ((GGS_uint (60416U)).operator_or ((var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (330))).operator_and (GGS_uint (255U)))) ;
  var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (331)))) ;
  var_cas_ioCode.addAssign_operation (var_cas_code) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_lstring   var_cas_inTargetLabel,
                                GGS_emittedCodeList  & var_cas_ioCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (343)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (343)).substract_operation (inLexique, var_cas_inRCALLinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (343)) COMMA_SOURCE_FILE_AT_LINE (343)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (343)) ;
  const GGS_bool cond_11164 = ((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_11164.isBuiltAndTrue ()) {
    var_cas_inTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("displacement too large (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345)))).operator_concat (GGS_string (") for RCALL instruction to '"))).operator_concat (var_cas_inTargetLabel)).operator_concat (GGS_string ("' (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (347)) ;
  }
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (55296U)).operator_or ((var_cas_displacement).operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (349))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JSR.generateBinaryCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_11421,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11421 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_11421->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (360)) ;
    }
    switch (operand_11421->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (363)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (363)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (363)) COMMA_SOURCE_FILE_AT_LINE (363)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (363)) ;
      const GGS_bool cond_11880 = ((var_cas_displacement).operator_strictSup (GGS_sint (2048L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (2048L).operator_unary_minus (inLexique COMMA_HERE))) ;
      if (cond_11880.isBuiltAndTrue ()) {
        operand_11421->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (366)) ;
      }
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_11421->mTargetLabel,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (367)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (374)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_12248,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12248 != NULL) {
    GGS_uint  var_cas_code = GGS_uint (26112U) ;
    const GGS_bool cond_12488 = operand_12248->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
    if (cond_12488.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_12248->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (394))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12248->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (398)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (398)) ;
    }
    const GGS_bool cond_13294 = operand_12248->mBranchIfZero ;
    if (cond_13294.isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      const GGS_bool cond_12907 = operand_12248->mUsesBra ;
      if (cond_12907.isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }else if (cond_12907.isBuiltAndFalse ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (404)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (407)),  var_cas_intermediateTargetAddress,  operand_12248->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (406)) ;
      const GGS_bool cond_13215 = operand_12248->mUsesBra ;
      if (cond_13215.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (413)),  var_cas_targetAddress,  operand_12248->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (413)) ;
      }else if (cond_13215.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (415)) ;
      }
    }else if (cond_13294.isBuiltAndFalse ()) {
      const GGS_bool cond_13412 = operand_12248->mUsesBra ;
      if (cond_13412.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (419)),  var_cas_targetAddress,  operand_12248->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (419)) ;
      }else if (cond_13412.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (421)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_13641,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13641 != NULL) {
    GGS_uint  var_cas_code ;
    const GGS_bool cond_13826 = (operand_13641->mBranchIfZero).operator_and (operand_13641->mIncrement) ;
    if (cond_13826.isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (18432U) ;
    }else if (cond_13826.isBuiltAndFalse ()) {
      const GGS_bool cond_13900 = (operand_13641->mBranchIfZero).operator_and ((operand_13641->mIncrement).operator_not ()) ;
      if (cond_13900.isBuiltAndTrue ()) {
        var_cas_code = GGS_uint (19456U) ;
      }else if (cond_13900.isBuiltAndFalse ()) {
        const GGS_bool cond_13975 = ((operand_13641->mBranchIfZero).operator_not ()).operator_and (operand_13641->mIncrement) ;
        if (cond_13975.isBuiltAndTrue ()) {
          var_cas_code = GGS_uint (15360U) ;
        }else if (cond_13975.isBuiltAndFalse ()) {
          var_cas_code = GGS_uint (11264U) ;
        }
      }
    }
    const GGS_bool cond_14082 = (operand_13641->m_W_isDestination).operator_not () ;
    if (cond_14082.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (512U)) ;
    }
    const GGS_bool cond_14164 = operand_13641->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (446)) ;
    if (cond_14164.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_13641->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (449))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_13641->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (453)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (453)) ;
    }
    const GGS_bool cond_14552 = operand_13641->mUsesBra ;
    if (cond_14552.isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (455)),  var_cas_targetAddress,  operand_13641->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (455)) ;
    }else if (cond_14552.isBuiltAndFalse ()) {
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (457)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_14767,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14767 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_14767->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    const GGS_bool cond_15359 = operand_14767->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (478)) ;
    if (cond_15359.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_14767->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (481))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_14767->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (485)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (485)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_14767->method_usesIntermediateBRA (inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (486)) ;
    const GGS_bool cond_16251 = var_cas_usesIntermediateBRA ;
    if (cond_16251.isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      const GGS_bool cond_15864 = operand_14767->mUsesBra ;
      if (cond_15864.isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (490)) ;
      }else if (cond_15864.isBuiltAndFalse ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (492)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (495)),  var_cas_intermediateTargetAddress,  operand_14767->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (494)) ;
      const GGS_bool cond_16172 = operand_14767->mUsesBra ;
      if (cond_16172.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (501)),  var_cas_targetAddress,  operand_14767->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (501)) ;
      }else if (cond_16172.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (503)) ;
      }
    }else if (cond_16251.isBuiltAndFalse ()) {
      const GGS_bool cond_16369 = operand_14767->mUsesBra ;
      if (cond_16369.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (507)),  var_cas_targetAddress,  operand_14767->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (507)) ;
      }else if (cond_16369.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (509)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_CLRWDT.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_CLRWDT * operand_16617,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16617 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (4U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_DAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_DAW * operand_16937,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16937 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (7U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_NOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_NOP * operand_17257,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17257 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (0U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_POP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_POP * operand_17577,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17577 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (6U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_PUSH.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_PUSH * operand_17898,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17898 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (5U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RESET.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RESET * operand_18220,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18220 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (255U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETURN.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RETURN * operand_18543,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18543 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (18U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETFIE.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RETFIE * operand_18866,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18866 != NULL) {
    GGS_uint  var_cas_code ;
    const GGS_bool cond_19054 = operand_18866->mFastReturn ;
    if (cond_19054.isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (17U) ;
    }else if (cond_19054.isBuiltAndFalse ()) {
      var_cas_code = GGS_uint (16U) ;
    }
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_SLEEP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_SLEEP * operand_19307,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19307 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (3U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_19640,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19640 != NULL) {
    GGS_uint  var_cas_code ;
    operand_19640->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (619)) ;
    var_cas_code = (var_cas_code).operator_or (operand_19640->mLiteralValue) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_LFSR.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_20050,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20050 != NULL) {
    GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
    var_cas_code.addAssign_operation (((GGS_uint (60928U)).operator_or (operand_20050->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (632)).left_shift_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (632)))).operator_or (operand_20050->mValue.right_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (632)))) ;
    var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or ((operand_20050->mValue).operator_and (GGS_uint (255U)))) ;
    var_cas_ioCode.addAssign_operation (var_cas_code) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVLB.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_20473,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20473 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (256U)).operator_or (operand_20473->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (644))))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_20808,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20808 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_20808->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (655)) ;
    }
    const GGS_bool cond_21243 = (var_cas_targetAddress).operator_isNotEqual (var_cas_ioAddress) ;
    if (cond_21243.isBuiltAndTrue ()) {
      operand_20808->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '")).operator_concat (operand_20808->mLabel)).operator_concat (GGS_string ("' label gets "))).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (658)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (659)))).operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (660)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLRD.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_TBLRD * operand_21412,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21412 != NULL) {
    switch (operand_21412->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (8U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (9U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (10U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (11U))) ;
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLWT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_TBLWT * operand_21997,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21997 != NULL) {
    switch (operand_21997->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (12U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (13U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (14U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (15U))) ;
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_MNOP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_22581,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22581 != NULL) {
    const GGS_bool cond_22789 = (operand_22581->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (700))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_22789.isBuiltAndTrue ()) {
      operand_22581->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (701)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_22961 = operand_22581->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (704)) ;
    GGS_bool _condition_22961 (_variant_22961.isBuilt (), true) ;
    while (_condition_22961.isBuiltAndTrue ()) {
      _condition_22961 = (var_cas_idx).operator_strictInf (operand_22581->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (705))) ;
      if (_condition_22961.isBuiltAndTrue ()) {
        if (_variant_22961.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (709)) ;
          _condition_22961 = GGS_bool (false) ;
        }else{
          _variant_22961.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (0U))) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_23141,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23141 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_23141->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (720)) ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (721)) ;
    }
    const GGS_bool cond_23486 = operand_23141->mUsesRCALL ;
    if (cond_23486.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (723)) ;
    }else if (cond_23486.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (725)) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_23580 (operand_23141->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_23580 = NULL ;
      while (((operand_23580 = enumerator_23580.nextObject ()))) {
        macroValidPointer (operand_23580) ;
        var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (3072U)).operator_or (operand_23580->mValue))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_23830,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23830 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_23830->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (739)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (741)) ;
    }
    const GGS_bool cond_24174 = operand_23830->mUsesRCALL ;
    if (cond_24174.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (743)) ;
    }else if (cond_24174.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (745)) ;
    }
    GGS_uint  var_cas_addressForComputingBRA = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (748)) ;
    const GGS_bool cond_24413 = (operand_23830->mUsesRCALL).operator_not () ;
    if (cond_24413.isBuiltAndTrue ()) {
      var_cas_addressForComputingBRA = var_cas_addressForComputingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (750)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_24447 (operand_23830->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_24447 = NULL ;
      while (((operand_24447 = enumerator_24447.nextObject ()))) {
        macroValidPointer (operand_24447) ;
        if (var_cas_inRoutineSymbolTable.isBuilt ()) {
          var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_24447->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (754)) ;
        }
        ::routine_emitBRAinstruction (inLexique,  var_cas_addressForComputingBRA,  var_cas_targetAddress,  operand_24447->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (758)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (755)) ;
        var_cas_addressForComputingBRA = var_cas_addressForComputingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (761)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_24879,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24879 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_24879->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (772)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (774)) ;
    }
    const GGS_bool cond_25223 = operand_24879->mUsesRCALL ;
    if (cond_25223.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (776)) ;
    }else if (cond_25223.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (778)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_25314 (operand_24879->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_25314 = NULL ;
      while (((operand_25314 = enumerator_25314.nextObject ()))) {
        macroValidPointer (operand_25314) ;
        if (var_cas_inRoutineSymbolTable.isBuilt ()) {
          var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_25314->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (781)) ;
        }
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (782)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_rcall.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_25641,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25641 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_25641->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (796)) ;
    GGS_uint  var_cas_targetAddress ;
    if (var_cas_inRoutineSymbolTable.isBuilt ()) {
      var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (798)) ;
    }
    GGS_uint  var_cas_currentInstructionAddress ;
    const GGS_bool cond_26070 = operand_25641->mUsesRCALL ;
    if (cond_26070.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (801)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (802)) ;
    }else if (cond_26070.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (804)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (805)) ;
    }
    GGS_uint  var_cas_nextInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, operand_25641->mTargetLabels.reader_length ().multiply_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (807)) COMMA_SOURCE_FILE_AT_LINE (807)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (807)) ;
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26324 (operand_25641->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26324 = NULL ;
      while (((operand_26324 = enumerator_26324.nextObject ()))) {
        macroValidPointer (operand_26324) ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (810)) ;
        if (var_cas_inRoutineSymbolTable.isBuilt ()) {
          var_cas_inRoutineSymbolTable (HERE)->method_searchKey (inLexique, operand_26324->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }
        ::routine_emitRCALLinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_targetAddress,  operand_26324->mValue,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (812)) ;
        var_cas_currentInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (813)) ;
        const GGS_bool cond_26773 = (var_cas_idx).operator_strictInf (operand_25641->mTargetLabels.reader_length ()) ;
        if (cond_26773.isBuiltAndTrue ()) {
          ::routine_emitBRAinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_nextInstructionAddress,  operand_26324->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (815)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (815)) ;
          var_cas_currentInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "build_ipic18_binary_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_binary_code (C_Compiler & inLexique,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_uint  & var_cas_outUsedROMsize
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (834)) ;
  GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_27567 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_27567 = NULL ;
    while (((operand_27567 = enumerator_27567.nextObject ()))) {
      macroValidPointer (operand_27567) ;
      { typeCategoryMethod__ipic18_instruction__enterLabelAtAddress method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (operand_27567->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_27567->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (837)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_outUsedROMsize = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (0U) ;
  if (GGS_uint (0U).isBuilt ()) {
    ::routine_setEmitAddress (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (843)) ;
  }
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_27891 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_27891 = NULL ;
    while (((operand_27891 = enumerator_27891.nextObject ()))) {
      macroValidPointer (operand_27891) ;
      GGS_emittedCodeList  var_cas_code = GGS_emittedCodeList ::constructor_emptyList () ;
      const GGS_uint  var_cas_startAddress = var_cas_currentAddress ;
      { typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (operand_27891->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_27891->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_code COMMA_SOURCE_FILE_AT_LINE (847)) ;
        }
      }
      const GGS_bool cond_28159 = (var_cas_startAddress).operator_isNotEqual (var_cas_currentAddress) ;
      if (cond_28159.isBuiltAndTrue ()) {
        if (var_cas_currentAddress.isBuilt ()) {
          ::routine_setEmitAddress (inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (849)) ;
        }
      }
      {
        GGS_emittedCodeList::cEnumerator enumerator_28181 (var_cas_code, true) ;
        const GGS_emittedCodeList::cElement * operand_28181 = NULL ;
        while (((operand_28181 = enumerator_28181.nextObject ()))) {
          macroValidPointer (operand_28181) ;
          {
            GGS_uintlist::cEnumerator enumerator_28204 (operand_28181->mCode, true) ;
            const GGS_uintlist::cElement * operand_28204 = NULL ;
            while (((operand_28204 = enumerator_28204.nextObject ()))) {
              macroValidPointer (operand_28204) ;
              if (operand_28204->mValue.isBuilt ()) {
                ::routine_emitCode (inLexique,  operand_28204->mValue COMMA_SOURCE_FILE_AT_LINE (853)) ;
              }
            }
          }
        }
      }
      GGS_uint  var_cas_instructionLength ;
      if (operand_27891->mInstruction.isBuilt ()) {
        operand_27891->mInstruction (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (857)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (858)) ;
      ::routine_checkCurrentEmitAddress (inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (859)) ;
    }
  }
  const GGS_bool cond_28755 = (var_cas_lastAddressForFirstPass).operator_isNotEqual (var_cas_currentAddress) ;
  if (cond_28755.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets ")).operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (862)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (864)))).operator_concat (GGS_string (" value in first pass")) COMMA_SOURCE_FILE_AT_LINE (865)) ;
  }else if (cond_28755.isBuiltAndFalse ()) {
    const GGS_bool cond_28943 = (var_cas_lastAddressForFirstPass).operator_strictSup (var_cas_inROMsize) ;
    if (cond_28943.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Program too large: ")).operator_concat (var_cas_lastAddressForFirstPass.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (866)))).operator_concat (GGS_string (" bytes (rom size is "))).operator_concat (var_cas_inROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (868)))).operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (869)) ;
    }
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_29035 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_29035 = NULL ;
    while (((operand_29035 = enumerator_29035.nextObject ()))) {
      macroValidPointer (operand_29035) ;
      if (operand_29035->mInfo.mRegisterAddress.isBuilt ()) {
        ::routine_setEmitAddress (inLexique,  operand_29035->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (872)) ;
      }
      if (operand_29035->mInfo.mRegisterValue.isBuilt ()) {
        ::routine_emitByte (inLexique,  operand_29035->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (873)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_binary_code (void) {
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (category_method__ipic18_instruction__enterLabelAtAddress, gClassInfoFor__ipic18_instruction.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_NULL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_NULL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JUMP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_ipic18_build_binary_code (void) {
  gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.free () ;
  gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_ipic18_build_binary_code (prologueRoutineFor_ipic18_build_binary_code, epilogueRoutineFor_ipic18_build_binary_code) ;

//---------------------------------------------------------------------------*

