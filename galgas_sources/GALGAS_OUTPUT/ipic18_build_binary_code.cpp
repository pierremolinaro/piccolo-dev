//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ipic18_build_binary_code.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 17th, 2010, at 23h11'12"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic18_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_ipic18_symbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_ipic18_symbolTable::e_ipic18_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@ipic18_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ipic18_symbolTable ("ipic18_symbolTable", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_ipic18_symbolTable::
elementOf_GGS_ipic18_symbolTable (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_ipic18_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ipic18_symbolTable::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ipic18_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_ipic18_symbolTable * ptr = dynamic_cast <const elementOf_GGS_ipic18_symbolTable *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress.operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_ipic18_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_ipic18_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
operator_isEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
operator_isNotEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_ipic18_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_ipic18_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ipic18_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ipic18_symbolTable::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @ipic18_symbolTable " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ipic18_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_ipic18_symbolTable::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ipic18_symbolTable * p = NULL ;
    macroMyNew (p, GGS_ipic18_symbolTable (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ipic18_symbolTable * p = dynamic_cast <const GGS_ipic18_symbolTable *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ipic18_symbolTable, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ipic18_symbolTable::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ipic18_symbolTable ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_967,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_967 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__enterLabelAtAddress> gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (typeCategoryMethod__ipic18_instruction__enterLabelAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__enterLabelAtAddress
findCategoryMethod__ipic18_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1197,
                                GGS_ipic18_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1197 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1197->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1469,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1469 != NULL) {
    var_cas_ioAddress = operand_1469->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_actualInstruction * operand_1722,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1722 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1722->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (54)) ;
    var_cas_ioAddress = var_cas_ioAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@emittedCodeList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_emittedCodeList::
elementOf_GGS_emittedCodeList (const GGS_uintlist & argument_0
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mCode (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_emittedCodeList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_emittedCodeList * ptr = dynamic_cast <const elementOf_GGS_emittedCodeList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mCode.operator_isEqual (ptr->mCode).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_emittedCodeList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCode.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@emittedCodeList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_emittedCodeList ("emittedCodeList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalAppendValues (const GGS_uintlist & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalPrependValues (const GGS_uintlist & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
addAssign_operation (const GGS_uintlist & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
operator_concat (const GGS_emittedCodeList & inOperand) const {
  GGS_emittedCodeList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
dotAssign_operation (const GGS_emittedCodeList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_emittedCodeList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uintlist  p_0 = p->mCode ;
          internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_uintlist & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mCode
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList  GGS_emittedCodeList::
constructor_emptyList (void) {
  GGS_emittedCodeList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList  GGS_emittedCodeList::
constructor_listWithValue (const GGS_uintlist & argument_0) {
  GGS_emittedCodeList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
internalSubListWithRange (GGS_emittedCodeList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mCode) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_emittedCodeList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_emittedCodeList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_emittedCodeList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@emittedCodeList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
method_first (C_Compiler & inLexique,
              GGS_uintlist & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
method_last (C_Compiler & inLexique,
             GGS_uintlist & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_uintlist & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_popLast (C_Compiler & inLexique,
                GGS_uintlist & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mCode ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_uintlist  GGS_emittedCodeList::
reader_mCodeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_uintlist  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCode ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_emittedCodeList::
modifier_setMCodeAtIndex (C_Compiler & inLexique,
                              const GGS_uintlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCode = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uintlist  & GGS_emittedCodeList::cEnumerator::_mCode (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCode ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_emittedCodeList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_emittedCodeList * p = NULL ;
    macroMyNew (p, GGS_emittedCodeList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_emittedCodeList GGS_emittedCodeList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_emittedCodeList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_emittedCodeList * p = dynamic_cast <const GGS_emittedCodeList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_emittedCodeList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_emittedCodeList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_emittedCodeList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress> gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_NULL.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_NULL * operand_2752,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2752 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_3023,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3023 != NULL) {
    var_cas_ioAddress = operand_3023->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FDA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_3319,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3319 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3319->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (104)) ;
    const GGS_bool cond_3563 = operand_3319->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (105)) ;
    if (cond_3563.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    const GGS_bool cond_3634 = (operand_3319->m_W_isDestination).operator_not () ;
    if (cond_3634.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (512U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_3319->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (111))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_FA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3914,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3914 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3914->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (123)) ;
    const GGS_bool cond_4158 = operand_3914->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
    if (cond_4158.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_3914->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (127))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVFF.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_4441,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4441 != NULL) {
    GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
    var_cas_code.addAssign_operation ((GGS_uint (49152U)).operator_or (operand_4441->mSourceRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (139)))) ;
    var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (operand_4441->mDestinationRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))) ;
    var_cas_ioCode.addAssign_operation (var_cas_code) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FBA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_4904,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4904 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4904->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (152)) ;
    const GGS_bool cond_5148 = operand_4904->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (153)) ;
    if (cond_5148.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_4904->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_4904->mBitNumber.left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (157))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_5474,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5474 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5474->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (169)) ;
    const GGS_bool cond_5718 = operand_5474->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (170)) ;
    if (cond_5718.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_5474->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (173))).operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_5474->mBitNumber.left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (174))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "getBccBaseCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBccBaseCode (C_Compiler &,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_uint  & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getBccBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inConditionalBranch.enumValue ()) {
  case GGS_conditional_branch::enum_bz:
    {
    var_cas_outBaseCode = GGS_uint (57344U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnz:
    {
    var_cas_outBaseCode = GGS_uint (57600U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bn:
    {
    var_cas_outBaseCode = GGS_uint (58880U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnn:
    {
    var_cas_outBaseCode = GGS_uint (59136U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bc:
    {
    var_cas_outBaseCode = GGS_uint (57856U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnc:
    {
    var_cas_outBaseCode = GGS_uint (58112U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bov:
    {
    var_cas_outBaseCode = GGS_uint (58368U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnov:
    {
    var_cas_outBaseCode = GGS_uint (58624U) ;
    }
    break ;
  case GGS_conditional_branch::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getBccBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_emittedCodeList  & var_cas_ioCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (202)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (202)).substract_operation (inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) COMMA_SOURCE_FILE_AT_LINE (202)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (202)) ;
  const GGS_bool cond_6953 = ((var_cas_displacement).operator_strictSup (GGS_sint (127L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_6953.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (205)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (208)) ;
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((var_cas_baseCode).operator_or ((var_cas_displacement).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (209))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_emittedCodeList  & var_cas_ioCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (220)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (220)).substract_operation (inLexique, var_cas_inBRAinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) COMMA_SOURCE_FILE_AT_LINE (220)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (220)) ;
  const GGS_bool cond_7607 = ((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_7607.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (223)) ;
  }
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (53248U)).operator_or ((var_cas_displacement).operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (225))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_GOTOinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_GOTOinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress,
                                GGS_emittedCodeList  & var_cas_ioCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
  var_cas_code.addAssign_operation ((GGS_uint (61184U)).operator_or ((var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (235))).operator_and (GGS_uint (255U)))) ;
  var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (236)))) ;
  var_cas_ioCode.addAssign_operation (var_cas_code) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_8227,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8227 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_8380 = var_cas_inRoutineSymbolTable ;
    if (temp_8380.isBuilt ()) {
      temp_8380 (HERE)->method_searchKey (inLexique, operand_8227->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (248)) ;
    }
    switch (operand_8227->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8227->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (255)),  operand_8227->mConditionalBranch,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (252)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_8227->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (261)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (264)),  operand_8227->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (265)),  var_cas_complementary,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (262)) ;
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (270)),  var_cas_targetAddress,  operand_8227->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (272)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (269)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_8227->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (277)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (280)),  operand_8227->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (281)),  var_cas_complementary,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (278)) ;
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (285)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JUMP.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_9516,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9516 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_9669 = var_cas_inRoutineSymbolTable ;
    if (temp_9669.isBuilt ()) {
      temp_9669 (HERE)->method_searchKey (inLexique, operand_9516->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (300)) ;
    }
    switch (operand_9516->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (303)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) COMMA_SOURCE_FILE_AT_LINE (303)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (303)) ;
      const GGS_bool cond_9975 = ((var_cas_displacement).operator_strictSup (GGS_sint (2048L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (2048L).operator_unary_minus (inLexique COMMA_HERE))) ;
      if (cond_9975.isBuiltAndTrue ()) {
        operand_9516->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (306)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_9516->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (310)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (307)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (314)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_CALLinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_CALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress,
                                GGS_emittedCodeList  & var_cas_ioCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
  var_cas_code.addAssign_operation ((GGS_uint (60416U)).operator_or ((var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (328))).operator_and (GGS_uint (255U)))) ;
  var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or (var_cas_inTargetAddress.right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (329)))) ;
  var_cas_ioCode.addAssign_operation (var_cas_code) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_lstring   var_cas_inTargetLabel,
                                GGS_emittedCodeList  & var_cas_ioCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (341)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (341)).substract_operation (inLexique, var_cas_inRCALLinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (341)) COMMA_SOURCE_FILE_AT_LINE (341)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (341)) ;
  const GGS_bool cond_11124 = ((var_cas_displacement).operator_strictSup (GGS_sint (1023L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (1024L).operator_unary_minus (inLexique COMMA_HERE))) ;
  if (cond_11124.isBuiltAndTrue ()) {
    var_cas_inTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("displacement too large (")).operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (343)))).operator_concat (GGS_string (") for RCALL instruction to '"))).operator_concat (var_cas_inTargetLabel)).operator_concat (GGS_string ("' (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (345)) ;
  }
  var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (55296U)).operator_or ((var_cas_displacement).operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (347))))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JSR.generateBinaryCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_11381,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11381 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_11534 = var_cas_inRoutineSymbolTable ;
    if (temp_11534.isBuilt ()) {
      temp_11534 (HERE)->method_searchKey (inLexique, operand_11381->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (358)) ;
    }
    switch (operand_11381->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (361)).substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (361)).substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (361)) COMMA_SOURCE_FILE_AT_LINE (361)).right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (361)) ;
      const GGS_bool cond_11840 = ((var_cas_displacement).operator_strictSup (GGS_sint (2048L))).operator_or ((var_cas_displacement).operator_strictInf (GGS_sint (2048L).operator_unary_minus (inLexique COMMA_HERE))) ;
      if (cond_11840.isBuiltAndTrue ()) {
        operand_11381->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (364)) ;
      }
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_11381->mTargetLabel,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (365)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (372)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_12208,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12208 != NULL) {
    GGS_uint  var_cas_code = GGS_uint (26112U) ;
    const GGS_bool cond_12448 = operand_12208->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (389)) ;
    if (cond_12448.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_12208->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (392))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_12670 = var_cas_inRoutineSymbolTable ;
    if (temp_12670.isBuilt ()) {
      temp_12670 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12208->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (396)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (396)) ;
    }
    const GGS_bool cond_13254 = operand_12208->mBranchIfZero ;
    if (cond_13254.isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      const GGS_bool cond_12867 = operand_12208->mUsesBra ;
      if (cond_12867.isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (400)) ;
      }else if (cond_12867.isBuiltAndFalse ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (405)),  var_cas_intermediateTargetAddress,  operand_12208->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (404)) ;
      const GGS_bool cond_13175 = operand_12208->mUsesBra ;
      if (cond_13175.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (411)),  var_cas_targetAddress,  operand_12208->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (411)) ;
      }else if (cond_13175.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (413)) ;
      }
    }else if (cond_13254.isBuiltAndFalse ()) {
      const GGS_bool cond_13372 = operand_12208->mUsesBra ;
      if (cond_13372.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (417)),  var_cas_targetAddress,  operand_12208->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (417)) ;
      }else if (cond_13372.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (419)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_13601,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13601 != NULL) {
    GGS_uint  var_cas_code ;
    const GGS_bool cond_13786 = (operand_13601->mBranchIfZero).operator_and (operand_13601->mIncrement) ;
    if (cond_13786.isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (18432U) ;
    }else if (cond_13786.isBuiltAndFalse ()) {
      const GGS_bool cond_13860 = (operand_13601->mBranchIfZero).operator_and ((operand_13601->mIncrement).operator_not ()) ;
      if (cond_13860.isBuiltAndTrue ()) {
        var_cas_code = GGS_uint (19456U) ;
      }else if (cond_13860.isBuiltAndFalse ()) {
        const GGS_bool cond_13935 = ((operand_13601->mBranchIfZero).operator_not ()).operator_and (operand_13601->mIncrement) ;
        if (cond_13935.isBuiltAndTrue ()) {
          var_cas_code = GGS_uint (15360U) ;
        }else if (cond_13935.isBuiltAndFalse ()) {
          var_cas_code = GGS_uint (11264U) ;
        }
      }
    }
    const GGS_bool cond_14042 = (operand_13601->m_W_isDestination).operator_not () ;
    if (cond_14042.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (512U)) ;
    }
    const GGS_bool cond_14124 = operand_13601->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (444)) ;
    if (cond_14124.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_13601->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (447))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_14346 = var_cas_inRoutineSymbolTable ;
    if (temp_14346.isBuilt ()) {
      temp_14346 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_13601->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (451)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (451)) ;
    }
    const GGS_bool cond_14512 = operand_13601->mUsesBra ;
    if (cond_14512.isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (453)),  var_cas_targetAddress,  operand_13601->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (453)) ;
    }else if (cond_14512.isBuiltAndFalse ()) {
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (455)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_14727,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14727 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_14727->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    const GGS_bool cond_15319 = operand_14727->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (476)) ;
    if (cond_15319.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_14727->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (479))).operator_and (GGS_uint (255U))) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_15541 = var_cas_inRoutineSymbolTable ;
    if (temp_15541.isBuilt ()) {
      temp_15541 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_14727->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (483)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (483)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_14727->method_usesIntermediateBRA (inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (484)) ;
    const GGS_bool cond_16211 = var_cas_usesIntermediateBRA ;
    if (cond_16211.isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      const GGS_bool cond_15824 = operand_14727->mUsesBra ;
      if (cond_15824.isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (488)) ;
      }else if (cond_15824.isBuiltAndFalse ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (490)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (493)),  var_cas_intermediateTargetAddress,  operand_14727->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (492)) ;
      const GGS_bool cond_16132 = operand_14727->mUsesBra ;
      if (cond_16132.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (499)),  var_cas_targetAddress,  operand_14727->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (499)) ;
      }else if (cond_16132.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (501)) ;
      }
    }else if (cond_16211.isBuiltAndFalse ()) {
      const GGS_bool cond_16329 = operand_14727->mUsesBra ;
      if (cond_16329.isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (505)),  var_cas_targetAddress,  operand_14727->mInstructionLocation,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (505)) ;
      }else if (cond_16329.isBuiltAndFalse ()) {
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (507)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_CLRWDT.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_CLRWDT * operand_16577,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16577 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (4U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_DAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_DAW * operand_16897,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16897 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (7U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_NOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_NOP * operand_17217,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17217 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (0U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_POP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_POP * operand_17537,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17537 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (6U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_PUSH.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_PUSH * operand_17858,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17858 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (5U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RESET.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RESET * operand_18180,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18180 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (255U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETURN.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RETURN * operand_18503,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18503 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (18U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETFIE.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_RETFIE * operand_18826,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18826 != NULL) {
    GGS_uint  var_cas_code ;
    const GGS_bool cond_19014 = operand_18826->mFastReturn ;
    if (cond_19014.isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (17U) ;
    }else if (cond_19014.isBuiltAndFalse ()) {
      var_cas_code = GGS_uint (16U) ;
    }
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_SLEEP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_SLEEP * operand_19267,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19267 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (3U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_19600,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19600 != NULL) {
    GGS_uint  var_cas_code ;
    operand_19600->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (617)) ;
    var_cas_code = (var_cas_code).operator_or (operand_19600->mLiteralValue) ;
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (var_cas_code)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_LFSR.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_20010,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20010 != NULL) {
    GGS_uintlist  var_cas_code = GGS_uintlist ::constructor_emptyList () ;
    var_cas_code.addAssign_operation (((GGS_uint (60928U)).operator_or (operand_20010->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (630)).left_shift_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (630)))).operator_or (operand_20010->mValue.right_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (630)))) ;
    var_cas_code.addAssign_operation ((GGS_uint (61440U)).operator_or ((operand_20010->mValue).operator_and (GGS_uint (255U)))) ;
    var_cas_ioCode.addAssign_operation (var_cas_code) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVLB.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_20433,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20433 != NULL) {
    var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (256U)).operator_or (operand_20433->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (642))))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_20768,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & /* var_cas_ioCode */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20768 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_20928 = var_cas_inRoutineSymbolTable ;
    if (temp_20928.isBuilt ()) {
      temp_20928 (HERE)->method_searchKey (inLexique, operand_20768->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (653)) ;
    }
    const GGS_bool cond_21203 = (var_cas_targetAddress).operator_isNotEqual (var_cas_ioAddress) ;
    if (cond_21203.isBuiltAndTrue ()) {
      operand_20768->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '")).operator_concat (operand_20768->mLabel)).operator_concat (GGS_string ("' label gets "))).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (656)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (657)))).operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (658)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLRD.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_TBLRD * operand_21372,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21372 != NULL) {
    switch (operand_21372->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (8U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (9U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (10U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (11U))) ;
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLWT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction_TBLWT * operand_21957,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21957 != NULL) {
    switch (operand_21957->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (12U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (13U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (14U))) ;
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (15U))) ;
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_MNOP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_22541,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22541 != NULL) {
    const GGS_bool cond_22749 = (operand_22541->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (698))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_22749.isBuiltAndTrue ()) {
      operand_22541->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (699)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_22921 = operand_22541->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (702)) ;
    GGS_bool _condition_22921 (_variant_22921.isBuilt (), true) ;
    while (_condition_22921.isBuiltAndTrue ()) {
      _condition_22921 = (var_cas_idx).operator_strictInf (operand_22541->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (703))) ;
      if (_condition_22921.isBuiltAndTrue ()) {
        if (_variant_22921.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (707)) ;
          _condition_22921 = GGS_bool (false) ;
        }else{
          _variant_22921.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue (GGS_uint (0U))) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_23101,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23101 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_23101->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (718)) ;
    const GGS_ipic18_symbolTable  temp_23322 = var_cas_inRoutineSymbolTable ;
    if (temp_23322.isBuilt ()) {
      temp_23322 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    const GGS_bool cond_23446 = operand_23101->mUsesRCALL ;
    if (cond_23446.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (721)) ;
    }else if (cond_23446.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (723)) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_23540 (operand_23101->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_23540 = NULL ;
      while (((operand_23540 = enumerator_23540.nextObject ()))) {
        macroValidPointer (operand_23540) ;
        var_cas_ioCode.addAssign_operation (GGS_uintlist ::constructor_listWithValue ((GGS_uint (3072U)).operator_or (operand_23540->mValue))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_23790,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23790 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_23790->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (737)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_24011 = var_cas_inRoutineSymbolTable ;
    if (temp_24011.isBuilt ()) {
      temp_24011 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (739)) ;
    }
    const GGS_bool cond_24134 = operand_23790->mUsesRCALL ;
    if (cond_24134.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (741)) ;
    }else if (cond_24134.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (743)) ;
    }
    GGS_uint  var_cas_addressForComputingBRA = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (746)) ;
    const GGS_bool cond_24373 = (operand_23790->mUsesRCALL).operator_not () ;
    if (cond_24373.isBuiltAndTrue ()) {
      var_cas_addressForComputingBRA = var_cas_addressForComputingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (748)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_24407 (operand_23790->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_24407 = NULL ;
      while (((operand_24407 = enumerator_24407.nextObject ()))) {
        macroValidPointer (operand_24407) ;
        const GGS_ipic18_symbolTable  temp_24446 = var_cas_inRoutineSymbolTable ;
        if (temp_24446.isBuilt ()) {
          temp_24446 (HERE)->method_searchKey (inLexique, operand_24407->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (752)) ;
        }
        ::routine_emitBRAinstruction (inLexique,  var_cas_addressForComputingBRA,  var_cas_targetAddress,  operand_24407->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (756)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (753)) ;
        var_cas_addressForComputingBRA = var_cas_addressForComputingBRA.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (759)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_24839,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24839 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_24839->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (770)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_25060 = var_cas_inRoutineSymbolTable ;
    if (temp_25060.isBuilt ()) {
      temp_25060 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (772)) ;
    }
    const GGS_bool cond_25183 = operand_24839->mUsesRCALL ;
    if (cond_25183.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (774)) ;
    }else if (cond_25183.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (776)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_25274 (operand_24839->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_25274 = NULL ;
      while (((operand_25274 = enumerator_25274.nextObject ()))) {
        macroValidPointer (operand_25274) ;
        const GGS_ipic18_symbolTable  temp_25313 = var_cas_inRoutineSymbolTable ;
        if (temp_25313.isBuilt ()) {
          temp_25313 (HERE)->method_searchKey (inLexique, operand_25274->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (779)) ;
        }
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (780)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_rcall.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_25601,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_emittedCodeList  & var_cas_ioCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25601 != NULL) {
    GGS_lstring  var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_25601->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (794)) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  temp_25822 = var_cas_inRoutineSymbolTable ;
    if (temp_25822.isBuilt ()) {
      temp_25822 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (796)) ;
    }
    GGS_uint  var_cas_currentInstructionAddress ;
    const GGS_bool cond_26030 = operand_25601->mUsesRCALL ;
    if (cond_26030.isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (799)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (800)) ;
    }else if (cond_26030.isBuiltAndFalse ()) {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (802)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (803)) ;
    }
    GGS_uint  var_cas_nextInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, operand_25601->mTargetLabels.reader_length ().multiply_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (805)) COMMA_SOURCE_FILE_AT_LINE (805)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (805)) ;
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26284 (operand_25601->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26284 = NULL ;
      while (((operand_26284 = enumerator_26284.nextObject ()))) {
        macroValidPointer (operand_26284) ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
        const GGS_ipic18_symbolTable  temp_26336 = var_cas_inRoutineSymbolTable ;
        if (temp_26336.isBuilt ()) {
          temp_26336 (HERE)->method_searchKey (inLexique, operand_26284->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (809)) ;
        }
        ::routine_emitRCALLinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_targetAddress,  operand_26284->mValue,  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (810)) ;
        var_cas_currentInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (811)) ;
        const GGS_bool cond_26733 = (var_cas_idx).operator_strictInf (operand_25601->mTargetLabels.reader_length ()) ;
        if (cond_26733.isBuiltAndTrue ()) {
          ::routine_emitBRAinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_nextInstructionAddress,  operand_26284->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (813)),  var_cas_ioCode COMMA_SOURCE_FILE_AT_LINE (813)) ;
          var_cas_currentInstructionAddress = var_cas_currentInstructionAddress.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (814)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "build_ipic18_binary_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_binary_code (C_Compiler & inLexique,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_uint  & var_cas_outUsedROMsize COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (832)) ;
  GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_27527 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_27527 = NULL ;
    while (((operand_27527 = enumerator_27527.nextObject ()))) {
      macroValidPointer (operand_27527) ;
      const GGS_ipic18_instruction  temp_27568 = operand_27527->mInstruction ;
      if (temp_27568.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__enterLabelAtAddress method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (temp_27568.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_27568 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (835)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_outUsedROMsize = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (0U) ;
  if (GGS_uint (0U).isBuilt ()) {
    ::routine_setEmitAddress (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (841)) ;
  }
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_27851 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_27851 = NULL ;
    while (((operand_27851 = enumerator_27851.nextObject ()))) {
      macroValidPointer (operand_27851) ;
      GGS_emittedCodeList  var_cas_code = GGS_emittedCodeList ::constructor_emptyList () ;
      const GGS_uint  var_cas_startAddress = var_cas_currentAddress ;
      const GGS_ipic18_instruction  temp_27989 = operand_27851->mInstruction ;
      if (temp_27989.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (temp_27989.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_27989 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_code COMMA_SOURCE_FILE_AT_LINE (845)) ;
        }
      }
      const GGS_bool cond_28119 = (var_cas_startAddress).operator_isNotEqual (var_cas_currentAddress) ;
      if (cond_28119.isBuiltAndTrue ()) {
        if (var_cas_currentAddress.isBuilt ()) {
          ::routine_setEmitAddress (inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (847)) ;
        }
      }
      {
        GGS_emittedCodeList::cEnumerator enumerator_28141 (var_cas_code, true) ;
        const GGS_emittedCodeList::cElement * operand_28141 = NULL ;
        while (((operand_28141 = enumerator_28141.nextObject ()))) {
          macroValidPointer (operand_28141) ;
          {
            GGS_uintlist::cEnumerator enumerator_28164 (operand_28141->mCode, true) ;
            const GGS_uintlist::cElement * operand_28164 = NULL ;
            while (((operand_28164 = enumerator_28164.nextObject ()))) {
              macroValidPointer (operand_28164) ;
              if (operand_28164->mValue.isBuilt ()) {
                ::routine_emitCode (inLexique,  operand_28164->mValue COMMA_SOURCE_FILE_AT_LINE (851)) ;
              }
            }
          }
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic18_instruction  temp_28298 = operand_27851->mInstruction ;
      if (temp_28298.isBuilt ()) {
        temp_28298 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (855)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (856)) ;
      ::routine_checkCurrentEmitAddress (inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (857)) ;
    }
  }
  const GGS_bool cond_28715 = (var_cas_lastAddressForFirstPass).operator_isNotEqual (var_cas_currentAddress) ;
  if (cond_28715.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets ")).operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (860)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (862)))).operator_concat (GGS_string (" value in first pass")) COMMA_SOURCE_FILE_AT_LINE (863)) ;
  }else if (cond_28715.isBuiltAndFalse ()) {
    const GGS_bool cond_28903 = (var_cas_lastAddressForFirstPass).operator_strictSup (var_cas_inROMsize) ;
    if (cond_28903.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Program too large: ")).operator_concat (var_cas_lastAddressForFirstPass.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (864)))).operator_concat (GGS_string (" bytes (rom size is "))).operator_concat (var_cas_inROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (866)))).operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (867)) ;
    }
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_28995 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_28995 = NULL ;
    while (((operand_28995 = enumerator_28995.nextObject ()))) {
      macroValidPointer (operand_28995) ;
      if (operand_28995->mInfo.mRegisterAddress.isBuilt ()) {
        ::routine_setEmitAddress (inLexique,  operand_28995->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
      if (operand_28995->mInfo.mRegisterValue.isBuilt ()) {
        ::routine_emitByte (inLexique,  operand_28995->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (871)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_binary_code (void) {
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (category_method__ipic18_instruction__enterLabelAtAddress, gClassInfoFor__ipic18_instruction.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_NULL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_NULL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JUMP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
  enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_ipic18_build_binary_code (void) {
  gDispatchTableForMethod__ipic18_instruction__enterLabelAtAddress.free () ;
  gDispatchTableForMethod__ipic18_instruction__generateBinaryCodeAtAddress.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_ipic18_build_binary_code (prologueRoutineFor_ipic18_build_binary_code, epilogueRoutineFor_ipic18_build_binary_code) ;

//---------------------------------------------------------------------------*

