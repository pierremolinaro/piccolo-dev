//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ipic18_build_binary_code.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 1st, 2009, at 14h29'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipic18_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_ipic18_symbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_ipic18_symbolTable::e_ipic18_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@ipic18_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_ipic18_symbolTable::
elementOf_GGS_ipic18_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_ipic18_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ipic18_symbolTable::
appendForMapDescription (C_Compiler & inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ipic18_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_ipic18_symbolTable * ptr = dynamic_cast <const elementOf_GGS_ipic18_symbolTable *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress._operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_ipic18_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_ipic18_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_ipic18_symbolTable * info = (e_ipic18_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_ipic18_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
_operator_isEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ipic18_symbolTable::
_operator_isNotEqual (const GGS_ipic18_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_ipic18_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_ipic18_symbolTable::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_ipic18_symbolTable::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_ipic18_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_ipic18_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ipic18_symbolTable GGS_ipic18_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ipic18_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ipic18_symbolTable::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @ipic18_symbolTable " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ipic18_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic18_instruction.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_967,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_967 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__enterLabelAtAddress> gDispatchTableFor__ipic18_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (typeCategoryMethod__ipic18_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__enterLabelAtAddress
findCategoryMethod__ipic18_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic18_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1197,
                                GGS_ipic18_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1197 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1197->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1469,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1469 != NULL) {
    var_cas_ioAddress = operand_1469->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_actualInstruction * operand_1722,
                                GGS_ipic18_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1722 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1722->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (54)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_NULL.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_NULL__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_ipic_NULL * operand_2611,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2611 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_2847,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2847 != NULL) {
    var_cas_ioAddress = operand_2847->mOrigin ;
    if (operand_2847->mOrigin.isBuilt ()) {
      ::routine_setEmitAddress (inLexique,  operand_2847->mOrigin COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FDA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FDA * operand_3136,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3136 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3136->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (95)) ;
    if ((operand_3136->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    if (((operand_3136->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3136->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (102)))._operator_and (GGS_uint (255U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (103)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_FA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FA * operand_3675,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3675 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3675->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (113)) ;
    if ((operand_3675->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (114))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3675->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (117)))._operator_and (GGS_uint (255U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (118)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVFF.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVFF * operand_4146,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4146 != NULL) {
    if ((GGS_uint (49152U))._operator_or (operand_4146->mSourceRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (127))).isBuilt ()) {
      ::routine_emitCode (inLexique,  (GGS_uint (49152U))._operator_or (operand_4146->mSourceRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (127))) COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }
    if ((GGS_uint (61440U))._operator_or (operand_4146->mDestinationRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuilt ()) {
      ::routine_emitCode (inLexique,  (GGS_uint (61440U))._operator_or (operand_4146->mDestinationRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_FBA.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_FBA * operand_4532,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4532 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4532->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (138)) ;
    if ((operand_4532->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (139))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_4532->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_4532->mBitNumber._left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (143))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_5046,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5046 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5046->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (154)) ;
    if ((operand_5046->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (155))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5046->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (158)))._operator_and (GGS_uint (255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_5046->mBitNumber._left_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (159))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "getBccBaseCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBccBaseCode (C_Compiler &,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_uint  & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getBccBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inConditionalBranch.enumValue ()) {
  case GGS_conditional_branch::enum_bz:
    {
    var_cas_outBaseCode = GGS_uint (57344U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnz:
    {
    var_cas_outBaseCode = GGS_uint (57600U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bn:
    {
    var_cas_outBaseCode = GGS_uint (58880U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnn:
    {
    var_cas_outBaseCode = GGS_uint (59136U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bc:
    {
    var_cas_outBaseCode = GGS_uint (57856U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnc:
    {
    var_cas_outBaseCode = GGS_uint (58112U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bov:
    {
    var_cas_outBaseCode = GGS_uint (58368U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnov:
    {
    var_cas_outBaseCode = GGS_uint (58624U) ;
    }
    break ;
  case GGS_conditional_branch::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getBccBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186))._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (186)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (128L)._operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (192)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (193))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (193))) COMMA_SOURCE_FILE_AT_LINE (193)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (inLexique, var_cas_inBRAinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) COMMA_SOURCE_FILE_AT_LINE (203))._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (203)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (1024L)._operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (206)) ;
  }
  if ((GGS_uint (53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (208))) COMMA_SOURCE_FILE_AT_LINE (208)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_GOTOinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_GOTOinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (255U))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (255U))) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  }
  if ((GGS_uint (61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (217))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (217))) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_7554,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7554 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_7679 = var_cas_inRoutineSymbolTable ;
    if (_temp_7679.isBuilt ()) {
      _temp_7679 (HERE)->method_searchKey (inLexique, operand_7554->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (227)) ;
    }
    switch (operand_7554->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_7554->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (234)),  operand_7554->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (231)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_7554->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (239)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (242)),  operand_7554->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (243)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (240)) ;
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (247)),  var_cas_targetAddress,  operand_7554->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (246)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (inLexique,  operand_7554->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (253)) ;
      ::routine_emitConditionalBranchInstruction (inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (256)),  operand_7554->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (257)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (254)) ;
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JUMP.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_8740,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8740 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_8865 = var_cas_inRoutineSymbolTable ;
    if (_temp_8865.isBuilt ()) {
      _temp_8865 (HERE)->method_searchKey (inLexique, operand_8740->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (273)) ;
    }
    switch (operand_8740->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (276))._substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (276))._substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (276)) COMMA_SOURCE_FILE_AT_LINE (276))._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (276)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (2048L)._operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_8740->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (279)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8740->mTargetLabel.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (283)) COMMA_SOURCE_FILE_AT_LINE (280)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (286)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "emit_pic18_CALLinstruction"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_pic18_CALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_pic18_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (295)))._operator_and (GGS_uint (255U))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (295)))._operator_and (GGS_uint (255U))) COMMA_SOURCE_FILE_AT_LINE (295)) ;
  }
  if ((GGS_uint (61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (296))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (inLexique, GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (296))) COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_pic18_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_lstring   var_cas_inTargetLabel COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (306))._substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (306))._substract_operation (inLexique, var_cas_inRCALLinstructionAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) COMMA_SOURCE_FILE_AT_LINE (306))._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (1024L)._operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("displacement too large ("))._operator_concat (var_cas_displacement.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (308))))._operator_concat (GGS_string (") for RCALL instruction to '")))._operator_concat (var_cas_inTargetLabel))._operator_concat (GGS_string ("' (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (310)) ;
  }
  if ((GGS_uint (55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (312))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (2047L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (312))) COMMA_SOURCE_FILE_AT_LINE (312)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JSR.generateBinaryCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_10404,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10404 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_10529 = var_cas_inRoutineSymbolTable ;
    if (_temp_10529.isBuilt ()) {
      _temp_10529 (HERE)->method_searchKey (inLexique, operand_10404->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (322)) ;
    }
    switch (operand_10404->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (325))._substract_operation (inLexique, GGS_sint (2L) COMMA_SOURCE_FILE_AT_LINE (325))._substract_operation (inLexique, var_cas_ioAddress.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) COMMA_SOURCE_FILE_AT_LINE (325))._right_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (325)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (2048L)._operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_10404->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (328)) ;
      }
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_10404->mTargetLabel COMMA_SOURCE_FILE_AT_LINE (329)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (335)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_11163,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11163 != NULL) {
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (26112U) ;
    if ((operand_11163->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (348))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_11163->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (351)))._operator_and (GGS_uint (255U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (352)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_11569 = var_cas_inRoutineSymbolTable ;
    if (_temp_11569.isBuilt ()) {
      _temp_11569 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_11163->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (355)) ;
    }
    if ((operand_11163->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_11163->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (359)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (361)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (364)),  var_cas_intermediateTargetAddress,  operand_11163->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (363)) ;
      if ((operand_11163->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (369)),  var_cas_targetAddress,  operand_11163->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (369)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (371)) ;
      }
    }else{
      if ((operand_11163->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (375)),  var_cas_targetAddress,  operand_11163->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (375)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (377)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_12449,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12449 != NULL) {
    GGS_uint  var_cas_code ;
    if (((operand_12449->mBranchIfZero)._operator_and (operand_12449->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (18432U) ;
    }else if (((operand_12449->mBranchIfZero)._operator_and ((operand_12449->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (19456U) ;
    }else if ((((operand_12449->mBranchIfZero)._operator_not ())._operator_and (operand_12449->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (15360U) ;
    }else{
      var_cas_code = GGS_uint (11264U) ;
    }
    if (((operand_12449->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (512U)) ;
    }
    if ((operand_12449->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (401))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_12449->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (404)))._operator_and (GGS_uint (255U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (405)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_13138 = var_cas_inRoutineSymbolTable ;
    if (_temp_13138.isBuilt ()) {
      _temp_13138 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12449->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (408)) ;
    }
    if ((operand_12449->mUsesBra).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (410)),  var_cas_targetAddress,  operand_12449->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (410)) ;
    }else{
      ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (412)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_13502,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13502 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_13502->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    if ((operand_13502->mRegisterDescription.reader_mNeedsBSR (inLexique COMMA_SOURCE_FILE_AT_LINE (432))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_13502->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (435)))._operator_and (GGS_uint (255U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (436)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_14260 = var_cas_inRoutineSymbolTable ;
    if (_temp_14260.isBuilt ()) {
      _temp_14260 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_13502->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (439)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_13502->method_usesIntermediateBRA (inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (440)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_13502->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (444)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (446)) ;
      }
      ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (449)),  var_cas_intermediateTargetAddress,  operand_13502->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (448)) ;
      if ((operand_13502->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (454)),  var_cas_targetAddress,  operand_13502->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (454)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (456)) ;
      }
    }else{
      if ((operand_13502->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (inLexique,  var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (460)),  var_cas_targetAddress,  operand_13502->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (460)) ;
      }else{
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (462)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_CLRWDT.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_CLRWDT * operand_15245,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15245 != NULL) {
    if (GGS_uint (4U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (473)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_DAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_DAW * operand_15509,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15509 != NULL) {
    if (GGS_uint (7U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (482)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_NOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_NOP * operand_15773,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15773 != NULL) {
    if (GGS_uint (0U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (491)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_POP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_POP * operand_16037,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16037 != NULL) {
    if (GGS_uint (6U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (6U) COMMA_SOURCE_FILE_AT_LINE (500)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_PUSH.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_PUSH * operand_16302,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16302 != NULL) {
    if (GGS_uint (5U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (5U) COMMA_SOURCE_FILE_AT_LINE (509)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RESET.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_RESET * operand_16568,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16568 != NULL) {
    if (GGS_uint (255U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (255U) COMMA_SOURCE_FILE_AT_LINE (518)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETURN.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_RETURN * operand_16835,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16835 != NULL) {
    if (GGS_uint (18U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (18U) COMMA_SOURCE_FILE_AT_LINE (527)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_RETFIE.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_RETFIE * operand_17102,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17102 != NULL) {
    GGS_uint  var_cas_code ;
    if ((operand_17102->mFastReturn).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (17U) ;
    }else{
      var_cas_code = GGS_uint (16U) ;
    }
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (543)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_SLEEP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_SLEEP * operand_17487,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17487 != NULL) {
    if (GGS_uint (3U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (3U) COMMA_SOURCE_FILE_AT_LINE (552)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_17764,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17764 != NULL) {
    GGS_uint  var_cas_code ;
    operand_17764->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (562)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_17764->mLiteralValue) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (564)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_LFSR.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_LFSR * operand_18118,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18118 != NULL) {
    if (((GGS_uint (60928U))._operator_or (operand_18118->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (573))._left_shift_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (573))))._operator_or (operand_18118->mValue._right_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (573))).isBuilt ()) {
      ::routine_emitCode (inLexique,  ((GGS_uint (60928U))._operator_or (operand_18118->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (573))._left_shift_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (573))))._operator_or (operand_18118->mValue._right_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (573))) COMMA_SOURCE_FILE_AT_LINE (573)) ;
    }
    if ((GGS_uint (61440U))._operator_or ((operand_18118->mValue)._operator_and (GGS_uint (255U))).isBuilt ()) {
      ::routine_emitCode (inLexique,  (GGS_uint (61440U))._operator_or ((operand_18118->mValue)._operator_and (GGS_uint (255U))) COMMA_SOURCE_FILE_AT_LINE (574)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_MOVLB.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MOVLB * operand_18464,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18464 != NULL) {
    if ((GGS_uint (256U))._operator_or (operand_18464->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (583))).isBuilt ()) {
      ::routine_emitCode (inLexique,  (GGS_uint (256U))._operator_or (operand_18464->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (583))) COMMA_SOURCE_FILE_AT_LINE (583)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_18743,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18743 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_18868 = var_cas_inRoutineSymbolTable ;
    if (_temp_18868.isBuilt ()) {
      _temp_18868 (HERE)->method_searchKey (inLexique, operand_18743->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (593)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_18743->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '"))._operator_concat (operand_18743->mLabel))._operator_concat (GGS_string ("' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (596))))._operator_concat (GGS_string (" value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (597))))._operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (598)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLRD.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLRD * operand_19312,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19312 != NULL) {
    switch (operand_19312->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (8U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (608)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (9U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (609)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (10U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (10U) COMMA_SOURCE_FILE_AT_LINE (610)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (11U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (11U) COMMA_SOURCE_FILE_AT_LINE (611)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic18_instruction_TBLWT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_TBLWT * operand_19757,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19757 != NULL) {
    switch (operand_19757->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (12U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (12U) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (13U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (13U) COMMA_SOURCE_FILE_AT_LINE (623)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (14U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (14U) COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (15U).isBuilt ()) {
        ::routine_emitCode (inLexique,  GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (625)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_MNOP.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_MNOP * operand_20201,
                                const GGS_ipic18_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20201 != NULL) {
    if (((operand_20201->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (635)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      operand_20201->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (636)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_20525 = operand_20201->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (639)) ;
    GGS_bool _condition_20525 (_variant_20525.isBuilt (), true) ;
    while (_condition_20525.isBuiltAndTrue ()) {
      _condition_20525 = (var_cas_idx)._operator_strictInf (operand_20201->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (640))) ;
      if (_condition_20525.isBuiltAndTrue ()) {
        if (_variant_20525.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (644)) ;
          _condition_20525 = GGS_bool (false) ;
        }else{
          _variant_20525._decrement_operation (inLexique COMMA_HERE) ;
          if (GGS_uint (0U).isBuilt ()) {
            ::routine_emitCode (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (642)) ;
          }
          var_cas_idx._increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (643)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_retlw * operand_20705,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20705 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_lstring  var_cas_target ;
    var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_20705->mInstructionLocation COMMA_HERE) ;
    const GGS_ipic18_symbolTable  _temp_20898 = var_cas_inRoutineSymbolTable ;
    if (_temp_20898.isBuilt ()) {
      _temp_20898 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (655)) ;
    }
    if ((operand_20705->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (659)) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_21098 (operand_20705->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_21098 = NULL ;
      while (((operand_21098 = enumerator_21098.nextObject ()))) {
        macroValidPointer (operand_21098) ;
        if ((GGS_uint (3072U))._operator_or (operand_21098->mValue).isBuilt ()) {
          ::routine_emitCode (inLexique,  (GGS_uint (3072U))._operator_or (operand_21098->mValue) COMMA_SOURCE_FILE_AT_LINE (662)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_bra * operand_21320,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21320 != NULL) {
    GGS_lstring  var_cas_target ;
    var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), operand_21320->mInstructionLocation COMMA_HERE) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_21513 = var_cas_inRoutineSymbolTable ;
    if (_temp_21513.isBuilt ()) {
      _temp_21513 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (674)) ;
    }
    if ((operand_21320->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target COMMA_SOURCE_FILE_AT_LINE (676)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (678)) ;
    }
    GGS_uint  var_cas_addressForComputingBRA ;
    var_cas_addressForComputingBRA = var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (681)) ;
    if (((operand_21320->mUsesRCALL)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (683)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_21893 (operand_21320->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_21893 = NULL ;
      while (((operand_21893 = enumerator_21893.nextObject ()))) {
        macroValidPointer (operand_21893) ;
        const GGS_ipic18_symbolTable  _temp_21932 = var_cas_inRoutineSymbolTable ;
        if (_temp_21932.isBuilt ()) {
          _temp_21932 (HERE)->method_searchKey (inLexique, operand_21893->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (687)) ;
        }
        ::routine_emitBRAinstruction (inLexique,  var_cas_addressForComputingBRA,  var_cas_targetAddress,  operand_21893->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (691)) COMMA_SOURCE_FILE_AT_LINE (688)) ;
        var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (693)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_goto * operand_22310,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22310 != NULL) {
    GGS_lstring  var_cas_target ;
    var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_22310->mInstructionLocation COMMA_HERE) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_22503 = var_cas_inRoutineSymbolTable ;
    if (_temp_22503.isBuilt ()) {
      _temp_22503 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (705)) ;
    }
    if ((operand_22310->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target COMMA_SOURCE_FILE_AT_LINE (707)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (709)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22701 (operand_22310->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_22701 = NULL ;
      while (((operand_22701 = enumerator_22701.nextObject ()))) {
        macroValidPointer (operand_22701) ;
        const GGS_ipic18_symbolTable  _temp_22740 = var_cas_inRoutineSymbolTable ;
        if (_temp_22740.isBuilt ()) {
          _temp_22740 (HERE)->method_searchKey (inLexique, operand_22701->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (712)) ;
        }
        ::routine_emit_pic18_GOTOinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (713)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic18_instruction_computed_rcall.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_computed_rcall * operand_23013,
                                const GGS_ipic18_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23013 != NULL) {
    GGS_lstring  var_cas_target ;
    var_cas_target = GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), operand_23013->mInstructionLocation COMMA_HERE) ;
    GGS_uint  var_cas_targetAddress ;
    const GGS_ipic18_symbolTable  _temp_23206 = var_cas_inRoutineSymbolTable ;
    if (_temp_23206.isBuilt ()) {
      _temp_23206 (HERE)->method_searchKey (inLexique, var_cas_target, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (727)) ;
    }
    GGS_uint  var_cas_currentInstructionAddress ;
    if ((operand_23013->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  var_cas_target COMMA_SOURCE_FILE_AT_LINE (730)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (731)) ;
    }else{
      ::routine_emit_pic18_CALLinstruction (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (733)) ;
      var_cas_currentInstructionAddress = var_cas_ioAddress._add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (734)) ;
    }
    GGS_uint  var_cas_nextInstructionAddress ;
    var_cas_nextInstructionAddress = var_cas_currentInstructionAddress._add_operation (inLexique, operand_23013->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (736))._multiply_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (736)) COMMA_SOURCE_FILE_AT_LINE (736))._substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (736)) ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (0U) ;
    {
      GGS_lstringlist::cEnumerator enumerator_23654 (operand_23013->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_23654 = NULL ;
      while (((operand_23654 = enumerator_23654.nextObject ()))) {
        macroValidPointer (operand_23654) ;
        var_cas_index._increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (739)) ;
        const GGS_ipic18_symbolTable  _temp_23708 = var_cas_inRoutineSymbolTable ;
        if (_temp_23708.isBuilt ()) {
          _temp_23708 (HERE)->method_searchKey (inLexique, operand_23654->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (740)) ;
        }
        ::routine_emitRCALLinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_targetAddress,  operand_23654->mValue COMMA_SOURCE_FILE_AT_LINE (741)) ;
        var_cas_currentInstructionAddress = var_cas_currentInstructionAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (742)) ;
        if (((var_cas_index)._operator_strictInf (operand_23013->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (743)))).isBuiltAndTrue ()) {
          ::routine_emitBRAinstruction (inLexique,  var_cas_currentInstructionAddress,  var_cas_nextInstructionAddress,  operand_23654->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (744)) COMMA_SOURCE_FILE_AT_LINE (744)) ;
          var_cas_currentInstructionAddress = var_cas_currentInstructionAddress._add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (745)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "build_ipic18_binary_code"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_binary_code (C_Compiler & inLexique,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_uint  & var_cas_outUsedROMsize COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_24885 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_24885 = NULL ;
    while (((operand_24885 = enumerator_24885.nextObject ()))) {
      macroValidPointer (operand_24885) ;
      const GGS_ipic18_instruction  _temp_24926 = operand_24885->mInstruction ;
      if (_temp_24926.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__enterLabelAtAddress _method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (_temp_24926._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (inLexique, _temp_24926 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (766)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_outUsedROMsize = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (0U) ;
  if (GGS_uint (0U).isBuilt ()) {
    ::routine_setEmitAddress (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (772)) ;
  }
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_25209 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_25209 = NULL ;
    while (((operand_25209 = enumerator_25209.nextObject ()))) {
      macroValidPointer (operand_25209) ;
      const GGS_ipic18_instruction  _temp_25258 = operand_25209->mInstruction ;
      if (_temp_25258.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (_temp_25258._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (inLexique, _temp_25258 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (774)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic18_instruction  _temp_25357 = operand_25209->mInstruction ;
      if (_temp_25357.isBuilt ()) {
        _temp_25357 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (776)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (777)) ;
      ::routine_checkCurrentEmitAddress (inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (778)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (781))))._operator_concat (GGS_string (" value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (783))))._operator_concat (GGS_string (" value in first pass")) COMMA_SOURCE_FILE_AT_LINE (784)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (785))))._operator_concat (GGS_string (" bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (787))))._operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (788)) ;
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_26054 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_26054 = NULL ;
    while (((operand_26054 = enumerator_26054.nextObject ()))) {
      macroValidPointer (operand_26054) ;
      if (operand_26054->mInfo.mRegisterAddress.isBuilt ()) {
        ::routine_setEmitAddress (inLexique,  operand_26054->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (791)) ;
      }
      if (operand_26054->mInfo.mRegisterValue.isBuilt ()) {
        ::routine_emitByte (inLexique,  operand_26054->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (792)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_build_binary_code (void) {
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress (category_method__ipic18_instruction__enterLabelAtAddress, gClassInfoFor__ipic18_instruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic18_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_NULL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_NULL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress) category_method__ipic18_instruction_computed_rcall__generateBinaryCodeAtAddress, gClassInfoFor__ipic18_instruction_computed_rcall.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_build_binary_code (prologueRoutineFor_ipic18_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

