//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'ipic18_optimizations.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 9th, 2009, at 14h26'36"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipic18_optimizations.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_optimizations.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@ipic18_instruction.defineLabel'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__defineLabel (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_576,
                                GGS_symbolTableForOptimizations  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inLineIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_576 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@ipic18_instruction.defineLabel'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__defineLabel> gDispatchTableFor__ipic18_instruction__defineLabel ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__defineLabel (typeCategoryMethod__ipic18_instruction__defineLabel inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction__defineLabel.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__defineLabel
findCategoryMethod__ipic18_instruction__defineLabel (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__defineLabel result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction__defineLabel.count ()) {
    result = gDispatchTableFor__ipic18_instruction__defineLabel (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__defineLabel (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction__defineLabel.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_pseudo_LABEL.defineLabel'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabel (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_809,
                                GGS_symbolTableForOptimizations  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inLineIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_809 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_809->mLabel, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "findFirstInstructionFromAddress"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic18_instruction  & var_cas_outFirstInstruction COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (false) ;
  GGS_uint _variant_1757 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
  GGS_bool _condition_1757 (_variant_1757.isBuilt (), true) ;
  while (_condition_1757.isBuiltAndTrue ()) {
    _condition_1757 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_1757.isBuiltAndTrue ()) {
      if (_variant_1757.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (49)) ;
        _condition_1757 = GGS_bool (false) ;
      }else{
        _variant_1757._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_ipic18_instruction _var_1744 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (42)) ; // CAST instruction
          if (_var_1744.getPtr () != NULL) {
            macroValidPointer (_var_1744.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_1744.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_1744.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "findFirstInstructionOrLabelFromAddress"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionOrLabelFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic18_instruction  & var_cas_outFirstInstruction,
                                GGS_stringset  & var_cas_outReachedLabelSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionOrLabelFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outReachedLabelSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (false) ;
  GGS_uint _variant_2821 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_bool _condition_2821 (_variant_2821.isBuilt (), true) ;
  while (_condition_2821.isBuiltAndTrue ()) {
    _condition_2821 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (67))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_2821.isBuiltAndTrue ()) {
      if (_variant_2821.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (80)) ;
        _condition_2821 = GGS_bool (false) ;
      }else{
        _variant_2821._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_ipic18_instruction _var_2808 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (69)) ; // CAST instruction
          if (_var_2808.getPtr () != NULL) {
            macroValidPointer (_var_2808.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_2808.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_2808.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true) ;
            }else if (typeid (cPtr_ipic_pseudo_LABEL) == typeid (* (_var_2808.getPtr ()))) {
              const GGS_ipic_pseudo_LABEL var_cas_instr (_var_2808.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_outReachedLabelSet._addAssign_operation (var_cas_instr.reader_mLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionOrLabelFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@ipic_JUMP.optimizeJUMP'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__optimizeJUMP (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_3270,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3270 != NULL) {
    GGS_stringset  var_cas_reachedLabelSet ;
    GGS_ipic18_instruction  automatic_var_0 ;
    ::routine_findFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_ioGeneratedInstructionList,  automatic_var_0,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (98)) ;
    if ((var_cas_reachedLabelSet.reader_hasKey (_inLexique, operand_3270->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (101)) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
      var_cas_ioListFileContents.appendCString (": JUMP branching to next instruction deleted\n") ;
    }else{
      GGS_uint  var_cas_line ;
      const GGS_symbolTableForOptimizations  _temp_4044 = var_cas_inSymbolTable ;
      if (_temp_4044.isBuilt ()) {
        _temp_4044 (HERE)->method_searchKey (_inLexique, operand_3270->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
      GGS_ipic18_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (108)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (108)) ;
      { const GGS_ipic18_instruction _var_5557 = var_cas_firstInstruction ; // CAST instruction
        if (_var_5557.getPtr () != NULL) {
          macroValidPointer (_var_5557.getPtr ()) ;
          if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_5557.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, operand_3270->mInstructionLocation COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (112)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
            var_cas_ioListFileContents.appendCString (": JUMP branching to RETURN replaced by RETURN\n") ;
          }else if (typeid (cPtr_ipic18_instruction_literalOperation) == typeid (* (_var_5557.getPtr ()))) {
            const GGS_ipic18_instruction_literalOperation var_cas_literalOp (_var_5557.getPtr ()) ;
            if (((var_cas_literalOp.reader_mLiteralInstruction (_inLexique COMMA_SOURCE_FILE_AT_LINE (119)))._operator_isEqual (GGS_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_literalOp, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (120)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true) ;
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (125))) ;
              var_cas_ioListFileContents.appendCString (": JUMP branching to RETLW replaced by RETLW\n") ;
            }
          }else if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_5557.getPtr ()))) {
            const GGS_ipic_JUMP var_cas_jump (_var_5557.getPtr ()) ;
            if (((operand_3270->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_JUMP ::constructor_new (_inLexique, operand_3270->mInstructionLocation, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (130)), operand_3270->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (129)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true) ;
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
              var_cas_ioListFileContents.appendCString (": JUMP branching to JUMP replaced by JUMP\n") ;
            }
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@ipic_JUMP.optimizeJUMP'         *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JUMP__optimizeJUMP> gDispatchTableFor__ipic_JUMP__optimizeJUMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JUMP__optimizeJUMP (typeCategoryMethod__ipic_JUMP__optimizeJUMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JUMP__optimizeJUMP
findCategoryMethod__ipic_JUMP__optimizeJUMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JUMP__optimizeJUMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_JUMP__optimizeJUMP.count ()) {
    result = gDispatchTableFor__ipic_JUMP__optimizeJUMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JUMP__optimizeJUMP (superClassPtr) ;
      gDispatchTableFor__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@ipic_JSR.optimizeJSR'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__optimizeJSR (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_5704,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5704 != NULL) {
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (151)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (151)) ;
    { const GGS_ipic18_instruction _var_6443 = var_cas_firstInstruction ; // CAST instruction
      if (_var_6443.getPtr () != NULL) {
        macroValidPointer (_var_6443.getPtr ()) ;
        if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_6443.getPtr ()))) {
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_JUMP ::constructor_new (_inLexique, operand_5704->mInstructionLocation, operand_5704->mTargetLabel, operand_5704->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (155)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
          var_cas_ioListFileContents.appendCString (": JSR followed by RETURN replaced by JUMP\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Virtual Table for category method '@ipic_JSR.optimizeJSR'          *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JSR__optimizeJSR> gDispatchTableFor__ipic_JSR__optimizeJSR ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JSR__optimizeJSR (typeCategoryMethod__ipic_JSR__optimizeJSR inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JSR__optimizeJSR
findCategoryMethod__ipic_JSR__optimizeJSR (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JSR__optimizeJSR result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_JSR__optimizeJSR.count ()) {
    result = gDispatchTableFor__ipic_JSR__optimizeJSR (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JSR__optimizeJSR (superClassPtr) ;
      gDispatchTableFor__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_literalOperation.optimizeMOVLW'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__optimizeMOVLW (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_6602,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6602 != NULL) {
    if (((operand_6602->mLiteralInstruction)._operator_isEqual (GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      GGS_ipic18_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (176)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (176)) ;
      { const GGS_ipic18_instruction _var_7498 = var_cas_firstInstruction ; // CAST instruction
        if (_var_7498.getPtr () != NULL) {
          macroValidPointer (_var_7498.getPtr ()) ;
          if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_7498.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic18_instruction_literalOperation ::constructor_new (_inLexique, operand_6602->mInstructionLocation, GGS_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE), operand_6602->mLiteralValue COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (180)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
            var_cas_ioListFileContents.appendCString (": MOVLW followed by RETURN replaced by RETLW\n") ;
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_literalOperation.optimizeMOVLW'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW> gDispatchTableFor__ipic18_instruction_literalOperation__optimizeMOVLW ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW
findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction_literalOperation__optimizeMOVLW.count ()) {
    result = gDispatchTableFor__ipic18_instruction_literalOperation__optimizeMOVLW (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_conditionalBranch.optimizeBCC'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__optimizeBCC (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_7667,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7667 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_7938 = var_cas_inSymbolTable ;
    if (_temp_7938.isBuilt ()) {
      _temp_7938 (HERE)->method_searchKey (_inLexique, operand_7667->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (204)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (204)) ;
    { const GGS_ipic18_instruction _var_8754 = var_cas_firstInstruction ; // CAST instruction
      if (_var_8754.getPtr () != NULL) {
        macroValidPointer (_var_8754.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_8754.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_8754.getPtr ()) ;
          if (((operand_7667->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)))._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic18_instruction_conditionalBranch ::constructor_new (_inLexique, operand_7667->mInstructionLocation, operand_7667->mBranchMode, operand_7667->mConditionalBranch, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (210)) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (209)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
            var_cas_ioListFileContents.appendCString (": label of JUMP ") ;
            var_cas_ioListFileContents._dotAssign_operation (operand_7667->mConditionalBranch.reader_condition (_inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
            var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_conditionalBranch.optimizeBCC'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC> gDispatchTableFor__ipic18_instruction_conditionalBranch__optimizeBCC ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC
findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction_conditionalBranch__optimizeBCC.count ()) {
    result = gDispatchTableFor__ipic18_instruction_conditionalBranch__optimizeBCC (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_jump_test_register.optimizeTestReg'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__optimizeTestReg (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_8903,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8903 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_9174 = var_cas_inSymbolTable ;
    if (_temp_9174.isBuilt ()) {
      _temp_9174 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_8903->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (230)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (233)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (233)) ;
    { const GGS_ipic18_instruction _var_10176 = var_cas_firstInstruction ; // CAST instruction
      if (_var_10176.getPtr () != NULL) {
        macroValidPointer (_var_10176.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_10176.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_10176.getPtr ()) ;
          if (((operand_8903->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_jump_test_register ::constructor_new (_inLexique, operand_8903->mInstructionLocation, operand_8903->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (239)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (239)), operand_8903->mBranchIfZero, operand_8903->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (238)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (243))) ;
            var_cas_ioListFileContents.appendCString (": label of JUMP ") ;
            var_cas_ioListFileContents._dotAssign_operation (operand_8903->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (243))) ;
            if ((operand_8903->mBranchIfZero).isBuiltAndTrue ()) {
              var_cas_ioListFileContents.appendCString ("Z") ;
            }else{
              var_cas_ioListFileContents.appendCString ("NZ") ;
            }
            var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_jump_test_register.optimizeTestReg'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_jump_test_register__optimizeTestReg> gDispatchTableFor__ipic_jump_test_register__optimizeTestReg ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (typeCategoryMethod__ipic_jump_test_register__optimizeTestReg inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_jump_test_register__optimizeTestReg
findCategoryMethod__ipic_jump_test_register__optimizeTestReg (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_jump_test_register__optimizeTestReg result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.count ()) {
    result = gDispatchTableFor__ipic_jump_test_register__optimizeTestReg (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (superClassPtr) ;
      gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_10335,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10335 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_10606 = var_cas_inSymbolTable ;
    if (_temp_10606.isBuilt ()) {
      _temp_10606 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_10335->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (265)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (268)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (268)) ;
    { const GGS_ipic18_instruction _var_11873 = var_cas_firstInstruction ; // CAST instruction
      if (_var_11873.getPtr () != NULL) {
        macroValidPointer (_var_11873.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_11873.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_11873.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, operand_10335->mInstructionLocation, operand_10335->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)), operand_10335->mIncrement, operand_10335->m_W_isDestination, operand_10335->mBranchIfZero, operand_10335->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (272)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))) ;
          var_cas_ioListFileContents.appendCString (": label of ") ;
          var_cas_ioListFileContents.appendCString ("JUMP ") ;
          if ((operand_10335->mIncrement).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString ("INCF ") ;
          }else{
            var_cas_ioListFileContents.appendCString ("DECF ") ;
          }
          var_cas_ioListFileContents._dotAssign_operation (operand_10335->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (292))) ;
          if ((operand_10335->m_W_isDestination).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString (", W ") ;
          }
          if ((operand_10335->mBranchIfZero).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString ("Z") ;
          }else{
            var_cas_ioListFileContents.appendCString ("NZ") ;
          }
          var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc> gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc
findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.count ()) {
    result = gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (superClassPtr) ;
      gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_registerComparisonCondition.optimizeCMP'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__optimizeCMP (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_12027,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12027 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_12298 = var_cas_inSymbolTable ;
    if (_temp_12298.isBuilt ()) {
      _temp_12298 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12027->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (316)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (319)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (319)) ;
    { const GGS_ipic18_instruction _var_13257 = var_cas_firstInstruction ; // CAST instruction
      if (_var_13257.getPtr () != NULL) {
        macroValidPointer (_var_13257.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_13257.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_13257.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, operand_12027->mInstructionLocation, operand_12027->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (327)), operand_12027->mComparison, operand_12027->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (323)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (334))) ;
          var_cas_ioListFileContents.appendCString (": label of ") ;
          var_cas_ioListFileContents.appendCString ("JUMP ") ;
          var_cas_ioListFileContents._dotAssign_operation (operand_12027->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (336))) ;
          var_cas_ioListFileContents.appendCString (" ") ;
          var_cas_ioListFileContents._dotAssign_operation (operand_12027->mComparison.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (337))) ;
          var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_registerComparisonCondition.optimizeCMP'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP> gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP
findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.count ()) {
    result = gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (superClassPtr) ;
      gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_BitTestSkip.optimizeBitTestSkip'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (C_Compiler & _inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_13417,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13417 != NULL) {
    GGS_string var_cas_jumpLabel ;
    var_cas_jumpLabel = GGS_string ("") ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (false) ;
    { const GGS_ipic18_instruction _var_13850 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_SOURCE_FILE_AT_LINE (354)) ; // CAST instruction
      if (_var_13850.getPtr () != NULL) {
        macroValidPointer (_var_13850.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_13850.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_13850.getPtr ()) ;
          var_cas_jumpLabel = var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)) ;
          var_cas_ok = GGS_bool (true) ;
        }else{
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      { const GGS_ipic18_instruction _var_14197 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_SOURCE_FILE_AT_LINE (362)) ; // CAST instruction
        if (_var_14197.getPtr () != NULL) {
          macroValidPointer (_var_14197.getPtr ()) ;
          if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_14197.getPtr ()) != NULL) {
            const GGS_ipic_actualInstruction var_cas_instruction (_var_14197.getPtr ()) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_ipic_actualInstruction  _temp_14101 = var_cas_instruction ;
            if (_temp_14101.isBuilt ()) {
              _temp_14101 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (364)) ;
            }
            var_cas_ok = (var_cas_instructionLength)._operator_isEqual (GGS_uint (1U)) ;
          }else{
            var_cas_ok = GGS_bool (false) ;
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      GGS_ipic18_instruction  var_cas_thirdInstruction ;
      var_cas_thirdInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
      GGS_stringset  var_cas_reachedLabelSet ;
      GGS_ipic18_instruction  automatic_var_1 ;
      ::routine_findFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (3U) COMMA_SOURCE_FILE_AT_LINE (374)),  var_cas_ioGeneratedInstructionList,  automatic_var_1,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (374)) ;
      var_cas_ok = var_cas_reachedLabelSet.reader_hasKey (_inLexique, var_cas_jumpLabel COMMA_SOURCE_FILE_AT_LINE (375)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic18_instruction_BitTestSkip ::constructor_new (_inLexique, operand_13417->mInstructionLocation, (operand_13417->mSkipIfSet)._operator_not (), operand_13417->mRegisterDescription, operand_13417->mBitNumber COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (380)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (391)) COMMA_SOURCE_FILE_AT_LINE (391)), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (392)) COMMA_SOURCE_FILE_AT_LINE (390)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_SOURCE_FILE_AT_LINE (395)) ;
      var_cas_ioOptimizationsDone = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  lines ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
      var_cas_ioListFileContents.appendCString (" to ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (402)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
      var_cas_ioListFileContents.appendCString (" bit test skip, following by a JUMP skipping next instruction, is complemented\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_BitTestSkip.optimizeBitTestSkip'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip> gDispatchTableFor__ipic18_instruction_BitTestSkip__optimizeBitTestSkip ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip
findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.count ()) {
    result = gDispatchTableFor__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (superClassPtr) ;
      gDispatchTableFor__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "performOptimizations"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performOptimizations (C_Compiler & _inLexique,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performOptimizations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (482))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("CODE OPTIMIZATION").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (483))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (484))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  GGS_symbolTableForOptimizations  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTableForOptimizations ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_lineIndex (true, 0) ;
    GGS_ipic18_instructionList::cEnumerator enumerator_18832 (var_cas_ioGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_18832 = NULL ;
    while (((operand_18832 = enumerator_18832.nextObject ()))) {
      macroValidPointer (operand_18832) ;
      const GGS_ipic18_instruction  _temp_18875 = operand_18832->mInstruction ;
      if (_temp_18875.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__defineLabel _method = findCategoryMethod__ipic18_instruction__defineLabel (_temp_18875._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_18875 (HERE), var_cas_symbolTable, var_cas_lineIndex COMMA_SOURCE_FILE_AT_LINE (488)) ;
        }
      }
      var_cas_lineIndex.mValue ++ ;
    }
  }
  GGS_bool var_cas_optimizationsDone ;
  var_cas_optimizationsDone = GGS_bool (true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (0U) ;
  GGS_uint _variant_23094 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
  GGS_bool _condition_23094 (_variant_23094.isBuilt (), true) ;
  while (_condition_23094.isBuiltAndTrue ()) {
    _condition_23094 = var_cas_optimizationsDone ;
    if (_condition_23094.isBuiltAndTrue ()) {
      if (_variant_23094.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (567)) ;
        _condition_23094 = GGS_bool (false) ;
      }else{
        _variant_23094._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_optimizationsDone = GGS_bool (false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (497)) ;
        var_cas_ioListFileContents.appendCString ("Pass ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_iteration.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (498))) ;
        var_cas_ioListFileContents.appendCString (":\n") ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic18_instructionList::cEnumerator enumerator_19295 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_19295 = NULL ;
          while (((operand_19295 = enumerator_19295.nextObject ()))) {
            macroValidPointer (operand_19295) ;
            { const GGS_ipic18_instruction _var_20969 = operand_19295->mInstruction ; // CAST instruction
              if (_var_20969.getPtr () != NULL) {
                macroValidPointer (_var_20969.getPtr ()) ;
                if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic_JUMP var_cas_ipic_JUMP (_var_20969.getPtr ()) ;
                  const GGS_ipic_JUMP  _temp_19399 = var_cas_ipic_JUMP ;
                  if (_temp_19399.isBuilt ()) {
                    typeCategoryMethod__ipic_JUMP__optimizeJUMP _method = findCategoryMethod__ipic_JUMP__optimizeJUMP (_temp_19399._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_19399 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (503)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_JSR) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic_JSR var_cas_ipic_JSR (_var_20969.getPtr ()) ;
                  const GGS_ipic_JSR  _temp_19556 = var_cas_ipic_JSR ;
                  if (_temp_19556.isBuilt ()) {
                    typeCategoryMethod__ipic_JSR__optimizeJSR _method = findCategoryMethod__ipic_JSR__optimizeJSR (_temp_19556._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_19556 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (505)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_literalOperation) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic18_instruction_literalOperation var_cas_ipic_literal (_var_20969.getPtr ()) ;
                  const GGS_ipic18_instruction_literalOperation  _temp_19737 = var_cas_ipic_literal ;
                  if (_temp_19737.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW _method = findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (_temp_19737._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_19737 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (507)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_conditionalBranch) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic18_instruction_conditionalBranch var_cas_ipic_cc (_var_20969.getPtr ()) ;
                  const GGS_ipic18_instruction_conditionalBranch  _temp_19907 = var_cas_ipic_cc ;
                  if (_temp_19907.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC _method = findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (_temp_19907._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_19907 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (509)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_jump_test_register) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic_jump_test_register var_cas_ipic_testReg (_var_20969.getPtr ()) ;
                  const GGS_ipic_jump_test_register  _temp_20091 = var_cas_ipic_testReg ;
                  if (_temp_20091.isBuilt ()) {
                    typeCategoryMethod__ipic_jump_test_register__optimizeTestReg _method = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (_temp_20091._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_20091 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (511)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_incDecRegisterInCondition) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic_incDecRegisterInCondition var_cas_ipic_decInc (_var_20969.getPtr ()) ;
                  const GGS_ipic_incDecRegisterInCondition  _temp_20283 = var_cas_ipic_decInc ;
                  if (_temp_20283.isBuilt ()) {
                    typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc _method = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (_temp_20283._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_20283 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (513)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_registerComparisonCondition) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic_registerComparisonCondition var_cas_ipic_CMP (_var_20969.getPtr ()) ;
                  const GGS_ipic_registerComparisonCondition  _temp_20464 = var_cas_ipic_CMP ;
                  if (_temp_20464.isBuilt ()) {
                    typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP _method = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (_temp_20464._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_20464 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (515)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_BitTestSkip) == typeid (* (_var_20969.getPtr ()))) {
                  const GGS_ipic18_instruction_BitTestSkip var_cas_ipic_bitTestSkip (_var_20969.getPtr ()) ;
                  const GGS_ipic18_instruction_BitTestSkip  _temp_20667 = var_cas_ipic_bitTestSkip ;
                  if (_temp_20667.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip _method = findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (_temp_20667._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_20667 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (517)) ;
                    }
                  }
                }else{
                }
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        GGS_stringset  var_cas_referencedLabels ;
        var_cas_referencedLabels = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_ipic18_instructionList::cEnumerator enumerator_21114 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_21114 = NULL ;
          while (((operand_21114 = enumerator_21114.nextObject ()))) {
            macroValidPointer (operand_21114) ;
            const GGS_ipic18_instruction  _temp_21158 = operand_21114->mInstruction ;
            if (_temp_21158.isBuilt ()) {
              _temp_21158 (HERE)->method_enterReferencedLabel (_inLexique, var_cas_referencedLabels COMMA_SOURCE_FILE_AT_LINE (526)) ;
            }
          }
        }
        {
          GGS_symbolTableForOptimizations::cEnumerator enumerator_21222 (var_cas_symbolTable, true) ;
          const GGS_symbolTableForOptimizations::cElement * operand_21222 = NULL ;
          while (((operand_21222 = enumerator_21222.nextObject ()))) {
            macroValidPointer (operand_21222) ;
            if (((var_cas_referencedLabels.reader_hasKey (_inLexique, operand_21222->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (529)) COMMA_SOURCE_FILE_AT_LINE (529)))._operator_not ()).isBuiltAndTrue ()) {
              GGS_uint  var_cas_definitionLine ;
              const GGS_symbolTableForOptimizations  _temp_21337 = var_cas_symbolTable ;
              if (_temp_21337.isBuilt ()) {
                _temp_21337 (HERE)->method_searchKey (_inLexique, operand_21222->mKey, var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (530)) ;
              }
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_definitionLine.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (531))) ;
              var_cas_ioListFileContents.appendCString (": unreferenced label '") ;
              var_cas_ioListFileContents._dotAssign_operation (operand_21222->mKey) ;
              var_cas_ioListFileContents.appendCString ("' is deleted\n") ;
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (532)) ;
              GGS_uint  automatic_var_2 ;
              var_cas_symbolTable.modifier_removeKey (_inLexique, operand_21222->mKey, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (533)) ;
            }
          }
        }
        GGS_bool var_cas_reachable ;
        var_cas_reachable = GGS_bool (true) ;
        GGS_bool var_cas_skippingInstruction ;
        var_cas_skippingInstruction = GGS_bool (false) ;
        GGS_bool var_cas_previousWasSkippingInstruction ;
        var_cas_previousWasSkippingInstruction = GGS_bool (false) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic18_instructionList::cEnumerator enumerator_21848 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_21848 = NULL ;
          while (((operand_21848 = enumerator_21848.nextObject ()))) {
            macroValidPointer (operand_21848) ;
            if (((var_cas_reachable)._operator_or (var_cas_previousWasSkippingInstruction)).isBuiltAndTrue ()) {
              const GGS_ipic18_instruction  _temp_21964 = operand_21848->mInstruction ;
              if (_temp_21964.isBuilt ()) {
                _temp_21964 (HERE)->method_nextInstructionIsReachable (_inLexique, var_cas_reachable COMMA_SOURCE_FILE_AT_LINE (542)) ;
              }
              var_cas_previousWasSkippingInstruction = var_cas_skippingInstruction ;
              const GGS_ipic18_instruction  _temp_22088 = operand_21848->mInstruction ;
              if (_temp_22088.isBuilt ()) {
                _temp_22088 (HERE)->method_isSkippingInstruction (_inLexique, var_cas_skippingInstruction COMMA_SOURCE_FILE_AT_LINE (544)) ;
              }
            }else{
              GGS_bool var_cas_isLABELorORG ;
              const GGS_ipic18_instruction  _temp_22181 = operand_21848->mInstruction ;
              if (_temp_22181.isBuilt ()) {
                _temp_22181 (HERE)->method_isLABELorORG (_inLexique, var_cas_isLABELorORG COMMA_SOURCE_FILE_AT_LINE (546)) ;
              }
              GGS_bool var_cas_isNULL ;
              const GGS_ipic18_instruction  _temp_22243 = operand_21848->mInstruction ;
              if (_temp_22243.isBuilt ()) {
                _temp_22243 (HERE)->method_isNULL (_inLexique, var_cas_isNULL COMMA_SOURCE_FILE_AT_LINE (547)) ;
              }
              if ((((var_cas_isLABELorORG)._operator_not ())._operator_and ((var_cas_isNULL)._operator_not ())).isBuiltAndTrue ()) {
                var_cas_ioListFileContents.appendCString ("  line ") ;
                var_cas_ioListFileContents._dotAssign_operation (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (549))) ;
                var_cas_ioListFileContents.appendCString (": unreachable instruction is deleted\n") ;
                var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_idx COMMA_SOURCE_FILE_AT_LINE (550)) ;
              }else if ((var_cas_isLABELorORG).isBuiltAndTrue ()) {
                var_cas_reachable = GGS_bool (true) ;
                var_cas_previousWasSkippingInstruction = GGS_bool (false) ;
                var_cas_skippingInstruction = GGS_bool (false) ;
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_optimizationsDone)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("  No optimization\n"
            "\n") ;
          GGS_uint  var_cas_currentAddress ;
          var_cas_currentAddress = GGS_uint (0U) ;
          {
            GGS_ipic18_instructionList::cEnumerator enumerator_22899 (var_cas_ioGeneratedInstructionList, true) ;
            const GGS_ipic18_instructionList::cElement * operand_22899 = NULL ;
            while (((operand_22899 = enumerator_22899.nextObject ()))) {
              macroValidPointer (operand_22899) ;
              const GGS_ipic18_instruction  _temp_22942 = operand_22899->mInstruction ;
              if (_temp_22942.isBuilt ()) {
                _temp_22942 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (563)) ;
              }
            }
          }
          var_cas_ioListFileContents.appendCString ("Minimum code size: ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (565))) ;
          var_cas_ioListFileContents.appendCString (" bytes\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performOptimizations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_optimizations (void) {
 enterCategoryMethod__ipic18_instruction__defineLabel (category_method__ipic18_instruction__defineLabel, gClassInfoFor__ipic18_instruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__defineLabel ((typeCategoryMethod__ipic18_instruction__defineLabel) category_method__ipic_pseudo_LABEL__defineLabel, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_JUMP__optimizeJUMP (category_method__ipic_JUMP__optimizeJUMP, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_JSR__optimizeJSR (category_method__ipic_JSR__optimizeJSR, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (category_method__ipic18_instruction_literalOperation__optimizeMOVLW, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (category_method__ipic18_instruction_conditionalBranch__optimizeBCC, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (category_method__ipic_jump_test_register__optimizeTestReg, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (category_method__ipic_registerComparisonCondition__optimizeCMP, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (category_method__ipic18_instruction_BitTestSkip__optimizeBitTestSkip, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_optimizations (prologueRoutineFor_ipic18_optimizations,
                                   NULL) ;

//---------------------------------------------------------------------------*

