//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'ipic18_optimizations.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 21th, 2008, at 20h4'30"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipic18_optimizations.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_optimizations.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'e_symbolTableForOptimizations'                    *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTableForOptimizations::e_symbolTableForOptimizations (void) :
mDefinitionLineIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class map '@symbolTableForOptimizations'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTableForOptimizations::
elementOf_GGS_symbolTableForOptimizations (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTableForOptimizations & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTableForOptimizations::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mDefinitionLineIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTableForOptimizations::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTableForOptimizations * _p = dynamic_cast <const elementOf_GGS_symbolTableForOptimizations *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mDefinitionLineIndex._operator_isEqual (_p->mInfo.mDefinitionLineIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTableForOptimizations::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTableForOptimizations info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
_operator_isEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
_operator_isNotEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (_isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0._drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.mDefinitionLineIndex ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTableForOptimizations info  ;
    info.mDefinitionLineIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mDefinitionLineIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_setMDefinitionLineIndexForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMDefinitionLineIndexForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mDefinitionLineIndex = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_removeKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTableForOptimizations & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTableForOptimizations::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTableForOptimizations " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTableForOptimizations::cEnumerator::_mDefinitionLineIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mDefinitionLineIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_instruction.defineLabel'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__defineLabel (C_Compiler &,
                                const cPtr_ipic_instruction * operand_937,
                                GGS_symbolTableForOptimizations  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inLineIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_937 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@ipic_instruction.defineLabel'      *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__defineLabel> gDispatchTableFor__ipic_instruction__defineLabel ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__defineLabel (typeCategoryMethod__ipic_instruction__defineLabel inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__defineLabel.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__defineLabel
findCategoryMethod__ipic_instruction__defineLabel (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__defineLabel result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__defineLabel.count ()) {
    result = gDispatchTableFor__ipic_instruction__defineLabel (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__defineLabel (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__defineLabel.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_pseudo_LABEL.defineLabel'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabel (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1170,
                                GGS_symbolTableForOptimizations  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inLineIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1170 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1170->mLabel, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "findFirstInstructionFromAddress"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic_instruction  & var_cas_outFirstInstruction COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_2114 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
  GGS_bool _condition_2114 (_variant_2114._isBuilt (), true) ;
  while (_condition_2114.isBuiltAndTrue ()) {
    _condition_2114 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (49))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_2114.isBuiltAndTrue ()) {
      if (_variant_2114.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (58)) ;
        _condition_2114 = GGS_bool (true, false) ;
      }else{
        _variant_2114._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_ipic_instruction _var_2101 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (51)) ; // CAST instruction
          if (_var_2101.getPtr () != NULL) {
            macroValidPointer (_var_2101.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_2101.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_2101.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true, true) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "findFirstInstructionOrLabelFromAddress"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionOrLabelFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic_instruction  & var_cas_outFirstInstruction,
                                GGS_stringset  & var_cas_outReachedLabelSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionOrLabelFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outReachedLabelSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_3174 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
  GGS_bool _condition_3174 (_variant_3174._isBuilt (), true) ;
  while (_condition_3174.isBuiltAndTrue ()) {
    _condition_3174 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (76))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_3174.isBuiltAndTrue ()) {
      if (_variant_3174.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (89)) ;
        _condition_3174 = GGS_bool (true, false) ;
      }else{
        _variant_3174._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_ipic_instruction _var_3161 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (78)) ; // CAST instruction
          if (_var_3161.getPtr () != NULL) {
            macroValidPointer (_var_3161.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_3161.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_3161.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true, true) ;
            }else if (typeid (cPtr_ipic_pseudo_LABEL) == typeid (* (_var_3161.getPtr ()))) {
              const GGS_ipic_pseudo_LABEL var_cas_instr (_var_3161.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_outReachedLabelSet._addAssign_operation (var_cas_instr.reader_mLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))) ;
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionOrLabelFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@ipic_JUMP.optimizeJUMP'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__optimizeJUMP (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_3623,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3623 != NULL) {
    GGS_stringset  var_cas_reachedLabelSet ;
    GGS_ipic_instruction  automatic_var_0 ;
    ::routine_findFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (107)),  var_cas_ioGeneratedInstructionList,  automatic_var_0,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (107)) ;
    if ((var_cas_reachedLabelSet.reader_hasKey (_inLexique, operand_3623->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (109)) COMMA_SOURCE_FILE_AT_LINE (109))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (110)) ;
      var_cas_ioListFileContents.writeString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
      var_cas_ioListFileContents.writeString (": JUMP branching to next instruction deleted\n") ;
    }else{
      GGS_uint  var_cas_line ;
      const GGS_symbolTableForOptimizations  _temp_4395 = var_cas_inSymbolTable ;
      if (_temp_4395._isBuilt ()) {
        _temp_4395 (HERE)->method_searchKey (_inLexique, operand_3623->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
      GGS_ipic_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (117)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (117)) ;
      { const GGS_ipic_instruction _var_5900 = var_cas_firstInstruction ; // CAST instruction
        if (_var_5900.getPtr () != NULL) {
          macroValidPointer (_var_5900.getPtr ()) ;
          if (typeid (cPtr_ipic_instruction_RETURN) == typeid (* (_var_5900.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, operand_3623->mInstructionLocation COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (121)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (126))) ;
            var_cas_ioListFileContents.writeString (": JUMP branching to RETURN replaced by RETURN\n") ;
          }else if (typeid (cPtr_ipic_instruction_literalOperation) == typeid (* (_var_5900.getPtr ()))) {
            const GGS_ipic_instruction_literalOperation var_cas_literalOp (_var_5900.getPtr ()) ;
            if (((var_cas_literalOp.reader_mLiteralInstruction (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))._operator_isEqual (GGS_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_literalOp, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (129)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
              var_cas_ioListFileContents.writeString (": JUMP branching to RETLW replaced by RETLW\n") ;
            }
          }else if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_5900.getPtr ()))) {
            const GGS_ipic_JUMP var_cas_jump (_var_5900.getPtr ()) ;
            if (((operand_3623->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_JUMP ::constructor_new (_inLexique, operand_3623->mInstructionLocation, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (139)), operand_3623->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (138)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (143))) ;
              var_cas_ioListFileContents.writeString (": JUMP branching to JUMP replaced by JUMP\n") ;
            }
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@ipic_JUMP.optimizeJUMP'         *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JUMP__optimizeJUMP> gDispatchTableFor__ipic_JUMP__optimizeJUMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JUMP__optimizeJUMP (typeCategoryMethod__ipic_JUMP__optimizeJUMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JUMP__optimizeJUMP
findCategoryMethod__ipic_JUMP__optimizeJUMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JUMP__optimizeJUMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_JUMP__optimizeJUMP.count ()) {
    result = gDispatchTableFor__ipic_JUMP__optimizeJUMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JUMP__optimizeJUMP (superClassPtr) ;
      gDispatchTableFor__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@ipic_JSR.optimizeJSR'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__optimizeJSR (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_6047,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6047 != NULL) {
    GGS_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (160)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (160)) ;
    { const GGS_ipic_instruction _var_6780 = var_cas_firstInstruction ; // CAST instruction
      if (_var_6780.getPtr () != NULL) {
        macroValidPointer (_var_6780.getPtr ()) ;
        if (typeid (cPtr_ipic_instruction_RETURN) == typeid (* (_var_6780.getPtr ()))) {
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_JUMP ::constructor_new (_inLexique, operand_6047->mInstructionLocation, operand_6047->mTargetLabel, operand_6047->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (164)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
          var_cas_ioListFileContents.writeString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (169))) ;
          var_cas_ioListFileContents.writeString (": JSR followed by RETURN replaced by JUMP\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Virtual Table for category method '@ipic_JSR.optimizeJSR'          *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JSR__optimizeJSR> gDispatchTableFor__ipic_JSR__optimizeJSR ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JSR__optimizeJSR (typeCategoryMethod__ipic_JSR__optimizeJSR inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JSR__optimizeJSR
findCategoryMethod__ipic_JSR__optimizeJSR (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JSR__optimizeJSR result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_JSR__optimizeJSR.count ()) {
    result = gDispatchTableFor__ipic_JSR__optimizeJSR (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JSR__optimizeJSR (superClassPtr) ;
      gDispatchTableFor__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_literalOperation.optimizeMOVLW'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__optimizeMOVLW (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_6937,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6937 != NULL) {
    if (((operand_6937->mLiteralInstruction)._operator_isEqual (GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      GGS_ipic_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (185)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (185)) ;
      { const GGS_ipic_instruction _var_7825 = var_cas_firstInstruction ; // CAST instruction
        if (_var_7825.getPtr () != NULL) {
          macroValidPointer (_var_7825.getPtr ()) ;
          if (typeid (cPtr_ipic_instruction_RETURN) == typeid (* (_var_7825.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, operand_6937->mInstructionLocation, GGS_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE), operand_6937->mLiteralValue COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (189)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
            var_cas_ioListFileContents.writeString (": MOVLW followed by RETURN replaced by RETLW\n") ;
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction_literalOperation.optimizeMOVLW'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW> gDispatchTableFor__ipic_instruction_literalOperation__optimizeMOVLW ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW (typeCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW
findCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction_literalOperation__optimizeMOVLW.count ()) {
    result = gDispatchTableFor__ipic_instruction_literalOperation__optimizeMOVLW (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW (superClassPtr) ;
      gDispatchTableFor__ipic_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_conditionalBranch.optimizeBCC'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__optimizeBCC (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_7992,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7992 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_8261 = var_cas_inSymbolTable ;
    if (_temp_8261._isBuilt ()) {
      _temp_8261 (HERE)->method_searchKey (_inLexique, operand_7992->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (210)) ;
    }
    GGS_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (213)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (213)) ;
    { const GGS_ipic_instruction _var_9073 = var_cas_firstInstruction ; // CAST instruction
      if (_var_9073.getPtr () != NULL) {
        macroValidPointer (_var_9073.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_9073.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_9073.getPtr ()) ;
          if (((operand_7992->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)))._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_7992->mInstructionLocation, operand_7992->mBranchMode, operand_7992->mConditionalBranch, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (219)) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (218)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
            var_cas_ioListFileContents.writeString (": label of JUMP ") ;
            var_cas_ioListFileContents._dotAssign_operation (operand_7992->mConditionalBranch.reader_condition (_inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
            var_cas_ioListFileContents.writeString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction_conditionalBranch.optimizeBCC'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC> gDispatchTableFor__ipic_instruction_conditionalBranch__optimizeBCC ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC (typeCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC
findCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction_conditionalBranch__optimizeBCC.count ()) {
    result = gDispatchTableFor__ipic_instruction_conditionalBranch__optimizeBCC (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC (superClassPtr) ;
      gDispatchTableFor__ipic_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_jump_test_register.optimizeTestReg'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__optimizeTestReg (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_9222,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9222 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_9491 = var_cas_inSymbolTable ;
    if (_temp_9491._isBuilt ()) {
      _temp_9491 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_9222->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (239)) ;
    }
    GGS_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (242)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (242)) ;
    { const GGS_ipic_instruction _var_10491 = var_cas_firstInstruction ; // CAST instruction
      if (_var_10491.getPtr () != NULL) {
        macroValidPointer (_var_10491.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_10491.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_10491.getPtr ()) ;
          if (((operand_9222->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (246)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (246)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_jump_test_register ::constructor_new (_inLexique, operand_9222->mInstructionLocation, operand_9222->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (248)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (248)), operand_9222->mBranchIfZero, operand_9222->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (247)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (252))) ;
            var_cas_ioListFileContents.writeString (": label of JUMP ") ;
            var_cas_ioListFileContents._dotAssign_operation (operand_9222->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (252))) ;
            if ((operand_9222->mBranchIfZero).isBuiltAndTrue ()) {
              var_cas_ioListFileContents.writeString ("Z") ;
            }else{
              var_cas_ioListFileContents.writeString ("NZ") ;
            }
            var_cas_ioListFileContents.writeString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_jump_test_register.optimizeTestReg'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_jump_test_register__optimizeTestReg> gDispatchTableFor__ipic_jump_test_register__optimizeTestReg ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (typeCategoryMethod__ipic_jump_test_register__optimizeTestReg inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_jump_test_register__optimizeTestReg
findCategoryMethod__ipic_jump_test_register__optimizeTestReg (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_jump_test_register__optimizeTestReg result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.count ()) {
    result = gDispatchTableFor__ipic_jump_test_register__optimizeTestReg (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (superClassPtr) ;
      gDispatchTableFor__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_10650,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10650 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_10919 = var_cas_inSymbolTable ;
    if (_temp_10919._isBuilt ()) {
      _temp_10919 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_10650->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (274)) ;
    }
    GGS_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (277)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (277)) ;
    { const GGS_ipic_instruction _var_12184 = var_cas_firstInstruction ; // CAST instruction
      if (_var_12184.getPtr () != NULL) {
        macroValidPointer (_var_12184.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_12184.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_12184.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, operand_10650->mInstructionLocation, operand_10650->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (285)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (285)), operand_10650->mIncrement, operand_10650->m_W_isDestination, operand_10650->mBranchIfZero, operand_10650->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (281)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
          var_cas_ioListFileContents.writeString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (294))) ;
          var_cas_ioListFileContents.writeString (": label of ") ;
          var_cas_ioListFileContents.writeString ("JUMP ") ;
          if ((operand_10650->mIncrement).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString ("INCF ") ;
          }else{
            var_cas_ioListFileContents.writeString ("DECF ") ;
          }
          var_cas_ioListFileContents._dotAssign_operation (operand_10650->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (301))) ;
          if ((operand_10650->m_W_isDestination).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString (", W ") ;
          }
          if ((operand_10650->mBranchIfZero).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString ("Z") ;
          }else{
            var_cas_ioListFileContents.writeString ("NZ") ;
          }
          var_cas_ioListFileContents.writeString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc> gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc
findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.count ()) {
    result = gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (superClassPtr) ;
      gDispatchTableFor__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_registerComparisonCondition.optimizeCMP'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__optimizeCMP (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_12338,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12338 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_12607 = var_cas_inSymbolTable ;
    if (_temp_12607._isBuilt ()) {
      _temp_12607 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12338->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (325)) ;
    }
    GGS_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (328)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (328)) ;
    { const GGS_ipic_instruction _var_13564 = var_cas_firstInstruction ; // CAST instruction
      if (_var_13564.getPtr () != NULL) {
        macroValidPointer (_var_13564.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_13564.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_13564.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, operand_12338->mInstructionLocation, operand_12338->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (336)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (336)), operand_12338->mComparison, operand_12338->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (332)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
          var_cas_ioListFileContents.writeString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (343))) ;
          var_cas_ioListFileContents.writeString (": label of ") ;
          var_cas_ioListFileContents.writeString ("JUMP ") ;
          var_cas_ioListFileContents._dotAssign_operation (operand_12338->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (345))) ;
          var_cas_ioListFileContents.writeString (" ") ;
          var_cas_ioListFileContents._dotAssign_operation (operand_12338->mComparison.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (346))) ;
          var_cas_ioListFileContents.writeString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_registerComparisonCondition.optimizeCMP'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP> gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP
findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.count ()) {
    result = gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (superClassPtr) ;
      gDispatchTableFor__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_BitTestSkip.optimizeBitTestSkip'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BitTestSkip__optimizeBitTestSkip (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BitTestSkip * operand_13722,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13722 != NULL) {
    GGS_string var_cas_jumpLabel ;
    var_cas_jumpLabel = GGS_string (true, "") ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true, false) ;
    { const GGS_ipic_instruction _var_14153 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (363)) COMMA_SOURCE_FILE_AT_LINE (363)) ; // CAST instruction
      if (_var_14153.getPtr () != NULL) {
        macroValidPointer (_var_14153.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_14153.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_14153.getPtr ()) ;
          var_cas_jumpLabel = var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (365)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (365)) ;
          var_cas_ok = GGS_bool (true, true) ;
        }else{
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      { const GGS_ipic_instruction _var_14366 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (371)) COMMA_SOURCE_FILE_AT_LINE (371)) ; // CAST instruction
        if (_var_14366.getPtr () != NULL) {
          macroValidPointer (_var_14366.getPtr ()) ;
          if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_14366.getPtr ()) != NULL) {
          }else{
            var_cas_ok = GGS_bool (true, false) ;
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      GGS_ipic_instruction  var_cas_thirdInstruction ;
      var_cas_thirdInstruction = GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
      GGS_stringset  var_cas_reachedLabelSet ;
      GGS_ipic_instruction  automatic_var_1 ;
      ::routine_findFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (381)),  var_cas_ioGeneratedInstructionList,  automatic_var_1,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (381)) ;
      var_cas_ok = var_cas_reachedLabelSet.reader_hasKey (_inLexique, var_cas_jumpLabel COMMA_SOURCE_FILE_AT_LINE (382)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_instruction_BitTestSkip ::constructor_new (_inLexique, operand_13722->mInstructionLocation, (operand_13722->mSkipIfSet)._operator_not (), operand_13722->mRegisterDescription, operand_13722->mBitNumber COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (387)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (398)) COMMA_SOURCE_FILE_AT_LINE (398)), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (399)) COMMA_SOURCE_FILE_AT_LINE (397)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (402)) ;
      var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
      var_cas_ioListFileContents.writeString ("  lines ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (409))) ;
      var_cas_ioListFileContents.writeString (" to ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (409)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (409))) ;
      var_cas_ioListFileContents.writeString (" bit test skip, following by a JUMP skipping next instruction, is complemented\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction_BitTestSkip.optimizeBitTestSkip'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip> gDispatchTableFor__ipic_instruction_BitTestSkip__optimizeBitTestSkip ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip (typeCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip
findCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction_BitTestSkip__optimizeBitTestSkip.count ()) {
    result = gDispatchTableFor__ipic_instruction_BitTestSkip__optimizeBitTestSkip (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip (superClassPtr) ;
      gDispatchTableFor__ipic_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "performOptimizations"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performOptimizations (C_Compiler & _inLexique,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performOptimizations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (425))) ;
  var_cas_ioListFileContents.writeString ("\n") ;
  var_cas_ioListFileContents.writeString ("*") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "CODE OPTIMIZATION").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (426))) ;
  var_cas_ioListFileContents.writeString ("*\n") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (427))) ;
  var_cas_ioListFileContents.writeString ("\n"
    "\n") ;
  GGS_symbolTableForOptimizations  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTableForOptimizations ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_lineIndex (true, 0) ;
    GGS_ipic_instructionList::cEnumerator enumerator_16659 (var_cas_ioGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_16659 = NULL ;
    while (((operand_16659 = enumerator_16659.nextObject ()))) {
      macroValidPointer (operand_16659) ;
      const GGS_ipic_instruction  _temp_16702 = operand_16659->mInstruction ;
      if (_temp_16702._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__defineLabel _method = findCategoryMethod__ipic_instruction__defineLabel (_temp_16702._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_16702 (HERE), var_cas_symbolTable, var_cas_lineIndex COMMA_SOURCE_FILE_AT_LINE (431)) ;
        }
      }
      var_cas_lineIndex.mValue ++ ;
    }
  }
  GGS_bool var_cas_optimizationsDone ;
  var_cas_optimizationsDone = GGS_bool (true, true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (true, 0U) ;
  GGS_uint _variant_20712 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (436)) ;
  GGS_bool _condition_20712 (_variant_20712._isBuilt (), true) ;
  while (_condition_20712.isBuiltAndTrue ()) {
    _condition_20712 = var_cas_optimizationsDone ;
    if (_condition_20712.isBuiltAndTrue ()) {
      if (_variant_20712.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (508)) ;
        _condition_20712 = GGS_bool (true, false) ;
      }else{
        _variant_20712._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_optimizationsDone = GGS_bool (true, false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (440)) ;
        var_cas_ioListFileContents.writeString ("Pass ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_iteration.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (441))) ;
        var_cas_ioListFileContents.writeString (":\n") ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic_instructionList::cEnumerator enumerator_17122 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_17122 = NULL ;
          while (((operand_17122 = enumerator_17122.nextObject ()))) {
            macroValidPointer (operand_17122) ;
            { const GGS_ipic_instruction _var_18587 = operand_17122->mInstruction ; // CAST instruction
              if (_var_18587.getPtr () != NULL) {
                macroValidPointer (_var_18587.getPtr ()) ;
                if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_JUMP var_cas_ipic_JUMP (_var_18587.getPtr ()) ;
                  const GGS_ipic_JUMP  _temp_17226 = var_cas_ipic_JUMP ;
                  if (_temp_17226._isBuilt ()) {
                    typeCategoryMethod__ipic_JUMP__optimizeJUMP _method = findCategoryMethod__ipic_JUMP__optimizeJUMP (_temp_17226._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17226 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (446)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_JSR) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_JSR var_cas_ipic_JSR (_var_18587.getPtr ()) ;
                  const GGS_ipic_JSR  _temp_17383 = var_cas_ipic_JSR ;
                  if (_temp_17383._isBuilt ()) {
                    typeCategoryMethod__ipic_JSR__optimizeJSR _method = findCategoryMethod__ipic_JSR__optimizeJSR (_temp_17383._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17383 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (448)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_instruction_literalOperation) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_instruction_literalOperation var_cas_ipic_literal (_var_18587.getPtr ()) ;
                  const GGS_ipic_instruction_literalOperation  _temp_17562 = var_cas_ipic_literal ;
                  if (_temp_17562._isBuilt ()) {
                    typeCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW _method = findCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW (_temp_17562._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17562 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (450)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_instruction_conditionalBranch) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_instruction_conditionalBranch var_cas_ipic_cc (_var_18587.getPtr ()) ;
                  const GGS_ipic_instruction_conditionalBranch  _temp_17730 = var_cas_ipic_cc ;
                  if (_temp_17730._isBuilt ()) {
                    typeCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC _method = findCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC (_temp_17730._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17730 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (452)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_jump_test_register) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_jump_test_register var_cas_ipic_testReg (_var_18587.getPtr ()) ;
                  const GGS_ipic_jump_test_register  _temp_17914 = var_cas_ipic_testReg ;
                  if (_temp_17914._isBuilt ()) {
                    typeCategoryMethod__ipic_jump_test_register__optimizeTestReg _method = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (_temp_17914._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17914 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (454)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_incDecRegisterInCondition) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_incDecRegisterInCondition var_cas_ipic_decInc (_var_18587.getPtr ()) ;
                  const GGS_ipic_incDecRegisterInCondition  _temp_18106 = var_cas_ipic_decInc ;
                  if (_temp_18106._isBuilt ()) {
                    typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc _method = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (_temp_18106._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_18106 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (456)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_registerComparisonCondition) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_registerComparisonCondition var_cas_ipic_CMP (_var_18587.getPtr ()) ;
                  const GGS_ipic_registerComparisonCondition  _temp_18287 = var_cas_ipic_CMP ;
                  if (_temp_18287._isBuilt ()) {
                    typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP _method = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (_temp_18287._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_18287 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (458)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_instruction_BitTestSkip) == typeid (* (_var_18587.getPtr ()))) {
                  const GGS_ipic_instruction_BitTestSkip var_cas_ipic_bitTestSkip (_var_18587.getPtr ()) ;
                  const GGS_ipic_instruction_BitTestSkip  _temp_18488 = var_cas_ipic_bitTestSkip ;
                  if (_temp_18488._isBuilt ()) {
                    typeCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip _method = findCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip (_temp_18488._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_18488 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (460)) ;
                    }
                  }
                }else{
                }
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        GGS_stringset  var_cas_referencedLabels ;
        var_cas_referencedLabels = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_ipic_instructionList::cEnumerator enumerator_18732 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_18732 = NULL ;
          while (((operand_18732 = enumerator_18732.nextObject ()))) {
            macroValidPointer (operand_18732) ;
            const GGS_ipic_instruction  _temp_18776 = operand_18732->mInstruction ;
            if (_temp_18776._isBuilt ()) {
              _temp_18776 (HERE)->method_enterReferencedLabel (_inLexique, var_cas_referencedLabels COMMA_SOURCE_FILE_AT_LINE (467)) ;
            }
          }
        }
        {
          GGS_symbolTableForOptimizations::cEnumerator enumerator_18840 (var_cas_symbolTable, true) ;
          const GGS_symbolTableForOptimizations::cElement * operand_18840 = NULL ;
          while (((operand_18840 = enumerator_18840.nextObject ()))) {
            macroValidPointer (operand_18840) ;
            if (((var_cas_referencedLabels.reader_hasKey (_inLexique, operand_18840->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (470)) COMMA_SOURCE_FILE_AT_LINE (470)))._operator_not ()).isBuiltAndTrue ()) {
              GGS_uint  var_cas_definitionLine ;
              const GGS_symbolTableForOptimizations  _temp_18955 = var_cas_symbolTable ;
              if (_temp_18955._isBuilt ()) {
                _temp_18955 (HERE)->method_searchKey (_inLexique, operand_18840->mKey, var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (471)) ;
              }
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_definitionLine.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (472))) ;
              var_cas_ioListFileContents.writeString (": unreferenced label '") ;
              var_cas_ioListFileContents._dotAssign_operation (operand_18840->mKey) ;
              var_cas_ioListFileContents.writeString ("' is deleted\n") ;
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (473)) ;
              GGS_uint  automatic_var_2 ;
              var_cas_symbolTable.modifier_removeKey (_inLexique, operand_18840->mKey, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (474)) ;
            }
          }
        }
        GGS_bool var_cas_reachable ;
        var_cas_reachable = GGS_bool (true, true) ;
        GGS_bool var_cas_skippingInstruction ;
        var_cas_skippingInstruction = GGS_bool (true, false) ;
        GGS_bool var_cas_previousWasSkippingInstruction ;
        var_cas_previousWasSkippingInstruction = GGS_bool (true, false) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic_instructionList::cEnumerator enumerator_19466 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_19466 = NULL ;
          while (((operand_19466 = enumerator_19466.nextObject ()))) {
            macroValidPointer (operand_19466) ;
            if (((var_cas_reachable)._operator_or (var_cas_previousWasSkippingInstruction)).isBuiltAndTrue ()) {
              const GGS_ipic_instruction  _temp_19582 = operand_19466->mInstruction ;
              if (_temp_19582._isBuilt ()) {
                _temp_19582 (HERE)->method_nextInstructionIsReachable (_inLexique, var_cas_reachable COMMA_SOURCE_FILE_AT_LINE (483)) ;
              }
              var_cas_previousWasSkippingInstruction = var_cas_skippingInstruction ;
              const GGS_ipic_instruction  _temp_19706 = operand_19466->mInstruction ;
              if (_temp_19706._isBuilt ()) {
                _temp_19706 (HERE)->method_isSkippingInstruction (_inLexique, var_cas_skippingInstruction COMMA_SOURCE_FILE_AT_LINE (485)) ;
              }
            }else{
              GGS_bool var_cas_isLABELorORG ;
              const GGS_ipic_instruction  _temp_19799 = operand_19466->mInstruction ;
              if (_temp_19799._isBuilt ()) {
                _temp_19799 (HERE)->method_isLABELorORG (_inLexique, var_cas_isLABELorORG COMMA_SOURCE_FILE_AT_LINE (487)) ;
              }
              GGS_bool var_cas_isNULL ;
              const GGS_ipic_instruction  _temp_19861 = operand_19466->mInstruction ;
              if (_temp_19861._isBuilt ()) {
                _temp_19861 (HERE)->method_isNULL (_inLexique, var_cas_isNULL COMMA_SOURCE_FILE_AT_LINE (488)) ;
              }
              if ((((var_cas_isLABELorORG)._operator_not ())._operator_and ((var_cas_isNULL)._operator_not ())).isBuiltAndTrue ()) {
                var_cas_ioListFileContents.writeString ("  line ") ;
                var_cas_ioListFileContents._dotAssign_operation (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (490))) ;
                var_cas_ioListFileContents.writeString (": unreachable instruction is deleted\n") ;
                var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_idx COMMA_SOURCE_FILE_AT_LINE (491)) ;
              }else if ((var_cas_isLABELorORG).isBuiltAndTrue ()) {
                var_cas_reachable = GGS_bool (true, true) ;
                var_cas_previousWasSkippingInstruction = GGS_bool (true, false) ;
                var_cas_skippingInstruction = GGS_bool (true, false) ;
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_optimizationsDone)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("  No optimization\n"
            "\n") ;
          GGS_uint  var_cas_currentAddress ;
          var_cas_currentAddress = GGS_uint (true, 0U) ;
          {
            GGS_ipic_instructionList::cEnumerator enumerator_20517 (var_cas_ioGeneratedInstructionList, true) ;
            const GGS_ipic_instructionList::cElement * operand_20517 = NULL ;
            while (((operand_20517 = enumerator_20517.nextObject ()))) {
              macroValidPointer (operand_20517) ;
              const GGS_ipic_instruction  _temp_20560 = operand_20517->mInstruction ;
              if (_temp_20560._isBuilt ()) {
                _temp_20560 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (504)) ;
              }
            }
          }
          var_cas_ioListFileContents.writeString ("Minimum code size: ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (506))) ;
          var_cas_ioListFileContents.writeString (" bytes\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performOptimizations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_optimizations (void) {
 enterCategoryMethod__ipic_instruction__defineLabel (category_method__ipic_instruction__defineLabel, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabel ((typeCategoryMethod__ipic_instruction__defineLabel) category_method__ipic_pseudo_LABEL__defineLabel, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_JUMP__optimizeJUMP (category_method__ipic_JUMP__optimizeJUMP, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_JSR__optimizeJSR (category_method__ipic_JSR__optimizeJSR, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction_literalOperation__optimizeMOVLW (category_method__ipic_instruction_literalOperation__optimizeMOVLW, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction_conditionalBranch__optimizeBCC (category_method__ipic_instruction_conditionalBranch__optimizeBCC, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (category_method__ipic_jump_test_register__optimizeTestReg, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (category_method__ipic_registerComparisonCondition__optimizeCMP, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction_BitTestSkip__optimizeBitTestSkip (category_method__ipic_instruction_BitTestSkip__optimizeBitTestSkip, gClassInfoFor__ipic_instruction_BitTestSkip.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_optimizations (prologueRoutineFor_ipic18_optimizations,
                                   NULL) ;

//---------------------------------------------------------------------------*

