//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'ipic18_optimizations.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 9th, 2009, at 22h45'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic18_optimizations.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_optimizations.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@ipic18_instruction.defineLabel'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction__defineLabel (C_Compiler &,
                                const cPtr_ipic18_instruction * operand_575,
                                GGS_symbolTableForOptimizations  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inLineIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_575 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@ipic18_instruction.defineLabel'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction__defineLabel> gDispatchTableForMethod__ipic18_instruction__defineLabel ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction__defineLabel (typeCategoryMethod__ipic18_instruction__defineLabel inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction__defineLabel.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction__defineLabel
findCategoryMethod__ipic18_instruction__defineLabel (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction__defineLabel result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction__defineLabel.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction__defineLabel (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction__defineLabel (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction__defineLabel.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_pseudo_LABEL.defineLabel'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabel (C_Compiler & inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_808,
                                GGS_symbolTableForOptimizations  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inLineIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_808 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_808->mLabel, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "findFirstInstructionFromAddress"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionFromAddress (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic18_instruction  & var_cas_outFirstInstruction COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (false) ;
  GGS_uint _variant_1756 = var_cas_inGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
  GGS_bool _condition_1756 (_variant_1756.isBuilt (), true) ;
  while (_condition_1756.isBuiltAndTrue ()) {
    _condition_1756 = ((var_cas_currentAddress).operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (40)))).operator_and ((var_cas_found).operator_not ()) ;
    if (_condition_1756.isBuiltAndTrue ()) {
      if (_variant_1756.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (49)) ;
        _condition_1756 = GGS_bool (false) ;
      }else{
        _variant_1756.decrement_operation (inLexique COMMA_HERE) ;
        { const GGS_ipic18_instruction _var_1743 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (42)) ; // CAST instruction
          if (_var_1743.getPtr () != NULL) {
            macroValidPointer (_var_1743.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_1743.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_1743.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true) ;
            }else{
              var_cas_currentAddress.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "findFirstInstructionOrLabelFromAddress"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findFirstInstructionOrLabelFromAddress (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_ipic18_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_ipic18_instruction  & var_cas_outFirstInstruction,
                                GGS_stringset  & var_cas_outReachedLabelSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findFirstInstructionOrLabelFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outReachedLabelSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (false) ;
  GGS_uint _variant_2820 = var_cas_inGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_bool _condition_2820 (_variant_2820.isBuilt (), true) ;
  while (_condition_2820.isBuiltAndTrue ()) {
    _condition_2820 = ((var_cas_currentAddress).operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (67)))).operator_and ((var_cas_found).operator_not ()) ;
    if (_condition_2820.isBuiltAndTrue ()) {
      if (_variant_2820.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (80)) ;
        _condition_2820 = GGS_bool (false) ;
      }else{
        _variant_2820.decrement_operation (inLexique COMMA_HERE) ;
        { const GGS_ipic18_instruction _var_2807 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (69)) ; // CAST instruction
          if (_var_2807.getPtr () != NULL) {
            macroValidPointer (_var_2807.getPtr ()) ;
            if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_2807.getPtr ()) != NULL) {
              const GGS_ipic_actualInstruction var_cas_instr (_var_2807.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true) ;
            }else if (typeid (cPtr_ipic_pseudo_LABEL) == typeid (* (_var_2807.getPtr ()))) {
              const GGS_ipic_pseudo_LABEL var_cas_instr (_var_2807.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_outReachedLabelSet._addAssign_operation (var_cas_instr.reader_mLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (75)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
              var_cas_currentAddress.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
            }else{
              var_cas_currentAddress.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findFirstInstructionOrLabelFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@ipic_JUMP.optimizeJUMP'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__optimizeJUMP (C_Compiler & inLexique,
                                const cPtr_ipic_JUMP * operand_3269,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3269 != NULL) {
    GGS_stringset  var_cas_reachedLabelSet ;
    GGS_ipic18_instruction  automatic_var_0 ;
    ::routine_findFirstInstructionOrLabelFromAddress (inLexique,  var_cas_inLineIndex.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_ioGeneratedInstructionList,  automatic_var_0,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (98)) ;
    if ((var_cas_reachedLabelSet.reader_hasKey (inLexique, operand_3269->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (101)) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
      var_cas_ioListFileContents.appendCString (": JUMP branching to next instruction deleted\n") ;
    }else{
      GGS_uint  var_cas_line ;
      const GGS_symbolTableForOptimizations  temp_4043 = var_cas_inSymbolTable ;
      if (temp_4043.isBuilt ()) {
        temp_4043 (HERE)->method_searchKey (inLexique, operand_3269->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
      GGS_ipic18_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_line.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (108)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (108)) ;
      { const GGS_ipic18_instruction _var_5556 = var_cas_firstInstruction ; // CAST instruction
        if (_var_5556.getPtr () != NULL) {
          macroValidPointer (_var_5556.getPtr ()) ;
          if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_5556.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, operand_3269->mInstructionLocation COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (112)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
            var_cas_ioListFileContents.appendCString (": JUMP branching to RETURN replaced by RETURN\n") ;
          }else if (typeid (cPtr_ipic18_instruction_literalOperation) == typeid (* (_var_5556.getPtr ()))) {
            const GGS_ipic18_instruction_literalOperation var_cas_literalOp (_var_5556.getPtr ()) ;
            if (((var_cas_literalOp.reader_mLiteralInstruction (inLexique COMMA_SOURCE_FILE_AT_LINE (119))).operator_isEqual (GGS_literal_instruction_opcode::constructor_RETLW (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_literalOp, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (120)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true) ;
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125))) ;
              var_cas_ioListFileContents.appendCString (": JUMP branching to RETLW replaced by RETLW\n") ;
            }
          }else if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_5556.getPtr ()))) {
            const GGS_ipic_JUMP var_cas_jump (_var_5556.getPtr ()) ;
            if (((operand_3269->mTargetLabel).operator_isNotEqual (var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (128)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_JUMP ::constructor_new (inLexique, operand_3269->mInstructionLocation, var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (130)), operand_3269->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (129)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true) ;
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
              var_cas_ioListFileContents.appendCString (": JUMP branching to JUMP replaced by JUMP\n") ;
            }
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@ipic_JUMP.optimizeJUMP'         *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JUMP__optimizeJUMP> gDispatchTableForMethod__ipic_JUMP__optimizeJUMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JUMP__optimizeJUMP (typeCategoryMethod__ipic_JUMP__optimizeJUMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JUMP__optimizeJUMP
findCategoryMethod__ipic_JUMP__optimizeJUMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JUMP__optimizeJUMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic_JUMP__optimizeJUMP.count ()) {
    result = gDispatchTableForMethod__ipic_JUMP__optimizeJUMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JUMP__optimizeJUMP (superClassPtr) ;
      gDispatchTableForMethod__ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@ipic_JSR.optimizeJSR'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__optimizeJSR (C_Compiler & inLexique,
                                const cPtr_ipic_JSR * operand_5703,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5703 != NULL) {
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_inLineIndex.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (151)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (151)) ;
    { const GGS_ipic18_instruction _var_6442 = var_cas_firstInstruction ; // CAST instruction
      if (_var_6442.getPtr () != NULL) {
        macroValidPointer (_var_6442.getPtr ()) ;
        if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_6442.getPtr ()))) {
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_JUMP ::constructor_new (inLexique, operand_5703->mInstructionLocation, operand_5703->mTargetLabel, operand_5703->mKind COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (155)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
          var_cas_ioListFileContents.appendCString (": JSR followed by RETURN replaced by JUMP\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Virtual Table for category method '@ipic_JSR.optimizeJSR'          *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_JSR__optimizeJSR> gDispatchTableForMethod__ipic_JSR__optimizeJSR ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_JSR__optimizeJSR (typeCategoryMethod__ipic_JSR__optimizeJSR inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_JSR__optimizeJSR
findCategoryMethod__ipic_JSR__optimizeJSR (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_JSR__optimizeJSR result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic_JSR__optimizeJSR.count ()) {
    result = gDispatchTableForMethod__ipic_JSR__optimizeJSR (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_JSR__optimizeJSR (superClassPtr) ;
      gDispatchTableForMethod__ipic_JSR__optimizeJSR.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_literalOperation.optimizeMOVLW'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_literalOperation__optimizeMOVLW (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_literalOperation * operand_6601,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6601 != NULL) {
    if (((operand_6601->mLiteralInstruction).operator_isEqual (GGS_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      GGS_ipic18_instruction  var_cas_firstInstruction ;
      ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_inLineIndex.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (176)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (176)) ;
      { const GGS_ipic18_instruction _var_7497 = var_cas_firstInstruction ; // CAST instruction
        if (_var_7497.getPtr () != NULL) {
          macroValidPointer (_var_7497.getPtr ()) ;
          if (typeid (cPtr_ipic18_instruction_RETURN) == typeid (* (_var_7497.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, operand_6601->mInstructionLocation, GGS_literal_instruction_opcode::constructor_RETLW (inLexique COMMA_HERE), operand_6601->mLiteralValue COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (180)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
            var_cas_ioListFileContents.appendCString (": MOVLW followed by RETURN replaced by RETLW\n") ;
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_literalOperation.optimizeMOVLW'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW> gDispatchTableForMethod__ipic18_instruction_literalOperation__optimizeMOVLW ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW
findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction_literalOperation__optimizeMOVLW.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction_literalOperation__optimizeMOVLW (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic18_instruction_conditionalBranch.optimizeBCC'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_conditionalBranch__optimizeBCC (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_conditionalBranch * operand_7666,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7666 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  temp_7937 = var_cas_inSymbolTable ;
    if (temp_7937.isBuilt ()) {
      temp_7937 (HERE)->method_searchKey (inLexique, operand_7666->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_line.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (204)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (204)) ;
    { const GGS_ipic18_instruction _var_8753 = var_cas_firstInstruction ; // CAST instruction
      if (_var_8753.getPtr () != NULL) {
        macroValidPointer (_var_8753.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_8753.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_8753.getPtr ()) ;
          if (((operand_7666->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).operator_isNotEqual (var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_7666->mInstructionLocation, operand_7666->mBranchMode, operand_7666->mConditionalBranch, var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (209)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
            var_cas_ioListFileContents.appendCString (": label of JUMP ") ;
            var_cas_ioListFileContents.dotAssign_operation (operand_7666->mConditionalBranch.reader_condition (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
            var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_conditionalBranch.optimizeBCC'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC> gDispatchTableForMethod__ipic18_instruction_conditionalBranch__optimizeBCC ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC
findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction_conditionalBranch__optimizeBCC.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction_conditionalBranch__optimizeBCC (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction_conditionalBranch__optimizeBCC.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_jump_test_register.optimizeTestReg'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__optimizeTestReg (C_Compiler & inLexique,
                                const cPtr_ipic_jump_test_register * operand_8902,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8902 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  temp_9173 = var_cas_inSymbolTable ;
    if (temp_9173.isBuilt ()) {
      temp_9173 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_8902->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (230)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_line.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (233)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (233)) ;
    { const GGS_ipic18_instruction _var_10175 = var_cas_firstInstruction ; // CAST instruction
      if (_var_10175.getPtr () != NULL) {
        macroValidPointer (_var_10175.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_10175.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_10175.getPtr ()) ;
          if (((operand_8902->mTargetLabel).operator_isNotEqual (var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237)))).isBuiltAndTrue ()) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_jump_test_register ::constructor_new (inLexique, operand_8902->mInstructionLocation, operand_8902->mRegisterDescription, var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (239)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), operand_8902->mBranchIfZero, operand_8902->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (238)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true) ;
            var_cas_ioListFileContents.appendCString ("  line ") ;
            var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243))) ;
            var_cas_ioListFileContents.appendCString (": label of JUMP ") ;
            var_cas_ioListFileContents.dotAssign_operation (operand_8902->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (243))) ;
            if ((operand_8902->mBranchIfZero).isBuiltAndTrue ()) {
              var_cas_ioListFileContents.appendCString ("Z") ;
            }else{
              var_cas_ioListFileContents.appendCString ("NZ") ;
            }
            var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
          }
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_jump_test_register.optimizeTestReg'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_jump_test_register__optimizeTestReg> gDispatchTableForMethod__ipic_jump_test_register__optimizeTestReg ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (typeCategoryMethod__ipic_jump_test_register__optimizeTestReg inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_jump_test_register__optimizeTestReg
findCategoryMethod__ipic_jump_test_register__optimizeTestReg (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_jump_test_register__optimizeTestReg result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic_jump_test_register__optimizeTestReg.count ()) {
    result = gDispatchTableForMethod__ipic_jump_test_register__optimizeTestReg (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (superClassPtr) ;
      gDispatchTableForMethod__ipic_jump_test_register__optimizeTestReg.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc (C_Compiler & inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_10334,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10334 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  temp_10605 = var_cas_inSymbolTable ;
    if (temp_10605.isBuilt ()) {
      temp_10605 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_10334->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (265)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_line.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (268)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (268)) ;
    { const GGS_ipic18_instruction _var_11872 = var_cas_firstInstruction ; // CAST instruction
      if (_var_11872.getPtr () != NULL) {
        macroValidPointer (_var_11872.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_11872.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_11872.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_incDecRegisterInCondition ::constructor_new (inLexique, operand_10334->mInstructionLocation, operand_10334->mRegisterDescription, var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276)), operand_10334->mIncrement, operand_10334->m_W_isDestination, operand_10334->mBranchIfZero, operand_10334->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (272)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (285))) ;
          var_cas_ioListFileContents.appendCString (": label of ") ;
          var_cas_ioListFileContents.appendCString ("JUMP ") ;
          if ((operand_10334->mIncrement).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString ("INCF ") ;
          }else{
            var_cas_ioListFileContents.appendCString ("DECF ") ;
          }
          var_cas_ioListFileContents.dotAssign_operation (operand_10334->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (292))) ;
          if ((operand_10334->m_W_isDestination).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString (", W ") ;
          }
          if ((operand_10334->mBranchIfZero).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.appendCString ("Z") ;
          }else{
            var_cas_ioListFileContents.appendCString ("NZ") ;
          }
          var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_incDecRegisterInCondition.optimizeTestDecInc'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc> gDispatchTableForMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc
findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc.count ()) {
    result = gDispatchTableForMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (superClassPtr) ;
      gDispatchTableForMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_registerComparisonCondition.optimizeCMP'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__optimizeCMP (C_Compiler & inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_12026,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12026 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  temp_12297 = var_cas_inSymbolTable ;
    if (temp_12297.isBuilt ()) {
      temp_12297 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12026->mTargetLabel, GGS_location (inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (316)) ;
    }
    GGS_ipic18_instruction  var_cas_firstInstruction ;
    ::routine_findFirstInstructionFromAddress (inLexique,  var_cas_line.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (319)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (319)) ;
    { const GGS_ipic18_instruction _var_13256 = var_cas_firstInstruction ; // CAST instruction
      if (_var_13256.getPtr () != NULL) {
        macroValidPointer (_var_13256.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_13256.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_13256.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_registerComparisonCondition ::constructor_new (inLexique, operand_12026->mInstructionLocation, operand_12026->mRegisterDescription, var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327)), operand_12026->mComparison, operand_12026->mUsesBra COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (323)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true) ;
          var_cas_ioListFileContents.appendCString ("  line ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (334))) ;
          var_cas_ioListFileContents.appendCString (": label of ") ;
          var_cas_ioListFileContents.appendCString ("JUMP ") ;
          var_cas_ioListFileContents.dotAssign_operation (operand_12026->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (336))) ;
          var_cas_ioListFileContents.appendCString (" ") ;
          var_cas_ioListFileContents.dotAssign_operation (operand_12026->mComparison.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (337))) ;
          var_cas_ioListFileContents.appendCString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_registerComparisonCondition.optimizeCMP'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP> gDispatchTableForMethod__ipic_registerComparisonCondition__optimizeCMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP
findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic_registerComparisonCondition__optimizeCMP.count ()) {
    result = gDispatchTableForMethod__ipic_registerComparisonCondition__optimizeCMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (superClassPtr) ;
      gDispatchTableForMethod__ipic_registerComparisonCondition__optimizeCMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic18_instruction_BitTestSkip.optimizeBitTestSkip'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (C_Compiler & inLexique,
                                const cPtr_ipic18_instruction_BitTestSkip * operand_13416,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13416 != NULL) {
    GGS_string var_cas_jumpLabel ;
    var_cas_jumpLabel = GGS_string ("") ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (false) ;
    { const GGS_ipic18_instruction _var_13849 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (inLexique, var_cas_inLineIndex.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_SOURCE_FILE_AT_LINE (354)) ; // CAST instruction
      if (_var_13849.getPtr () != NULL) {
        macroValidPointer (_var_13849.getPtr ()) ;
        if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_13849.getPtr ()))) {
          const GGS_ipic_JUMP var_cas_jump (_var_13849.getPtr ()) ;
          var_cas_jumpLabel = var_cas_jump.reader_mTargetLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356)) ;
          var_cas_ok = GGS_bool (true) ;
        }else{
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      { const GGS_ipic18_instruction _var_14196 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (inLexique, var_cas_inLineIndex.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_SOURCE_FILE_AT_LINE (362)) ; // CAST instruction
        if (_var_14196.getPtr () != NULL) {
          macroValidPointer (_var_14196.getPtr ()) ;
          if (dynamic_cast <cPtr_ipic_actualInstruction *> (_var_14196.getPtr ()) != NULL) {
            const GGS_ipic_actualInstruction var_cas_instruction (_var_14196.getPtr ()) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_ipic_actualInstruction  temp_14100 = var_cas_instruction ;
            if (temp_14100.isBuilt ()) {
              temp_14100 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (364)) ;
            }
            var_cas_ok = (var_cas_instructionLength).operator_isEqual (GGS_uint (1U)) ;
          }else{
            var_cas_ok = GGS_bool (false) ;
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      GGS_ipic18_instruction  var_cas_thirdInstruction ;
      var_cas_thirdInstruction = GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE) ;
      GGS_stringset  var_cas_reachedLabelSet ;
      GGS_ipic18_instruction  automatic_var_1 ;
      ::routine_findFirstInstructionOrLabelFromAddress (inLexique,  var_cas_inLineIndex.add_operation (inLexique, GGS_uint (3U) COMMA_SOURCE_FILE_AT_LINE (374)),  var_cas_ioGeneratedInstructionList,  automatic_var_1,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (374)) ;
      var_cas_ok = var_cas_reachedLabelSet.reader_hasKey (inLexique, var_cas_jumpLabel COMMA_SOURCE_FILE_AT_LINE (375)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, operand_13416->mInstructionLocation, (operand_13416->mSkipIfSet).operator_not (), operand_13416->mRegisterDescription, operand_13416->mBitNumber COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (380)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (inLexique, var_cas_inLineIndex.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (391)) COMMA_SOURCE_FILE_AT_LINE (391)), var_cas_inLineIndex.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (392)) COMMA_SOURCE_FILE_AT_LINE (390)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE), var_cas_inLineIndex.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_SOURCE_FILE_AT_LINE (395)) ;
      var_cas_ioOptimizationsDone = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  lines ") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
      var_cas_ioListFileContents.appendCString (" to ") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_inLineIndex.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (402)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
      var_cas_ioListFileContents.appendCString (" bit test skip, following by a JUMP skipping next instruction, is complemented\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic18_instruction_BitTestSkip.optimizeBitTestSkip'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip> gDispatchTableForMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip
findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.count ()) {
    result = gDispatchTableForMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (superClassPtr) ;
      gDispatchTableForMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "performOptimizations"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performOptimizations (C_Compiler & inLexique,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performOptimizations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (482))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("CODE OPTIMIZATION").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (483))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (484))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  GGS_symbolTableForOptimizations  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTableForOptimizations ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_lineIndex (true, 0) ;
    GGS_ipic18_instructionList::cEnumerator enumerator_18831 (var_cas_ioGeneratedInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_18831 = NULL ;
    while (((operand_18831 = enumerator_18831.nextObject ()))) {
      macroValidPointer (operand_18831) ;
      const GGS_ipic18_instruction  temp_18874 = operand_18831->mInstruction ;
      if (temp_18874.isBuilt ()) {
        typeCategoryMethod__ipic18_instruction__defineLabel method = findCategoryMethod__ipic18_instruction__defineLabel (temp_18874.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_18874 (HERE), var_cas_symbolTable, var_cas_lineIndex COMMA_SOURCE_FILE_AT_LINE (488)) ;
        }
      }
      var_cas_lineIndex.mValue ++ ;
    }
  }
  GGS_bool var_cas_optimizationsDone ;
  var_cas_optimizationsDone = GGS_bool (true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (0U) ;
  GGS_uint _variant_23093 = var_cas_ioGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
  GGS_bool _condition_23093 (_variant_23093.isBuilt (), true) ;
  while (_condition_23093.isBuiltAndTrue ()) {
    _condition_23093 = var_cas_optimizationsDone ;
    if (_condition_23093.isBuiltAndTrue ()) {
      if (_variant_23093.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (567)) ;
        _condition_23093 = GGS_bool (false) ;
      }else{
        _variant_23093.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_optimizationsDone = GGS_bool (false) ;
        var_cas_iteration.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (497)) ;
        var_cas_ioListFileContents.appendCString ("Pass ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_iteration.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (498))) ;
        var_cas_ioListFileContents.appendCString (":\n") ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic18_instructionList::cEnumerator enumerator_19294 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_19294 = NULL ;
          while (((operand_19294 = enumerator_19294.nextObject ()))) {
            macroValidPointer (operand_19294) ;
            { const GGS_ipic18_instruction _var_20968 = operand_19294->mInstruction ; // CAST instruction
              if (_var_20968.getPtr () != NULL) {
                macroValidPointer (_var_20968.getPtr ()) ;
                if (typeid (cPtr_ipic_JUMP) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic_JUMP var_cas_ipic_JUMP (_var_20968.getPtr ()) ;
                  const GGS_ipic_JUMP  temp_19398 = var_cas_ipic_JUMP ;
                  if (temp_19398.isBuilt ()) {
                    typeCategoryMethod__ipic_JUMP__optimizeJUMP method = findCategoryMethod__ipic_JUMP__optimizeJUMP (temp_19398.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_19398 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (503)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_JSR) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic_JSR var_cas_ipic_JSR (_var_20968.getPtr ()) ;
                  const GGS_ipic_JSR  temp_19555 = var_cas_ipic_JSR ;
                  if (temp_19555.isBuilt ()) {
                    typeCategoryMethod__ipic_JSR__optimizeJSR method = findCategoryMethod__ipic_JSR__optimizeJSR (temp_19555.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_19555 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (505)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_literalOperation) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic18_instruction_literalOperation var_cas_ipic_literal (_var_20968.getPtr ()) ;
                  const GGS_ipic18_instruction_literalOperation  temp_19736 = var_cas_ipic_literal ;
                  if (temp_19736.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW method = findCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (temp_19736.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_19736 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (507)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_conditionalBranch) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic18_instruction_conditionalBranch var_cas_ipic_cc (_var_20968.getPtr ()) ;
                  const GGS_ipic18_instruction_conditionalBranch  temp_19906 = var_cas_ipic_cc ;
                  if (temp_19906.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC method = findCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (temp_19906.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_19906 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (509)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_jump_test_register) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic_jump_test_register var_cas_ipic_testReg (_var_20968.getPtr ()) ;
                  const GGS_ipic_jump_test_register  temp_20090 = var_cas_ipic_testReg ;
                  if (temp_20090.isBuilt ()) {
                    typeCategoryMethod__ipic_jump_test_register__optimizeTestReg method = findCategoryMethod__ipic_jump_test_register__optimizeTestReg (temp_20090.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_20090 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (511)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_incDecRegisterInCondition) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic_incDecRegisterInCondition var_cas_ipic_decInc (_var_20968.getPtr ()) ;
                  const GGS_ipic_incDecRegisterInCondition  temp_20282 = var_cas_ipic_decInc ;
                  if (temp_20282.isBuilt ()) {
                    typeCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc method = findCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (temp_20282.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_20282 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (513)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic_registerComparisonCondition) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic_registerComparisonCondition var_cas_ipic_CMP (_var_20968.getPtr ()) ;
                  const GGS_ipic_registerComparisonCondition  temp_20463 = var_cas_ipic_CMP ;
                  if (temp_20463.isBuilt ()) {
                    typeCategoryMethod__ipic_registerComparisonCondition__optimizeCMP method = findCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (temp_20463.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_20463 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (515)) ;
                    }
                  }
                }else if (typeid (cPtr_ipic18_instruction_BitTestSkip) == typeid (* (_var_20968.getPtr ()))) {
                  const GGS_ipic18_instruction_BitTestSkip var_cas_ipic_bitTestSkip (_var_20968.getPtr ()) ;
                  const GGS_ipic18_instruction_BitTestSkip  temp_20666 = var_cas_ipic_bitTestSkip ;
                  if (temp_20666.isBuilt ()) {
                    typeCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip method = findCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (temp_20666.galgasObjectRunTimeInfo ()) ;
                    if (method != NULL) {
                      method (inLexique, temp_20666 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (517)) ;
                    }
                  }
                }else{
                }
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        GGS_stringset  var_cas_referencedLabels ;
        var_cas_referencedLabels = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_ipic18_instructionList::cEnumerator enumerator_21113 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_21113 = NULL ;
          while (((operand_21113 = enumerator_21113.nextObject ()))) {
            macroValidPointer (operand_21113) ;
            const GGS_ipic18_instruction  temp_21157 = operand_21113->mInstruction ;
            if (temp_21157.isBuilt ()) {
              temp_21157 (HERE)->method_enterReferencedLabel (inLexique, var_cas_referencedLabels COMMA_SOURCE_FILE_AT_LINE (526)) ;
            }
          }
        }
        {
          GGS_symbolTableForOptimizations::cEnumerator enumerator_21221 (var_cas_symbolTable, true) ;
          const GGS_symbolTableForOptimizations::cElement * operand_21221 = NULL ;
          while (((operand_21221 = enumerator_21221.nextObject ()))) {
            macroValidPointer (operand_21221) ;
            if (((var_cas_referencedLabels.reader_hasKey (inLexique, operand_21221->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (529)) COMMA_SOURCE_FILE_AT_LINE (529))).operator_not ()).isBuiltAndTrue ()) {
              GGS_uint  var_cas_definitionLine ;
              const GGS_symbolTableForOptimizations  temp_21336 = var_cas_symbolTable ;
              if (temp_21336.isBuilt ()) {
                temp_21336 (HERE)->method_searchKey (inLexique, operand_21221->mKey, var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (530)) ;
              }
              var_cas_ioListFileContents.appendCString ("  line ") ;
              var_cas_ioListFileContents.dotAssign_operation (var_cas_definitionLine.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531))) ;
              var_cas_ioListFileContents.appendCString (": unreferenced label '") ;
              var_cas_ioListFileContents.dotAssign_operation (operand_21221->mKey) ;
              var_cas_ioListFileContents.appendCString ("' is deleted\n") ;
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE), var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (532)) ;
              GGS_uint  automatic_var_2 ;
              var_cas_symbolTable.modifier_removeKey (inLexique, operand_21221->mKey, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (533)) ;
            }
          }
        }
        GGS_bool var_cas_reachable ;
        var_cas_reachable = GGS_bool (true) ;
        GGS_bool var_cas_skippingInstruction ;
        var_cas_skippingInstruction = GGS_bool (false) ;
        GGS_bool var_cas_previousWasSkippingInstruction ;
        var_cas_previousWasSkippingInstruction = GGS_bool (false) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic18_instructionList::cEnumerator enumerator_21847 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic18_instructionList::cElement * operand_21847 = NULL ;
          while (((operand_21847 = enumerator_21847.nextObject ()))) {
            macroValidPointer (operand_21847) ;
            if (((var_cas_reachable).operator_or (var_cas_previousWasSkippingInstruction)).isBuiltAndTrue ()) {
              const GGS_ipic18_instruction  temp_21963 = operand_21847->mInstruction ;
              if (temp_21963.isBuilt ()) {
                temp_21963 (HERE)->method_nextInstructionIsReachable (inLexique, var_cas_reachable COMMA_SOURCE_FILE_AT_LINE (542)) ;
              }
              var_cas_previousWasSkippingInstruction = var_cas_skippingInstruction ;
              const GGS_ipic18_instruction  temp_22087 = operand_21847->mInstruction ;
              if (temp_22087.isBuilt ()) {
                temp_22087 (HERE)->method_isSkippingInstruction (inLexique, var_cas_skippingInstruction COMMA_SOURCE_FILE_AT_LINE (544)) ;
              }
            }else{
              GGS_bool var_cas_isLABELorORG ;
              const GGS_ipic18_instruction  temp_22180 = operand_21847->mInstruction ;
              if (temp_22180.isBuilt ()) {
                temp_22180 (HERE)->method_isLABELorORG (inLexique, var_cas_isLABELorORG COMMA_SOURCE_FILE_AT_LINE (546)) ;
              }
              GGS_bool var_cas_isNULL ;
              const GGS_ipic18_instruction  temp_22242 = operand_21847->mInstruction ;
              if (temp_22242.isBuilt ()) {
                temp_22242 (HERE)->method_isNULL (inLexique, var_cas_isNULL COMMA_SOURCE_FILE_AT_LINE (547)) ;
              }
              if ((((var_cas_isLABELorORG).operator_not ()).operator_and ((var_cas_isNULL).operator_not ())).isBuiltAndTrue ()) {
                var_cas_ioListFileContents.appendCString ("  line ") ;
                var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (549))) ;
                var_cas_ioListFileContents.appendCString (": unreachable instruction is deleted\n") ;
                var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, GGS_ipic_NULL ::constructor_new (inLexique COMMA_HERE), var_cas_idx COMMA_SOURCE_FILE_AT_LINE (550)) ;
              }else if ((var_cas_isLABELorORG).isBuiltAndTrue ()) {
                var_cas_reachable = GGS_bool (true) ;
                var_cas_previousWasSkippingInstruction = GGS_bool (false) ;
                var_cas_skippingInstruction = GGS_bool (false) ;
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_optimizationsDone).operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("  No optimization\n"
            "\n") ;
          GGS_uint  var_cas_currentAddress ;
          var_cas_currentAddress = GGS_uint (0U) ;
          {
            GGS_ipic18_instructionList::cEnumerator enumerator_22898 (var_cas_ioGeneratedInstructionList, true) ;
            const GGS_ipic18_instructionList::cElement * operand_22898 = NULL ;
            while (((operand_22898 = enumerator_22898.nextObject ()))) {
              macroValidPointer (operand_22898) ;
              const GGS_ipic18_instruction  temp_22941 = operand_22898->mInstruction ;
              if (temp_22941.isBuilt ()) {
                temp_22941 (HERE)->method_setCurrentAddress (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (563)) ;
              }
            }
          }
          var_cas_ioListFileContents.appendCString ("Minimum code size: ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (565))) ;
          var_cas_ioListFileContents.appendCString (" bytes\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performOptimizations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic18_optimizations (void) {
 enterCategoryMethod__ipic18_instruction__defineLabel (category_method__ipic18_instruction__defineLabel, gClassInfoFor__ipic18_instruction.slotID ()) ;
 enterCategoryMethod__ipic18_instruction__defineLabel ((typeCategoryMethod__ipic18_instruction__defineLabel) category_method__ipic_pseudo_LABEL__defineLabel, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_JUMP__optimizeJUMP (category_method__ipic_JUMP__optimizeJUMP, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_JSR__optimizeJSR (category_method__ipic_JSR__optimizeJSR, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_literalOperation__optimizeMOVLW (category_method__ipic18_instruction_literalOperation__optimizeMOVLW, gClassInfoFor__ipic18_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_conditionalBranch__optimizeBCC (category_method__ipic18_instruction_conditionalBranch__optimizeBCC, gClassInfoFor__ipic18_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_jump_test_register__optimizeTestReg (category_method__ipic_jump_test_register__optimizeTestReg, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_incDecRegisterInCondition__optimizeTestDecInc (category_method__ipic_incDecRegisterInCondition__optimizeTestDecInc, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_registerComparisonCondition__optimizeCMP (category_method__ipic_registerComparisonCondition__optimizeCMP, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic18_instruction_BitTestSkip__optimizeBitTestSkip (category_method__ipic18_instruction_BitTestSkip__optimizeBitTestSkip, gClassInfoFor__ipic18_instruction_BitTestSkip.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic18_optimizations (prologueRoutineFor_ipic18_optimizations,
                                   NULL) ;

//---------------------------------------------------------------------------*

