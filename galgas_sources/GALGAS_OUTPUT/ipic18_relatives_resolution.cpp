//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'ipic18_relatives_resolution.cpp'                   *
//                        Generated by version 2.5.0                         *
//                      october 6th, 2013, at 19h5'28"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "ipic18_relatives_resolution.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic18_relatives_resolution.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                   Routine 'performRelativesResolution'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performRelativesResolution (const GALGAS_symbolTableForRelativesResolution constinArgument0,
                                         GALGAS_ipic_31__38_BlockList & ioArgument1,
                                         GALGAS_uint & ioArgument2,
                                         GALGAS_string & ioArgument3,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Routine 'performRelativesResolution'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performRelativesResolution (const GALGAS_symbolTableForRelativesResolution constinArgument_inSymbolTable,
                                         GALGAS_ipic_31__38_BlockList & ioArgument_ioBlockList,
                                         GALGAS_uint & ioArgument_ioConversionCount,
                                         GALGAS_string & ioArgument_ioListFileContents,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_ipic_31__38_BlockList var_modifiedBlockList = GALGAS_ipic_31__38_BlockList::constructor_emptyList (SOURCE_FILE_AT_LINE (57)) ;
  GALGAS_uint var_blockStartAddress = GALGAS_uint ((PMUInt32) 0U) ;
  cEnumerator_ipic_31__38_BlockList enumerator_1771 (ioArgument_ioBlockList, kEnumeration_up) ;
  GALGAS_uint index_1765 ((PMUInt32) 0) ;
  while (enumerator_1771.hasCurrentObject ()) {
    GALGAS_string var_nextBlockLabel ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictInf, index_1765.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (61)).objectCompare (ioArgument_ioBlockList.reader_length (SOURCE_FILE_AT_LINE (61)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      var_nextBlockLabel = ioArgument_ioBlockList.reader_mBlockAtIndex (index_1765.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (62)), inCompiler COMMA_SOURCE_FILE_AT_LINE (62)).mAttribute_mLabel.mAttribute_string ;
    }else if (kBoolFalse == test_0) {
      var_nextBlockLabel = GALGAS_string::makeEmptyString () ;
    }
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_1771.current_mBlock (HERE).mAttribute_mAddress.objectCompare (GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (66)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_blockStartAddress = enumerator_1771.current_mBlock (HERE).mAttribute_mAddress ;
    }
    GALGAS_ipic_31__38_Block var_modifiedBlock ;
    categoryMethod_performRelativesResolution (enumerator_1771.current_mBlock (HERE), constinArgument_inSymbolTable, var_nextBlockLabel, var_blockStartAddress, ioArgument_ioConversionCount, ioArgument_ioListFileContents, var_modifiedBlock, inCompiler COMMA_SOURCE_FILE_AT_LINE (69)) ;
    var_modifiedBlockList.addAssign_operation (var_modifiedBlock COMMA_SOURCE_FILE_AT_LINE (77)) ;
    GALGAS_uint var_blockSize = categoryReader_blockSize (enumerator_1771.current_mBlock (HERE), var_nextBlockLabel, inCompiler COMMA_SOURCE_FILE_AT_LINE (78)) ;
    var_blockStartAddress = var_blockStartAddress.add_operation (var_blockSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (79)) ;
    enumerator_1771.gotoNextObject () ;
    index_1765.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (59)) ;
  }
  ioArgument_ioBlockList = var_modifiedBlockList ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'computeLabelAbsoluteAddressMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeLabelAbsoluteAddressMap (const GALGAS_ipic_31__38_BlockList constinArgument_inGeneratedBlockList,
                                             const GALGAS_ipic_31__38_BlockList constinArgument_inInitialBlockList,
                                             GALGAS_symbolTableForRelativesResolution & outArgument_outSymbolTable,
                                             GALGAS_uint & outArgument_outFreeAddress,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSymbolTable.drop () ; // Release 'out' argument
  outArgument_outFreeAddress.drop () ; // Release 'out' argument
  outArgument_outSymbolTable = GALGAS_symbolTableForRelativesResolution::constructor_emptyMap (SOURCE_FILE_AT_LINE (108)) ;
  outArgument_outFreeAddress = GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (109)) ;
  GALGAS_uint var_blockStartAddress = GALGAS_uint ((PMUInt32) 0U) ;
  cEnumerator_ipic_31__38_BlockList enumerator_3529 (constinArgument_inGeneratedBlockList, kEnumeration_up) ;
  GALGAS_uint index_3523 ((PMUInt32) 0) ;
  while (enumerator_3529.hasCurrentObject ()) {
    GALGAS_string var_nextBlockLabel ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictInf, index_3523.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (114)).objectCompare (constinArgument_inGeneratedBlockList.reader_length (SOURCE_FILE_AT_LINE (114)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      var_nextBlockLabel = constinArgument_inGeneratedBlockList.reader_mBlockAtIndex (index_3523.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (115)), inCompiler COMMA_SOURCE_FILE_AT_LINE (115)).mAttribute_mLabel.mAttribute_string ;
    }else if (kBoolFalse == test_0) {
      var_nextBlockLabel = GALGAS_string::makeEmptyString () ;
    }
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_3529.current_mBlock (HERE).mAttribute_mAddress.objectCompare (GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (119)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_blockStartAddress = enumerator_3529.current_mBlock (HERE).mAttribute_mAddress ;
    }
    {
    outArgument_outSymbolTable.modifier_insertKey (enumerator_3529.current_mBlock (HERE).mAttribute_mLabel, var_blockStartAddress, inCompiler COMMA_SOURCE_FILE_AT_LINE (122)) ;
    }
    GALGAS_uint var_blockSize = categoryReader_blockSize (enumerator_3529.current_mBlock (HERE), var_nextBlockLabel, inCompiler COMMA_SOURCE_FILE_AT_LINE (123)) ;
    var_blockStartAddress = var_blockStartAddress.add_operation (var_blockSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (124)) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_3529.current_mBlock (HERE).mAttribute_mAddress.objectCompare (GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (125)))).boolEnum () ;
    if (kBoolTrue == test_2) {
      outArgument_outFreeAddress = var_blockStartAddress ;
    }
    enumerator_3529.gotoNextObject () ;
    index_3523.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  cEnumerator_ipic_31__38_BlockList enumerator_4262 (constinArgument_inInitialBlockList, kEnumeration_up) ;
  while (enumerator_4262.hasCurrentObject ()) {
    const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_4262.current_mBlock (HERE).mAttribute_mAddress.objectCompare (GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (131)))).boolEnum () ;
    if (kBoolTrue == test_3) {
      const enumGalgasBool test_4 = outArgument_outSymbolTable.reader_hasKey (enumerator_4262.current_mBlock (HERE).mAttribute_mLabel.mAttribute_string COMMA_SOURCE_FILE_AT_LINE (132)).operator_not (SOURCE_FILE_AT_LINE (132)).boolEnum () ;
      if (kBoolTrue == test_4) {
        {
        outArgument_outSymbolTable.modifier_insertKey (enumerator_4262.current_mBlock (HERE).mAttribute_mLabel, enumerator_4262.current_mBlock (HERE).mAttribute_mAddress, inCompiler COMMA_SOURCE_FILE_AT_LINE (133)) ;
        }
      }
    }
    enumerator_4262.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'ipic18RelativesResolution'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_ipic_31__38_RelativesResolution (GALGAS_string & ioArgument_ioListFileContents,
                                              GALGAS_ipic_31__38_BlockList & ioArgument_ioGeneratedBlockList,
                                              C_Compiler * inCompiler
                                              COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->printMessage (GALGAS_string ("Relative branch conversion to absolute:\n") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  }
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (149)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (149)) COMMA_SOURCE_FILE_AT_LINE (149)) ;
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*").operator_concat (GALGAS_string ("RELATIVES RESOLUTION").reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (150)) COMMA_SOURCE_FILE_AT_LINE (150)).operator_concat (GALGAS_string ("*\n") COMMA_SOURCE_FILE_AT_LINE (150)) COMMA_SOURCE_FILE_AT_LINE (150)) ;
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (151)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (151)) COMMA_SOURCE_FILE_AT_LINE (151)) ;
  GALGAS_bool var_resolutionDone = GALGAS_bool (false) ;
  GALGAS_uint var_pass = GALGAS_uint ((PMUInt32) 0U) ;
  if (ioArgument_ioGeneratedBlockList.reader_length (SOURCE_FILE_AT_LINE (155)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (155)).isValid ()) {
    PMUInt32 variant_5146 = ioArgument_ioGeneratedBlockList.reader_length (SOURCE_FILE_AT_LINE (155)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (155)).uintValue () ;
    bool loop_5146 = true ;
    while (loop_5146) {
      loop_5146 = var_resolutionDone.operator_not (SOURCE_FILE_AT_LINE (156)).operator_and (GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (156)).objectCompare (GALGAS_uint ((PMUInt32) 0U))) COMMA_SOURCE_FILE_AT_LINE (156)).isValid () ;
      if (loop_5146) {
        loop_5146 = var_resolutionDone.operator_not (SOURCE_FILE_AT_LINE (156)).operator_and (GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (156)).objectCompare (GALGAS_uint ((PMUInt32) 0U))) COMMA_SOURCE_FILE_AT_LINE (156)).boolValue () ;
      }
      if (loop_5146 && (0 == variant_5146)) {
        loop_5146 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE_AT_LINE (155)) ;
      }
      if (loop_5146) {
        variant_5146 -- ;
        var_pass.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (157)) ;
        GALGAS_symbolTableForRelativesResolution var_symbolTable ;
        {
        GALGAS_uint joker_5417_0 ; // Joker input parameter
        routine_computeLabelAbsoluteAddressMap (ioArgument_ioGeneratedBlockList, GALGAS_ipic_31__38_BlockList::constructor_emptyList (SOURCE_FILE_AT_LINE (160)), var_symbolTable, joker_5417_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (158)) ;
        }
        ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("\n"
          "Pass ").operator_concat (var_pass.reader_string (SOURCE_FILE_AT_LINE (164)) COMMA_SOURCE_FILE_AT_LINE (164)).operator_concat (GALGAS_string (":\n") COMMA_SOURCE_FILE_AT_LINE (164)) COMMA_SOURCE_FILE_AT_LINE (164)) ;
        GALGAS_uint var_conversionCount = GALGAS_uint ((PMUInt32) 0U) ;
        {
        routine_performRelativesResolution (var_symbolTable, ioArgument_ioGeneratedBlockList, var_conversionCount, ioArgument_ioListFileContents, inCompiler COMMA_SOURCE_FILE_AT_LINE (166)) ;
        }
        var_resolutionDone = GALGAS_bool (kIsEqual, var_conversionCount.objectCompare (GALGAS_uint ((PMUInt32) 0U))) ;
        const enumGalgasBool test_1 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_string var_s = GALGAS_string ("  Pass ").operator_concat (var_pass.reader_string (SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174)).operator_concat (GALGAS_string (": ") COMMA_SOURCE_FILE_AT_LINE (174)) ;
          const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_conversionCount.objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
          if (kBoolTrue == test_2) {
            var_s.dotAssign_operation (GALGAS_string ("none.") COMMA_SOURCE_FILE_AT_LINE (176)) ;
          }else if (kBoolFalse == test_2) {
            const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, var_conversionCount.objectCompare (GALGAS_uint ((PMUInt32) 1U))).boolEnum () ;
            if (kBoolTrue == test_3) {
              var_s.dotAssign_operation (GALGAS_string ("1 conversion") COMMA_SOURCE_FILE_AT_LINE (178)) ;
            }else if (kBoolFalse == test_3) {
              var_s.dotAssign_operation (var_conversionCount.reader_string (SOURCE_FILE_AT_LINE (180)).operator_concat (GALGAS_string (" conversions") COMMA_SOURCE_FILE_AT_LINE (180)) COMMA_SOURCE_FILE_AT_LINE (180)) ;
            }
          }
          inCompiler->printMessage (var_s.operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
        }
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_4) {
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("  No conversion.\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (186)) ;
    inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (187)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                  Routine 'ipic18RelativeBranchOverflow'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_ipic_31__38_RelativeBranchOverflow (const GALGAS_ipic_31__38_BlockList constinArgument_inBlockList,
                                                 const GALGAS_ipic_31__38_BlockList constinArgument_inInitialBlockList,
                                                 GALGAS_branchOverflowMap & outArgument_outOverflowMap,
                                                 C_Compiler * inCompiler
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outOverflowMap.drop () ; // Release 'out' argument
  GALGAS_symbolTableForRelativesResolution var_symbolTable ;
  {
  GALGAS_uint joker_7484_0 ; // Joker input parameter
  routine_computeLabelAbsoluteAddressMap (constinArgument_inBlockList, constinArgument_inInitialBlockList, var_symbolTable, joker_7484_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (232)) ;
  }
  outArgument_outOverflowMap = GALGAS_branchOverflowMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (239)) ;
  GALGAS_uint var_blockStartAddress = GALGAS_uint ((PMUInt32) 0U) ;
  cEnumerator_ipic_31__38_BlockList enumerator_7606 (constinArgument_inBlockList, kEnumeration_up) ;
  GALGAS_uint index_7600 ((PMUInt32) 0) ;
  while (enumerator_7606.hasCurrentObject ()) {
    GALGAS_string var_nextBlockLabel ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictInf, index_7600.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (243)).objectCompare (constinArgument_inBlockList.reader_length (SOURCE_FILE_AT_LINE (243)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      var_nextBlockLabel = constinArgument_inBlockList.reader_mBlockAtIndex (index_7600.add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (244)), inCompiler COMMA_SOURCE_FILE_AT_LINE (244)).mAttribute_mLabel.mAttribute_string ;
    }else if (kBoolFalse == test_0) {
      var_nextBlockLabel = GALGAS_string::makeEmptyString () ;
    }
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_7606.current_mBlock (HERE).mAttribute_mAddress.objectCompare (GALGAS_uint::constructor_max (SOURCE_FILE_AT_LINE (248)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_blockStartAddress = enumerator_7606.current_mBlock (HERE).mAttribute_mAddress ;
    }
    categoryMethod_relativeBranchOverflow (enumerator_7606.current_mBlock (HERE), var_symbolTable, var_nextBlockLabel, var_blockStartAddress, outArgument_outOverflowMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (251)) ;
    GALGAS_uint var_blockSize = categoryReader_blockSize (enumerator_7606.current_mBlock (HERE), var_nextBlockLabel, inCompiler COMMA_SOURCE_FILE_AT_LINE (257)) ;
    var_blockStartAddress = var_blockStartAddress.add_operation (var_blockSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (258)) ;
    enumerator_7606.gotoNextObject () ;
    index_7600.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (241)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic18Block performRelativesResolution'         *
//                                                                           *
//---------------------------------------------------------------------------*

void categoryMethod_performRelativesResolution (const GALGAS_ipic_31__38_Block inObject,
                                                const GALGAS_symbolTableForRelativesResolution constinArgument_inSymbolTable,
                                                const GALGAS_string constinArgument_inNextBlockLabel,
                                                const GALGAS_uint constinArgument_inBlockStartAddress,
                                                GALGAS_uint & ioArgument_ioConversionCount,
                                                GALGAS_string & ioArgument_ioListFileContents,
                                                GALGAS_ipic_31__38_Block & outArgument_outModifiedBlock,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outModifiedBlock.drop () ; // Release 'out' argument
  GALGAS_ipic_31__38_SequentialInstructionList var_modifiedInstructionList = GALGAS_ipic_31__38_SequentialInstructionList::constructor_emptyList (SOURCE_FILE_AT_LINE (16)) ;
  GALGAS_uint var_address = constinArgument_inBlockStartAddress ;
  cEnumerator_ipic_31__38_SequentialInstructionList enumerator_624 (inObject.mAttribute_mInstructionList, kEnumeration_up) ;
  while (enumerator_624.hasCurrentObject ()) {
    GALGAS_ipic_31__38_SequentialInstruction var_modifiedInstruction ;
    callCategoryMethod_performInstructionRelativeBranchResolution ((const cPtr_ipic_31__38_SequentialInstruction *) enumerator_624.current_mInstruction (HERE).ptr (), var_address, inObject.mAttribute_mLabel.mAttribute_string, constinArgument_inSymbolTable, ioArgument_ioConversionCount, ioArgument_ioListFileContents, var_modifiedInstruction, inCompiler COMMA_SOURCE_FILE_AT_LINE (19)) ;
    var_modifiedInstructionList.addAssign_operation (var_modifiedInstruction COMMA_SOURCE_FILE_AT_LINE (27)) ;
    var_address = var_address.add_operation (callCategoryReader_instructionSize ((const cPtr_ipic_31__38_SequentialInstruction *) enumerator_624.current_mInstruction (HERE).ptr (), inCompiler COMMA_SOURCE_FILE_AT_LINE (28)), inCompiler COMMA_SOURCE_FILE_AT_LINE (28)) ;
    enumerator_624.gotoNextObject () ;
  }
  GALGAS_ipic_31__38_AbstractBlockTerminator var_modifiedTerminator ;
  callCategoryMethod_performTerminatorRelativeBranchResolution ((const cPtr_ipic_31__38_AbstractBlockTerminator *) inObject.mAttribute_mTerminator.ptr (), var_address, inObject.mAttribute_mLabel.mAttribute_string, constinArgument_inSymbolTable, constinArgument_inNextBlockLabel, ioArgument_ioConversionCount, ioArgument_ioListFileContents, var_modifiedTerminator, inCompiler COMMA_SOURCE_FILE_AT_LINE (31)) ;
  outArgument_outModifiedBlock = GALGAS_ipic_31__38_Block::constructor_new (inObject.mAttribute_mAddress, inObject.mAttribute_mLabel, var_modifiedInstructionList, var_modifiedTerminator COMMA_SOURCE_FILE_AT_LINE (41)) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//                 Category Reader '@ipic18Block blockSize'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_uint categoryReader_blockSize (const GALGAS_ipic_31__38_Block & inObject,
                                      const GALGAS_string & constinArgument_inNextBlockLabel,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint result_outResult ; // Returned variable
  result_outResult = callCategoryReader_terminatorSize ((const cPtr_ipic_31__38_AbstractBlockTerminator *) inObject.mAttribute_mTerminator.ptr (), constinArgument_inNextBlockLabel, inCompiler COMMA_SOURCE_FILE_AT_LINE (94)) ;
  cEnumerator_ipic_31__38_SequentialInstructionList enumerator_2920 (inObject.mAttribute_mInstructionList, kEnumeration_up) ;
  while (enumerator_2920.hasCurrentObject ()) {
    result_outResult = result_outResult.add_operation (callCategoryReader_instructionSize ((const cPtr_ipic_31__38_SequentialInstruction *) enumerator_2920.current_mInstruction (HERE).ptr (), inCompiler COMMA_SOURCE_FILE_AT_LINE (96)), inCompiler COMMA_SOURCE_FILE_AT_LINE (96)) ;
    enumerator_2920.gotoNextObject () ;
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic18Block relativeBranchOverflow'           *
//                                                                           *
//---------------------------------------------------------------------------*

void categoryMethod_relativeBranchOverflow (const GALGAS_ipic_31__38_Block inObject,
                                            const GALGAS_symbolTableForRelativesResolution constinArgument_inSymbolTable,
                                            const GALGAS_string constinArgument_inNextBlockLabel,
                                            const GALGAS_uint constinArgument_inBlockStartAddress,
                                            GALGAS_branchOverflowMap & ioArgument_ioOverflowMap,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint var_address = constinArgument_inBlockStartAddress ;
  cEnumerator_ipic_31__38_SequentialInstructionList enumerator_6644 (inObject.mAttribute_mInstructionList, kEnumeration_up) ;
  while (enumerator_6644.hasCurrentObject ()) {
    callCategoryMethod_instructionRelativeBranchOverflow ((const cPtr_ipic_31__38_SequentialInstruction *) enumerator_6644.current_mInstruction (HERE).ptr (), var_address, inObject.mAttribute_mLabel.mAttribute_string, constinArgument_inSymbolTable, ioArgument_ioOverflowMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (206)) ;
    var_address = var_address.add_operation (callCategoryReader_instructionSize ((const cPtr_ipic_31__38_SequentialInstruction *) enumerator_6644.current_mInstruction (HERE).ptr (), inCompiler COMMA_SOURCE_FILE_AT_LINE (212)), inCompiler COMMA_SOURCE_FILE_AT_LINE (212)) ;
    enumerator_6644.gotoNextObject () ;
  }
  callCategoryMethod_terminatorRelativeBranchOverflow ((const cPtr_ipic_31__38_AbstractBlockTerminator *) inObject.mAttribute_mTerminator.ptr (), var_address, inObject.mAttribute_mLabel.mAttribute_string, constinArgument_inSymbolTable, constinArgument_inNextBlockLabel, ioArgument_ioOverflowMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (215)) ;
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


