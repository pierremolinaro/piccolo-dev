//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'ipic_generic.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 19th, 2010, at 16h31'35"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "ipic_generic.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic_generic.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inCurrentAddress
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (30)) ;
  const GGS_bool cond_1486 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (31))).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_addr).operator_isNotEqual (var_cas_inCurrentAddress)) ;
  if (cond_1486.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("internal error: current emit address is ")).operator_concat (var_cas_addr.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (32)))).operator_concat (GGS_string ("; it should be "))).operator_concat (var_cas_inCurrentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (33))) COMMA_SOURCE_FILE_AT_LINE (34)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_constantMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantMap::e_constantMap (void) :
mValue () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@constantMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantMap ("constantMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantMap::
elementOf_GGS_constantMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mValue.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantMap * ptr = dynamic_cast <const elementOf_GGS_constantMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mValue.operator_isEqual (ptr->mInfo.mValue)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantMap * info = (e_constantMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantMap * info = (e_constantMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantMap::
operator_isEqual (const GGS_constantMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantMap::
operator_isNotEqual (const GGS_constantMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_sint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantMap info  ;
    info.mValue = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_sint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mValue ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_sint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_sint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_constantMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sint  & GGS_constantMap::cEnumerator::_mValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mValue ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantMap * p = NULL ;
    macroMyNew (p, GGS_constantMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantMap * p = dynamic_cast <const GGS_constantMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantMap ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_sint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn (),
mRequiredBank (),
mReturnedBank (),
mPreservesBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_routineMap ("routineMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_routineMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIsNoReturn.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRequiredBank.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mReturnedBank.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mPreservesBank.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * ptr = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIsNoReturn.operator_isEqual (ptr->mInfo.mIsNoReturn)).boolValue ()
           && (mInfo.mRequiredBank.operator_isEqual (ptr->mInfo.mRequiredBank)).boolValue ()
           && (mInfo.mReturnedBank.operator_isEqual (ptr->mInfo.mReturnedBank)).boolValue ()
           && (mInfo.mPreservesBank.operator_isEqual (ptr->mInfo.mPreservesBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_bool& inParameter0,
               const GGS_uint & inParameter1,
               const GGS_uint & inParameter2,
               const GGS_bool& inParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inParameter3.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    info.mRequiredBank = inParameter1 ;
    info.mReturnedBank = inParameter2 ;
    info.mPreservesBank = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_uint   & outParameter1,
               GGS_uint   & outParameter2,
               GGS_bool  & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    outParameter3.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    outParameter1 = node->mInfo.mRequiredBank ;
    outParameter2 = node->mInfo.mReturnedBank ;
    outParameter3 = node->mInfo.mPreservesBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_bool  & outParameter3 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 outParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0,
                                const GGS_uint & inParameter1,
                                const GGS_uint & inParameter2,
                                const GGS_bool& inParameter3 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mReturnedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mReturnedBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mPreservesBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mPreservesBank ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_routineMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_routineMap * p = NULL ;
    macroMyNew (p, GGS_routineMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_routineMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_routineMap * p = dynamic_cast <const GGS_routineMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_routineMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_routineMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_routineMap ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_bool& inValue0,
                                             const GGS_uint & inValue1,
                                             const GGS_uint & inValue2,
                                             const GGS_bool& inValue3
                                             COMMA_LOCATION_ARGS) {
  GGS_routineMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        inValue3,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_routineKind ("routineKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_routineKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_routineKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_routineKind * p = NULL ;
    macroMyNew (p, GGS_routineKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineKind GGS_routineKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_routineKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_routineKind * p = dynamic_cast <const GGS_routineKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_routineKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_routineKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_routineKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@immediatExpression.eval'        *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__immediatExpression__eval> gDispatchTableForMethod__immediatExpression__eval ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__immediatExpression__eval (typeCategoryMethod__immediatExpression__eval inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__immediatExpression__eval.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__immediatExpression__eval
findCategoryMethod__immediatExpression__eval (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__immediatExpression__eval result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__immediatExpression__eval.count ()) {
    result = gDispatchTableForMethod__immediatExpression__eval (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__immediatExpression__eval (superClassPtr) ;
      gDispatchTableForMethod__immediatExpression__eval.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatInteger.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatInteger__eval (C_Compiler & inLexique,
                                const cPtr_immediatInteger * operand_3240,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3240 != NULL) {
    var_cas_outResult = operand_3240->mValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (86)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatRegister.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRegister__eval (C_Compiler & inLexique,
                                const cPtr_immediatRegister * operand_3512,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3512 != NULL) {
    const GGS_bool cond_4169 = var_cas_inRegisterTable.reader_hasKey (operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
    if (cond_4169.isBuiltAndTrue ()) {
      GGS_uintlist  var_cas_registerAddressList ;
      GGS_uint  var_cas_size ;
      GGS_bitSliceTable  automatic_var_3815_0 ;
      GGS_string automatic_var_3815_1 ;
      if (var_cas_inRegisterTable.isBuilt ()) {
        var_cas_inRegisterTable (HERE)->method_searchKey (inLexique, operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (99)), var_cas_registerAddressList, var_cas_size, automatic_var_3815_0, automatic_var_3815_1 COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
      GGS_uint  var_cas_registerAddress ;
      if (var_cas_registerAddressList.isBuilt ()) {
        var_cas_registerAddressList (HERE)->method_first (inLexique, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (100)) ;
      }
      const GGS_bool cond_4085 = (operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (101))).operator_supOrEqual (var_cas_size) ;
      if (cond_4085.isBuiltAndTrue ()) {
        operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("index (")).operator_concat (operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)))).operator_concat (GGS_string (") should be lower than size ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }
      var_cas_outResult = var_cas_registerAddress.add_operation (inLexique, operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (104)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) COMMA_SOURCE_FILE_AT_LINE (104)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
    }else if (cond_4169.isBuiltAndFalse ()) {
      const GGS_bool cond_4494 = var_cas_inConstantMap.reader_hasKey (operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
      if (cond_4494.isBuiltAndTrue ()) {
        if (var_cas_inConstantMap.isBuilt ()) {
          var_cas_inConstantMap (HERE)->method_searchKey (inLexique, operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (106)), var_cas_outResult COMMA_SOURCE_FILE_AT_LINE (106)) ;
        }
        const GGS_bool cond_4482 = (operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (107))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_4482.isBuiltAndTrue ()) {
          operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("index notation (")).operator_concat (operand_3512->mRegister.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)))).operator_concat (GGS_string (") cannot be used with a constant")) COMMA_SOURCE_FILE_AT_LINE (109)) ;
        }
      }else if (cond_4494.isBuiltAndFalse ()) {
        operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (111)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (operand_3512->mRegister.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (111)))).operator_concat (GGS_string ("' should be declared as ram register or as constant")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
        var_cas_outResult.drop () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAdd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAdd__eval (C_Compiler & inLexique,
                                const cPtr_immediatAdd * operand_4772,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4772 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_4772->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_4772->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (122)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_4772->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_4772->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (123)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.add_operation (inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (124)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatSub.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSub__eval (C_Compiler & inLexique,
                                const cPtr_immediatSub * operand_5212,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5212 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_5212->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5212->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (134)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_5212->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5212->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (135)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.substract_operation (inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (136)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMul.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMul__eval (C_Compiler & inLexique,
                                const cPtr_immediatMul * operand_5652,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5652 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_5652->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5652->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_5652->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5652->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (147)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.multiply_operation (inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (148)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatDiv.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatDiv__eval (C_Compiler & inLexique,
                                const cPtr_immediatDiv * operand_6092,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6092 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6092->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6092->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (158)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6092->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6092->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.divide_operation (inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMod.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMod__eval (C_Compiler & inLexique,
                                const cPtr_immediatMod * operand_6532,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6532 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6532->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6532->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (170)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6532->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6532->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (171)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.modulo_operation (inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (172)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAnd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAnd__eval (C_Compiler & inLexique,
                                const cPtr_immediatAnd * operand_6974,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6974 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6974->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6974->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_6974->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6974->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (183)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult).operator_and (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Category method '@immediatOr.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatOr__eval (C_Compiler & inLexique,
                                const cPtr_immediatOr * operand_7413,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7413 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_7413->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7413->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (194)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_7413->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7413->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (195)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult).operator_or (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatXor.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatXor__eval (C_Compiler & inLexique,
                                const cPtr_immediatXor * operand_7853,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7853 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_7853->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7853->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (206)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_7853->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7853->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (207)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult).operator_xor (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLeftShift.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLeftShift__eval (C_Compiler & inLexique,
                                const cPtr_immediatLeftShift * operand_8299,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8299 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_8299->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8299->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (218)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_8299->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8299->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (219)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.left_shift_operation (inLexique, var_cas_rightResult.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) COMMA_SOURCE_FILE_AT_LINE (220)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatRightShift.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRightShift__eval (C_Compiler & inLexique,
                                const cPtr_immediatRightShift * operand_8754,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8754 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_8754->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8754->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_8754->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8754->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (231)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult.right_shift_operation (inLexique, var_cas_rightResult.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (232)) COMMA_SOURCE_FILE_AT_LINE (232)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatEqualTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatEqualTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatEqualTest * operand_9208,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9208 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_9208->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9208->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (242)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_9208->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9208->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (243)) ;
      }
    }
    const GGS_bool cond_9543 = (var_cas_leftResult).operator_isEqual (var_cas_rightResult) ;
    if (cond_9543.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_9543.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatNotEqualTest.eval'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNotEqualTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatNotEqualTest * operand_9713,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9713 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_9713->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9713->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_9713->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9713->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (259)) ;
      }
    }
    const GGS_bool cond_10048 = (var_cas_leftResult).operator_isNotEqual (var_cas_rightResult) ;
    if (cond_10048.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_10048.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@immediatGreaterOrEqualTest.eval'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterOrEqualTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatGreaterOrEqualTest * operand_10224,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10224 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_10224->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10224->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (274)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_10224->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10224->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (275)) ;
      }
    }
    const GGS_bool cond_10559 = (var_cas_leftResult).operator_supOrEqual (var_cas_rightResult) ;
    if (cond_10559.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_10559.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@immediatLowerOrEqualTest.eval'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerOrEqualTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatLowerOrEqualTest * operand_10733,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10733 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_10733->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10733->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_10733->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10733->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    const GGS_bool cond_11068 = (var_cas_leftResult).operator_infOrEqual (var_cas_rightResult) ;
    if (cond_11068.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_11068.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatGreaterTest.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatGreaterTest * operand_11237,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11237 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_11237->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11237->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (306)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_11237->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11237->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (307)) ;
      }
    }
    const GGS_bool cond_11571 = (var_cas_leftResult).operator_strictSup (var_cas_rightResult) ;
    if (cond_11571.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_11571.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLowerTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerTest__eval (C_Compiler & inLexique,
                                const cPtr_immediatLowerTest * operand_11738,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11738 != NULL) {
    GGS_sint  var_cas_leftResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_11738->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11738->mLeftExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (322)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_11738->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11738->mRightExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (323)) ;
      }
    }
    const GGS_bool cond_12072 = (var_cas_leftResult).operator_strictInf (var_cas_rightResult) ;
    if (cond_12072.isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (1L) ;
    }else if (cond_12072.isBuiltAndFalse ()) {
      var_cas_outResult = GGS_sint (0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatNegate.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNegate__eval (C_Compiler & inLexique,
                                const cPtr_immediatNegate * operand_12236,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12236 != NULL) {
    GGS_sint  var_cas_result ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_12236->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_12236->mExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (338)) ;
      }
    }
    var_cas_outResult = var_cas_result.operator_unary_minus (inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatComplement.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatComplement__eval (C_Compiler & inLexique,
                                const cPtr_immediatComplement * operand_12562,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12562 != NULL) {
    GGS_sint  var_cas_result ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_12562->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_12562->mExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    var_cas_outResult = (var_cas_result).operator_tilde () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatSlice.eval'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSlice__eval (C_Compiler & inLexique,
                                const cPtr_immediatSlice * operand_12883,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12883 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    var_cas_outResult = GGS_sint (0L) ;
    GGS_uintlist  automatic_var_13093_0 ;
    GGS_uint  automatic_var_13093_1 ;
    GGS_string automatic_var_13093_2 ;
    if (var_cas_inRegisterTable.isBuilt ()) {
      var_cas_inRegisterTable (HERE)->method_searchKey (inLexique, operand_12883->mRegisterName, automatic_var_13093_0, automatic_var_13093_1, var_cas_bitSliceTable, automatic_var_13093_2 COMMA_SOURCE_FILE_AT_LINE (362)) ;
    }
    GGS_stringset  var_cas_sliceNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_immediatSliceExpressionList::cEnumerator enumerator_13165 (operand_12883->mSliceExpressionList, true) ;
      const GGS_immediatSliceExpressionList::cElement * operand_13165 = NULL ;
      while (((operand_13165 = enumerator_13165.nextObject ()))) {
        macroValidPointer (operand_13165) ;
        const GGS_bool cond_13319 = var_cas_sliceNameSet.reader_hasKey (operand_13165->mSliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (365))) ;
        if (cond_13319.isBuiltAndTrue ()) {
          operand_13165->mSliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_13165->mSliceName)).operator_concat (GGS_string ("' bit field has been already defined")) COMMA_SOURCE_FILE_AT_LINE (367)) ;
        }else if (cond_13319.isBuiltAndFalse ()) {
          var_cas_sliceNameSet.addAssign_operation (operand_13165->mSliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (368))) ;
          GGS_uint  var_cas_sliceIndex ;
          GGS_uint  var_cas_sliceSize ;
          if (var_cas_bitSliceTable.isBuilt ()) {
            var_cas_bitSliceTable (HERE)->method_searchKey (inLexique, operand_13165->mSliceName, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (371)) ;
          }
          GGS_sint  var_cas_result ;
          { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_13165->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_13165->mExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (372)) ;
            }
          }
          const GGS_bool cond_13851 = ((var_cas_result).operator_strictInf (GGS_sint (0L))).operator_or ((var_cas_result).operator_strictSup (GGS_sint (1L).left_shift_operation (inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (373)).substract_operation (inLexique, GGS_sint (1L) COMMA_SOURCE_FILE_AT_LINE (373)))) ;
          if (cond_13851.isBuiltAndTrue ()) {
            operand_13165->mSliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("invalid immediat value associated to the '")).operator_concat (operand_13165->mSliceName)).operator_concat (GGS_string ("' bit field, evaluated as "))).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (374)))).operator_concat (GGS_string (" (should be between 0 and "))).operator_concat (GGS_uint (1U).left_shift_operation (inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (375)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (375)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (375)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (376)) ;
          }
          var_cas_outResult = (var_cas_outResult).operator_or (var_cas_result.left_shift_operation (inLexique, var_cas_sliceIndex COMMA_SOURCE_FILE_AT_LINE (377))) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableForMethod__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableForMethod__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableForMethod__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & inLexique,
                                const cPtr_bitNumberLiteralValue * operand_14595,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14595 != NULL) {
    const GGS_bool cond_14830 = (operand_14595->mBitNumberLiteralValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (399))).operator_strictSup (GGS_uint (7U)) ;
    if (cond_14830.isBuiltAndTrue ()) {
      operand_14595->mBitNumberLiteralValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bit number is ")).operator_concat (operand_14595->mBitNumberLiteralValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (400)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (400)))).operator_concat (GGS_string (" (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    }
    var_cas_outBitNumber = operand_14595->mBitNumberLiteralValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & inLexique,
                                const cPtr_bitNumberLabelValue * operand_15029,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15029 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    if (var_cas_inBitSliceTable.isBuilt ()) {
      var_cas_inBitSliceTable (HERE)->method_searchKey (inLexique, operand_15029->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (413)) ;
    }
    const GGS_bool cond_15412 = (operand_15029->mBitNumberIndexValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (414))).operator_strictSup (var_cas_sliceSize) ;
    if (cond_15412.isBuiltAndTrue ()) {
      operand_15029->mBitNumberIndexValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("The ")).operator_concat (operand_15029->mBitNumberIndexValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (415)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (415)))).operator_concat (GGS_string (" index is too large (should be < "))).operator_concat (var_cas_sliceSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (416)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (417)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex.add_operation (inLexique, operand_15029->mBitNumberIndexValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) COMMA_SOURCE_FILE_AT_LINE (418)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'e_symbolTableForOptimizations'                    *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTableForOptimizations::e_symbolTableForOptimizations (void) :
mDefinitionLineIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class map '@symbolTableForOptimizations'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_symbolTableForOptimizations ("symbolTableForOptimizations", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_symbolTableForOptimizations::
elementOf_GGS_symbolTableForOptimizations (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_symbolTableForOptimizations & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTableForOptimizations::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mDefinitionLineIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTableForOptimizations::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTableForOptimizations * ptr = dynamic_cast <const elementOf_GGS_symbolTableForOptimizations *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mDefinitionLineIndex.operator_isEqual (ptr->mInfo.mDefinitionLineIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTableForOptimizations::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTableForOptimizations info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
operator_isEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
operator_isNotEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.mDefinitionLineIndex ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_symbolTableForOptimizations info  ;
    info.mDefinitionLineIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mDefinitionLineIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_symbolTableForOptimizations::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_symbolTableForOptimizations::kRemoveMessage_removeKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_removeKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_removeKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_symbolTableForOptimizations::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTableForOptimizations & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTableForOptimizations::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTableForOptimizations " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTableForOptimizations::cEnumerator::_mDefinitionLineIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mDefinitionLineIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_symbolTableForOptimizations::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_symbolTableForOptimizations * p = NULL ;
    macroMyNew (p, GGS_symbolTableForOptimizations (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_symbolTableForOptimizations * p = dynamic_cast <const GGS_symbolTableForOptimizations *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_symbolTableForOptimizations, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_symbolTableForOptimizations::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_symbolTableForOptimizations ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "print_constant_definition"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_print_constant_definition (C_Compiler & inLexique,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_string & var_cas_ioListFileContents
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_print_constant_definition at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_16909 = (var_cas_inConstantMap.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_16909.isBuiltAndTrue ()) {
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("*") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("CONSTANTS").reader_stringByLeftAndRightPadding (GGS_uint (77U), GGS_char (TO_UNICODE (' ')))) ;
    var_cas_ioListFileContents.appendCString ("*\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n"
      "\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("Constant").reader_stringByLeftPadding (GGS_uint (40U), GGS_char (TO_UNICODE (' ')))) ;
    var_cas_ioListFileContents.appendCString (" Value\n") ;
    {
      GGS_constantMap::cEnumerator enumerator_16743 (var_cas_inConstantMap, true) ;
      const GGS_constantMap::cElement * operand_16743 = NULL ;
      while (((operand_16743 = enumerator_16743.nextObject ()))) {
        macroValidPointer (operand_16743) ;
        var_cas_ioListFileContents.dotAssign_operation (operand_16743->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (446)).reader_stringByLeftPadding (GGS_uint (40U), GGS_char (TO_UNICODE (' ')))) ;
        var_cas_ioListFileContents.appendCString (" ") ;
        var_cas_ioListFileContents.dotAssign_operation (operand_16743->mInfo.mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
        var_cas_ioListFileContents.appendCString ("\n") ;
      }
    }
    var_cas_ioListFileContents.appendCString ("\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_print_constant_definition\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic_generic (void) {
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatInteger__eval, gClassInfoFor__immediatInteger.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRegister__eval, gClassInfoFor__immediatRegister.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAdd__eval, gClassInfoFor__immediatAdd.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSub__eval, gClassInfoFor__immediatSub.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMul__eval, gClassInfoFor__immediatMul.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatDiv__eval, gClassInfoFor__immediatDiv.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMod__eval, gClassInfoFor__immediatMod.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAnd__eval, gClassInfoFor__immediatAnd.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatOr__eval, gClassInfoFor__immediatOr.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatXor__eval, gClassInfoFor__immediatXor.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLeftShift__eval, gClassInfoFor__immediatLeftShift.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRightShift__eval, gClassInfoFor__immediatRightShift.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatEqualTest__eval, gClassInfoFor__immediatEqualTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNotEqualTest__eval, gClassInfoFor__immediatNotEqualTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterOrEqualTest__eval, gClassInfoFor__immediatGreaterOrEqualTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerOrEqualTest__eval, gClassInfoFor__immediatLowerOrEqualTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterTest__eval, gClassInfoFor__immediatGreaterTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerTest__eval, gClassInfoFor__immediatLowerTest.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNegate__eval, gClassInfoFor__immediatNegate.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatComplement__eval, gClassInfoFor__immediatComplement.slotID ()) ;
  enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSlice__eval, gClassInfoFor__immediatSlice.slotID ()) ;
  enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
  enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_ipic_generic (void) {
  gDispatchTableForMethod__immediatExpression__eval.free () ;
  gDispatchTableForMethod__bitNumberExpression__getBitNumber.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_ipic_generic (prologueRoutineFor_ipic_generic, epilogueRoutineFor_ipic_generic) ;

//---------------------------------------------------------------------------*

