//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'ipic_generic.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 23th, 2008, at 14h34'5"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ipic_generic.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ipic_generic.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_constantMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantMap::e_constantMap (void) :
mValue () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@constantMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_constantMap::
elementOf_GGS_constantMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_constantMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mValue.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantMap * _p = dynamic_cast <const elementOf_GGS_constantMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mValue._operator_isEqual (_p->mInfo.mValue)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_constantMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantMap * info = (e_constantMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantMap * info = (e_constantMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantMap::
_operator_isEqual (const GGS_constantMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantMap::
_operator_isNotEqual (const GGS_constantMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_sint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_constantMap info  ;
    info.mValue = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_sint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mValue ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
modifier_setMValueForKey (C_Compiler & inLexique,
                        const GGS_sint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMValueForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mValue = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_sint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' constant is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_constantMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_sint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' constant is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_constantMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantMap GGS_constantMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @constantMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sint  & GGS_constantMap::cEnumerator::_mValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mValue ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mIsNoReturn (),
mRequiredBank (),
mReturnedBank (),
mPreservesBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mReturnedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mPreservesBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * _p = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mIsNoReturn._operator_isEqual (_p->mInfo.mIsNoReturn)).boolValue ()
           && (mInfo.mRequiredBank._operator_isEqual (_p->mInfo.mRequiredBank)).boolValue ()
           && (mInfo.mReturnedBank._operator_isEqual (_p->mInfo.mReturnedBank)).boolValue ()
           && (mInfo.mPreservesBank._operator_isEqual (_p->mInfo.mPreservesBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
_operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_bool& inParameter0,
                const GGS_uint & inParameter1,
                const GGS_uint & inParameter2,
                const GGS_bool& inParameter3,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inParameter2._isBuilt ()
   && inParameter3._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineMap info  ;
    info.mIsNoReturn = inParameter0 ;
    info.mRequiredBank = inParameter1 ;
    info.mReturnedBank = inParameter2 ;
    info.mPreservesBank = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_bool  & outParameter0,
               GGS_uint   & outParameter1,
               GGS_uint   & outParameter2,
               GGS_bool  & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    outParameter2._drop () ;
    outParameter3._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIsNoReturn ;
    outParameter1 = node->mInfo.mRequiredBank ;
    outParameter2 = node->mInfo.mReturnedBank ;
    outParameter3 = node->mInfo.mPreservesBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMIsNoReturnForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mIsNoReturn = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMRequiredBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMReturnedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMReturnedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mReturnedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_setMPreservesBankForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMPreservesBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mPreservesBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_bool  & outParameter3 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  outParameter2,
                  outParameter3,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool& inParameter0,
                                const GGS_uint & inParameter1,
                                const GGS_uint & inParameter2,
                                const GGS_bool& inParameter3 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineMap::cEnumerator::_mReturnedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mReturnedBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_routineMap::cEnumerator::_mPreservesBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mPreservesBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_routineKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_isNotEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_infOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_supOrEqual (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictInf (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineKind::
_operator_strictSup (const GGS_routineKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @routineKind" ;
  switch (mValue) {
  case enum_interruptRoutine:
    s << " interruptRoutine>" ;
    break ;
  case enum_noReturnRoutine:
    s << " noReturnRoutine>" ;
    break ;
  case enum_regularRoutine:
    s << " regularRoutine>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Virtual Table for category method '@immediatExpression.eval'        *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__immediatExpression__eval> gDispatchTableFor__immediatExpression__eval ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__immediatExpression__eval (typeCategoryMethod__immediatExpression__eval inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__immediatExpression__eval.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__immediatExpression__eval
findCategoryMethod__immediatExpression__eval (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__immediatExpression__eval result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__immediatExpression__eval.count ()) {
    result = gDispatchTableFor__immediatExpression__eval (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__immediatExpression__eval (superClassPtr) ;
      gDispatchTableFor__immediatExpression__eval.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatInteger.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatInteger__eval (C_Compiler & _inLexique,
                                const cPtr_immediatInteger * operand_2384,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2384 != NULL) {
    var_cas_outResult = operand_2384->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (70)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Category method '@immediatRegister.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRegister__eval (C_Compiler & _inLexique,
                                const cPtr_immediatRegister * operand_2656,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2656 != NULL) {
    if ((var_cas_inRegisterTable.reader_hasKey (_inLexique, operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80))).isBuiltAndTrue ()) {
      GGS_uintlist  var_cas_registerAddressList ;
      GGS_uint  var_cas_size ;
      GGS_bitSliceTable  automatic_var_0 ;
      GGS_string automatic_var_1 ;
      const GGS_registerTable  _temp_2898 = var_cas_inRegisterTable ;
      if (_temp_2898._isBuilt ()) {
        _temp_2898 (HERE)->method_searchKey (_inLexique, operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (83)), var_cas_registerAddressList, var_cas_size, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
      GGS_uint  var_cas_registerAddress ;
      const GGS_uintlist  _temp_3016 = var_cas_registerAddressList ;
      if (_temp_3016._isBuilt ()) {
        _temp_3016 (HERE)->method_first (_inLexique, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (84)) ;
      }
      if (((operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (85)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (85)))._operator_supOrEqual (var_cas_size)).isBuiltAndTrue ()) {
        operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (86))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (86))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }
      var_cas_outResult = var_cas_registerAddress._add_operation (_inLexique, operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (88)) COMMA_SOURCE_FILE_AT_LINE (88)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
    }else if ((var_cas_inConstantMap.reader_hasKey (_inLexique, operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)) COMMA_SOURCE_FILE_AT_LINE (89))).isBuiltAndTrue ()) {
      const GGS_constantMap  _temp_3406 = var_cas_inConstantMap ;
      if (_temp_3406._isBuilt ()) {
        _temp_3406 (HERE)->method_searchKey (_inLexique, operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (90)), var_cas_outResult COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
      if (((operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "index notation ("))._operator_concat (operand_2656->mRegister.reader_mOffset (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (92))))._operator_concat (GGS_string (true, ") cannot be used with a constant")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }else{
      operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (95)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "'"))._operator_concat (operand_2656->mRegister.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (95))))._operator_concat (GGS_string (true, "' should be declared as ram register or as constant")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
      var_cas_outResult._drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAdd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAdd__eval (C_Compiler & _inLexique,
                                const cPtr_immediatAdd * operand_3917,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3917 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4047 = operand_3917->mLeftExpression ;
    if (_temp_4047._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4047._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4047 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_4139 = operand_3917->mRightExpression ;
    if (_temp_4139._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4139._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4139 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (107)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._add_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (108)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatSub.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSub__eval (C_Compiler & _inLexique,
                                const cPtr_immediatSub * operand_4357,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4357 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4487 = operand_4357->mLeftExpression ;
    if (_temp_4487._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4487._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4487 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (118)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_4579 = operand_4357->mRightExpression ;
    if (_temp_4579._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4579._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4579 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (119)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._substract_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (120)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMul.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMul__eval (C_Compiler & _inLexique,
                                const cPtr_immediatMul * operand_4797,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4797 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_4927 = operand_4797->mLeftExpression ;
    if (_temp_4927._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_4927._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4927 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (130)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5019 = operand_4797->mRightExpression ;
    if (_temp_5019._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5019._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5019 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (131)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._multiply_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatDiv.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatDiv__eval (C_Compiler & _inLexique,
                                const cPtr_immediatDiv * operand_5237,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5237 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_5367 = operand_5237->mLeftExpression ;
    if (_temp_5367._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5367._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5367 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (142)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5459 = operand_5237->mRightExpression ;
    if (_temp_5459._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5459._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5459 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (143)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._divide_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (144)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatMod.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatMod__eval (C_Compiler & _inLexique,
                                const cPtr_immediatMod * operand_5677,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5677 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_5807 = operand_5677->mLeftExpression ;
    if (_temp_5807._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5807._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5807 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (154)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_5899 = operand_5677->mRightExpression ;
    if (_temp_5899._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_5899._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5899 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (155)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._modulo_operation (_inLexique, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (156)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatAnd.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatAnd__eval (C_Compiler & _inLexique,
                                const cPtr_immediatAnd * operand_6119,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6119 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_6249 = operand_6119->mLeftExpression ;
    if (_temp_6249._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6249._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6249 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (166)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_6341 = operand_6119->mRightExpression ;
    if (_temp_6341._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6341._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6341 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (167)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_and (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Category method '@immediatOr.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatOr__eval (C_Compiler & _inLexique,
                                const cPtr_immediatOr * operand_6558,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6558 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_6688 = operand_6558->mLeftExpression ;
    if (_temp_6688._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6688._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6688 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (178)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_6780 = operand_6558->mRightExpression ;
    if (_temp_6780._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_6780._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6780 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (179)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_or (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Category method '@immediatXor.eval'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatXor__eval (C_Compiler & _inLexique,
                                const cPtr_immediatXor * operand_6998,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6998 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_7128 = operand_6998->mLeftExpression ;
    if (_temp_7128._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7128._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7128 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_7220 = operand_6998->mRightExpression ;
    if (_temp_7220._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7220._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7220 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (191)) ;
      }
    }
    var_cas_outResult = (var_cas_leftResult)._operator_xor (var_cas_rightResult) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLeftShift.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLeftShift__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLeftShift * operand_7444,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7444 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_7574 = operand_7444->mLeftExpression ;
    if (_temp_7574._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7574._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7574 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (202)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_7666 = operand_7444->mRightExpression ;
    if (_temp_7666._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_7666._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7666 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (203)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._left_shift_operation (_inLexique, var_cas_rightResult.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)) COMMA_SOURCE_FILE_AT_LINE (204)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatRightShift.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatRightShift__eval (C_Compiler & _inLexique,
                                const cPtr_immediatRightShift * operand_7899,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7899 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_8029 = operand_7899->mLeftExpression ;
    if (_temp_8029._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8029._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8029 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (214)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_8121 = operand_7899->mRightExpression ;
    if (_temp_8121._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8121._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8121 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (215)) ;
      }
    }
    var_cas_outResult = var_cas_leftResult._right_shift_operation (_inLexique, var_cas_rightResult.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatEqualTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatEqualTest * operand_8353,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8353 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_8483 = operand_8353->mLeftExpression ;
    if (_temp_8483._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8483._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8483 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (226)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_8575 = operand_8353->mRightExpression ;
    if (_temp_8575._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8575._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8575 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (227)) ;
      }
    }
    if (((var_cas_leftResult)._operator_isEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatNotEqualTest.eval'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNotEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatNotEqualTest * operand_8858,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8858 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_8988 = operand_8858->mLeftExpression ;
    if (_temp_8988._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_8988._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8988 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (242)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_9080 = operand_8858->mRightExpression ;
    if (_temp_9080._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_9080._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9080 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (243)) ;
      }
    }
    if (((var_cas_leftResult)._operator_isNotEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@immediatGreaterOrEqualTest.eval'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterOrEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatGreaterOrEqualTest * operand_9369,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9369 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_9499 = operand_9369->mLeftExpression ;
    if (_temp_9499._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_9499._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9499 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_9591 = operand_9369->mRightExpression ;
    if (_temp_9591._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_9591._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9591 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (259)) ;
      }
    }
    if (((var_cas_leftResult)._operator_supOrEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@immediatLowerOrEqualTest.eval'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerOrEqualTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLowerOrEqualTest * operand_9878,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9878 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_10008 = operand_9878->mLeftExpression ;
    if (_temp_10008._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_10008._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10008 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (274)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_10100 = operand_9878->mRightExpression ;
    if (_temp_10100._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_10100._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10100 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (275)) ;
      }
    }
    if (((var_cas_leftResult)._operator_infOrEqual (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@immediatGreaterTest.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatGreaterTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatGreaterTest * operand_10382,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10382 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_10512 = operand_10382->mLeftExpression ;
    if (_temp_10512._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_10512._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10512 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_10604 = operand_10382->mRightExpression ;
    if (_temp_10604._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_10604._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10604 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    if (((var_cas_leftResult)._operator_strictSup (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatLowerTest.eval'                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatLowerTest__eval (C_Compiler & _inLexique,
                                const cPtr_immediatLowerTest * operand_10883,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10883 != NULL) {
    GGS_sint  var_cas_leftResult ;
    const GGS_immediatExpression  _temp_11013 = operand_10883->mLeftExpression ;
    if (_temp_11013._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_11013._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11013 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_leftResult COMMA_SOURCE_FILE_AT_LINE (306)) ;
      }
    }
    GGS_sint  var_cas_rightResult ;
    const GGS_immediatExpression  _temp_11105 = operand_10883->mRightExpression ;
    if (_temp_11105._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_11105._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11105 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_rightResult COMMA_SOURCE_FILE_AT_LINE (307)) ;
      }
    }
    if (((var_cas_leftResult)._operator_strictInf (var_cas_rightResult)).isBuiltAndTrue ()) {
      var_cas_outResult = GGS_sint (true, 1L) ;
    }else{
      var_cas_outResult = GGS_sint (true, 0L) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatNegate.eval'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatNegate__eval (C_Compiler & _inLexique,
                                const cPtr_immediatNegate * operand_11381,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11381 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_11503 = operand_11381->mExpression ;
    if (_temp_11503._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_11503._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11503 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (322)) ;
      }
    }
    var_cas_outResult = var_cas_result._operator_unary_minus (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatComplement.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatComplement__eval (C_Compiler & _inLexique,
                                const cPtr_immediatComplement * operand_11707,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11707 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_11829 = operand_11707->mExpression ;
    if (_temp_11829._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_11829._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11829 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (333)) ;
      }
    }
    var_cas_outResult = (var_cas_result)._operator_tilde () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Category method '@immediatSlice.eval'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__immediatSlice__eval (C_Compiler & _inLexique,
                                const cPtr_immediatSlice * operand_12028,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12028 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    var_cas_outResult = GGS_sint (true, 0L) ;
    GGS_uintlist  automatic_var_2 ;
    GGS_uint  automatic_var_3 ;
    GGS_string automatic_var_4 ;
    const GGS_registerTable  _temp_12197 = var_cas_inRegisterTable ;
    if (_temp_12197._isBuilt ()) {
      _temp_12197 (HERE)->method_searchKey (_inLexique, operand_12028->mRegisterName, automatic_var_2, automatic_var_3, var_cas_bitSliceTable, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (346)) ;
    }
    GGS_stringset  var_cas_sliceNameSet ;
    var_cas_sliceNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_immediatSliceExpressionList::cEnumerator enumerator_12310 (operand_12028->mSliceExpressionList, true) ;
      const GGS_immediatSliceExpressionList::cElement * operand_12310 = NULL ;
      while (((operand_12310 = enumerator_12310.nextObject ()))) {
        macroValidPointer (operand_12310) ;
        if ((var_cas_sliceNameSet.reader_hasKey (_inLexique, operand_12310->mSliceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)) COMMA_SOURCE_FILE_AT_LINE (349))).isBuiltAndTrue ()) {
          operand_12310->mSliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_12310->mSliceName))._operator_concat (GGS_string (true, "' bit field has been already defined")) COMMA_SOURCE_FILE_AT_LINE (351)) ;
        }else{
          var_cas_sliceNameSet._addAssign_operation (operand_12310->mSliceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
          GGS_uint  var_cas_sliceIndex ;
          GGS_uint  var_cas_sliceSize ;
          const GGS_bitSliceTable  _temp_12589 = var_cas_bitSliceTable ;
          if (_temp_12589._isBuilt ()) {
            _temp_12589 (HERE)->method_searchKey (_inLexique, operand_12310->mSliceName, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (355)) ;
          }
          GGS_sint  var_cas_result ;
          const GGS_immediatExpression  _temp_12666 = operand_12310->mExpression ;
          if (_temp_12666._isBuilt ()) {
            typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_12666._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_12666 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (356)) ;
            }
          }
          if ((((var_cas_result)._operator_strictInf (GGS_sint (true, 0L)))._operator_or ((var_cas_result)._operator_strictSup (GGS_sint (true, 1L)._left_shift_operation (_inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (357))._substract_operation (_inLexique, GGS_sint (true, 1L) COMMA_SOURCE_FILE_AT_LINE (357))))).isBuiltAndTrue ()) {
            operand_12310->mSliceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "invalid immediat value associated to the '"))._operator_concat (operand_12310->mSliceName))._operator_concat (GGS_string (true, "' bit field, evaluated as ")))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (358))))._operator_concat (GGS_string (true, " (should be between 0 and ")))._operator_concat (GGS_uint (true, 1U)._left_shift_operation (_inLexique, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (359))._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (359)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (359))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (360)) ;
          }
          var_cas_outResult = (var_cas_outResult)._operator_or (var_cas_result._left_shift_operation (_inLexique, var_cas_sliceIndex COMMA_SOURCE_FILE_AT_LINE (361))) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_13740,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13740 != NULL) {
    if (((operand_13740->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (383)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_13740->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_13740->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (385)) ;
    }
    var_cas_outBitNumber = operand_13740->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_14174,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14174 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_14303 = var_cas_inBitSliceTable ;
    if (_temp_14303._isBuilt ()) {
      _temp_14303 (HERE)->method_searchKey (_inLexique, operand_14174->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (397)) ;
    }
    if (((operand_14174->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_14174->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_14174->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (399)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (399))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (400))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_14174->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'e_symbolTableForOptimizations'                    *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTableForOptimizations::e_symbolTableForOptimizations (void) :
mDefinitionLineIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class map '@symbolTableForOptimizations'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTableForOptimizations::
elementOf_GGS_symbolTableForOptimizations (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTableForOptimizations & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTableForOptimizations::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mDefinitionLineIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTableForOptimizations::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTableForOptimizations * _p = dynamic_cast <const elementOf_GGS_symbolTableForOptimizations *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mDefinitionLineIndex._operator_isEqual (_p->mInfo.mDefinitionLineIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTableForOptimizations::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTableForOptimizations *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTableForOptimizations * info = (e_symbolTableForOptimizations *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTableForOptimizations info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
_operator_isEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForOptimizations::
_operator_isNotEqual (const GGS_symbolTableForOptimizations & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (_isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0._drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.mDefinitionLineIndex ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTableForOptimizations info  ;
    info.mDefinitionLineIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mDefinitionLineIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_setMDefinitionLineIndexForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMDefinitionLineIndexForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mDefinitionLineIndex = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_removeKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForOptimizations::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTableForOptimizations & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForOptimizations GGS_symbolTableForOptimizations::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTableForOptimizations result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTableForOptimizations::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTableForOptimizations " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTableForOptimizations::cEnumerator::_mDefinitionLineIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mDefinitionLineIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_ipic_generic (void) {
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatInteger__eval, gClassInfoFor__immediatInteger.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRegister__eval, gClassInfoFor__immediatRegister.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAdd__eval, gClassInfoFor__immediatAdd.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSub__eval, gClassInfoFor__immediatSub.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMul__eval, gClassInfoFor__immediatMul.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatDiv__eval, gClassInfoFor__immediatDiv.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatMod__eval, gClassInfoFor__immediatMod.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatAnd__eval, gClassInfoFor__immediatAnd.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatOr__eval, gClassInfoFor__immediatOr.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatXor__eval, gClassInfoFor__immediatXor.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLeftShift__eval, gClassInfoFor__immediatLeftShift.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatRightShift__eval, gClassInfoFor__immediatRightShift.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatEqualTest__eval, gClassInfoFor__immediatEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNotEqualTest__eval, gClassInfoFor__immediatNotEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterOrEqualTest__eval, gClassInfoFor__immediatGreaterOrEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerOrEqualTest__eval, gClassInfoFor__immediatLowerOrEqualTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatGreaterTest__eval, gClassInfoFor__immediatGreaterTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatLowerTest__eval, gClassInfoFor__immediatLowerTest.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatNegate__eval, gClassInfoFor__immediatNegate.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatComplement__eval, gClassInfoFor__immediatComplement.slotID ()) ;
 enterCategoryMethod__immediatExpression__eval ((typeCategoryMethod__immediatExpression__eval) category_method__immediatSlice__eval, gClassInfoFor__immediatSlice.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_ipic_generic (prologueRoutineFor_ipic_generic,
                                   NULL) ;

//---------------------------------------------------------------------------*

