//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'ipic_generic.h'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 22th, 2008, at 18h30'35"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef ipic_generic_DEFINED
#define ipic_generic_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "generic_metamodel.h"
#include "piccoloDevice_semantics.h"
#include "piccolo_options.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constantMap ;
class GGS_routineMap ;
class GGS_routineKind ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@constantMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constantMap ;

class GGS_constantMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_constantMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_constantMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_constantMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_constantMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_constantMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_constantMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMValueForKey (C_Compiler & inLexique,
                        const GGS_sint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_sint &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_sint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_sint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_sint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_constantMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_constantMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_constantMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_constantMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_constantMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_sint   & _mValue (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@routineMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap ;

class GGS_routineMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_routineMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_routineMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_routineMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMIsNoReturnForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMRequiredBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMReturnedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMPreservesBankForKey (C_Compiler & inLexique,
                        const GGS_bool& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_bool&  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_uint &  inParameter2,
                                const GGS_bool&  inParameter3 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_bool  & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_bool  & outParameter3 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_bool& inParameter0,
                                   const GGS_uint & inParameter1,
                                   const GGS_uint & inParameter2,
                                   const GGS_bool& inParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_bool& outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_uint & outParameter2,
                                   GGS_bool& outParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_routineMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_routineMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_routineMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_routineMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_routineMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_bool  & _mIsNoReturn (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mRequiredBank (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mReturnedBank (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mPreservesBank (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'routineKind' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_routineKind {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_interruptRoutine, enum_noReturnRoutine, enum_regularRoutine} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_routineKind (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_routineKind (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_routineKind  constructor_interruptRoutine (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_routineKind (enum_interruptRoutine) ;
  }
  public : static inline GGS_routineKind  constructor_noReturnRoutine (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_routineKind (enum_noReturnRoutine) ;
  }
  public : static inline GGS_routineKind  constructor_regularRoutine (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_routineKind (enum_regularRoutine) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_routineKind inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineKind inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_routineKind inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_routineKind inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_routineKind inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_routineKind inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Category method '@immediatExpression.eval'                 *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__immediatExpression__eval)  (C_Compiler & _inLexique,
                                const cPtr_immediatExpression * inObjectPtr,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_sint  & var_cas_outResult
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__immediatExpression__eval (typeCategoryMethod__immediatExpression__eval inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__immediatExpression__eval
findCategoryMethod__immediatExpression__eval (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberExpression.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__bitNumberExpression__getBitNumber)  (C_Compiler & _inLexique,
                                const cPtr_bitNumberExpression * inObjectPtr,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@constantMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_constantMap {
  public : GGS_sint  mValue ;

  public : e_constantMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_constantMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_constantMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_constantMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_constantMap * nextObject (void) const { return (elementOf_GGS_constantMap *) mNextItem ; }
  public : inline elementOf_GGS_constantMap * infObject (void) const { return (elementOf_GGS_constantMap *) mInfPtr ; }
  public : inline elementOf_GGS_constantMap * supObject (void) const { return (elementOf_GGS_constantMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_constantMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@routineMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_routineMap {
  public : GGS_bool mIsNoReturn ;
  public : GGS_uint  mRequiredBank ;
  public : GGS_uint  mReturnedBank ;
  public : GGS_bool mPreservesBank ;

  public : e_routineMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_routineMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_routineMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_routineMap * nextObject (void) const { return (elementOf_GGS_routineMap *) mNextItem ; }
  public : inline elementOf_GGS_routineMap * infObject (void) const { return (elementOf_GGS_routineMap *) mInfPtr ; }
  public : inline elementOf_GGS_routineMap * supObject (void) const { return (elementOf_GGS_routineMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_routineMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
