//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'ipic_metamodel.h'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 14h27'38"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef ipic_metamodel_DEFINED
#define ipic_metamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "piccolo_metamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction ;
class cPtr_ipic_instruction ;
class GGS_ipic_instructionList ;
class GGS_ipic_NULL ;
class cPtr_ipic_NULL ;
class GGS_ipic_pseudo_ORG ;
class cPtr_ipic_pseudo_ORG ;
class GGS_ipic_pseudo_LABEL ;
class cPtr_ipic_pseudo_LABEL ;
class GGS_ipic_actualInstruction ;
class cPtr_ipic_actualInstruction ;
class GGS_ipic_registerExpression ;
class GGS_ipic_instruction_FDA ;
class cPtr_ipic_instruction_FDA ;
class GGS_ipic_instruction_FA ;
class cPtr_ipic_instruction_FA ;
class GGS_ipic_instruction_MOVFF ;
class cPtr_ipic_instruction_MOVFF ;
class GGS_ipic_instruction_FBA ;
class cPtr_ipic_instruction_FBA ;
class GGS_ipic_instruction_BitTestSkip ;
class cPtr_ipic_instruction_BitTestSkip ;
class GGS_condionalBranchMode ;
class GGS_ipic_instruction_conditionalBranch ;
class cPtr_ipic_instruction_conditionalBranch ;
class GGS_ipic_JUMP ;
class cPtr_ipic_JUMP ;
class GGS_ipic_JSR ;
class cPtr_ipic_JSR ;
class GGS_ipic_instruction_CLRWDT ;
class cPtr_ipic_instruction_CLRWDT ;
class GGS_ipic_instruction_DAW ;
class cPtr_ipic_instruction_DAW ;
class GGS_ipic_instruction_NOP ;
class cPtr_ipic_instruction_NOP ;
class GGS_ipic_instruction_POP ;
class cPtr_ipic_instruction_POP ;
class GGS_ipic_instruction_PUSH ;
class cPtr_ipic_instruction_PUSH ;
class GGS_ipic_instruction_RESET ;
class cPtr_ipic_instruction_RESET ;
class GGS_ipic_instruction_RETURN ;
class cPtr_ipic_instruction_RETURN ;
class GGS_ipic_instruction_RETFIE ;
class cPtr_ipic_instruction_RETFIE ;
class GGS_ipic_instruction_SLEEP ;
class cPtr_ipic_instruction_SLEEP ;
class GGS_ipic_instruction_literalOperation ;
class cPtr_ipic_instruction_literalOperation ;
class GGS_ipic_instruction_LFSR ;
class cPtr_ipic_instruction_LFSR ;
class GGS_ipic_instruction_MOVLB ;
class cPtr_ipic_instruction_MOVLB ;
class GGS_ipic_instruction_MOVAW ;
class cPtr_ipic_instruction_MOVAW ;
class GGS_ipic_instruction_TBLRD ;
class cPtr_ipic_instruction_TBLRD ;
class GGS_ipic_instruction_TBLWT ;
class cPtr_ipic_instruction_TBLWT ;
class GGS_ipic_instruction_MNOP ;
class cPtr_ipic_instruction_MNOP ;
class GGS_ipic_instruction_computed_retlw ;
class cPtr_ipic_instruction_computed_retlw ;
class GGS_ipic_instruction_computed_bra ;
class cPtr_ipic_instruction_computed_bra ;
class GGS_ipic_instruction_computed_goto ;
class cPtr_ipic_instruction_computed_goto ;
class GGS_ipic_jump_test_register ;
class cPtr_ipic_jump_test_register ;
class GGS_ipic_incDecRegisterInCondition ;
class cPtr_ipic_incDecRegisterInCondition ;
class GGS_ipic_registerComparisonCondition ;
class cPtr_ipic_registerComparisonCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_ipic_instruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_ipic_instruction (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction * getPtr (void) const {
    return (cPtr_ipic_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__ipic_instruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@ipic_instructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ipic_instructionList ;

class GGS_ipic_instructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_ipic_instructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ipic_instructionList constructor_emptyList (void) ;
  public : static GGS_ipic_instructionList constructor_listWithValue (const GGS_ipic_instruction & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ipic_instructionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_ipic_instructionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ipic_instructionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_ipic_instructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_ipic_instruction & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_ipic_instruction & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_ipic_instruction & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_ipic_instruction & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_ipic_instructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_ipic_instruction & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_ipic_instructionList _operator_concat (const GGS_ipic_instructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_ipic_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_ipic_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_ipic_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_ipic_instruction 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_ipic_instruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ipic_instructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_ipic_instruction   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_ipic_NULL'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_NULL : public GGS_ipic_instruction {
//--- Default constructor
  public : inline GGS_ipic_NULL (void) : GGS_ipic_instruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_NULL (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_NULL (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_NULL
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_NULL constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_NULL * getPtr (void) const {
    return (cPtr_ipic_NULL *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_NULL * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_NULL * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_NULL *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_NULL ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ipic_pseudo_ORG'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_pseudo_ORG : public GGS_ipic_instruction {
//--- Default constructor
  public : inline GGS_ipic_pseudo_ORG (void) : GGS_ipic_instruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_pseudo_ORG (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_pseudo_ORG (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_pseudo_ORG
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_pseudo_ORG constructor_new (C_Compiler & inLexique,
                                const GGS_uint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_pseudo_ORG * getPtr (void) const {
    return (cPtr_ipic_pseudo_ORG *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_uint  reader_mOrigin (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_pseudo_ORG * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_pseudo_ORG * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_pseudo_ORG *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_pseudo_ORG ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_ipic_pseudo_LABEL'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_pseudo_LABEL : public GGS_ipic_instruction {
//--- Default constructor
  public : inline GGS_ipic_pseudo_LABEL (void) : GGS_ipic_instruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_pseudo_LABEL (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_pseudo_LABEL (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_pseudo_LABEL
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_pseudo_LABEL constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_pseudo_LABEL * getPtr (void) const {
    return (cPtr_ipic_pseudo_LABEL *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_pseudo_LABEL * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_pseudo_LABEL * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_pseudo_LABEL *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_pseudo_LABEL ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_actualInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_actualInstruction : public GGS_ipic_instruction {
//--- Default constructor
  public : inline GGS_ipic_actualInstruction (void) : GGS_ipic_instruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_actualInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_actualInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_actualInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_actualInstruction * getPtr (void) const {
    return (cPtr_ipic_actualInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_actualInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_actualInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_actualInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_actualInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_FDA'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_FDA : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_FDA (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_FDA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_FDA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_FDA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_FDA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_instruction_FDA_base_code& argument_1,
                                const GGS_ipic_registerExpression& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_FDA * getPtr (void) const {
    return (cPtr_ipic_instruction_FDA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_instruction_FDA_base_code reader_mInstruction_FDA_base_code (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_FDA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_FDA * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_FDA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_FDA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'getFAinstructionBaseCode'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getFAinstructionBaseCode (C_Compiler &,
                                const GGS_FA_instruction_base_code ,
                                GGS_uint  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Routine 'FAinstructionIsSkippingInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_FAinstructionIsSkippingInstruction (C_Compiler &,
                                const GGS_FA_instruction_base_code ,
                                GGS_bool & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_ipic_instruction_FA'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_FA : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_FA (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_FA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_FA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_FA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_FA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_FA_instruction_base_code& argument_1,
                                const GGS_ipic_registerExpression& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_FA * getPtr (void) const {
    return (cPtr_ipic_instruction_FA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_FA_instruction_base_code reader_mFAinstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_FA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_FA * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_FA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_FA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_MOVFF'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_MOVFF : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_MOVFF (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_MOVFF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_MOVFF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_MOVFF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_MOVFF constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ipic_registerExpression& argument_1,
                                const GGS_ipic_registerExpression& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_MOVFF * getPtr (void) const {
    return (cPtr_ipic_instruction_MOVFF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ipic_registerExpression reader_mSourceRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mDestinationRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_MOVFF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_MOVFF * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_MOVFF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_MOVFF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'getBitOrientedOpBaseCode'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBitOrientedOpBaseCode (C_Compiler &,
                                const GGS_bit_oriented_op ,
                                GGS_uint  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_FBA'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_FBA : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_FBA (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_FBA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_FBA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_FBA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_FBA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_bit_oriented_op& argument_1,
                                const GGS_ipic_registerExpression& argument_2,
                                const GGS_uint & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_FBA * getPtr (void) const {
    return (cPtr_ipic_instruction_FBA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bit_oriented_op reader_mBitOrientedOp (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_FBA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_FBA * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_FBA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_FBA ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_ipic_instruction_BitTestSkip'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_BitTestSkip : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_BitTestSkip (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_BitTestSkip (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_BitTestSkip (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_BitTestSkip
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_BitTestSkip constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_ipic_registerExpression& argument_2,
                                const GGS_uint & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_BitTestSkip * getPtr (void) const {
    return (cPtr_ipic_instruction_BitTestSkip *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mSkipIfSet (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_BitTestSkip * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_BitTestSkip * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_BitTestSkip *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_BitTestSkip ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for 'condionalBranchMode' Enumeration                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_condionalBranchMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_ipicBRA, enum_ipicGOTO, enum_ipicNative, enum_native} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_condionalBranchMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_condionalBranchMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_condionalBranchMode  constructor_ipicBRA (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_condionalBranchMode (enum_ipicBRA) ;
  }
  public : static inline GGS_condionalBranchMode  constructor_ipicGOTO (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_condionalBranchMode (enum_ipicGOTO) ;
  }
  public : static inline GGS_condionalBranchMode  constructor_ipicNative (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_condionalBranchMode (enum_ipicNative) ;
  }
  public : static inline GGS_condionalBranchMode  constructor_native (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_condionalBranchMode (enum_native) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_condionalBranchMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_condionalBranchMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_condionalBranchMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_condionalBranchMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_condionalBranchMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_condionalBranchMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_ipic_instruction_conditionalBranch'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_conditionalBranch : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_conditionalBranch (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_conditionalBranch (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_conditionalBranch (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_conditionalBranch
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_conditionalBranch constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_condionalBranchMode& argument_1,
                                const GGS_conditional_branch& argument_2,
                                const GGS_lstring & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_conditionalBranch * getPtr (void) const {
    return (cPtr_ipic_instruction_conditionalBranch *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_condionalBranchMode reader_mBranchMode (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_conditional_branch reader_mConditionalBranch (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_conditionalBranch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_conditionalBranch * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_conditionalBranch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_conditionalBranch ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_ipic_JUMP'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_JUMP : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_JUMP (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_JUMP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_JUMP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_JUMP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_JUMP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_jumpInstructionKind& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_JUMP * getPtr (void) const {
    return (cPtr_ipic_JUMP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_jumpInstructionKind reader_mKind (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_JUMP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_JUMP * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_JUMP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_JUMP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_ipic_JSR'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_JSR : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_JSR (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_JSR (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_JSR (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_JSR
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_JSR constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_jumpInstructionKind& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_JSR * getPtr (void) const {
    return (cPtr_ipic_JSR *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_jumpInstructionKind reader_mKind (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_JSR * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_JSR * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_JSR *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_JSR ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_CLRWDT'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_CLRWDT : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_CLRWDT (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_CLRWDT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_CLRWDT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_CLRWDT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_CLRWDT constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_CLRWDT * getPtr (void) const {
    return (cPtr_ipic_instruction_CLRWDT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_CLRWDT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_CLRWDT * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_CLRWDT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_CLRWDT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_DAW'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_DAW : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_DAW (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_DAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_DAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_DAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_DAW constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_DAW * getPtr (void) const {
    return (cPtr_ipic_instruction_DAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_DAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_DAW * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_DAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_DAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_NOP'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_NOP : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_NOP (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_NOP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_NOP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_NOP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_NOP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_NOP * getPtr (void) const {
    return (cPtr_ipic_instruction_NOP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_NOP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_NOP * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_NOP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_NOP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_POP'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_POP : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_POP (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_POP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_POP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_POP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_POP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_POP * getPtr (void) const {
    return (cPtr_ipic_instruction_POP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_POP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_POP * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_POP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_POP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_PUSH'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_PUSH : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_PUSH (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_PUSH (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_PUSH (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_PUSH
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_PUSH constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_PUSH * getPtr (void) const {
    return (cPtr_ipic_instruction_PUSH *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_PUSH * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_PUSH * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_PUSH *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_PUSH ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_RESET'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_RESET : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_RESET (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_RESET (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_RESET (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_RESET
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_RESET constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_RESET * getPtr (void) const {
    return (cPtr_ipic_instruction_RESET *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_RESET * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_RESET * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_RESET *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_RESET ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_RETURN'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_RETURN : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_RETURN (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_RETURN (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_RETURN (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_RETURN
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_RETURN constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_RETURN * getPtr (void) const {
    return (cPtr_ipic_instruction_RETURN *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_RETURN * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_RETURN * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_RETURN *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_RETURN ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_RETFIE'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_RETFIE : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_RETFIE (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_RETFIE (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_RETFIE (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_RETFIE
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_RETFIE constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_RETFIE * getPtr (void) const {
    return (cPtr_ipic_instruction_RETFIE *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mFastReturn (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_RETFIE * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_RETFIE * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_RETFIE *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_RETFIE ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_SLEEP'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_SLEEP : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_SLEEP (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_SLEEP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_SLEEP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_SLEEP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_SLEEP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_SLEEP * getPtr (void) const {
    return (cPtr_ipic_instruction_SLEEP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_SLEEP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_SLEEP * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_SLEEP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_SLEEP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'getLiteralInstructionBaseCode'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getLiteralInstructionBaseCode (C_Compiler &,
                                const GGS_literal_instruction_opcode ,
                                GGS_uint  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_ipic_instruction_literalOperation'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_literalOperation : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_literalOperation (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_literalOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_literalOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_literalOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_literalOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_literal_instruction_opcode& argument_1,
                                const GGS_luint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_literalOperation * getPtr (void) const {
    return (cPtr_ipic_instruction_literalOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_literal_instruction_opcode reader_mLiteralInstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_literalOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_literalOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_literalOperation *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_literalOperation ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_LFSR'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_LFSR : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_LFSR (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_LFSR (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_LFSR (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_LFSR
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_LFSR constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_ipic_registerExpression& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_LFSR * getPtr (void) const {
    return (cPtr_ipic_instruction_LFSR *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mFSRindex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_LFSR * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_LFSR * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_LFSR *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_LFSR ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_MOVLB'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_MOVLB : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_MOVLB (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_MOVLB (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_MOVLB (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_MOVLB
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_MOVLB constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_MOVLB * getPtr (void) const {
    return (cPtr_ipic_instruction_MOVLB *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mPageIndex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_MOVLB * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_MOVLB * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_MOVLB *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_MOVLB ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_MOVAW'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_MOVAW : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_MOVAW (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_MOVAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_MOVAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_MOVAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_MOVAW constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ipic_registerExpression& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_MOVAW * getPtr (void) const {
    return (cPtr_ipic_instruction_MOVAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_MOVAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_MOVAW * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_MOVAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_MOVAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_TBLRD'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_TBLRD : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_TBLRD (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_TBLRD (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_TBLRD (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_TBLRD
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_TBLRD constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_tableAccessOption& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_TBLRD * getPtr (void) const {
    return (cPtr_ipic_instruction_TBLRD *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_TBLRD * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_TBLRD * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_TBLRD *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_TBLRD ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_instruction_TBLWT'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_TBLWT : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_TBLWT (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_TBLWT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_TBLWT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_TBLWT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_TBLWT constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_tableAccessOption& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_TBLWT * getPtr (void) const {
    return (cPtr_ipic_instruction_TBLWT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_TBLWT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_TBLWT * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_TBLWT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_TBLWT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_ipic_instruction_MNOP'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_MNOP : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_MNOP (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_MNOP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_MNOP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_MNOP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_MNOP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_MNOP * getPtr (void) const {
    return (cPtr_ipic_instruction_MNOP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mOccurrenceFactor (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_MNOP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_MNOP * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_MNOP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_MNOP ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_ipic_instruction_computed_retlw'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_computed_retlw : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_computed_retlw (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_computed_retlw (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_computed_retlw (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_computed_retlw
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_computed_retlw constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luintlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_computed_retlw * getPtr (void) const {
    return (cPtr_ipic_instruction_computed_retlw *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luintlist  reader_mLiteralValues (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRCALL (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_computed_retlw * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_computed_retlw * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_computed_retlw *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_computed_retlw ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_ipic_instruction_computed_bra'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_computed_bra : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_computed_bra (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_computed_bra (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_computed_bra (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_computed_bra
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_computed_bra constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_computed_bra * getPtr (void) const {
    return (cPtr_ipic_instruction_computed_bra *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mTargetLabels (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRCALL (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_computed_bra * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_computed_bra * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_computed_bra *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_computed_bra ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_ipic_instruction_computed_goto'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_instruction_computed_goto : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_instruction_computed_goto (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_instruction_computed_goto (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_instruction_computed_goto (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_instruction_computed_goto
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_instruction_computed_goto constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_instruction_computed_goto * getPtr (void) const {
    return (cPtr_ipic_instruction_computed_goto *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mTargetLabels (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRCALL (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_instruction_computed_goto * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_instruction_computed_goto * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_instruction_computed_goto *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_instruction_computed_goto ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_ipic_jump_test_register'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_jump_test_register : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_jump_test_register (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_jump_test_register (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_jump_test_register (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_jump_test_register
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_jump_test_register constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ipic_registerExpression& argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_jump_test_register * getPtr (void) const {
    return (cPtr_ipic_jump_test_register *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mBranchIfZero (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesBra (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_jump_test_register * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_jump_test_register * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_jump_test_register *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_jump_test_register ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_ipic_incDecRegisterInCondition'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_incDecRegisterInCondition : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_incDecRegisterInCondition (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_incDecRegisterInCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_incDecRegisterInCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_incDecRegisterInCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_incDecRegisterInCondition constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ipic_registerExpression& argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3,
                                const GGS_bool& argument_4,
                                const GGS_bool& argument_5,
                                const GGS_bool& argument_6
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_incDecRegisterInCondition * getPtr (void) const {
    return (cPtr_ipic_incDecRegisterInCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIncrement (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mBranchIfZero (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesBra (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_incDecRegisterInCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_incDecRegisterInCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_incDecRegisterInCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_incDecRegisterInCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_ipic_registerComparisonCondition'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_registerComparisonCondition : public GGS_ipic_actualInstruction {
//--- Default constructor
  public : inline GGS_ipic_registerComparisonCondition (void) : GGS_ipic_actualInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ipic_registerComparisonCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ipic_registerComparisonCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ipic_registerComparisonCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ipic_registerComparisonCondition constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ipic_registerExpression& argument_1,
                                const GGS_string& argument_2,
                                const GGS_registerComparison& argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ipic_registerComparisonCondition * getPtr (void) const {
    return (cPtr_ipic_registerComparisonCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ipic_registerExpression reader_mRegisterDescription (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerComparison reader_mComparison (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesBra (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ipic_registerComparisonCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ipic_registerComparisonCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_ipic_registerComparisonCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ipic_registerComparisonCondition ;

//---------------------------------------------------------------------------*

#include "include_ipic_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@ipic_instructionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ipic_instructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_ipic_instruction  mInstruction ;
//--- Constructor
  public : elementOf_GGS_ipic_instructionList (const GGS_ipic_instruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ipic_instructionList * nextObject (void) const { return (elementOf_GGS_ipic_instructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ipic_instructionList * previousObject (void) const { return (elementOf_GGS_ipic_instructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_ipic_instructionList ;
} ;

//---------------------------------------------------------------------------*

#include "include_ipic_NULL.h"

//---------------------------------------------------------------------------*

#include "include_ipic_pseudo_ORG.h"

//---------------------------------------------------------------------------*

#include "include_ipic_pseudo_LABEL.h"

//---------------------------------------------------------------------------*

#include "include_ipic_actualInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            Declarations for 'ipic_registerExpression' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ipic_registerExpression {
//--- Default constructor
  public : GGS_ipic_registerExpression (void) ;

//--- Virtual destructor
  public : virtual ~GGS_ipic_registerExpression (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method '_isBuilt'
  public : bool _isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_ipic_registerExpression * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_ipic_registerExpression * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_ipic_registerExpression & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_ipic_registerExpression & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_ipic_registerExpression constructor_new (const GGS_string& argument_0,
                 const GGS_uint & argument_1,
                 const GGS_bool& argument_2) ;

//--- Readers
  public : inline GGS_string
  reader_mAssemblyString (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mAssemblyString ;
  }

  public : inline GGS_uint 
  reader_mRegisterAddress (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRegisterAddress ;
  }

  public : inline GGS_bool
  reader_mNeedsBSR (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mNeedsBSR ;
  }

//--- Attributes
  public : GGS_string mAssemblyString ;
  public : GGS_uint  mRegisterAddress ;
  public : GGS_bool mNeedsBSR ;
} ;

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_FDA.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_FA.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_MOVFF.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_FBA.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_BitTestSkip.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_conditionalBranch.h"

//---------------------------------------------------------------------------*

#include "include_ipic_JUMP.h"

//---------------------------------------------------------------------------*

#include "include_ipic_JSR.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_CLRWDT.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_DAW.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_NOP.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_POP.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_PUSH.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_RESET.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_RETURN.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_RETFIE.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_SLEEP.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_literalOperation.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_LFSR.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_MOVLB.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_MOVAW.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_TBLRD.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_TBLWT.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_MNOP.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_computed_retlw.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_computed_bra.h"

//---------------------------------------------------------------------------*

#include "include_ipic_instruction_computed_goto.h"

//---------------------------------------------------------------------------*

#include "include_ipic_jump_test_register.h"

//---------------------------------------------------------------------------*

#include "include_ipic_incDecRegisterInCondition.h"

//---------------------------------------------------------------------------*

#include "include_ipic_registerComparisonCondition.h"

//---------------------------------------------------------------------------*

#endif
