//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'midrange_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 23th, 2008, at 19h19'42"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_midrange_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

e_midrange_symbolTable::e_midrange_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map '@midrange_symbolTable'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_symbolTable::
elementOf_GGS_midrange_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_midrange_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_midrange_symbolTable * _p = dynamic_cast <const elementOf_GGS_midrange_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_midrange_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_midrange_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
_operator_isEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
_operator_isNotEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_midrange_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_midrange_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @midrange_symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_midrange_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_instruction.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_973,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_973 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress> gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress
findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_pseudo_LABEL.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1214,
                                GGS_midrange_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1214 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1214->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_ORG.enterLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_1497,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1497 != NULL) {
    var_cas_ioAddress = operand_1497->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_actualInstruction.enterLabelAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_actualInstruction * operand_1761,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1761 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1761->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (54)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@midrange_ipic_pseudo_ORG.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_2676,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2676 != NULL) {
    var_cas_ioAddress = operand_2676->mOrigin ;
    if (operand_2676->mOrigin._add_operation (_inLexique, operand_2676->mOrigin COMMA_SOURCE_FILE_AT_LINE (77))._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_2676->mOrigin._add_operation (_inLexique, operand_2676->mOrigin COMMA_SOURCE_FILE_AT_LINE (77)) COMMA_SOURCE_FILE_AT_LINE (77)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FD.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_FD * operand_2984,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2984 != NULL) {
    GGS_uint  var_cas_code ;
    operand_2984->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (87)) ;
    if (((operand_2984->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 128U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_2984->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (92)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_F.generateBinaryCodeAtAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_F * operand_3447,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3447 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3447->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (102)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_3447->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (103)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (104)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FB.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_FB * operand_3842,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3842 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3842->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (114)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_3842->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (115)))._operator_and (GGS_uint (true, 127U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_3842->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (116))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_BitTestSkip * operand_4283,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4283 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4283->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (127)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_4283->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))._operator_and (GGS_uint (true, 127U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_4283->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (129))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_GOTOinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_GOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 10240U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 10240U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U))) COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_JUMP.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_4914,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4914 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_5048 = var_cas_inRoutineSymbolTable ;
    if (_temp_5048._isBuilt ()) {
      _temp_5048 (HERE)->method_searchKey (_inLexique, operand_4914->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (148)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (149)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_CALLinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_CALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 8192U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 8192U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U))) COMMA_SOURCE_FILE_AT_LINE (157)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_JSR.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JSR * operand_5496,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5496 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_5630 = var_cas_inRoutineSymbolTable ;
    if (_temp_5630._isBuilt ()) {
      _temp_5630 (HERE)->method_searchKey (_inLexique, operand_5496->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (167)) ;
    }
    ::routine_emit_midrange_CALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (168)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_incDecRegisterInCondition * operand_5867,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5867 != NULL) {
    GGS_uint  var_cas_code ;
    if ((operand_5867->mIncrement).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 3840U) ;
    }else{
      var_cas_code = GGS_uint (true, 2816U) ;
    }
    if (((operand_5867->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 128U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5867->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (186)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (187)) ;
    }
    if ((operand_5867->mBranchIfZero).isBuiltAndTrue ()) {
      ::routine_emit_midrange_GOTOinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (190)) COMMA_SOURCE_FILE_AT_LINE (190)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_6387 = var_cas_inRoutineSymbolTable ;
    if (_temp_6387._isBuilt ()) {
      _temp_6387 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_5867->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (194)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (195)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_CLRWDT * operand_6662,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6662 != NULL) {
    if (GGS_uint (true, 100U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRW.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_CLRW * operand_6936,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6936 != NULL) {
    if (GGS_uint (true, 256U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (213)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_NOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_NOP * operand_7209,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7209 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (222)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETURN.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_RETURN * operand_7485,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7485 != NULL) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETFIE.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_RETFIE * operand_7761,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7761 != NULL) {
    if (GGS_uint (true, 9U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (240)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_SLEEP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_SLEEP * operand_8036,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8036 != NULL) {
    if (GGS_uint (true, 99U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 99U) COMMA_SOURCE_FILE_AT_LINE (249)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_literalOperation * operand_8322,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8322 != NULL) {
    GGS_uint  var_cas_code ;
    operand_8322->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (259)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_8322->mLiteralValue) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (261)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_pseudo_LABEL.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_8681,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8681 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_8808 = var_cas_inRoutineSymbolTable ;
    if (_temp_8808._isBuilt ()) {
      _temp_8808 (HERE)->method_searchKey (_inLexique, operand_8681->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (271)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_8681->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_8681->mLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (274))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (275))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (276)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_MNOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_MNOP * operand_9258,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9258 != NULL) {
    if (((operand_9258->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (285)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_9258->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_9584 = operand_9258->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
    GGS_bool _condition_9584 (_variant_9584._isBuilt (), true) ;
    while (_condition_9584.isBuiltAndTrue ()) {
      _condition_9584 = (var_cas_idx)._operator_strictInf (operand_9258->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (290))) ;
      if (_condition_9584.isBuiltAndTrue ()) {
        if (_variant_9584.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (294)) ;
          _condition_9584 = GGS_bool (true, false) ;
        }else{
          _variant_9584._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (292)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (293)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "build_midrange_ipic_binary_code"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_midrange_ipic_binary_code (C_Compiler & _inLexique,
                                const GGS_midrange_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_midrange_ipic_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_midrange_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_midrange_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_12737 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_12737 = NULL ;
    while (((operand_12737 = enumerator_12737.nextObject ()))) {
      macroValidPointer (operand_12737) ;
      const GGS_midrange_ipic_instruction  _temp_12778 = operand_12737->mInstruction ;
      if (_temp_12778._isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress _method = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (_temp_12778._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_12778 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (382)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (387)) ;
  }
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_13024 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_13024 = NULL ;
    while (((operand_13024 = enumerator_13024.nextObject ()))) {
      macroValidPointer (operand_13024) ;
      const GGS_midrange_ipic_instruction  _temp_13073 = operand_13024->mInstruction ;
      if (_temp_13073._isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (_temp_13073._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_13073 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (389)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_midrange_ipic_instruction  _temp_13172 = operand_13024->mInstruction ;
      if (_temp_13172._isBuilt ()) {
        _temp_13172 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (391)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (392)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress._multiply_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (393)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (396))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (398))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (399)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (400))))._operator_concat (GGS_string (true, " bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (402))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (403)) ;
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_13873 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_13873 = NULL ;
    while (((operand_13873 = enumerator_13873.nextObject ()))) {
      macroValidPointer (operand_13873) ;
      if (operand_13873->mInfo.mRegisterAddress._add_operation (_inLexique, operand_13873->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (406))._isBuilt ()) {
        ::routine_setEmitAddress (_inLexique,  operand_13873->mInfo.mRegisterAddress._add_operation (_inLexique, operand_13873->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (406)) COMMA_SOURCE_FILE_AT_LINE (406)) ;
      }
      if (operand_13873->mInfo.mRegisterValue._isBuilt ()) {
        ::routine_emitCode (_inLexique,  operand_13873->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (407)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_midrange_ipic_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_build_binary_code (void) {
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (category_method__midrange_ipic_instruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FD.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_F.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FB.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRW.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_MNOP.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_midrange_build_binary_code (prologueRoutineFor_midrange_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

