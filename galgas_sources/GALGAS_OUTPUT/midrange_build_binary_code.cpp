//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'midrange_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 17th, 2010, at 23h11'15"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "midrange_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_midrange_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

e_midrange_symbolTable::e_midrange_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map '@midrange_symbolTable'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_midrange_symbolTable ("midrange_symbolTable", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_midrange_symbolTable::
elementOf_GGS_midrange_symbolTable (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_midrange_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_symbolTable::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_midrange_symbolTable * ptr = dynamic_cast <const elementOf_GGS_midrange_symbolTable *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress.operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_midrange_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_midrange_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
operator_isEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
operator_isNotEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_midrange_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_midrange_symbolTable::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_midrange_symbolTable::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_midrange_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_symbolTable::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @midrange_symbolTable " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_midrange_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_midrange_symbolTable::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_midrange_symbolTable * p = NULL ;
    macroMyNew (p, GGS_midrange_symbolTable (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_midrange_symbolTable * p = dynamic_cast <const GGS_midrange_symbolTable *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_midrange_symbolTable, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_midrange_symbolTable::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_midrange_symbolTable ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_instruction.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_1008,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1008 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress> gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress
findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_pseudo_LABEL.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1249,
                                GGS_midrange_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1249 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1249->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (34)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_ORG.enterLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_1532,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1532 != NULL) {
    var_cas_ioAddress = operand_1532->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_actualInstruction.enterLabelAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__enterLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_actualInstruction * operand_1796,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1796 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1796->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
    var_cas_ioAddress = var_cas_ioAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_NULL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_NULL__generateBinaryCodeAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_NULL * operand_2767,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2767 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@midrange_ipic_pseudo_ORG.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_3090,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3090 != NULL) {
    var_cas_ioAddress = operand_3090->mOrigin ;
    if (operand_3090->mOrigin.add_operation (inLexique, operand_3090->mOrigin COMMA_SOURCE_FILE_AT_LINE (92)).isBuilt ()) {
      ::routine_setEmitAddress (inLexique,  operand_3090->mOrigin.add_operation (inLexique, operand_3090->mOrigin COMMA_SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FD.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_FD * operand_3474,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3474 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3474->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (104)) ;
    const GGS_bool cond_3755 = (operand_3474->m_W_isDestination).operator_not () ;
    if (cond_3755.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (128U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_3474->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (108))).operator_and (GGS_uint (127U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (109)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_F.generateBinaryCodeAtAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_F * operand_4013,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4013 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4013->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (121)) ;
    var_cas_code = (var_cas_code).operator_or ((operand_4013->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (122))).operator_and (GGS_uint (127U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (123)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FB.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_FB * operand_4484,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4484 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4484->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (135)) ;
    var_cas_code = (var_cas_code).operator_or ((operand_4484->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (136))).operator_and (GGS_uint (127U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_4484->mBitNumber.left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (137))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (138)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_BitTestSkip * operand_5001,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5001 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5001->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (150)) ;
    var_cas_code = (var_cas_code).operator_or ((operand_5001->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (151))).operator_and (GGS_uint (127U))) ;
    var_cas_code = (var_cas_code).operator_or (operand_5001->mBitNumber.left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (152))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (153)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "emit_midrange_GOTOinstruction_nocheck"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_GOTOinstruction_nocheck (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_GOTOinstruction_nocheck at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (10240U)).operator_or ((var_cas_inTargetAddress).operator_and (GGS_uint (2047U))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (10240U)).operator_or ((var_cas_inTargetAddress).operator_and (GGS_uint (2047U))) COMMA_SOURCE_FILE_AT_LINE (161)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_GOTOinstruction_nocheck\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_GOTOinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_GOTOinstruction (C_Compiler & inLexique,
                                const GGS_location   var_cas_inIntructionLocation,
                                const GGS_uint   var_cas_inOriginAddress,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_5993 = (((var_cas_inOriginAddress).operator_xor (var_cas_inTargetAddress)).operator_and (GGS_uint (63488U))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_5993.isBuiltAndTrue ()) {
    var_cas_inIntructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("GOTO (from ")).operator_concat (var_cas_inOriginAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (172)))).operator_concat (GGS_string (" to "))).operator_concat (var_cas_inTargetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (172)))).operator_concat (GGS_string (") crosses page boundary")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
  }
  ::routine_emit_midrange_GOTOinstruction_nocheck (inLexique,  var_cas_inTargetAddress COMMA_SOURCE_FILE_AT_LINE (174)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "emit_midrange_CALLinstruction_nocheck"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_CALLinstruction_nocheck (C_Compiler & inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_CALLinstruction_nocheck at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (8192U)).operator_or ((var_cas_inTargetAddress).operator_and (GGS_uint (2047U))).isBuilt ()) {
    ::routine_emitCode (inLexique,  (GGS_uint (8192U)).operator_or ((var_cas_inTargetAddress).operator_and (GGS_uint (2047U))) COMMA_SOURCE_FILE_AT_LINE (182)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_CALLinstruction_nocheck\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_CALLinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_CALLinstruction (C_Compiler & inLexique,
                                const GGS_location   var_cas_inIntructionLocation,
                                const GGS_uint   var_cas_inOriginAddress,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_6712 = (((var_cas_inOriginAddress).operator_xor (var_cas_inTargetAddress)).operator_and (GGS_uint (63488U))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_6712.isBuiltAndTrue ()) {
    var_cas_inIntructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("CALL (from ")).operator_concat (var_cas_inOriginAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (193)))).operator_concat (GGS_string (" to "))).operator_concat (var_cas_inTargetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (193)))).operator_concat (GGS_string (") crosses page boundary")) COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }
  ::routine_emit_midrange_CALLinstruction_nocheck (inLexique,  var_cas_inTargetAddress COMMA_SOURCE_FILE_AT_LINE (195)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_JUMP.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_6936,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6936 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_7137 = var_cas_inRoutineSymbolTable ;
    if (temp_7137.isBuilt ()) {
      temp_7137 (HERE)->method_searchKey (inLexique, operand_6936->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (208)) ;
    }
    GGS_registerExpression  var_cas_PCLATH_register = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("PCLATH"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (210)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (210)) COMMA_SOURCE_FILE_AT_LINE (210)) ;
    GGS_midrange_ipic_registerExpression var_cas_PCLATH_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7544_0 ;
    const GGS_registerExpression  temp_7416 = var_cas_PCLATH_register ;
    if (temp_7416.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveMidrangeAccess method = findCategoryMethod__registerExpression__resolveMidrangeAccess (temp_7416.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_7416 (HERE), var_cas_inTotalBankCount, GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (214)), var_cas_inRegisterTable, var_cas_PCLATH_IPICregisterDescription, automatic_var_7544_0 COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
    }
    switch (operand_6936->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (221)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (221))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (221)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (221))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (221)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (222)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (222)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (222)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_6936->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (226)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (226))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (226)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (226))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (226)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (227)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (227))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (227)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (227))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (227)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    ::routine_emit_midrange_GOTOinstruction_nocheck (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (231)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_GOTO.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_GOTO__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_GOTO * operand_8359,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8359 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_8567 = var_cas_inRoutineSymbolTable ;
    if (temp_8567.isBuilt ()) {
      temp_8567 (HERE)->method_searchKey (inLexique, operand_8359->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (244)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (inLexique,  operand_8359->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (246)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_JSR.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JSR * operand_8843,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8843 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_9044 = var_cas_inRoutineSymbolTable ;
    if (temp_9044.isBuilt ()) {
      temp_9044 (HERE)->method_searchKey (inLexique, operand_8843->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (259)) ;
    }
    GGS_registerExpression  var_cas_PCLATH_register = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("PCLATH"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (261)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (261)) COMMA_SOURCE_FILE_AT_LINE (261)) ;
    GGS_midrange_ipic_registerExpression var_cas_PCLATH_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_9451_0 ;
    const GGS_registerExpression  temp_9323 = var_cas_PCLATH_register ;
    if (temp_9323.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveMidrangeAccess method = findCategoryMethod__registerExpression__resolveMidrangeAccess (temp_9323.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_9323 (HERE), var_cas_inTotalBankCount, GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (265)), var_cas_inRegisterTable, var_cas_PCLATH_IPICregisterDescription, automatic_var_9451_0 COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
    }
    switch (operand_8843->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (272)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (272))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (272)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (272))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (272)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (273)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (273))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (273)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (273))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (273)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_8843->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (277)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (277))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (277)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (277))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (277)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (278)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (278))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (278)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (278))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (278)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    ::routine_emit_midrange_CALLinstruction_nocheck (inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (281)) ;
    switch (operand_8843->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (283)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (283))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (283)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (283))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (283)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (284)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (284))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (3U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (284)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (284))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (284)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_8843->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (288)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (288))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (4096U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (288)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (288))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (288)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (289)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_and (GGS_uint (127U))).isBuilt ()) {
        ::routine_emitCode (inLexique,  ((GGS_uint (5120U)).operator_or (GGS_uint (4U).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (289)))).operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_and (GGS_uint (127U))) COMMA_SOURCE_FILE_AT_LINE (289)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_CALL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_CALL__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_CALL * operand_10849,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10849 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_11057 = var_cas_inRoutineSymbolTable ;
    if (temp_11057.isBuilt ()) {
      temp_11057 (HERE)->method_searchKey (inLexique, operand_10849->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (304)) ;
    }
    ::routine_emit_midrange_CALLinstruction (inLexique,  operand_10849->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (306)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_incDecRegisterInCondition * operand_11331,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11331 != NULL) {
    GGS_uint  var_cas_code ;
    const GGS_bool cond_11549 = operand_11331->mIncrement ;
    if (cond_11549.isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (3840U) ;
    }else if (cond_11549.isBuiltAndFalse ()) {
      var_cas_code = GGS_uint (2816U) ;
    }
    const GGS_bool cond_11656 = (operand_11331->m_W_isDestination).operator_not () ;
    if (cond_11656.isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code).operator_or (GGS_uint (128U)) ;
    }
    var_cas_code = (var_cas_code).operator_or ((operand_11331->mRegisterDescription.reader_mRegisterAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (326))).operator_and (GGS_uint (127U))) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (327)) ;
    }
    const GGS_bool cond_11866 = operand_11331->mBranchIfZero ;
    if (cond_11866.isBuiltAndTrue ()) {
      ::routine_emit_midrange_GOTOinstruction (inLexique,  operand_11331->mInstructionLocation,  var_cas_ioAddress,  var_cas_ioAddress.add_operation (inLexique, GGS_uint (3U) COMMA_SOURCE_FILE_AT_LINE (330)) COMMA_SOURCE_FILE_AT_LINE (330)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_11960 = var_cas_inRoutineSymbolTable ;
    if (temp_11960.isBuilt ()) {
      temp_11960 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_11331->mTargetLabel, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (334)), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (334)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (inLexique,  operand_11331->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (335)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_CLRWDT * operand_12268,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12268 != NULL) {
    if (GGS_uint (100U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (346)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRW.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_CLRW * operand_12618,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12618 != NULL) {
    if (GGS_uint (256U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (256U) COMMA_SOURCE_FILE_AT_LINE (357)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_NOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_NOP * operand_12967,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12967 != NULL) {
    if (GGS_uint (0U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (368)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETURN.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_RETURN * operand_13319,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13319 != NULL) {
    if (GGS_uint (8U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (379)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETFIE.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_RETFIE * operand_13671,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13671 != NULL) {
    if (GGS_uint (9U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (9U) COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_SLEEP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_SLEEP * operand_14022,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14022 != NULL) {
    if (GGS_uint (99U).isBuilt ()) {
      ::routine_emitCode (inLexique,  GGS_uint (99U) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_literalOperation * operand_14384,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14384 != NULL) {
    GGS_uint  var_cas_code ;
    operand_14384->method_getBaseCode (inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (413)) ;
    var_cas_code = (var_cas_code).operator_or (operand_14384->mLiteralValue) ;
    if (var_cas_code.isBuilt ()) {
      ::routine_emitCode (inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (415)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_pseudo_LABEL.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_14819,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14819 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  temp_15022 = var_cas_inRoutineSymbolTable ;
    if (temp_15022.isBuilt ()) {
      temp_15022 (HERE)->method_searchKey (inLexique, operand_14819->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (427)) ;
    }
    const GGS_bool cond_15297 = (var_cas_targetAddress).operator_isNotEqual (var_cas_ioAddress) ;
    if (cond_15297.isBuiltAndTrue ()) {
      operand_14819->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '")).operator_concat (operand_14819->mLabel)).operator_concat (GGS_string ("' label gets "))).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (430)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (431)))).operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (432)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_MNOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_MNOP * operand_15472,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15472 != NULL) {
    const GGS_bool cond_15730 = (operand_15472->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (443))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_15730.isBuiltAndTrue ()) {
      operand_15472->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (444)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_15874 = operand_15472->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (447)) ;
    GGS_bool _condition_15874 (_variant_15874.isBuilt (), true) ;
    while (_condition_15874.isBuiltAndTrue ()) {
      _condition_15874 = (var_cas_idx).operator_strictInf (operand_15472->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (448))) ;
      if (_condition_15874.isBuiltAndTrue ()) {
        if (_variant_15874.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (452)) ;
          _condition_15874 = GGS_bool (false) ;
        }else{
          _variant_15874.decrement_operation (inLexique COMMA_HERE) ;
          if (GGS_uint (0U).isBuilt ()) {
            ::routine_emitCode (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (450)) ;
          }
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "build_midrange_ipic_binary_code"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_midrange_ipic_binary_code (C_Compiler & inLexique,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_uint  & var_cas_outUsedROMsize COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_midrange_ipic_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_midrange_symbolTable  var_cas_symbolTable = GGS_midrange_symbolTable ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (470)) ;
  GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_16732 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_16732 = NULL ;
    while (((operand_16732 = enumerator_16732.nextObject ()))) {
      macroValidPointer (operand_16732) ;
      const GGS_midrange_ipic_instruction  temp_16773 = operand_16732->mInstruction ;
      if (temp_16773.isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress method = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (temp_16773.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_16773 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (473)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_outUsedROMsize = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (0U) ;
  if (GGS_uint (0U).isBuilt ()) {
    ::routine_setEmitAddress (inLexique,  GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (479)) ;
  }
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_17056 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_17056 = NULL ;
    while (((operand_17056 = enumerator_17056.nextObject ()))) {
      macroValidPointer (operand_17056) ;
      const GGS_midrange_ipic_instruction  temp_17105 = operand_17056->mInstruction ;
      if (temp_17105.isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress method = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (temp_17105.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_17105 (HERE), var_cas_inRegisterTable, var_cas_inTotalBankCount, var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (481)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_midrange_ipic_instruction  temp_17268 = operand_17056->mInstruction ;
      if (temp_17268.isBuilt ()) {
        temp_17268 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (488)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (489)) ;
      ::routine_checkCurrentEmitAddress (inLexique,  var_cas_currentAddress.multiply_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (490)) COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }
  }
  const GGS_bool cond_17689 = (var_cas_lastAddressForFirstPass).operator_isNotEqual (var_cas_currentAddress) ;
  if (cond_17689.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets ")).operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (493)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (495)))).operator_concat (GGS_string (" value in first pass")) COMMA_SOURCE_FILE_AT_LINE (496)) ;
  }else if (cond_17689.isBuiltAndFalse ()) {
    const GGS_bool cond_17877 = (var_cas_lastAddressForFirstPass).operator_strictSup (var_cas_inROMsize) ;
    if (cond_17877.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Program too large: ")).operator_concat (var_cas_lastAddressForFirstPass.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497)))).operator_concat (GGS_string (" bytes (rom size is "))).operator_concat (var_cas_inROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499)))).operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (500)) ;
    }
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_17969 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_17969 = NULL ;
    while (((operand_17969 = enumerator_17969.nextObject ()))) {
      macroValidPointer (operand_17969) ;
      if (operand_17969->mInfo.mRegisterAddress.add_operation (inLexique, operand_17969->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (503)).isBuilt ()) {
        ::routine_setEmitAddress (inLexique,  operand_17969->mInfo.mRegisterAddress.add_operation (inLexique, operand_17969->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (503)) COMMA_SOURCE_FILE_AT_LINE (503)) ;
      }
      if (operand_17969->mInfo.mRegisterValue.isBuilt ()) {
        ::routine_emitCode (inLexique,  operand_17969->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (504)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_midrange_ipic_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_build_binary_code (void) {
  enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (category_method__midrange_ipic_instruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_NULL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_NULL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FD.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_F.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FB.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_BitTestSkip.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_GOTO__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_GOTO.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_CALL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_CALL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRW.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_NOP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETURN.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETFIE.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_MNOP.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_midrange_build_binary_code (void) {
  gDispatchTableForMethod__midrange_ipic_instruction__enterLabelAtAddress.free () ;
  gDispatchTableForMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_midrange_build_binary_code (prologueRoutineFor_midrange_build_binary_code, epilogueRoutineFor_midrange_build_binary_code) ;

//---------------------------------------------------------------------------*

