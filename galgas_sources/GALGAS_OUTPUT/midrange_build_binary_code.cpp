//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'midrange_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 10th, 2008, at 20h34'53"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_midrange_symbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

e_midrange_symbolTable::e_midrange_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map '@midrange_symbolTable'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_symbolTable::
elementOf_GGS_midrange_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_midrange_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_midrange_symbolTable * _p = dynamic_cast <const elementOf_GGS_midrange_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_midrange_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_midrange_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_midrange_symbolTable * info = (e_midrange_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_midrange_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
_operator_isEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTable::
_operator_isNotEqual (const GGS_midrange_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_midrange_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_midrange_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTable GGS_midrange_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @midrange_symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_midrange_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_instruction.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_1008,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1008 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.enterLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress> gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress
findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_pseudo_LABEL.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1249,
                                GGS_midrange_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1249 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1249->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (34)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_ORG.enterLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_1532,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1532 != NULL) {
    var_cas_ioAddress = operand_1532->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_actualInstruction.enterLabelAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_actualInstruction * operand_1796,
                                GGS_midrange_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1796 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1796->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@midrange_ipic_pseudo_ORG.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_2773,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2773 != NULL) {
    var_cas_ioAddress = operand_2773->mOrigin ;
    if (operand_2773->mOrigin._add_operation (_inLexique, operand_2773->mOrigin COMMA_SOURCE_FILE_AT_LINE (82))._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_2773->mOrigin._add_operation (_inLexique, operand_2773->mOrigin COMMA_SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FD.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_FD * operand_3157,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3157 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3157->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (94)) ;
    if (((operand_3157->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 128U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3157->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (99)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_F.generateBinaryCodeAtAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_F * operand_3696,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3696 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3696->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (111)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_3696->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (113)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_FB.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_FB * operand_4167,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4167 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4167->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (125)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_4167->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)))._operator_and (GGS_uint (true, 127U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_4167->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (127))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_BitTestSkip * operand_4684,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4684 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4684->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (140)) ;
    var_cas_code = (var_cas_code)._operator_or ((operand_4684->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (141)))._operator_and (GGS_uint (true, 127U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_4684->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (142))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (143)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "emit_midrange_GOTOinstruction_nocheck"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_GOTOinstruction_nocheck (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_GOTOinstruction_nocheck at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 10240U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 10240U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U))) COMMA_SOURCE_FILE_AT_LINE (151)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_GOTOinstruction_nocheck\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_GOTOinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_GOTOinstruction (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inIntructionLocation,
                                const GGS_uint   var_cas_inOriginAddress,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_GOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((((var_cas_inOriginAddress)._operator_xor (var_cas_inTargetAddress))._operator_and (GGS_uint (true, 63488U)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_inIntructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "GOTO (from "))._operator_concat (var_cas_inOriginAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (162))))._operator_concat (GGS_string (true, " to ")))._operator_concat (var_cas_inTargetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (162))))._operator_concat (GGS_string (true, ") crosses page boundary")) COMMA_SOURCE_FILE_AT_LINE (163)) ;
  }
  ::routine_emit_midrange_GOTOinstruction_nocheck (_inLexique,  var_cas_inTargetAddress COMMA_SOURCE_FILE_AT_LINE (164)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_GOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "emit_midrange_CALLinstruction_nocheck"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_CALLinstruction_nocheck (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_CALLinstruction_nocheck at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 8192U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 8192U))._operator_or ((var_cas_inTargetAddress)._operator_and (GGS_uint (true, 2047U))) COMMA_SOURCE_FILE_AT_LINE (172)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_CALLinstruction_nocheck\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "emit_midrange_CALLinstruction"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emit_midrange_CALLinstruction (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inIntructionLocation,
                                const GGS_uint   var_cas_inOriginAddress,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emit_midrange_CALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((((var_cas_inOriginAddress)._operator_xor (var_cas_inTargetAddress))._operator_and (GGS_uint (true, 63488U)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_inIntructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "CALL (from "))._operator_concat (var_cas_inOriginAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (183))))._operator_concat (GGS_string (true, " to ")))._operator_concat (var_cas_inTargetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (183))))._operator_concat (GGS_string (true, ") crosses page boundary")) COMMA_SOURCE_FILE_AT_LINE (184)) ;
  }
  ::routine_emit_midrange_CALLinstruction_nocheck (_inLexique,  var_cas_inTargetAddress COMMA_SOURCE_FILE_AT_LINE (185)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emit_midrange_CALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_JUMP.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_6619,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6619 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_6820 = var_cas_inRoutineSymbolTable ;
    if (_temp_6820._isBuilt ()) {
      _temp_6820 (HERE)->method_searchKey (_inLexique, operand_6619->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (198)) ;
    }
    GGS_registerExpression  var_cas_PCLATH_register ;
    var_cas_PCLATH_register = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "PCLATH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_midrange_ipic_registerExpression var_cas_PCLATH_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_7099 = var_cas_PCLATH_register ;
    if (_temp_7099._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveMidrangeAccess _method = findCategoryMethod__registerExpression__resolveMidrangeAccess (_temp_7099._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7099 (HERE), var_cas_inTotalBankCount, GGS_uint ::constructor_max (_inLexique COMMA_HERE), var_cas_inRegisterTable, var_cas_PCLATH_IPICregisterDescription, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (202)) ;
      }
    }
    switch (operand_6619->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (211))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (211))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (211)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (212))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (212))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_6619->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (216))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (216))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (216)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (217))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (217))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (217)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    ::routine_emit_midrange_GOTOinstruction_nocheck (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (221)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_GOTO.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_GOTO__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_GOTO * operand_8042,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8042 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_8250 = var_cas_inRoutineSymbolTable ;
    if (_temp_8250._isBuilt ()) {
      _temp_8250 (HERE)->method_searchKey (_inLexique, operand_8042->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (234)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (_inLexique,  operand_8042->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (236)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_JSR.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JSR * operand_8526,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8526 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_8727 = var_cas_inRoutineSymbolTable ;
    if (_temp_8727._isBuilt ()) {
      _temp_8727 (HERE)->method_searchKey (_inLexique, operand_8526->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (249)) ;
    }
    GGS_registerExpression  var_cas_PCLATH_register ;
    var_cas_PCLATH_register = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "PCLATH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_midrange_ipic_registerExpression var_cas_PCLATH_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_9006 = var_cas_PCLATH_register ;
    if (_temp_9006._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveMidrangeAccess _method = findCategoryMethod__registerExpression__resolveMidrangeAccess (_temp_9006._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9006 (HERE), var_cas_inTotalBankCount, GGS_uint ::constructor_max (_inLexique COMMA_HERE), var_cas_inRegisterTable, var_cas_PCLATH_IPICregisterDescription, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (253)) ;
      }
    }
    switch (operand_8526->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (262))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (262)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (262))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (262)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (262)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (263))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (263))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_8526->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (267))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (267)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (267))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (267)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (267)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (268))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (268)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (268))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (268)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (268)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    ::routine_emit_midrange_CALLinstruction_nocheck (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (271)) ;
    switch (operand_8526->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (273))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (273)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (273))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (273)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (273)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (274))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 3U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (274))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (274)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_8526->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      if (((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (278))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 4096U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (278))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (278)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      if (((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (279))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (279)))._operator_and (GGS_uint (true, 127U)))._isBuilt ()) {
        ::routine_emitCode (_inLexique,  ((GGS_uint (true, 5120U))._operator_or (GGS_uint (true, 4U)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (279))))._operator_or ((var_cas_PCLATH_IPICregisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (279)))._operator_and (GGS_uint (true, 127U))) COMMA_SOURCE_FILE_AT_LINE (279)) ;
      }
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_CALL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_CALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_CALL * operand_10532,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10532 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_10740 = var_cas_inRoutineSymbolTable ;
    if (_temp_10740._isBuilt ()) {
      _temp_10740 (HERE)->method_searchKey (_inLexique, operand_10532->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (294)) ;
    }
    ::routine_emit_midrange_CALLinstruction (_inLexique,  operand_10532->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_incDecRegisterInCondition * operand_11014,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11014 != NULL) {
    GGS_uint  var_cas_code ;
    if ((operand_11014->mIncrement).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 3840U) ;
    }else{
      var_cas_code = GGS_uint (true, 2816U) ;
    }
    if (((operand_11014->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 128U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_11014->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (316)))._operator_and (GGS_uint (true, 127U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (317)) ;
    }
    if ((operand_11014->mBranchIfZero).isBuiltAndTrue ()) {
      ::routine_emit_midrange_GOTOinstruction (_inLexique,  operand_11014->mInstructionLocation,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (320)) COMMA_SOURCE_FILE_AT_LINE (320)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_11643 = var_cas_inRoutineSymbolTable ;
    if (_temp_11643._isBuilt ()) {
      _temp_11643 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_11014->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (324)) ;
    }
    ::routine_emit_midrange_GOTOinstruction (_inLexique,  operand_11014->mInstructionLocation,  var_cas_ioAddress,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (325)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_CLRWDT * operand_11951,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11951 != NULL) {
    if (GGS_uint (true, 100U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (336)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_CLRW.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_CLRW * operand_12301,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12301 != NULL) {
    if (GGS_uint (true, 256U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (347)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_NOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_NOP * operand_12650,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12650 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (358)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETURN.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_RETURN * operand_13002,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13002 != NULL) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (369)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_RETFIE.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_RETFIE * operand_13354,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13354 != NULL) {
    if (GGS_uint (true, 9U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (380)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_SLEEP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_SLEEP * operand_13705,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13705 != NULL) {
    if (GGS_uint (true, 99U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 99U) COMMA_SOURCE_FILE_AT_LINE (391)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_literalOperation * operand_14067,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14067 != NULL) {
    GGS_uint  var_cas_code ;
    operand_14067->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (403)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_14067->mLiteralValue) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (405)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_pseudo_LABEL.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_14502,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14502 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTable  _temp_14705 = var_cas_inRoutineSymbolTable ;
    if (_temp_14705._isBuilt ()) {
      _temp_14705 (HERE)->method_searchKey (_inLexique, operand_14502->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (417)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_14502->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_14502->mLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (420))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (421))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (422)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_MNOP.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_MNOP * operand_15155,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_uint   /* var_cas_inTotalBankCount */,
                                const GGS_midrange_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15155 != NULL) {
    if (((operand_15155->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (433)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_15155->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (434)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_15557 = operand_15155->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (437)) ;
    GGS_bool _condition_15557 (_variant_15557._isBuilt (), true) ;
    while (_condition_15557.isBuiltAndTrue ()) {
      _condition_15557 = (var_cas_idx)._operator_strictInf (operand_15155->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (438))) ;
      if (_condition_15557.isBuiltAndTrue ()) {
        if (_variant_15557.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (442)) ;
          _condition_15557 = GGS_bool (true, false) ;
        }else{
          _variant_15557._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (440)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (441)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "build_midrange_ipic_binary_code"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_midrange_ipic_binary_code (C_Compiler & _inLexique,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_uint   var_cas_inTotalBankCount,
                                const GGS_midrange_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_midrange_ipic_binary_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_midrange_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_midrange_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_16391 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_16391 = NULL ;
    while (((operand_16391 = enumerator_16391.nextObject ()))) {
      macroValidPointer (operand_16391) ;
      const GGS_midrange_ipic_instruction  _temp_16432 = operand_16391->mInstruction ;
      if (_temp_16432._isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress _method = findCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (_temp_16432._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_16432 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (462)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (467)) ;
  }
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_16678 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_16678 = NULL ;
    while (((operand_16678 = enumerator_16678.nextObject ()))) {
      macroValidPointer (operand_16678) ;
      const GGS_midrange_ipic_instruction  _temp_16727 = operand_16678->mInstruction ;
      if (_temp_16727._isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress (_temp_16727._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_16727 (HERE), var_cas_inRegisterTable, var_cas_inTotalBankCount, var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (469)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_midrange_ipic_instruction  _temp_16890 = operand_16678->mInstruction ;
      if (_temp_16890._isBuilt ()) {
        _temp_16890 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (476)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (477)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress._multiply_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (481))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (483))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (484)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (485))))._operator_concat (GGS_string (true, " bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (487))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (488)) ;
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_17591 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_17591 = NULL ;
    while (((operand_17591 = enumerator_17591.nextObject ()))) {
      macroValidPointer (operand_17591) ;
      if (operand_17591->mInfo.mRegisterAddress._add_operation (_inLexique, operand_17591->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (491))._isBuilt ()) {
        ::routine_setEmitAddress (_inLexique,  operand_17591->mInfo.mRegisterAddress._add_operation (_inLexique, operand_17591->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (491)) COMMA_SOURCE_FILE_AT_LINE (491)) ;
      }
      if (operand_17591->mInfo.mRegisterValue._isBuilt ()) {
        ::routine_emitCode (_inLexique,  operand_17591->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (492)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_midrange_ipic_binary_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_build_binary_code (void) {
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress (category_method__midrange_ipic_instruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__enterLabelAtAddress) category_method__midrange_ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FD__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FD.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_F__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_F.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_FB__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_FB.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_GOTO__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_GOTO.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_CALL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_CALL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_CLRW__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_CLRW.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__midrange_ipic_instruction__generateBinaryCodeAtAddress) category_method__midrange_ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__midrange_ipic_instruction_MNOP.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_midrange_build_binary_code (prologueRoutineFor_midrange_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

