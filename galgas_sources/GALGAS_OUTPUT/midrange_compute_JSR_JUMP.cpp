//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'midrange_compute_JSR_JUMP.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 2nd, 2010, at 21h0'12"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "midrange_compute_JSR_JUMP.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_compute_JSR_JUMP.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           class 'e_midrange_symbolTableForConvertingRelatives'            *
//                                                                           *
//---------------------------------------------------------------------------*

e_midrange_symbolTableForConvertingRelatives::e_midrange_symbolTableForConvertingRelatives (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//         class map '@midrange_symbolTableForConvertingRelatives'           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_midrange_symbolTableForConvertingRelatives ("midrange_symbolTableForConvertingRelatives", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_midrange_symbolTableForConvertingRelatives::
elementOf_GGS_midrange_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_midrange_symbolTableForConvertingRelatives & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_symbolTableForConvertingRelatives::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_symbolTableForConvertingRelatives::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_midrange_symbolTableForConvertingRelatives * ptr = dynamic_cast <const elementOf_GGS_midrange_symbolTableForConvertingRelatives *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineAddress.operator_isEqual (ptr->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_midrange_symbolTableForConvertingRelatives::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_midrange_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_midrange_symbolTableForConvertingRelatives * info = (e_midrange_symbolTableForConvertingRelatives *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_midrange_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_midrange_symbolTableForConvertingRelatives * info = (e_midrange_symbolTableForConvertingRelatives *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTableForConvertingRelatives result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_midrange_symbolTableForConvertingRelatives info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTableForConvertingRelatives::
operator_isEqual (const GGS_midrange_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTableForConvertingRelatives::
operator_isNotEqual (const GGS_midrange_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_midrange_symbolTableForConvertingRelatives info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_midrange_symbolTableForConvertingRelatives::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_midrange_symbolTableForConvertingRelatives::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_midrange_symbolTableForConvertingRelatives & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTableForConvertingRelatives result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_symbolTableForConvertingRelatives result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_symbolTableForConvertingRelatives::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @midrange_symbolTableForConvertingRelatives " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_midrange_symbolTableForConvertingRelatives::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_midrange_symbolTableForConvertingRelatives::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_midrange_symbolTableForConvertingRelatives * p = NULL ;
    macroMyNew (p, GGS_midrange_symbolTableForConvertingRelatives (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_midrange_symbolTableForConvertingRelatives result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_midrange_symbolTableForConvertingRelatives * p = dynamic_cast <const GGS_midrange_symbolTableForConvertingRelatives *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_midrange_symbolTableForConvertingRelatives, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_midrange_symbolTableForConvertingRelatives::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_midrange_symbolTableForConvertingRelatives ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_instruction.defineLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__defineLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_922,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_922 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.defineLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress> gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress
findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress.count ()) {
    result = gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (superClassPtr) ;
      gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_pseudo_LABEL.defineLabelAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1186,
                                GGS_midrange_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1186 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (inLexique, operand_1186->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (32)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_ORG.defineLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_1492,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1492 != NULL) {
    const GGS_bool cond_1770 = (var_cas_ioAddress).operator_strictSup (operand_1492->mOrigin) ;
    if (cond_1770.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("internal error: current address (")).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_concat (GGS_string (") is greater than origin ("))).operator_concat (operand_1492->mOrigin.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
    }
    var_cas_ioAddress = operand_1492->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@midrange_ipic_actualInstruction.defineLabelAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__defineLabelAtAddress (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_actualInstruction * operand_1964,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1964 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1964->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (57)) ;
    GGS_uint  var_cas_nextAddress = var_cas_ioAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (58)) ;
    const GGS_bool cond_2347 = (((var_cas_nextAddress).operator_xor (var_cas_ioAddress)).operator_and (GGS_uint (63488U))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_2347.isBuiltAndTrue ()) {
      operand_1964->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Routine too long, crosses page boundary at this instruction") COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }
    var_cas_ioAddress = var_cas_nextAddress ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@midrange_ipic_instruction.compute'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__compute> gDispatchTableForMethod__midrange_ipic_instruction__compute ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__compute (typeCategoryMethod__midrange_ipic_instruction__compute inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__midrange_ipic_instruction__compute.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__compute
findCategoryMethod__midrange_ipic_instruction__compute (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__compute result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__midrange_ipic_instruction__compute.count ()) {
    result = gDispatchTableForMethod__midrange_ipic_instruction__compute (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__compute (superClassPtr) ;
      gDispatchTableForMethod__midrange_ipic_instruction__compute.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@midrange_ipic_NULL.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_NULL__compute (C_Compiler &,
                                const cPtr_midrange_ipic_NULL * operand_3241,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3241 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@midrange_ipic_actualInstruction.compute'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__compute (C_Compiler &,
                                const cPtr_midrange_ipic_actualInstruction * operand_3666,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3666 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@midrange_ipic_pseudo_ORG.compute'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__compute (C_Compiler &,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_4084,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4084 != NULL) {
    var_cas_ioAddress = operand_4084->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@midrange_ipic_JUMP.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__compute (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_4514,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioJUMP_or_JSR_fixed,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4514 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  temp_4832 = var_cas_inRoutineSymbolTable ;
    if (temp_4832.isBuilt ()) {
      temp_4832 (HERE)->method_searchKey (inLexique, operand_4514->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
    GGS_uint  var_cas_flags = (var_cas_ioAddress).operator_xor (var_cas_targetAddress) ;
    GGS_midrange_call_goto_bit var_cas_bit11 ;
    const GGS_bool cond_5058 = ((var_cas_flags).operator_and (GGS_uint (2048U))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_5058.isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_noChange (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
    }else if (cond_5058.isBuiltAndFalse ()) {
      const GGS_bool cond_5148 = ((var_cas_targetAddress).operator_and (GGS_uint (2048U))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_5148.isBuiltAndTrue ()) {
        var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_clear (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
      }else if (cond_5148.isBuiltAndFalse ()) {
        var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_set (inLexique COMMA_SOURCE_FILE_AT_LINE (139)) ;
      }
    }
    GGS_midrange_call_goto_bit var_cas_bit12 ;
    const GGS_bool cond_5355 = ((var_cas_flags).operator_and (GGS_uint (4096U))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_5355.isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_noChange (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }else if (cond_5355.isBuiltAndFalse ()) {
      const GGS_bool cond_5446 = ((var_cas_targetAddress).operator_and (GGS_uint (4096U))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_5446.isBuiltAndTrue ()) {
        var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_clear (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }else if (cond_5446.isBuiltAndFalse ()) {
        var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_set (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }
    }
    const GGS_bool cond_5938 = ((var_cas_bit11).operator_isNotEqual (operand_4514->mBit11)).operator_or ((var_cas_bit12).operator_isNotEqual (operand_4514->mBit12)) ;
    if (cond_5938.isBuiltAndTrue ()) {
      GGS_midrange_ipic_actualInstruction  var_cas_instruction = GGS_midrange_ipic_JUMP ::constructor_new (inLexique, operand_4514->mInstructionLocation, operand_4514->mTargetLabel, var_cas_bit11, var_cas_bit12 COMMA_SOURCE_FILE_AT_LINE (152)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (158)) ;
      var_cas_ioJUMP_or_JSR_fixed = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
      var_cas_ioListFileContents.appendCString (":  JUMP to other page fixed\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@midrange_ipic_JSR.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__compute (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JSR * operand_6080,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioJUMP_or_JSR_fixed,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6080 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  temp_6398 = var_cas_inRoutineSymbolTable ;
    if (temp_6398.isBuilt ()) {
      temp_6398 (HERE)->method_searchKey (inLexique, operand_6080->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
    GGS_uint  var_cas_flags = (var_cas_ioAddress).operator_xor (var_cas_targetAddress) ;
    GGS_midrange_call_goto_bit var_cas_bit11 ;
    const GGS_bool cond_6624 = ((var_cas_flags).operator_and (GGS_uint (2048U))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_6624.isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_noChange (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) ;
    }else if (cond_6624.isBuiltAndFalse ()) {
      const GGS_bool cond_6714 = ((var_cas_targetAddress).operator_and (GGS_uint (2048U))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_6714.isBuiltAndTrue ()) {
        var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_clear (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
      }else if (cond_6714.isBuiltAndFalse ()) {
        var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_set (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
      }
    }
    GGS_midrange_call_goto_bit var_cas_bit12 ;
    const GGS_bool cond_6921 = ((var_cas_flags).operator_and (GGS_uint (4096U))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_6921.isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_noChange (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
    }else if (cond_6921.isBuiltAndFalse ()) {
      const GGS_bool cond_7012 = ((var_cas_targetAddress).operator_and (GGS_uint (4096U))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_7012.isBuiltAndTrue ()) {
        var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_clear (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
      }else if (cond_7012.isBuiltAndFalse ()) {
        var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_set (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
      }
    }
    const GGS_bool cond_7502 = ((var_cas_bit11).operator_isNotEqual (operand_6080->mBit11)).operator_or ((var_cas_bit12).operator_isNotEqual (operand_6080->mBit12)) ;
    if (cond_7502.isBuiltAndTrue ()) {
      GGS_midrange_ipic_actualInstruction  var_cas_instruction = GGS_midrange_ipic_JSR ::constructor_new (inLexique, operand_6080->mInstructionLocation, operand_6080->mTargetLabel, var_cas_bit11, var_cas_bit12 COMMA_SOURCE_FILE_AT_LINE (198)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (204)) ;
      var_cas_ioJUMP_or_JSR_fixed = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_inIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
      var_cas_ioListFileContents.appendCString (":  JSR to other page fixed\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@midrange_ipic_pseudo_LABEL.compute'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__compute (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_7653,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7653 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  temp_7971 = var_cas_inRoutineSymbolTable ;
    if (temp_7971.isBuilt ()) {
      temp_7971 (HERE)->method_searchKey (inLexique, operand_7653->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (221)) ;
    }
    const GGS_bool cond_8246 = (var_cas_targetAddress).operator_isNotEqual (var_cas_ioAddress) ;
    if (cond_8246.isBuiltAndTrue ()) {
      operand_7653->mLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("Internal second pass error: the '")).operator_concat (operand_7653->mLabel)).operator_concat (GGS_string ("' label gets "))).operator_concat (var_cas_ioAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (224)))).operator_concat (GGS_string (" value in second pass, while it gets "))).operator_concat (var_cas_targetAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (225)))).operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (226)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "midrange_compute_JSR_JUMP"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_compute_JSR_JUMP (C_Compiler & inLexique,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_compute_JSR_JUMP at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("COMPUTE JSR and JUMP").reader_stringByLeftAndRightPadding (GGS_uint (77U), GGS_char (TO_UNICODE (' ')))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  GGS_bool var_cas_JUMP_or_JSR_fixed = GGS_bool (true) ;
  GGS_uint  var_cas_iteration = GGS_uint (0U) ;
  GGS_uint _variant_14876 = var_cas_ioGeneratedInstructionList.reader_length () ;
  GGS_bool _condition_14876 (_variant_14876.isBuilt (), true) ;
  while (_condition_14876.isBuiltAndTrue ()) {
    _condition_14876 = (var_cas_JUMP_or_JSR_fixed).operator_and ((GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (342))).operator_isEqual (GGS_uint (0U))) ;
    if (_condition_14876.isBuiltAndTrue ()) {
      if (_variant_14876.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (371)) ;
        _condition_14876 = GGS_bool (false) ;
      }else{
        _variant_14876.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_JUMP_or_JSR_fixed = GGS_bool (false) ;
        var_cas_iteration.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (345)) ;
        var_cas_ioListFileContents.appendCString ("Pass ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_iteration.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (346))) ;
        var_cas_ioListFileContents.appendCString (":\n") ;
        GGS_midrange_symbolTableForConvertingRelatives  var_cas_symbolTable = GGS_midrange_symbolTableForConvertingRelatives ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (348)) ;
        GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
        {
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_13752 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_13752 = NULL ;
          while (((operand_13752 = enumerator_13752.nextObject ()))) {
            macroValidPointer (operand_13752) ;
            const GGS_midrange_ipic_instruction  temp_13796 = operand_13752->mInstruction ;
            if (temp_13796.isBuilt ()) {
              typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress method = findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (temp_13796.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_13796 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (351)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (0U) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_14030 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_14030 = NULL ;
          while (((operand_14030 = enumerator_14030.nextObject ()))) {
            macroValidPointer (operand_14030) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_midrange_ipic_instruction  temp_14113 = operand_14030->mInstruction ;
            if (temp_14113.isBuilt ()) {
              temp_14113 (HERE)->method_instructionLength (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (358)) ;
            }
            const GGS_midrange_ipic_instruction  temp_14163 = operand_14030->mInstruction ;
            if (temp_14163.isBuilt ()) {
              typeCategoryMethod__midrange_ipic_instruction__compute method = findCategoryMethod__midrange_ipic_instruction__compute (temp_14163.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_14163 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_JUMP_or_JSR_fixed, var_cas_ioGeneratedInstructionList, var_cas_idx, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (359)) ;
              }
            }
            var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (360)) ;
            var_cas_idx.mValue ++ ;
          }
        }
        const GGS_bool cond_14662 = (var_cas_lastAddressForFirstPass).operator_isNotEqual (var_cas_currentAddress) ;
        if (cond_14662.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("Internal second pass error: the last address gets ")).operator_concat (var_cas_currentAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (363)))).operator_concat (GGS_string (" value when checking relative branches, while it gets "))).operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (365)))).operator_concat (GGS_string (" value when computing routine map")) COMMA_SOURCE_FILE_AT_LINE (366)) ;
        }
        const GGS_bool cond_14865 = (var_cas_JUMP_or_JSR_fixed).operator_not () ;
        if (cond_14865.isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("  No JUMP, no JSR to fix\n"
            "\n") ;
          var_cas_ioListFileContents.appendCString ("Program size: ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (369))) ;
          var_cas_ioListFileContents.appendCString (" instructions\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_compute_JSR_JUMP\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_compute_JSR_JUMP (void) {
  enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (category_method__midrange_ipic_instruction__defineLabelAtAddress, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_pseudo_LABEL__defineLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_pseudo_ORG__defineLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_actualInstruction__defineLabelAtAddress, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_NULL__compute, gClassInfoFor__midrange_ipic_NULL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_actualInstruction__compute, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_pseudo_ORG__compute, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_JUMP__compute, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_JSR__compute, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_pseudo_LABEL__compute, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_midrange_compute_JSR_JUMP (void) {
  gDispatchTableForMethod__midrange_ipic_instruction__defineLabelAtAddress.free () ;
  gDispatchTableForMethod__midrange_ipic_instruction__compute.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_midrange_compute_JSR_JUMP (prologueRoutineFor_midrange_compute_JSR_JUMP, epilogueRoutineFor_midrange_compute_JSR_JUMP) ;

//---------------------------------------------------------------------------*

