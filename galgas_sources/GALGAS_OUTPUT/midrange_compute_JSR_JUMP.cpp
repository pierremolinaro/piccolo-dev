//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'midrange_compute_JSR_JUMP.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 9th, 2009, at 14h26'39"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_compute_JSR_JUMP.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_compute_JSR_JUMP.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           class 'e_midrange_symbolTableForConvertingRelatives'            *
//                                                                           *
//---------------------------------------------------------------------------*

e_midrange_symbolTableForConvertingRelatives::e_midrange_symbolTableForConvertingRelatives (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//         class map '@midrange_symbolTableForConvertingRelatives'           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_symbolTableForConvertingRelatives::
elementOf_GGS_midrange_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_midrange_symbolTableForConvertingRelatives & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_symbolTableForConvertingRelatives::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_symbolTableForConvertingRelatives::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_midrange_symbolTableForConvertingRelatives * _p = dynamic_cast <const elementOf_GGS_midrange_symbolTableForConvertingRelatives *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_midrange_symbolTableForConvertingRelatives::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_midrange_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_midrange_symbolTableForConvertingRelatives * info = (e_midrange_symbolTableForConvertingRelatives *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_midrange_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_midrange_symbolTableForConvertingRelatives * info = (e_midrange_symbolTableForConvertingRelatives *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTableForConvertingRelatives result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_midrange_symbolTableForConvertingRelatives info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTableForConvertingRelatives::
_operator_isEqual (const GGS_midrange_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_symbolTableForConvertingRelatives::
_operator_isNotEqual (const GGS_midrange_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_midrange_symbolTableForConvertingRelatives info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (isBuilt () && inValue.isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_symbolTableForConvertingRelatives::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_midrange_symbolTableForConvertingRelatives & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_midrange_symbolTableForConvertingRelatives result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_symbolTableForConvertingRelatives GGS_midrange_symbolTableForConvertingRelatives::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_symbolTableForConvertingRelatives result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_symbolTableForConvertingRelatives::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @midrange_symbolTableForConvertingRelatives " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_midrange_symbolTableForConvertingRelatives::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_instruction.defineLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__defineLabelAtAddress (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_922,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_922 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.defineLabelAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress> gDispatchTableFor__midrange_ipic_instruction__defineLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress
findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__defineLabelAtAddress.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__defineLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_pseudo_LABEL.defineLabelAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1186,
                                GGS_midrange_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1186 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1186->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (32)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_ORG.defineLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_1492,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1492 != NULL) {
    if (((var_cas_ioAddress)._operator_strictSup (operand_1492->mOrigin)).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string ("internal error: current address ("))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))))._operator_concat (GGS_string (") is greater than origin (")))._operator_concat (operand_1492->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))))._operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
    }
    var_cas_ioAddress = operand_1492->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@midrange_ipic_actualInstruction.defineLabelAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_actualInstruction * operand_1964,
                                GGS_midrange_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1964 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1964->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (57)) ;
    GGS_uint  var_cas_nextAddress ;
    var_cas_nextAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (58)) ;
    if (((((var_cas_nextAddress)._operator_xor (var_cas_ioAddress))._operator_and (GGS_uint (63488U)))._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      operand_1964->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Routine too long, crosses page boundary at this instruction") COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }
    var_cas_ioAddress = var_cas_nextAddress ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@midrange_ipic_instruction.compute'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__compute> gDispatchTableFor__midrange_ipic_instruction__compute ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__compute (typeCategoryMethod__midrange_ipic_instruction__compute inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__compute.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__compute
findCategoryMethod__midrange_ipic_instruction__compute (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__compute result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__compute.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__compute (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__compute (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__compute.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@midrange_ipic_NULL.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_NULL__compute (C_Compiler &,
                                const cPtr_midrange_ipic_NULL * operand_3241,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3241 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@midrange_ipic_actualInstruction.compute'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_actualInstruction__compute (C_Compiler &,
                                const cPtr_midrange_ipic_actualInstruction * operand_3666,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3666 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@midrange_ipic_pseudo_ORG.compute'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__compute (C_Compiler &,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_4084,
                                const GGS_midrange_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4084 != NULL) {
    var_cas_ioAddress = operand_4084->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@midrange_ipic_JUMP.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__compute (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_4514,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioJUMP_or_JSR_fixed,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4514 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  _temp_4832 = var_cas_inRoutineSymbolTable ;
    if (_temp_4832.isBuilt ()) {
      _temp_4832 (HERE)->method_searchKey (_inLexique, operand_4514->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
    GGS_uint  var_cas_flags ;
    var_cas_flags = (var_cas_ioAddress)._operator_xor (var_cas_targetAddress) ;
    GGS_midrange_call_goto_bit var_cas_bit11 ;
    if ((((var_cas_flags)._operator_and (GGS_uint (2048U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) ;
    }else if ((((var_cas_targetAddress)._operator_and (GGS_uint (2048U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_clear (_inLexique COMMA_HERE) ;
    }else{
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_set (_inLexique COMMA_HERE) ;
    }
    GGS_midrange_call_goto_bit var_cas_bit12 ;
    if ((((var_cas_flags)._operator_and (GGS_uint (4096U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) ;
    }else if ((((var_cas_targetAddress)._operator_and (GGS_uint (4096U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_clear (_inLexique COMMA_HERE) ;
    }else{
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_set (_inLexique COMMA_HERE) ;
    }
    if ((((var_cas_bit11)._operator_isNotEqual (operand_4514->mBit11))._operator_or ((var_cas_bit12)._operator_isNotEqual (operand_4514->mBit12))).isBuiltAndTrue ()) {
      GGS_midrange_ipic_actualInstruction  var_cas_instruction ;
      var_cas_instruction = GGS_midrange_ipic_JUMP ::constructor_new (_inLexique, operand_4514->mInstructionLocation, operand_4514->mTargetLabel, var_cas_bit11, var_cas_bit12 COMMA_HERE) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (158)) ;
      var_cas_ioJUMP_or_JSR_fixed = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
      var_cas_ioListFileContents.appendCString (":  JUMP to other page fixed\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@midrange_ipic_JSR.compute'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__compute (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JSR * operand_6080,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioJUMP_or_JSR_fixed,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6080 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  _temp_6398 = var_cas_inRoutineSymbolTable ;
    if (_temp_6398.isBuilt ()) {
      _temp_6398 (HERE)->method_searchKey (_inLexique, operand_6080->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
    GGS_uint  var_cas_flags ;
    var_cas_flags = (var_cas_ioAddress)._operator_xor (var_cas_targetAddress) ;
    GGS_midrange_call_goto_bit var_cas_bit11 ;
    if ((((var_cas_flags)._operator_and (GGS_uint (2048U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) ;
    }else if ((((var_cas_targetAddress)._operator_and (GGS_uint (2048U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_clear (_inLexique COMMA_HERE) ;
    }else{
      var_cas_bit11 = GGS_midrange_call_goto_bit::constructor_set (_inLexique COMMA_HERE) ;
    }
    GGS_midrange_call_goto_bit var_cas_bit12 ;
    if ((((var_cas_flags)._operator_and (GGS_uint (4096U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) ;
    }else if ((((var_cas_targetAddress)._operator_and (GGS_uint (4096U)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_clear (_inLexique COMMA_HERE) ;
    }else{
      var_cas_bit12 = GGS_midrange_call_goto_bit::constructor_set (_inLexique COMMA_HERE) ;
    }
    if ((((var_cas_bit11)._operator_isNotEqual (operand_6080->mBit11))._operator_or ((var_cas_bit12)._operator_isNotEqual (operand_6080->mBit12))).isBuiltAndTrue ()) {
      GGS_midrange_ipic_actualInstruction  var_cas_instruction ;
      var_cas_instruction = GGS_midrange_ipic_JSR ::constructor_new (_inLexique, operand_6080->mInstructionLocation, operand_6080->mTargetLabel, var_cas_bit11, var_cas_bit12 COMMA_HERE) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (204)) ;
      var_cas_ioJUMP_or_JSR_fixed = GGS_bool (true) ;
      var_cas_ioListFileContents.appendCString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
      var_cas_ioListFileContents.appendCString (":  JSR to other page fixed\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@midrange_ipic_pseudo_LABEL.compute'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__compute (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_7653,
                                const GGS_midrange_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioJUMP_or_JSR_fixed */,
                                GGS_midrange_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7653 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_midrange_symbolTableForConvertingRelatives  _temp_7971 = var_cas_inRoutineSymbolTable ;
    if (_temp_7971.isBuilt ()) {
      _temp_7971 (HERE)->method_searchKey (_inLexique, operand_7653->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (221)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_7653->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string ("Internal second pass error: the '"))._operator_concat (operand_7653->mLabel))._operator_concat (GGS_string ("' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (224))))._operator_concat (GGS_string (" value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (225))))._operator_concat (GGS_string (" in first pass")) COMMA_SOURCE_FILE_AT_LINE (226)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "midrange_compute_JSR_JUMP"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_compute_JSR_JUMP (C_Compiler & _inLexique,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_compute_JSR_JUMP at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (336))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("COMPUTE JSR and JUMP").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (337))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (338))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  GGS_bool var_cas_JUMP_or_JSR_fixed ;
  var_cas_JUMP_or_JSR_fixed = GGS_bool (true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (0U) ;
  GGS_uint _variant_14870 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (341)) ;
  GGS_bool _condition_14870 (_variant_14870.isBuilt (), true) ;
  while (_condition_14870.isBuiltAndTrue ()) {
    _condition_14870 = (var_cas_JUMP_or_JSR_fixed)._operator_and ((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (0U))) ;
    if (_condition_14870.isBuiltAndTrue ()) {
      if (_variant_14870.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (371)) ;
        _condition_14870 = GGS_bool (false) ;
      }else{
        _variant_14870._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_JUMP_or_JSR_fixed = GGS_bool (false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (345)) ;
        var_cas_ioListFileContents.appendCString ("Pass ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_iteration.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (346))) ;
        var_cas_ioListFileContents.appendCString (":\n") ;
        GGS_midrange_symbolTableForConvertingRelatives  var_cas_symbolTable ;
        var_cas_symbolTable = GGS_midrange_symbolTableForConvertingRelatives ::constructor_emptyMap (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (0U) ;
        {
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_13752 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_13752 = NULL ;
          while (((operand_13752 = enumerator_13752.nextObject ()))) {
            macroValidPointer (operand_13752) ;
            const GGS_midrange_ipic_instruction  _temp_13796 = operand_13752->mInstruction ;
            if (_temp_13796.isBuilt ()) {
              typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress _method = findCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (_temp_13796._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_13796 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (351)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_lastAddressForFirstPass ;
        var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (0U) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_14030 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_14030 = NULL ;
          while (((operand_14030 = enumerator_14030.nextObject ()))) {
            macroValidPointer (operand_14030) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_midrange_ipic_instruction  _temp_14107 = operand_14030->mInstruction ;
            if (_temp_14107.isBuilt ()) {
              _temp_14107 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (358)) ;
            }
            const GGS_midrange_ipic_instruction  _temp_14157 = operand_14030->mInstruction ;
            if (_temp_14157.isBuilt ()) {
              typeCategoryMethod__midrange_ipic_instruction__compute _method = findCategoryMethod__midrange_ipic_instruction__compute (_temp_14157._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_14157 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_JUMP_or_JSR_fixed, var_cas_ioGeneratedInstructionList, var_cas_idx, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (359)) ;
              }
            }
            var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (360)) ;
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string ("Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (363))))._operator_concat (GGS_string (" value when checking relative branches, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (365))))._operator_concat (GGS_string (" value when computing routine map")) COMMA_SOURCE_FILE_AT_LINE (366)) ;
        }
        if (((var_cas_JUMP_or_JSR_fixed)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("  No JUMP, no JSR to fix\n"
            "\n") ;
          var_cas_ioListFileContents.appendCString ("Program size: ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (369))) ;
          var_cas_ioListFileContents.appendCString (" instructions\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_compute_JSR_JUMP\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_compute_JSR_JUMP (void) {
 enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress (category_method__midrange_ipic_instruction__defineLabelAtAddress, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_pseudo_LABEL__defineLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_pseudo_ORG__defineLabelAtAddress, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__midrange_ipic_instruction__defineLabelAtAddress) category_method__midrange_ipic_actualInstruction__defineLabelAtAddress, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_NULL__compute, gClassInfoFor__midrange_ipic_NULL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_actualInstruction__compute, gClassInfoFor__midrange_ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_pseudo_ORG__compute, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_JUMP__compute, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_JSR__compute, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__compute ((typeCategoryMethod__midrange_ipic_instruction__compute) category_method__midrange_ipic_pseudo_LABEL__compute, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_midrange_compute_JSR_JUMP (prologueRoutineFor_midrange_compute_JSR_JUMP,
                                   NULL) ;

//---------------------------------------------------------------------------*

