//---------------------------------------------------------------------------*
//                                                                           *
//               File 'midrange_ipic_build_assembly_code.cpp'                *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 23th, 2010, at 16h3'38"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "midrange_ipic_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_ipic_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.buildAssemblyCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode> gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode (typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode
findCategoryMethod__midrange_ipic_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@midrange_ipic_NULL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_NULL__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_NULL * operand_710,
                                GGS_string & /* var_cas_ioString */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_710 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@midrange_ipic_pseudo_ORG.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_ORG * operand_906,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_906 != NULL) {
    var_cas_ioString.appendCString ("  ORG ") ;
    var_cas_ioString.dotAssign_operation (operand_906->mOrigin.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (30))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_pseudo_LABEL.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_1150,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1150 != NULL) {
    var_cas_ioString.dotAssign_operation (operand_1150->mLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (39))) ;
    var_cas_ioString.appendCString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_instruction_FD.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FD__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_FD * operand_1382,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1382 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_1382->mInstruction_FD_base_code.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_1382->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (48))) ;
    const GGS_bool cond_1606 = operand_1382->m_W_isDestination ;
    if (cond_1606.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", W") ;
    }else if (cond_1606.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString (", F") ;
    }
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_instruction_FB.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_FB__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_FB * operand_1796,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1796 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_1796->mBitOrientedOp.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (63))) ;
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_1796->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (64))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_1796->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (65))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_BitTestSkip.buildAssemblyCode' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_BitTestSkip__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_BitTestSkip * operand_2172,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2172 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    const GGS_bool cond_2305 = operand_2172->mSkipIfSet ;
    if (cond_2305.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("BTFSS") ;
    }else if (cond_2305.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("BTFSC") ;
    }
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_2172->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
    var_cas_ioString.appendCString (", ") ;
    var_cas_ioString.dotAssign_operation (operand_2172->mBitNumber.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@midrange_ipic_instruction_F.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_F__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_F * operand_2601,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2601 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_2601->mFinstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_2601->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_incDecRegisterInCondition.buildAssemblyCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_incDecRegisterInCondition__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_incDecRegisterInCondition * operand_2920,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioLocalLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2920 != NULL) {
    const GGS_bool cond_3034 = operand_2920->mIncrement ;
    if (cond_3034.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString ("  "
      "INCFSZ ") ;
    }else if (cond_3034.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  "
      "DECFSZ ") ;
    }
    var_cas_ioString.dotAssign_operation (operand_2920->mRegisterDescription.reader_mAssemblyString (inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
    const GGS_bool cond_3194 = operand_2920->m_W_isDestination ;
    if (cond_3194.isBuiltAndTrue ()) {
      var_cas_ioString.appendCString (", W") ;
    }else if (cond_3194.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString (", F") ;
    }
    var_cas_ioString.appendCString ("\n") ;
    const GGS_bool cond_3512 = operand_2920->mBranchIfZero ;
    if (cond_3512.isBuiltAndTrue ()) {
      GGS_string var_cas_localLabel = (GGS_string ("_local_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (115)) ;
      var_cas_ioString.appendCString ("  GOTO ") ;
      var_cas_ioString.dotAssign_operation (var_cas_localLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.appendCString ("  GOTO ") ;
      var_cas_ioString.dotAssign_operation (operand_2920->mTargetLabel) ;
      var_cas_ioString.appendCString ("\n") ;
      var_cas_ioString.dotAssign_operation (var_cas_localLabel) ;
      var_cas_ioString.appendCString (":\n") ;
    }else if (cond_3512.isBuiltAndFalse ()) {
      var_cas_ioString.appendCString ("  GOTO ") ;
      var_cas_ioString.dotAssign_operation (operand_2920->mTargetLabel) ;
      var_cas_ioString.appendCString ("\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@midrange_ipic_JUMP.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_3696,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3696 != NULL) {
    switch (operand_3696->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_3696->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    var_cas_ioString.appendCString ("  GOTO   ") ;
    var_cas_ioString.dotAssign_operation (operand_3696->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@midrange_ipic_GOTO.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_GOTO__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_GOTO * operand_4233,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4233 != NULL) {
    var_cas_ioString.appendCString ("  GOTO   ") ;
    var_cas_ioString.dotAssign_operation (operand_4233->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@midrange_ipic_JSR.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JSR__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_JSR * operand_4473,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4473 != NULL) {
    switch (operand_4473->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_4473->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    var_cas_ioString.appendCString ("  CALL  ") ;
    var_cas_ioString.dotAssign_operation (operand_4473->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (168))) ;
    var_cas_ioString.appendCString ("\n") ;
    switch (operand_4473->mBit11.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 3\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
    switch (operand_4473->mBit12.enumValue ()) {
    case GGS_midrange_call_goto_bit::enum_set:
      {
      var_cas_ioString.appendCString ("  BCF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_clear:
      {
      var_cas_ioString.appendCString ("  BSF PCLATH, 4\n") ;
      }
      break ;
    case GGS_midrange_call_goto_bit::enum_noChange:
      {
      }
      break ;
    case GGS_midrange_call_goto_bit::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@midrange_ipic_CALL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_CALL__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_CALL * operand_5305,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5305 != NULL) {
    var_cas_ioString.appendCString ("  CALL  ") ;
    var_cas_ioString.dotAssign_operation (operand_5305->mTargetLabel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_instruction_CLRWDT.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_CLRWDT * operand_5559,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5559 != NULL) {
    var_cas_ioString.appendCString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@midrange_ipic_instruction_CLRW.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_CLRW__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_CLRW * operand_5782,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5782 != NULL) {
    var_cas_ioString.appendCString ("  CLRW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@midrange_ipic_instruction_NOP.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_NOP * operand_6002,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6002 != NULL) {
    var_cas_ioString.appendCString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_instruction_RETURN.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_RETURN * operand_6224,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6224 != NULL) {
    var_cas_ioString.appendCString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@midrange_ipic_instruction_RETFIE.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_RETFIE * operand_6450,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6450 != NULL) {
    var_cas_ioString.appendCString ("  RETFIE\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@midrange_ipic_instruction_SLEEP.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_midrange_ipic_instruction_SLEEP * operand_6675,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6675 != NULL) {
    var_cas_ioString.appendCString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_literalOperation.buildAssemblyCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_literalOperation__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_literalOperation * operand_6909,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6909 != NULL) {
    var_cas_ioString.appendCString ("  ") ;
    var_cas_ioString.dotAssign_operation (operand_6909->mLiteralInstruction.reader_mnemonic (inLexique COMMA_SOURCE_FILE_AT_LINE (250))) ;
    var_cas_ioString.appendCString (" ") ;
    var_cas_ioString.dotAssign_operation (operand_6909->mLiteralValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (250))) ;
    var_cas_ioString.appendCString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@midrange_ipic_instruction_MNOP.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_MNOP__buildAssemblyCode (C_Compiler & inLexique,
                                const cPtr_midrange_ipic_instruction_MNOP * operand_7198,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7198 != NULL) {
    const GGS_bool cond_7355 = (operand_7198->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7355.isBuiltAndTrue ()) {
      operand_7198->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("No generated code") COMMA_SOURCE_FILE_AT_LINE (260)) ;
    }
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint _variant_7504 = operand_7198->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
    GGS_bool _condition_7504 (_variant_7504.isBuilt (), true) ;
    while (_condition_7504.isBuiltAndTrue ()) {
      _condition_7504 = (var_cas_idx).operator_strictInf (operand_7198->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (264))) ;
      if (_condition_7504.isBuiltAndTrue ()) {
        if (_variant_7504.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (268)) ;
          _condition_7504 = GGS_bool (false) ;
        }else{
          _variant_7504.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_ioString.appendCString ("  NOP\n") ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "midrange_build_assembly_code"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_build_assembly_code (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_midrange_ipic_instructionList   var_cas_inInstructionList,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_string & var_cas_outAssemblyCode
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_build_assembly_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = GGS_string ("  errorlevel -302 ; No Warning on registers not in bank 0\n") ;
  var_cas_outAssemblyCode = GGS_string ("  errorlevel -306 ; No Warning on crossing page boundary\n"
    "\n") ;
  var_cas_outAssemblyCode.appendCString ("  PROCESSOR ") ;
  var_cas_outAssemblyCode.dotAssign_operation (var_cas_inProcessorName) ;
  var_cas_outAssemblyCode.appendCString ("\n"
    "\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Code\n") ;
  var_cas_outAssemblyCode.appendCString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex = GGS_uint (0U) ;
  {
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_9569 (var_cas_inInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_9569 = NULL ;
    while (((operand_9569 = enumerator_9569.nextObject ()))) {
      macroValidPointer (operand_9569) ;
      { typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode method = findCategoryMethod__midrange_ipic_instruction__buildAssemblyCode (operand_9569->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_9569->mInstruction (HERE), var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (337)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_9798 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_9798 = NULL ;
    while (((operand_9798 = enumerator_9798.nextObject ()))) {
      macroValidPointer (operand_9798) ;
      GGS_uint  var_cas_firstRegister ;
      if (operand_9798->mInfo.mRegisterAddressList.isBuilt ()) {
        operand_9798->mInfo.mRegisterAddressList (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (343)) ;
      }
      var_cas_outAssemblyCode.dotAssign_operation (operand_9798->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_outAssemblyCode.appendCString (" EQU ") ;
      var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_outAssemblyCode.appendCString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_10125 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_10125 = NULL ;
    while (((operand_10125 = enumerator_10125.nextObject ()))) {
      macroValidPointer (operand_10125) ;
      const GGS_bool cond_10358 = (var_cas_inPredefinedRegisters.reader_hasKey (operand_10125->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).operator_not () ;
      if (cond_10358.isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        if (operand_10125->mInfo.mRegisterAddressList.isBuilt ()) {
          operand_10125->mInfo.mRegisterAddressList (HERE)->method_first (inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (351)) ;
        }
        var_cas_outAssemblyCode.dotAssign_operation (operand_10125->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
        var_cas_outAssemblyCode.appendCString (" EQU ") ;
        var_cas_outAssemblyCode.dotAssign_operation (var_cas_firstRegister.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString ("\n") ;
  var_cas_outAssemblyCode.appendCString (";--- Piccolo defined symbol\n") ;
  var_cas_outAssemblyCode.appendCString ("W EQU 1\n"
    "\n") ;
  const GGS_bool cond_10862 = (var_cas_inActualConfigurationMap.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_10862.isBuiltAndTrue ()) {
    var_cas_outAssemblyCode.appendCString (";--- Configuration\n"
      "\n") ;
    {
      GGS_actualConfigurationMap::cEnumerator enumerator_10714 (var_cas_inActualConfigurationMap, true) ;
      const GGS_actualConfigurationMap::cElement * operand_10714 = NULL ;
      while (((operand_10714 = enumerator_10714.nextObject ()))) {
        macroValidPointer (operand_10714) ;
        var_cas_outAssemblyCode.appendCString ("  __config ") ;
        var_cas_outAssemblyCode.dotAssign_operation (operand_10714->mInfo.mRegisterAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (363))) ;
        var_cas_outAssemblyCode.appendCString (", ") ;
        var_cas_outAssemblyCode.dotAssign_operation ((operand_10714->mInfo.mRegisterValue).operator_and (GGS_uint (255U)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (363))) ;
        var_cas_outAssemblyCode.appendCString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.appendCString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.appendCString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_build_assembly_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_ipic_build_assembly_code (void) {
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_NULL__buildAssemblyCode, gClassInfoFor__midrange_ipic_NULL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__midrange_ipic_pseudo_ORG.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_FD__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_FD.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_FB__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_FB.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_BitTestSkip__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_BitTestSkip.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_F__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_F.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_incDecRegisterInCondition__buildAssemblyCode, gClassInfoFor__midrange_ipic_incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_JUMP__buildAssemblyCode, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_GOTO__buildAssemblyCode, gClassInfoFor__midrange_ipic_GOTO.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_JSR__buildAssemblyCode, gClassInfoFor__midrange_ipic_JSR.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_CALL__buildAssemblyCode, gClassInfoFor__midrange_ipic_CALL.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_CLRW__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_CLRW.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_NOP__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_NOP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_RETURN__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_RETURN.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_RETFIE.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__midrange_ipic_instruction__buildAssemblyCode ((typeCategoryMethod__midrange_ipic_instruction__buildAssemblyCode) category_method__midrange_ipic_instruction_MNOP__buildAssemblyCode, gClassInfoFor__midrange_ipic_instruction_MNOP.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_midrange_ipic_build_assembly_code (void) {
  gDispatchTableForMethod__midrange_ipic_instruction__buildAssemblyCode.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_midrange_ipic_build_assembly_code (prologueRoutineFor_midrange_ipic_build_assembly_code, epilogueRoutineFor_midrange_ipic_build_assembly_code) ;

//---------------------------------------------------------------------------*

