//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'midrange_metamodel.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 16th, 2008, at 11h51'3"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_metamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_metamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_midrange_instruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction::
cPtr_midrange_instruction (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mInstructionLocation (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction * GGS_midrange_instruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction (& typeid (cPtr_midrange_instruction), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_midrange_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction::
GGS_midrange_instruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction::
GGS_midrange_instruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction GGS_midrange_instruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_instruction::
reader_mInstructionLocation (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction *) mPointer)->mInstructionLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction::actualTypeName (void) const {
  return "midrange_instruction" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_midrange_instruction::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__midrange_instruction ("midrange_instruction") ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@midrange_instructionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_instructionList::
elementOf_GGS_midrange_instructionList (const GGS_midrange_instruction & argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mInstruction (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_instructionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_midrange_instructionList * _p = dynamic_cast <const elementOf_GGS_midrange_instructionList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstruction._operator_isEqual (_p->mInstruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_instructionList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@midrange_instructionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
_internalAppendValues (const GGS_midrange_instruction & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
_internalPrependValues (const GGS_midrange_instruction & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
_addAssign_operation (const GGS_midrange_instruction & argument_0) {
  if (_isBuilt ()&& argument_0._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList GGS_midrange_instructionList::
_operator_concat (const GGS_midrange_instructionList & inOperand) const {
  GGS_midrange_instructionList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
_dotAssign_operation (const GGS_midrange_instructionList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_midrange_instructionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_midrange_instruction  p_0 = p->mInstruction ;
          _internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_midrange_instruction & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mInstruction
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instructionList::
constructor_emptyList (void) {
  GGS_midrange_instructionList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instructionList::
constructor_listWithValue (const GGS_midrange_instruction & argument_0) {
  GGS_midrange_instructionList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
internalSubListWithRange (GGS_midrange_instructionList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mInstruction) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList GGS_midrange_instructionList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_instructionList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList GGS_midrange_instructionList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_instructionList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_instructionList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@midrange_instructionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
method_first (C_Compiler & _inLexique,
              GGS_midrange_instruction & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInstruction ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
method_last (C_Compiler & _inLexique,
             GGS_midrange_instruction & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInstruction ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_midrange_instruction & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInstruction ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_midrange_instruction & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInstruction ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction  GGS_midrange_instructionList::
reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_midrange_instruction  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstruction ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_instructionList::
modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_midrange_instruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstruction = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_midrange_instruction  & GGS_midrange_instructionList::cEnumerator::_mInstruction (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_midrange_instruction_nobanksel'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_nobanksel::
cPtr_midrange_instruction_nobanksel (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_nobanksel * GGS_midrange_instruction_nobanksel::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_nobanksel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_nobanksel *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_nobanksel::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_nobanksel * _p = dynamic_cast <const cPtr_midrange_instruction_nobanksel *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_nobanksel::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_nobanksel:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_nobanksel::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_nobanksel::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_nobanksel (& typeid (cPtr_midrange_instruction_nobanksel), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_nobanksel::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_nobanksel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_midrange_instruction_nobanksel'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_nobanksel::
GGS_midrange_instruction_nobanksel (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_nobanksel::
GGS_midrange_instruction_nobanksel (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_nobanksel GGS_midrange_instruction_nobanksel::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_nobanksel _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_nobanksel *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_nobanksel) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_nobanksel (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_nobanksel),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_nobanksel GGS_midrange_instruction_nobanksel::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_nobanksel result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_nobanksel (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_nobanksel::actualTypeName (void) const {
  return "midrange_instruction_nobanksel" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_nobanksel ("midrange_instruction_nobanksel", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'cPtr_midrange_instruction_banksel'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_banksel::
cPtr_midrange_instruction_banksel (const GGS_location & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mBankIndex (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_banksel * GGS_midrange_instruction_banksel::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_banksel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_banksel *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_banksel::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_banksel * _p = dynamic_cast <const cPtr_midrange_instruction_banksel *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mBankIndex._operator_isEqual (_p->mBankIndex).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_banksel::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_banksel:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBankIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_banksel::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_banksel::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_banksel (& typeid (cPtr_midrange_instruction_banksel), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_banksel::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_banksel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_midrange_instruction_banksel'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_banksel::
GGS_midrange_instruction_banksel (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_banksel::
GGS_midrange_instruction_banksel (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_banksel GGS_midrange_instruction_banksel::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_banksel _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_banksel *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_banksel) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_banksel (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_banksel),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_banksel GGS_midrange_instruction_banksel::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_banksel result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_banksel (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint  GGS_midrange_instruction_banksel::
reader_mBankIndex (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_banksel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_banksel *) mPointer)->mBankIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_banksel::actualTypeName (void) const {
  return "midrange_instruction_banksel" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_banksel ("midrange_instruction_banksel", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Class for 'midrange_instruction_FD_base_code' Enumeration          *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_midrange_instruction_FD_base_code::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_isEqual (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_isNotEqual (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_infOrEqual (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_supOrEqual (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_strictInf (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD_base_code::
_operator_strictSup (const GGS_midrange_instruction_FD_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_instruction_FD_base_code::
reader_mnemonic (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [15] = {"",
    "ADDWF",
    "ANDWF",
    "COMF",
    "DECF",
    "DECFSZ",
    "INCF",
    "INCFSZ",
    "IORWF",
    "MOVF",
    "RLF",
    "RRF",
    "SUBWF",
    "SWAPF",
    "XORWF"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_instruction_FD_base_code::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @midrange_instruction_FD_base_code" ;
  switch (mValue) {
  case enum_ADDWF:
    s << " ADDWF>" ;
    break ;
  case enum_ANDWF:
    s << " ANDWF>" ;
    break ;
  case enum_COMF:
    s << " COMF>" ;
    break ;
  case enum_DECF:
    s << " DECF>" ;
    break ;
  case enum_DECFSZ:
    s << " DECFSZ>" ;
    break ;
  case enum_INCF:
    s << " INCF>" ;
    break ;
  case enum_INCFSZ:
    s << " INCFSZ>" ;
    break ;
  case enum_IORWF:
    s << " IORWF>" ;
    break ;
  case enum_MOVF:
    s << " MOVF>" ;
    break ;
  case enum_RLF:
    s << " RLF>" ;
    break ;
  case enum_RRF:
    s << " RRF>" ;
    break ;
  case enum_SUBWF:
    s << " SUBWF>" ;
    break ;
  case enum_SWAPF:
    s << " SWAPF>" ;
    break ;
  case enum_XORWF:
    s << " XORWF>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "getMidRangeFDInstructionBaseCode"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getMidRangeFDInstructionBaseCode (C_Compiler &,
                                const GGS_midrange_instruction_FD_base_code  var_cas_inInstruction,
                                GGS_uint  & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getMidRangeFDInstructionBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inInstruction.enumValue ()) {
  case GGS_midrange_instruction_FD_base_code::enum_ADDWF:
    {
    var_cas_outBaseCode = GGS_uint (true, 1792U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_ANDWF:
    {
    var_cas_outBaseCode = GGS_uint (true, 1280U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_COMF:
    {
    var_cas_outBaseCode = GGS_uint (true, 2304U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_DECF:
    {
    var_cas_outBaseCode = GGS_uint (true, 768U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_DECFSZ:
    {
    var_cas_outBaseCode = GGS_uint (true, 2816U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_INCF:
    {
    var_cas_outBaseCode = GGS_uint (true, 2560U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_INCFSZ:
    {
    var_cas_outBaseCode = GGS_uint (true, 3840U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_IORWF:
    {
    var_cas_outBaseCode = GGS_uint (true, 1024U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_MOVF:
    {
    var_cas_outBaseCode = GGS_uint (true, 2048U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_RLF:
    {
    var_cas_outBaseCode = GGS_uint (true, 3328U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_RRF:
    {
    var_cas_outBaseCode = GGS_uint (true, 3072U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_SUBWF:
    {
    var_cas_outBaseCode = GGS_uint (true, 512U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_SWAPF:
    {
    var_cas_outBaseCode = GGS_uint (true, 3584U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::enum_XORWF:
    {
    var_cas_outBaseCode = GGS_uint (true, 1536U) ;
    }
    break ;
  case GGS_midrange_instruction_FD_base_code::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getMidRangeFDInstructionBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'cPtr_midrange_instruction_FD'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_FD::
cPtr_midrange_instruction_FD (const GGS_location & argument_0,
                                const GGS_midrange_instruction_FD_base_code& argument_1,
                                const GGS_registerExpression & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mInstruction_FD_base_code (argument_1),
mRegisterExpression (argument_2),
m_W_isDestination (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_FD * GGS_midrange_instruction_FD::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FD *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_FD *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_FD::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_FD * _p = dynamic_cast <const cPtr_midrange_instruction_FD *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mInstruction_FD_base_code._operator_isEqual (_p->mInstruction_FD_base_code).boolValue ()
         && mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && m_W_isDestination._operator_isEqual (_p->m_W_isDestination).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_FD::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_FD:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mInstruction_FD_base_code.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << m_W_isDestination.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FD::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FD::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_FD (& typeid (cPtr_midrange_instruction_FD), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_FD::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_FD ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_midrange_instruction_FD'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_FD::
GGS_midrange_instruction_FD (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FD::
GGS_midrange_instruction_FD (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_FD GGS_midrange_instruction_FD::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FD _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_FD *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_FD) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_FD (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_FD),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FD GGS_midrange_instruction_FD::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_instruction_FD_base_code& argument_1,
                 const GGS_registerExpression & argument_2,
                 const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FD result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_FD (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FD_base_code GGS_midrange_instruction_FD::
reader_mInstruction_FD_base_code (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instruction_FD_base_code  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FD *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FD *) mPointer)->mInstruction_FD_base_code ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_instruction_FD::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FD *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FD *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_FD::
reader_m_W_isDestination (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FD *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FD *) mPointer)->m_W_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_FD::actualTypeName (void) const {
  return "midrange_instruction_FD" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_FD ("midrange_instruction_FD", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Class for 'midrange_F_instruction_base_code' Enumeration          *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_midrange_F_instruction_base_code::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_isEqual (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_isNotEqual (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_infOrEqual (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_supOrEqual (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_strictInf (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_F_instruction_base_code::
_operator_strictSup (const GGS_midrange_F_instruction_base_code inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_F_instruction_base_code::
reader_mnemonic (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [3] = {"",
    "CLRF",
    "MOVWF"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_F_instruction_base_code::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @midrange_F_instruction_base_code" ;
  switch (mValue) {
  case enum_CLRF:
    s << " CLRF>" ;
    break ;
  case enum_MOVWF:
    s << " MOVWF>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'cPtr_midrange_instruction_F'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_F::
cPtr_midrange_instruction_F (const GGS_location & argument_0,
                                const GGS_midrange_F_instruction_base_code& argument_1,
                                const GGS_registerExpression & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mFAinstruction (argument_1),
mRegisterExpression (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_F * GGS_midrange_instruction_F::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_F *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_F *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_F::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_F * _p = dynamic_cast <const cPtr_midrange_instruction_F *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mFAinstruction._operator_isEqual (_p->mFAinstruction).boolValue ()
         && mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_F::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_F:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mFAinstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_F::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_F::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_F (& typeid (cPtr_midrange_instruction_F), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_F::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_F ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_midrange_instruction_F'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_F::
GGS_midrange_instruction_F (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_F::
GGS_midrange_instruction_F (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_F GGS_midrange_instruction_F::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_F _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_F *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_F) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_F (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_F),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_F GGS_midrange_instruction_F::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_F_instruction_base_code& argument_1,
                 const GGS_registerExpression & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_F result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_F (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_F_instruction_base_code GGS_midrange_instruction_F::
reader_mFAinstruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_F_instruction_base_code  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_F *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_F *) mPointer)->mFAinstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_instruction_F::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_F *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_F *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_F::actualTypeName (void) const {
  return "midrange_instruction_F" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_F ("midrange_instruction_F", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for 'midrange_bit_oriented_op' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_midrange_bit_oriented_op::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_isEqual (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_isNotEqual (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_infOrEqual (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_supOrEqual (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_strictInf (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bit_oriented_op::
_operator_strictSup (const GGS_midrange_bit_oriented_op inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_bit_oriented_op::
reader_mnemonic (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [3] = {"",
    "BCF",
    "BSF"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_bit_oriented_op::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @midrange_bit_oriented_op" ;
  switch (mValue) {
  case enum_BCF:
    s << " BCF>" ;
    break ;
  case enum_BSF:
    s << " BSF>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'cPtr_midrange_instruction_FB'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_FB::
cPtr_midrange_instruction_FB (const GGS_location & argument_0,
                                const GGS_midrange_bit_oriented_op& argument_1,
                                const GGS_registerExpression & argument_2,
                                const GGS_bitNumberExpression & argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mBitOrientedOp (argument_1),
mRegisterExpression (argument_2),
mBitNumber (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_FB * GGS_midrange_instruction_FB::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FB *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_FB *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_FB::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_FB * _p = dynamic_cast <const cPtr_midrange_instruction_FB *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mBitOrientedOp._operator_isEqual (_p->mBitOrientedOp).boolValue ()
         && mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && mBitNumber._operator_isEqual (_p->mBitNumber).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_FB::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_FB:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBitOrientedOp.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBitNumber.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FB::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FB::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_FB (& typeid (cPtr_midrange_instruction_FB), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_FB::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_FB ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_midrange_instruction_FB'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_FB::
GGS_midrange_instruction_FB (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FB::
GGS_midrange_instruction_FB (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_FB GGS_midrange_instruction_FB::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FB _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_FB *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_FB) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_FB (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_FB),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FB GGS_midrange_instruction_FB::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_bit_oriented_op& argument_1,
                 const GGS_registerExpression & argument_2,
                 const GGS_bitNumberExpression & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FB result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_FB (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_bit_oriented_op GGS_midrange_instruction_FB::
reader_mBitOrientedOp (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_bit_oriented_op  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FB *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FB *) mPointer)->mBitOrientedOp ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_instruction_FB::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FB *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FB *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bitNumberExpression  GGS_midrange_instruction_FB::
reader_mBitNumber (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bitNumberExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FB *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FB *) mPointer)->mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_FB::actualTypeName (void) const {
  return "midrange_instruction_FB" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_FB ("midrange_instruction_FB", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_CALL'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_CALL::
cPtr_midrange_instruction_CALL (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mTargetLabel (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_CALL * GGS_midrange_instruction_CALL::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_CALL *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_CALL *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_CALL::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_CALL * _p = dynamic_cast <const cPtr_midrange_instruction_CALL *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mTargetLabel._operator_isEqual (_p->mTargetLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_CALL::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_CALL:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mTargetLabel.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CALL::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CALL::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_CALL (& typeid (cPtr_midrange_instruction_CALL), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_CALL::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_CALL ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_CALL'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_CALL::
GGS_midrange_instruction_CALL (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CALL::
GGS_midrange_instruction_CALL (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_CALL GGS_midrange_instruction_CALL::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CALL _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_CALL *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_CALL) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_CALL (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_CALL),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CALL GGS_midrange_instruction_CALL::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CALL result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_CALL (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_instruction_CALL::
reader_mTargetLabel (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_CALL *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_CALL *) mPointer)->mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_CALL::actualTypeName (void) const {
  return "midrange_instruction_CALL" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_CALL ("midrange_instruction_CALL", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_JSR'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_JSR::
cPtr_midrange_instruction_JSR (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mTargetLabel (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_JSR * GGS_midrange_instruction_JSR::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_JSR *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_JSR *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_JSR::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_JSR * _p = dynamic_cast <const cPtr_midrange_instruction_JSR *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mTargetLabel._operator_isEqual (_p->mTargetLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_JSR::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_JSR:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mTargetLabel.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_JSR::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_JSR::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_JSR (& typeid (cPtr_midrange_instruction_JSR), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_JSR::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_JSR ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_JSR'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_JSR::
GGS_midrange_instruction_JSR (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_JSR::
GGS_midrange_instruction_JSR (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_JSR GGS_midrange_instruction_JSR::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_JSR _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_JSR *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_JSR) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_JSR (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_JSR),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_JSR GGS_midrange_instruction_JSR::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_JSR result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_JSR (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_instruction_JSR::
reader_mTargetLabel (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_JSR *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_JSR *) mPointer)->mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_JSR::actualTypeName (void) const {
  return "midrange_instruction_JSR" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_JSR ("midrange_instruction_JSR", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_JUMP'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_JUMP::
cPtr_midrange_instruction_JUMP (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mTargetLabel (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_JUMP * GGS_midrange_instruction_JUMP::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_JUMP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_JUMP *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_JUMP::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_JUMP * _p = dynamic_cast <const cPtr_midrange_instruction_JUMP *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mTargetLabel._operator_isEqual (_p->mTargetLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_JUMP::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_JUMP:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mTargetLabel.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_JUMP::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_JUMP::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_JUMP (& typeid (cPtr_midrange_instruction_JUMP), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_JUMP::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_JUMP ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_JUMP'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_JUMP::
GGS_midrange_instruction_JUMP (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_JUMP::
GGS_midrange_instruction_JUMP (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_JUMP GGS_midrange_instruction_JUMP::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_JUMP _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_JUMP *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_JUMP) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_JUMP (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_JUMP),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_JUMP GGS_midrange_instruction_JUMP::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_JUMP result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_JUMP (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_instruction_JUMP::
reader_mTargetLabel (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_JUMP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_JUMP *) mPointer)->mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_JUMP::actualTypeName (void) const {
  return "midrange_instruction_JUMP" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_JUMP ("midrange_instruction_JUMP", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_GOTO'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_GOTO::
cPtr_midrange_instruction_GOTO (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mTargetLabel (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_GOTO * GGS_midrange_instruction_GOTO::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_GOTO *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_GOTO *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_GOTO::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_GOTO * _p = dynamic_cast <const cPtr_midrange_instruction_GOTO *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mTargetLabel._operator_isEqual (_p->mTargetLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_GOTO::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_GOTO:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mTargetLabel.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_GOTO::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_GOTO::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_GOTO (& typeid (cPtr_midrange_instruction_GOTO), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_GOTO::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_GOTO ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_GOTO'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_GOTO::
GGS_midrange_instruction_GOTO (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_GOTO::
GGS_midrange_instruction_GOTO (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_GOTO GGS_midrange_instruction_GOTO::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_GOTO _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_GOTO *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_GOTO) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_GOTO (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_GOTO),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_GOTO GGS_midrange_instruction_GOTO::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_GOTO result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_GOTO (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_instruction_GOTO::
reader_mTargetLabel (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_GOTO *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_GOTO *) mPointer)->mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_GOTO::actualTypeName (void) const {
  return "midrange_instruction_GOTO" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_GOTO ("midrange_instruction_GOTO", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'cPtr_midrange_instruction_CLRWDT'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_CLRWDT::
cPtr_midrange_instruction_CLRWDT (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_CLRWDT * GGS_midrange_instruction_CLRWDT::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_CLRWDT *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_CLRWDT *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_CLRWDT::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_CLRWDT * _p = dynamic_cast <const cPtr_midrange_instruction_CLRWDT *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_CLRWDT::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_CLRWDT:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CLRWDT::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CLRWDT::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_CLRWDT (& typeid (cPtr_midrange_instruction_CLRWDT), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_CLRWDT::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_CLRWDT ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_midrange_instruction_CLRWDT'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRWDT::
GGS_midrange_instruction_CLRWDT (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRWDT::
GGS_midrange_instruction_CLRWDT (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_CLRWDT GGS_midrange_instruction_CLRWDT::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CLRWDT _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_CLRWDT *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_CLRWDT) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_CLRWDT (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_CLRWDT),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRWDT GGS_midrange_instruction_CLRWDT::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CLRWDT result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_CLRWDT (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_CLRWDT::actualTypeName (void) const {
  return "midrange_instruction_CLRWDT" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_CLRWDT ("midrange_instruction_CLRWDT", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_CLRW'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_CLRW::
cPtr_midrange_instruction_CLRW (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_CLRW * GGS_midrange_instruction_CLRW::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_CLRW *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_CLRW *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_CLRW::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_CLRW * _p = dynamic_cast <const cPtr_midrange_instruction_CLRW *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_CLRW::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_CLRW:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CLRW::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_CLRW::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_CLRW (& typeid (cPtr_midrange_instruction_CLRW), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_CLRW::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_CLRW ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_CLRW'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRW::
GGS_midrange_instruction_CLRW (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRW::
GGS_midrange_instruction_CLRW (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_CLRW GGS_midrange_instruction_CLRW::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CLRW _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_CLRW *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_CLRW) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_CLRW (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_CLRW),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_CLRW GGS_midrange_instruction_CLRW::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_CLRW result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_CLRW (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_CLRW::actualTypeName (void) const {
  return "midrange_instruction_CLRW" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_CLRW ("midrange_instruction_CLRW", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_NOP'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_NOP::
cPtr_midrange_instruction_NOP (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_NOP * GGS_midrange_instruction_NOP::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_NOP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_NOP *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_NOP::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_NOP * _p = dynamic_cast <const cPtr_midrange_instruction_NOP *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_NOP::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_NOP:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_NOP::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_NOP::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_NOP (& typeid (cPtr_midrange_instruction_NOP), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_NOP::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_NOP ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_NOP'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_NOP::
GGS_midrange_instruction_NOP (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_NOP::
GGS_midrange_instruction_NOP (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_NOP GGS_midrange_instruction_NOP::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_NOP _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_NOP *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_NOP) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_NOP (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_NOP),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_NOP GGS_midrange_instruction_NOP::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_NOP result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_NOP (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_NOP::actualTypeName (void) const {
  return "midrange_instruction_NOP" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_NOP ("midrange_instruction_NOP", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'cPtr_midrange_instruction_SLEEP'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_SLEEP::
cPtr_midrange_instruction_SLEEP (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_SLEEP * GGS_midrange_instruction_SLEEP::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_SLEEP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_SLEEP *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_SLEEP::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_SLEEP * _p = dynamic_cast <const cPtr_midrange_instruction_SLEEP *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_SLEEP::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_SLEEP:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_SLEEP::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_SLEEP::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_SLEEP (& typeid (cPtr_midrange_instruction_SLEEP), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_SLEEP::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_SLEEP ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_midrange_instruction_SLEEP'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_SLEEP::
GGS_midrange_instruction_SLEEP (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_SLEEP::
GGS_midrange_instruction_SLEEP (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_SLEEP GGS_midrange_instruction_SLEEP::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_SLEEP _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_SLEEP *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_SLEEP) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_SLEEP (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_SLEEP),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_SLEEP GGS_midrange_instruction_SLEEP::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_SLEEP result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_SLEEP (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_SLEEP::actualTypeName (void) const {
  return "midrange_instruction_SLEEP" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_SLEEP ("midrange_instruction_SLEEP", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//       Class for 'midrange_literal_instruction_opcode' Enumeration         *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_midrange_literal_instruction_opcode::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_isEqual (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_isNotEqual (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_infOrEqual (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_supOrEqual (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_strictInf (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_literal_instruction_opcode::
_operator_strictSup (const GGS_midrange_literal_instruction_opcode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_literal_instruction_opcode::
reader_mnemonic (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [8] = {"",
    "ADDLW",
    "ANDLW",
    "IORLW",
    "MOVLW",
    "RETLW",
    "SUBLW",
    "XORLW"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_literal_instruction_opcode::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @midrange_literal_instruction_opcode" ;
  switch (mValue) {
  case enum_ADDLW:
    s << " ADDLW>" ;
    break ;
  case enum_ANDLW:
    s << " ANDLW>" ;
    break ;
  case enum_IORLW:
    s << " IORLW>" ;
    break ;
  case enum_MOVLW:
    s << " MOVLW>" ;
    break ;
  case enum_RETLW:
    s << " RETLW>" ;
    break ;
  case enum_SUBLW:
    s << " SUBLW>" ;
    break ;
  case enum_XORLW:
    s << " XORLW>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            class 'cPtr_midrange_instruction_literalOperation'             *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_literalOperation::
cPtr_midrange_instruction_literalOperation (const GGS_location & argument_0,
                                const GGS_midrange_literal_instruction_opcode& argument_1,
                                const GGS_immediatExpression & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mLiteralInstruction (argument_1),
mImmediatExpression (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_literalOperation * GGS_midrange_instruction_literalOperation::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_literalOperation *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_literalOperation *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_literalOperation::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_literalOperation * _p = dynamic_cast <const cPtr_midrange_instruction_literalOperation *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mLiteralInstruction._operator_isEqual (_p->mLiteralInstruction).boolValue ()
         && mImmediatExpression._operator_isEqual (_p->mImmediatExpression).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_literalOperation::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_literalOperation:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mLiteralInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mImmediatExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_literalOperation::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_literalOperation::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_literalOperation (& typeid (cPtr_midrange_instruction_literalOperation), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_literalOperation::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_literalOperation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS class 'GGS_midrange_instruction_literalOperation'          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_literalOperation::
GGS_midrange_instruction_literalOperation (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_literalOperation::
GGS_midrange_instruction_literalOperation (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_literalOperation GGS_midrange_instruction_literalOperation::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_literalOperation _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_literalOperation *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_literalOperation) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_literalOperation (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_literalOperation),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_literalOperation GGS_midrange_instruction_literalOperation::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_literal_instruction_opcode& argument_1,
                 const GGS_immediatExpression & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_literalOperation result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_literalOperation (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_literal_instruction_opcode GGS_midrange_instruction_literalOperation::
reader_mLiteralInstruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_literal_instruction_opcode  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_literalOperation *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_literalOperation *) mPointer)->mLiteralInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_immediatExpression  GGS_midrange_instruction_literalOperation::
reader_mImmediatExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_immediatExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_literalOperation *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_literalOperation *) mPointer)->mImmediatExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_literalOperation::actualTypeName (void) const {
  return "midrange_instruction_literalOperation" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_literalOperation ("midrange_instruction_literalOperation", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_instruction_MNOP'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_MNOP::
cPtr_midrange_instruction_MNOP (const GGS_location & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mOccurrenceFactor (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_MNOP * GGS_midrange_instruction_MNOP::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_MNOP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_MNOP *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_MNOP::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_MNOP * _p = dynamic_cast <const cPtr_midrange_instruction_MNOP *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mOccurrenceFactor._operator_isEqual (_p->mOccurrenceFactor).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_MNOP::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_MNOP:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mOccurrenceFactor.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_MNOP::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_MNOP::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_MNOP (& typeid (cPtr_midrange_instruction_MNOP), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_MNOP::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_MNOP ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_instruction_MNOP'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_MNOP::
GGS_midrange_instruction_MNOP (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_MNOP::
GGS_midrange_instruction_MNOP (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_MNOP GGS_midrange_instruction_MNOP::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_MNOP _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_MNOP *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_MNOP) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_MNOP (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_MNOP),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_MNOP GGS_midrange_instruction_MNOP::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_MNOP result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_MNOP (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint  GGS_midrange_instruction_MNOP::
reader_mOccurrenceFactor (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_MNOP *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_MNOP *) mPointer)->mOccurrenceFactor ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_MNOP::actualTypeName (void) const {
  return "midrange_instruction_MNOP" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_MNOP ("midrange_instruction_MNOP", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'cPtr_midrange_instruction_FOREVER'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_FOREVER::
cPtr_midrange_instruction_FOREVER (const GGS_location & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mInstructionList (argument_1),
mEndOfInstructionList (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_FOREVER * GGS_midrange_instruction_FOREVER::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FOREVER *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_FOREVER *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_FOREVER::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_FOREVER * _p = dynamic_cast <const cPtr_midrange_instruction_FOREVER *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue ()
         && mEndOfInstructionList._operator_isEqual (_p->mEndOfInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_FOREVER::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_FOREVER:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mEndOfInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FOREVER::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_FOREVER::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_FOREVER (& typeid (cPtr_midrange_instruction_FOREVER), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_FOREVER::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_FOREVER ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_midrange_instruction_FOREVER'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_FOREVER::
GGS_midrange_instruction_FOREVER (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FOREVER::
GGS_midrange_instruction_FOREVER (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_FOREVER GGS_midrange_instruction_FOREVER::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FOREVER _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_FOREVER *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_FOREVER) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_FOREVER (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_FOREVER),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_FOREVER GGS_midrange_instruction_FOREVER::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_instructionList & argument_1,
                 const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_FOREVER result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_FOREVER (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instruction_FOREVER::
reader_mInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FOREVER *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FOREVER *) mPointer)->mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_instruction_FOREVER::
reader_mEndOfInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_FOREVER *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_FOREVER *) mPointer)->mEndOfInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_FOREVER::actualTypeName (void) const {
  return "midrange_instruction_FOREVER" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_FOREVER ("midrange_instruction_FOREVER", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'cPtr_midrange_instruction_IF_SEMI_COLON'               *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_IF_SEMI_COLON::
cPtr_midrange_instruction_IF_SEMI_COLON (const GGS_location & argument_0,
                                const GGS_midrange_instruction & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mInstruction (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_IF_SEMI_COLON * GGS_midrange_instruction_IF_SEMI_COLON::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_SEMI_COLON *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_IF_SEMI_COLON *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_IF_SEMI_COLON::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_IF_SEMI_COLON:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_SEMI_COLON::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_SEMI_COLON::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_IF_SEMI_COLON (& typeid (cPtr_midrange_instruction_IF_SEMI_COLON), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_IF_SEMI_COLON::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_IF_SEMI_COLON ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_midrange_instruction_IF_SEMI_COLON'            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_SEMI_COLON::
GGS_midrange_instruction_IF_SEMI_COLON (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_SEMI_COLON::
GGS_midrange_instruction_IF_SEMI_COLON (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_IF_SEMI_COLON GGS_midrange_instruction_IF_SEMI_COLON::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_IF_SEMI_COLON _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_IF_SEMI_COLON *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_IF_SEMI_COLON) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_IF_SEMI_COLON (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_IF_SEMI_COLON),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction  GGS_midrange_instruction_IF_SEMI_COLON::
reader_mInstruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instruction   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_SEMI_COLON *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_SEMI_COLON *) mPointer)->mInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_IF_SEMI_COLON::actualTypeName (void) const {
  return "midrange_instruction_IF_SEMI_COLON" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_IF_SEMI_COLON ("midrange_instruction_IF_SEMI_COLON", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_midrange_instruction_IF_BitTest'                *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_IF_BitTest::
cPtr_midrange_instruction_IF_BitTest (const GGS_location & argument_0,
                                const GGS_midrange_instruction & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_registerExpression & argument_3,
                                const GGS_bitNumberExpression & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction_IF_SEMI_COLON (argument_0, argument_1 COMMA_THERE),
mSkipIfSet (argument_2),
mRegisterExpression (argument_3),
mBitNumber (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_IF_BitTest * GGS_midrange_instruction_IF_BitTest::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_BitTest *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_IF_BitTest *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_IF_BitTest::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_IF_BitTest * _p = dynamic_cast <const cPtr_midrange_instruction_IF_BitTest *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mInstruction._operator_isEqual (_p->mInstruction).boolValue ()
         && mSkipIfSet._operator_isEqual (_p->mSkipIfSet).boolValue ()
         && mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && mBitNumber._operator_isEqual (_p->mBitNumber).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_IF_BitTest::
method_getBaseCode (C_Compiler & /* _inLexique */,
                                GGS_uint & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) const {
  if ((mSkipIfSet).isBuiltAndTrue ()) {
    var_cas_outBaseCode = GGS_uint (true, 7168U) ;
  }else{
    var_cas_outBaseCode = GGS_uint (true, 6144U) ;
  }
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_IF_BitTest::
method_getMnemonic (C_Compiler & /* _inLexique */,
                                GGS_string& var_cas_outMnemonic COMMA_UNUSED_LOCATION_ARGS) const {
  if ((mSkipIfSet).isBuiltAndTrue ()) {
    var_cas_outMnemonic = GGS_string (true, "BTFSS") ;
  }else{
    var_cas_outMnemonic = GGS_string (true, "BTFSC") ;
  }
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_IF_BitTest::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_IF_BitTest:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mSkipIfSet.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBitNumber.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_BitTest::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_BitTest::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_IF_BitTest (& typeid (cPtr_midrange_instruction_IF_BitTest), & typeid (cPtr_midrange_instruction_IF_SEMI_COLON), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_IF_BitTest::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_IF_BitTest ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_midrange_instruction_IF_BitTest'             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_BitTest::
GGS_midrange_instruction_IF_BitTest (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_BitTest::
GGS_midrange_instruction_IF_BitTest (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_IF_BitTest GGS_midrange_instruction_IF_BitTest::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_IF_BitTest _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_IF_BitTest *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_IF_BitTest) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_IF_BitTest (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_IF_BitTest),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_BitTest GGS_midrange_instruction_IF_BitTest::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_instruction & argument_1,
                 const GGS_bool& argument_2,
                 const GGS_registerExpression & argument_3,
                 const GGS_bitNumberExpression & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_IF_BitTest result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_IF_BitTest (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_IF_BitTest::
reader_mSkipIfSet (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_BitTest *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_BitTest *) mPointer)->mSkipIfSet ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_instruction_IF_BitTest::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_BitTest *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_BitTest *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bitNumberExpression  GGS_midrange_instruction_IF_BitTest::
reader_mBitNumber (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bitNumberExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_BitTest *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_BitTest *) mPointer)->mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_IF_BitTest::actualTypeName (void) const {
  return "midrange_instruction_IF_BitTest" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_IF_BitTest ("midrange_instruction_IF_BitTest", gClassInfoFor__midrange_instruction_IF_SEMI_COLON) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_midrange_instruction_IF_IncDec'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_IF_IncDec::
cPtr_midrange_instruction_IF_IncDec (const GGS_location & argument_0,
                                const GGS_midrange_instruction & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_registerExpression & argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction_IF_SEMI_COLON (argument_0, argument_1 COMMA_THERE),
mIncrement (argument_2),
mRegisterExpression (argument_3),
m_W_isDestination (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_IF_IncDec * GGS_midrange_instruction_IF_IncDec::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_IncDec *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_IF_IncDec *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_IF_IncDec::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_IF_IncDec * _p = dynamic_cast <const cPtr_midrange_instruction_IF_IncDec *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mInstruction._operator_isEqual (_p->mInstruction).boolValue ()
         && mIncrement._operator_isEqual (_p->mIncrement).boolValue ()
         && mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && m_W_isDestination._operator_isEqual (_p->m_W_isDestination).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_IF_IncDec::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_IF_IncDec:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mIncrement.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << m_W_isDestination.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_IncDec::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_IF_IncDec::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_IF_IncDec (& typeid (cPtr_midrange_instruction_IF_IncDec), & typeid (cPtr_midrange_instruction_IF_SEMI_COLON), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_IF_IncDec::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_IF_IncDec ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_midrange_instruction_IF_IncDec'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_IncDec::
GGS_midrange_instruction_IF_IncDec (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_IncDec::
GGS_midrange_instruction_IF_IncDec (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_IF_IncDec GGS_midrange_instruction_IF_IncDec::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_IF_IncDec _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_IF_IncDec *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_IF_IncDec) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_IF_IncDec (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_IF_IncDec),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_IF_IncDec GGS_midrange_instruction_IF_IncDec::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_instruction & argument_1,
                 const GGS_bool& argument_2,
                 const GGS_registerExpression & argument_3,
                 const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_IF_IncDec result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_IF_IncDec (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_IF_IncDec::
reader_mIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_IncDec *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_IncDec *) mPointer)->mIncrement ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_instruction_IF_IncDec::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_IncDec *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_IncDec *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_instruction_IF_IncDec::
reader_m_W_isDestination (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_IF_IncDec *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_IF_IncDec *) mPointer)->m_W_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_IF_IncDec::actualTypeName (void) const {
  return "midrange_instruction_IF_IncDec" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_IF_IncDec ("midrange_instruction_IF_IncDec", gClassInfoFor__midrange_instruction_IF_SEMI_COLON) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'cPtr_midrange_conditionExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_conditionExpression::
cPtr_midrange_conditionExpression (LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_conditionExpression * GGS_midrange_conditionExpression::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_conditionExpression *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_conditionExpression *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_midrange_conditionExpression::
appendForDescription (C_Compiler & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@midrange_conditionExpression:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_conditionExpression::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_conditionExpression::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_conditionExpression (& typeid (cPtr_midrange_conditionExpression), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_conditionExpression::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_conditionExpression ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_midrange_conditionExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression::
GGS_midrange_conditionExpression (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression::
GGS_midrange_conditionExpression (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_conditionExpression GGS_midrange_conditionExpression::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_conditionExpression _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_conditionExpression *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_conditionExpression) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_conditionExpression (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_conditionExpression),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_conditionExpression::actualTypeName (void) const {
  return "midrange_conditionExpression" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_midrange_conditionExpression::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__midrange_conditionExpression ("midrange_conditionExpression") ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'cPtr_midrange_incDecRegisterInCondition'               *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_incDecRegisterInCondition::
cPtr_midrange_incDecRegisterInCondition (const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_bool& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_conditionExpression (THERE),
mRegisterExpression (argument_0),
mIncrement (argument_1),
m_W_isDestination (argument_2),
mBranchIfZero (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_incDecRegisterInCondition * GGS_midrange_incDecRegisterInCondition::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_incDecRegisterInCondition *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_incDecRegisterInCondition::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_incDecRegisterInCondition * _p = dynamic_cast <const cPtr_midrange_incDecRegisterInCondition *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && mIncrement._operator_isEqual (_p->mIncrement).boolValue ()
         && m_W_isDestination._operator_isEqual (_p->m_W_isDestination).boolValue ()
         && mBranchIfZero._operator_isEqual (_p->mBranchIfZero).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_incDecRegisterInCondition::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_incDecRegisterInCondition:"
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mIncrement.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << m_W_isDestination.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBranchIfZero.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_incDecRegisterInCondition::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_incDecRegisterInCondition::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_incDecRegisterInCondition (& typeid (cPtr_midrange_incDecRegisterInCondition), & typeid (cPtr_midrange_conditionExpression), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_incDecRegisterInCondition::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_incDecRegisterInCondition ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_midrange_incDecRegisterInCondition'            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_incDecRegisterInCondition::
GGS_midrange_incDecRegisterInCondition (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_incDecRegisterInCondition::
GGS_midrange_incDecRegisterInCondition (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_incDecRegisterInCondition GGS_midrange_incDecRegisterInCondition::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_incDecRegisterInCondition _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_incDecRegisterInCondition) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_incDecRegisterInCondition (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_incDecRegisterInCondition),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_incDecRegisterInCondition GGS_midrange_incDecRegisterInCondition::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_registerExpression & argument_0,
                 const GGS_bool& argument_1,
                 const GGS_bool& argument_2,
                 const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_incDecRegisterInCondition result ;
  macroMyNew (result.mPointer, cPtr_midrange_incDecRegisterInCondition (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_incDecRegisterInCondition::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_incDecRegisterInCondition *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_incDecRegisterInCondition::
reader_mIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_incDecRegisterInCondition *) mPointer)->mIncrement ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_incDecRegisterInCondition::
reader_m_W_isDestination (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_incDecRegisterInCondition *) mPointer)->m_W_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_incDecRegisterInCondition::
reader_mBranchIfZero (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_incDecRegisterInCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_incDecRegisterInCondition *) mPointer)->mBranchIfZero ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_incDecRegisterInCondition::actualTypeName (void) const {
  return "midrange_incDecRegisterInCondition" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_incDecRegisterInCondition ("midrange_incDecRegisterInCondition", gClassInfoFor__midrange_conditionExpression) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_midrange_negateCondition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_negateCondition::
cPtr_midrange_negateCondition (const GGS_midrange_conditionExpression & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_conditionExpression (THERE),
mCondition (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_negateCondition * GGS_midrange_negateCondition::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_negateCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_negateCondition *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_negateCondition::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_negateCondition * _p = dynamic_cast <const cPtr_midrange_negateCondition *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mCondition._operator_isEqual (_p->mCondition).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_negateCondition::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_negateCondition:"
           << mCondition.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_negateCondition::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_negateCondition::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_negateCondition (& typeid (cPtr_midrange_negateCondition), & typeid (cPtr_midrange_conditionExpression), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_negateCondition::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_negateCondition ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_midrange_negateCondition'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_negateCondition::
GGS_midrange_negateCondition (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_negateCondition::
GGS_midrange_negateCondition (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_negateCondition GGS_midrange_negateCondition::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_negateCondition _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_negateCondition *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_negateCondition) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_negateCondition (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_negateCondition),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_negateCondition GGS_midrange_negateCondition::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_midrange_conditionExpression & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_negateCondition result ;
  macroMyNew (result.mPointer, cPtr_midrange_negateCondition (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression  GGS_midrange_negateCondition::
reader_mCondition (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_conditionExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_negateCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_negateCondition *) mPointer)->mCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_negateCondition::actualTypeName (void) const {
  return "midrange_negateCondition" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_negateCondition ("midrange_negateCondition", gClassInfoFor__midrange_conditionExpression) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_midrange_andCondition'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_andCondition::
cPtr_midrange_andCondition (const GGS_midrange_conditionExpression & argument_0,
                                const GGS_midrange_conditionExpression & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_conditionExpression (THERE),
mLeftExpression (argument_0),
mRightExpression (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_andCondition * GGS_midrange_andCondition::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_andCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_andCondition *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_andCondition::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_andCondition * _p = dynamic_cast <const cPtr_midrange_andCondition *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mLeftExpression._operator_isEqual (_p->mLeftExpression).boolValue ()
         && mRightExpression._operator_isEqual (_p->mRightExpression).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_andCondition::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_andCondition:"
           << mLeftExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRightExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_andCondition::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_andCondition::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_andCondition (& typeid (cPtr_midrange_andCondition), & typeid (cPtr_midrange_conditionExpression), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_andCondition::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_andCondition ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_midrange_andCondition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_andCondition::
GGS_midrange_andCondition (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_andCondition::
GGS_midrange_andCondition (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_andCondition GGS_midrange_andCondition::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_andCondition _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_andCondition *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_andCondition) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_andCondition (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_andCondition),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_andCondition GGS_midrange_andCondition::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_midrange_conditionExpression & argument_0,
                 const GGS_midrange_conditionExpression & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_andCondition result ;
  macroMyNew (result.mPointer, cPtr_midrange_andCondition (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression  GGS_midrange_andCondition::
reader_mLeftExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_conditionExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_andCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_andCondition *) mPointer)->mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression  GGS_midrange_andCondition::
reader_mRightExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_conditionExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_andCondition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_andCondition *) mPointer)->mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_andCondition::actualTypeName (void) const {
  return "midrange_andCondition" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_andCondition ("midrange_andCondition", gClassInfoFor__midrange_conditionExpression) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         class 'cPtr_midrange_bitTest_in_structured_if_condition'          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_bitTest_in_structured_if_condition::
cPtr_midrange_bitTest_in_structured_if_condition (const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_conditionExpression (THERE),
mRegisterExpression (argument_0),
mBitNumber (argument_1),
mBTFSSinstruction (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_bitTest_in_structured_if_condition * GGS_midrange_bitTest_in_structured_if_condition::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_bitTest_in_structured_if_condition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_bitTest_in_structured_if_condition *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_bitTest_in_structured_if_condition::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_bitTest_in_structured_if_condition * _p = dynamic_cast <const cPtr_midrange_bitTest_in_structured_if_condition *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mRegisterExpression._operator_isEqual (_p->mRegisterExpression).boolValue ()
         && mBitNumber._operator_isEqual (_p->mBitNumber).boolValue ()
         && mBTFSSinstruction._operator_isEqual (_p->mBTFSSinstruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_bitTest_in_structured_if_condition::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_bitTest_in_structured_if_condition:"
           << mRegisterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBitNumber.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBTFSSinstruction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_bitTest_in_structured_if_condition::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_bitTest_in_structured_if_condition::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_bitTest_in_structured_if_condition (& typeid (cPtr_midrange_bitTest_in_structured_if_condition), & typeid (cPtr_midrange_conditionExpression), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_bitTest_in_structured_if_condition::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_bitTest_in_structured_if_condition ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      GALGAS class 'GGS_midrange_bitTest_in_structured_if_condition'       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_bitTest_in_structured_if_condition::
GGS_midrange_bitTest_in_structured_if_condition (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_bitTest_in_structured_if_condition::
GGS_midrange_bitTest_in_structured_if_condition (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_bitTest_in_structured_if_condition GGS_midrange_bitTest_in_structured_if_condition::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_bitTest_in_structured_if_condition _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_bitTest_in_structured_if_condition *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_bitTest_in_structured_if_condition) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_bitTest_in_structured_if_condition (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_bitTest_in_structured_if_condition),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_bitTest_in_structured_if_condition GGS_midrange_bitTest_in_structured_if_condition::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_registerExpression & argument_0,
                 const GGS_bitNumberExpression & argument_1,
                 const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_bitTest_in_structured_if_condition result ;
  macroMyNew (result.mPointer, cPtr_midrange_bitTest_in_structured_if_condition (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_registerExpression  GGS_midrange_bitTest_in_structured_if_condition::
reader_mRegisterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_registerExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_bitTest_in_structured_if_condition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_bitTest_in_structured_if_condition *) mPointer)->mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bitNumberExpression  GGS_midrange_bitTest_in_structured_if_condition::
reader_mBitNumber (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bitNumberExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_bitTest_in_structured_if_condition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_bitTest_in_structured_if_condition *) mPointer)->mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_bitTest_in_structured_if_condition::
reader_mBTFSSinstruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_bitTest_in_structured_if_condition *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_bitTest_in_structured_if_condition *) mPointer)->mBTFSSinstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_bitTest_in_structured_if_condition::actualTypeName (void) const {
  return "midrange_bitTest_in_structured_if_condition" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_bitTest_in_structured_if_condition ("midrange_bitTest_in_structured_if_condition", gClassInfoFor__midrange_conditionExpression) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'cPtr_midrange_instruction_structured_if'               *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_structured_if::
cPtr_midrange_instruction_structured_if (const GGS_location & argument_0,
                                const GGS_midrange_conditionExpression & argument_1,
                                const GGS_midrange_instructionList & argument_2,
                                const GGS_midrange_instructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mIfCondition (argument_1),
mThenInstructionList (argument_2),
mElseInstructionList (argument_3),
mEndOfElsePartLocation (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_structured_if * GGS_midrange_instruction_structured_if::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_structured_if *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_structured_if *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_structured_if::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_structured_if * _p = dynamic_cast <const cPtr_midrange_instruction_structured_if *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mIfCondition._operator_isEqual (_p->mIfCondition).boolValue ()
         && mThenInstructionList._operator_isEqual (_p->mThenInstructionList).boolValue ()
         && mElseInstructionList._operator_isEqual (_p->mElseInstructionList).boolValue ()
         && mEndOfElsePartLocation._operator_isEqual (_p->mEndOfElsePartLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_structured_if::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_structured_if:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mIfCondition.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mThenInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mElseInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mEndOfElsePartLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_structured_if::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_structured_if::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_structured_if (& typeid (cPtr_midrange_instruction_structured_if), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_structured_if::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_structured_if ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_midrange_instruction_structured_if'            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_structured_if::
GGS_midrange_instruction_structured_if (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_structured_if::
GGS_midrange_instruction_structured_if (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_structured_if GGS_midrange_instruction_structured_if::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_structured_if _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_structured_if *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_structured_if) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_structured_if (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_structured_if),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_structured_if GGS_midrange_instruction_structured_if::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_conditionExpression & argument_1,
                 const GGS_midrange_instructionList & argument_2,
                 const GGS_midrange_instructionList & argument_3,
                 const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_structured_if result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_structured_if (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression  GGS_midrange_instruction_structured_if::
reader_mIfCondition (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_conditionExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_structured_if *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_structured_if *) mPointer)->mIfCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instruction_structured_if::
reader_mThenInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_structured_if *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_structured_if *) mPointer)->mThenInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instruction_structured_if::
reader_mElseInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_structured_if *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_structured_if *) mPointer)->mElseInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_instruction_structured_if::
reader_mEndOfElsePartLocation (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_structured_if *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_structured_if *) mPointer)->mEndOfElsePartLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_structured_if::actualTypeName (void) const {
  return "midrange_instruction_structured_if" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_structured_if ("midrange_instruction_structured_if", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@midrange_partList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_partList::
elementOf_GGS_midrange_partList (const GGS_midrange_conditionExpression & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mCondition (argument_0),
mInstructionList (argument_1),
mEndOfPartLocation (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_partList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_midrange_partList * _p = dynamic_cast <const elementOf_GGS_midrange_partList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mCondition._operator_isEqual (_p->mCondition).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue ()
         && mEndOfPartLocation._operator_isEqual (_p->mEndOfPartLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_partList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCondition.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfPartLocation.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@midrange_partList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_midrange_partList::
_internalAppendValues (const GGS_midrange_conditionExpression & argument_0,
                    const GGS_midrange_instructionList & argument_1,
                    const GGS_location & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
_internalPrependValues (const GGS_midrange_conditionExpression & argument_0,
                    const GGS_midrange_instructionList & argument_1,
                    const GGS_location & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
_addAssign_operation (const GGS_midrange_conditionExpression & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_location & argument_2) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_partList GGS_midrange_partList::
_operator_concat (const GGS_midrange_partList & inOperand) const {
  GGS_midrange_partList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
_dotAssign_operation (const GGS_midrange_partList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_midrange_partList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_midrange_conditionExpression  p_0 = p->mCondition ;
          GGS_midrange_instructionList  p_1 = p->mInstructionList ;
          GGS_location  p_2 = p->mEndOfPartLocation ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_midrange_conditionExpression & argument_0,
                     const GGS_midrange_instructionList & argument_1,
                     const GGS_location & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mCondition,
                                _p->mInstructionList,
                                _p->mEndOfPartLocation
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_partList  GGS_midrange_partList::
constructor_emptyList (void) {
  GGS_midrange_partList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_partList  GGS_midrange_partList::
constructor_listWithValue (const GGS_midrange_conditionExpression & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_location & argument_2) {
  GGS_midrange_partList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
internalSubListWithRange (GGS_midrange_partList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mCondition, _p->mInstructionList, _p->mEndOfPartLocation) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_partList GGS_midrange_partList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_partList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_partList GGS_midrange_partList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_partList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_partList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@midrange_partList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
method_first (C_Compiler & _inLexique,
              GGS_midrange_conditionExpression & _out_0,
              GGS_midrange_instructionList & _out_1,
              GGS_location & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mCondition ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mEndOfPartLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
method_last (C_Compiler & _inLexique,
             GGS_midrange_conditionExpression & _out_0,
             GGS_midrange_instructionList & _out_1,
             GGS_location & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mCondition ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mEndOfPartLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_midrange_conditionExpression & _out_0,
                 GGS_midrange_instructionList & _out_1,
                 GGS_location & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mCondition ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mEndOfPartLocation ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_midrange_conditionExpression & _out_0,
                GGS_midrange_instructionList & _out_1,
                GGS_location & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mCondition ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mEndOfPartLocation ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_conditionExpression  GGS_midrange_partList::
reader_mConditionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_midrange_conditionExpression  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCondition ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_partList::
reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_midrange_instructionList  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_partList::
reader_mEndOfPartLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfPartLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_setMConditionAtIndex (C_Compiler & inLexique,
                              const GGS_midrange_conditionExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCondition = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_midrange_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_partList::
modifier_setMEndOfPartLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfPartLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_midrange_conditionExpression  & GGS_midrange_partList::cEnumerator::_mCondition (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mCondition ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_midrange_instructionList  & GGS_midrange_partList::cEnumerator::_mInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_midrange_partList::cEnumerator::_mEndOfPartLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mEndOfPartLocation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'cPtr_midrange_instruction_do_while'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_midrange_instruction_do_while::
cPtr_midrange_instruction_do_while (const GGS_location & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_location & argument_2,
                                const GGS_midrange_partList & argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_midrange_instruction (argument_0 COMMA_THERE),
mRepeatedInstructionList (argument_1),
mEndOfRepeatedInstructionList (argument_2),
mWhilePartList (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_midrange_instruction_do_while * GGS_midrange_instruction_do_while::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_do_while *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_midrange_instruction_do_while *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_midrange_instruction_do_while::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_midrange_instruction_do_while * _p = dynamic_cast <const cPtr_midrange_instruction_do_while *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInstructionLocation._operator_isEqual (_p->mInstructionLocation).boolValue ()
         && mRepeatedInstructionList._operator_isEqual (_p->mRepeatedInstructionList).boolValue ()
         && mEndOfRepeatedInstructionList._operator_isEqual (_p->mEndOfRepeatedInstructionList).boolValue ()
         && mWhilePartList._operator_isEqual (_p->mWhilePartList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_midrange_instruction_do_while::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@midrange_instruction_do_while:"
           << mInstructionLocation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRepeatedInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mEndOfRepeatedInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mWhilePartList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_do_while::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_midrange_instruction_do_while::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_midrange_instruction_do_while (& typeid (cPtr_midrange_instruction_do_while), & typeid (cPtr_midrange_instruction), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_midrange_instruction_do_while::galgasRTTI (void) const {
  return & gClassInfoFor__midrange_instruction_do_while ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_midrange_instruction_do_while'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_instruction_do_while::
GGS_midrange_instruction_do_while (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_do_while::
GGS_midrange_instruction_do_while (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_midrange_instruction_do_while GGS_midrange_instruction_do_while::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_do_while _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_midrange_instruction_do_while *> (inPointer) != NULL)
      : (typeid (cPtr_midrange_instruction_do_while) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_midrange_instruction_do_while (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_midrange_instruction_do_while),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instruction_do_while GGS_midrange_instruction_do_while::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_midrange_instructionList & argument_1,
                 const GGS_location & argument_2,
                 const GGS_midrange_partList & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_midrange_instruction_do_while result ;
  macroMyNew (result.mPointer, cPtr_midrange_instruction_do_while (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_instruction_do_while::
reader_mRepeatedInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_instructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_do_while *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_do_while *) mPointer)->mRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_instruction_do_while::
reader_mEndOfRepeatedInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_do_while *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_do_while *) mPointer)->mEndOfRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_partList  GGS_midrange_instruction_do_while::
reader_mWhilePartList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_midrange_partList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_midrange_instruction_do_while *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_midrange_instruction_do_while *) mPointer)->mWhilePartList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_midrange_instruction_do_while::actualTypeName (void) const {
  return "midrange_instruction_do_while" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__midrange_instruction_do_while ("midrange_instruction_do_while", gClassInfoFor__midrange_instruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of list '@midrange_interruptDefinitionList'             *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_interruptDefinitionList::
elementOf_GGS_midrange_interruptDefinitionList (const GGS_location & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mInterruptLocation (argument_0),
mInstructionList (argument_1),
mFirstSaveRegister (argument_2),
mSecondSaveRegister (argument_3),
mEndOfInterruptLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_interruptDefinitionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_midrange_interruptDefinitionList * _p = dynamic_cast <const elementOf_GGS_midrange_interruptDefinitionList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInterruptLocation._operator_isEqual (_p->mInterruptLocation).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue ()
         && mFirstSaveRegister._operator_isEqual (_p->mFirstSaveRegister).boolValue ()
         && mSecondSaveRegister._operator_isEqual (_p->mSecondSaveRegister).boolValue ()
         && mEndOfInterruptLocation._operator_isEqual (_p->mEndOfInterruptLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_interruptDefinitionList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInterruptLocation.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFirstSaveRegister.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSecondSaveRegister.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfInterruptLocation.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 List '@midrange_interruptDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
_internalAppendValues (const GGS_location & argument_0,
                    const GGS_midrange_instructionList & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_location & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
_internalPrependValues (const GGS_location & argument_0,
                    const GGS_midrange_instructionList & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_location & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
_addAssign_operation (const GGS_location & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_location & argument_4) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()&& argument_3._isBuilt ()&& argument_4._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_interruptDefinitionList GGS_midrange_interruptDefinitionList::
_operator_concat (const GGS_midrange_interruptDefinitionList & inOperand) const {
  GGS_midrange_interruptDefinitionList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
_dotAssign_operation (const GGS_midrange_interruptDefinitionList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_midrange_interruptDefinitionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_location  p_0 = p->mInterruptLocation ;
          GGS_midrange_instructionList  p_1 = p->mInstructionList ;
          GGS_lstring  p_2 = p->mFirstSaveRegister ;
          GGS_lstring  p_3 = p->mSecondSaveRegister ;
          GGS_location  p_4 = p->mEndOfInterruptLocation ;
          _internalAppendValues (p_0, p_1, p_2, p_3, p_4 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_location & argument_0,
                     const GGS_midrange_instructionList & argument_1,
                     const GGS_lstring & argument_2,
                     const GGS_lstring & argument_3,
                     const GGS_location & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mInterruptLocation,
                                _p->mInstructionList,
                                _p->mFirstSaveRegister,
                                _p->mSecondSaveRegister,
                                _p->mEndOfInterruptLocation
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_interruptDefinitionList  GGS_midrange_interruptDefinitionList::
constructor_emptyList (void) {
  GGS_midrange_interruptDefinitionList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_interruptDefinitionList  GGS_midrange_interruptDefinitionList::
constructor_listWithValue (const GGS_location & argument_0,
                                const GGS_midrange_instructionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_location & argument_4) {
  GGS_midrange_interruptDefinitionList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
internalSubListWithRange (GGS_midrange_interruptDefinitionList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mInterruptLocation, _p->mInstructionList, _p->mFirstSaveRegister, _p->mSecondSaveRegister, _p->mEndOfInterruptLocation) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_interruptDefinitionList GGS_midrange_interruptDefinitionList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_interruptDefinitionList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_interruptDefinitionList GGS_midrange_interruptDefinitionList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_interruptDefinitionList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_interruptDefinitionList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@midrange_interruptDefinitionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
method_first (C_Compiler & _inLexique,
              GGS_location & _out_0,
              GGS_midrange_instructionList & _out_1,
              GGS_lstring & _out_2,
              GGS_lstring & _out_3,
              GGS_location & _out_4
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInterruptLocation ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mFirstSaveRegister ;
    _out_3 = _p->mSecondSaveRegister ;
    _out_4 = _p->mEndOfInterruptLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
method_last (C_Compiler & _inLexique,
             GGS_location & _out_0,
             GGS_midrange_instructionList & _out_1,
             GGS_lstring & _out_2,
             GGS_lstring & _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInterruptLocation ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mFirstSaveRegister ;
    _out_3 = _p->mSecondSaveRegister ;
    _out_4 = _p->mEndOfInterruptLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_location & _out_0,
                 GGS_midrange_instructionList & _out_1,
                 GGS_lstring & _out_2,
                 GGS_lstring & _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInterruptLocation ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mFirstSaveRegister ;
    _out_3 = _p->mSecondSaveRegister ;
    _out_4 = _p->mEndOfInterruptLocation ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_location & _out_0,
                GGS_midrange_instructionList & _out_1,
                GGS_lstring & _out_2,
                GGS_lstring & _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mInterruptLocation ;
    _out_1 = _p->mInstructionList ;
    _out_2 = _p->mFirstSaveRegister ;
    _out_3 = _p->mSecondSaveRegister ;
    _out_4 = _p->mEndOfInterruptLocation ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_interruptDefinitionList::
reader_mInterruptLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInterruptLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_interruptDefinitionList::
reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_midrange_instructionList  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_interruptDefinitionList::
reader_mFirstSaveRegisterAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFirstSaveRegister ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_interruptDefinitionList::
reader_mSecondSaveRegisterAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSecondSaveRegister ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_interruptDefinitionList::
reader_mEndOfInterruptLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfInterruptLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_setMInterruptLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInterruptLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_midrange_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_setMFirstSaveRegisterAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFirstSaveRegister = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_setMSecondSaveRegisterAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSecondSaveRegister = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_interruptDefinitionList::
modifier_setMEndOfInterruptLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfInterruptLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_midrange_interruptDefinitionList::cEnumerator::_mInterruptLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInterruptLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_midrange_instructionList  & GGS_midrange_interruptDefinitionList::cEnumerator::_mInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_midrange_interruptDefinitionList::cEnumerator::_mFirstSaveRegister (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mFirstSaveRegister ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_midrange_interruptDefinitionList::cEnumerator::_mSecondSaveRegister (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mSecondSaveRegister ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_midrange_interruptDefinitionList::cEnumerator::_mEndOfInterruptLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mEndOfInterruptLocation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@midrange_routineDefinitionList'              *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_midrange_routineDefinitionList::
elementOf_GGS_midrange_routineDefinitionList (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_bool& argument_4,
                                const GGS_bool& argument_5,
                                const GGS_midrange_instructionList & argument_6,
                                const GGS_location & argument_7
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mRoutineName (argument_0),
mPage (argument_1),
mRequiredBank (argument_2),
mReturnedBank (argument_3),
mPreservesBank (argument_4),
mIsNoReturn (argument_5),
mInstructionList (argument_6),
mEndOfRoutineLocation (argument_7) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_midrange_routineDefinitionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_midrange_routineDefinitionList * _p = dynamic_cast <const elementOf_GGS_midrange_routineDefinitionList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mRoutineName._operator_isEqual (_p->mRoutineName).boolValue ()
         && mPage._operator_isEqual (_p->mPage).boolValue ()
         && mRequiredBank._operator_isEqual (_p->mRequiredBank).boolValue ()
         && mReturnedBank._operator_isEqual (_p->mReturnedBank).boolValue ()
         && mPreservesBank._operator_isEqual (_p->mPreservesBank).boolValue ()
         && mIsNoReturn._operator_isEqual (_p->mIsNoReturn).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue ()
         && mEndOfRoutineLocation._operator_isEqual (_p->mEndOfRoutineLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_midrange_routineDefinitionList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mRoutineName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mPage.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mRequiredBank.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mReturnedBank.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mPreservesBank.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mIsNoReturn.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfRoutineLocation.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  List '@midrange_routineDefinitionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_luint & argument_1,
                    const GGS_luint & argument_2,
                    const GGS_luint & argument_3,
                    const GGS_bool& argument_4,
                    const GGS_bool& argument_5,
                    const GGS_midrange_instructionList & argument_6,
                    const GGS_location & argument_7
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_luint & argument_1,
                    const GGS_luint & argument_2,
                    const GGS_luint & argument_3,
                    const GGS_bool& argument_4,
                    const GGS_bool& argument_5,
                    const GGS_midrange_instructionList & argument_6,
                    const GGS_location & argument_7
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_bool& argument_4,
                                const GGS_bool& argument_5,
                                const GGS_midrange_instructionList & argument_6,
                                const GGS_location & argument_7) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()&& argument_3._isBuilt ()&& argument_4._isBuilt ()&& argument_5._isBuilt ()&& argument_6._isBuilt ()&& argument_7._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_routineDefinitionList GGS_midrange_routineDefinitionList::
_operator_concat (const GGS_midrange_routineDefinitionList & inOperand) const {
  GGS_midrange_routineDefinitionList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
_dotAssign_operation (const GGS_midrange_routineDefinitionList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_midrange_routineDefinitionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mRoutineName ;
          GGS_luint  p_1 = p->mPage ;
          GGS_luint  p_2 = p->mRequiredBank ;
          GGS_luint  p_3 = p->mReturnedBank ;
          GGS_bool p_4 = p->mPreservesBank ;
          GGS_bool p_5 = p->mIsNoReturn ;
          GGS_midrange_instructionList  p_6 = p->mInstructionList ;
          GGS_location  p_7 = p->mEndOfRoutineLocation ;
          _internalAppendValues (p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_luint & argument_1,
                     const GGS_luint & argument_2,
                     const GGS_luint & argument_3,
                     const GGS_bool& argument_4,
                     const GGS_bool& argument_5,
                     const GGS_midrange_instructionList & argument_6,
                     const GGS_location & argument_7
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mRoutineName,
                                _p->mPage,
                                _p->mRequiredBank,
                                _p->mReturnedBank,
                                _p->mPreservesBank,
                                _p->mIsNoReturn,
                                _p->mInstructionList,
                                _p->mEndOfRoutineLocation
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_routineDefinitionList  GGS_midrange_routineDefinitionList::
constructor_emptyList (void) {
  GGS_midrange_routineDefinitionList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_routineDefinitionList  GGS_midrange_routineDefinitionList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_bool& argument_4,
                                const GGS_bool& argument_5,
                                const GGS_midrange_instructionList & argument_6,
                                const GGS_location & argument_7) {
  GGS_midrange_routineDefinitionList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4, argument_5, argument_6, argument_7) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
internalSubListWithRange (GGS_midrange_routineDefinitionList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mRoutineName, _p->mPage, _p->mRequiredBank, _p->mReturnedBank, _p->mPreservesBank, _p->mIsNoReturn, _p->mInstructionList, _p->mEndOfRoutineLocation) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_midrange_routineDefinitionList GGS_midrange_routineDefinitionList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_routineDefinitionList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_routineDefinitionList GGS_midrange_routineDefinitionList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_midrange_routineDefinitionList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_routineDefinitionList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@midrange_routineDefinitionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
method_first (C_Compiler & _inLexique,
              GGS_lstring & _out_0,
              GGS_luint & _out_1,
              GGS_luint & _out_2,
              GGS_luint & _out_3,
              GGS_bool& _out_4,
              GGS_bool& _out_5,
              GGS_midrange_instructionList & _out_6,
              GGS_location & _out_7
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mRoutineName ;
    _out_1 = _p->mPage ;
    _out_2 = _p->mRequiredBank ;
    _out_3 = _p->mReturnedBank ;
    _out_4 = _p->mPreservesBank ;
    _out_5 = _p->mIsNoReturn ;
    _out_6 = _p->mInstructionList ;
    _out_7 = _p->mEndOfRoutineLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
    _out_6._drop () ;
    _out_7._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
method_last (C_Compiler & _inLexique,
             GGS_lstring & _out_0,
             GGS_luint & _out_1,
             GGS_luint & _out_2,
             GGS_luint & _out_3,
             GGS_bool& _out_4,
             GGS_bool& _out_5,
             GGS_midrange_instructionList & _out_6,
             GGS_location & _out_7
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mRoutineName ;
    _out_1 = _p->mPage ;
    _out_2 = _p->mRequiredBank ;
    _out_3 = _p->mReturnedBank ;
    _out_4 = _p->mPreservesBank ;
    _out_5 = _p->mIsNoReturn ;
    _out_6 = _p->mInstructionList ;
    _out_7 = _p->mEndOfRoutineLocation ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
    _out_6._drop () ;
    _out_7._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_lstring & _out_0,
                 GGS_luint & _out_1,
                 GGS_luint & _out_2,
                 GGS_luint & _out_3,
                 GGS_bool& _out_4,
                 GGS_bool& _out_5,
                 GGS_midrange_instructionList & _out_6,
                 GGS_location & _out_7
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mRoutineName ;
    _out_1 = _p->mPage ;
    _out_2 = _p->mRequiredBank ;
    _out_3 = _p->mReturnedBank ;
    _out_4 = _p->mPreservesBank ;
    _out_5 = _p->mIsNoReturn ;
    _out_6 = _p->mInstructionList ;
    _out_7 = _p->mEndOfRoutineLocation ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
    _out_6._drop () ;
    _out_7._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_lstring & _out_0,
                GGS_luint & _out_1,
                GGS_luint & _out_2,
                GGS_luint & _out_3,
                GGS_bool& _out_4,
                GGS_bool& _out_5,
                GGS_midrange_instructionList & _out_6,
                GGS_location & _out_7
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mRoutineName ;
    _out_1 = _p->mPage ;
    _out_2 = _p->mRequiredBank ;
    _out_3 = _p->mReturnedBank ;
    _out_4 = _p->mPreservesBank ;
    _out_5 = _p->mIsNoReturn ;
    _out_6 = _p->mInstructionList ;
    _out_7 = _p->mEndOfRoutineLocation ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
    _out_6._drop () ;
    _out_7._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_midrange_routineDefinitionList::
reader_mRoutineNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mRoutineName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint  GGS_midrange_routineDefinitionList::
reader_mPageAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_luint  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mPage ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint  GGS_midrange_routineDefinitionList::
reader_mRequiredBankAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_luint  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mRequiredBank ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint  GGS_midrange_routineDefinitionList::
reader_mReturnedBankAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_luint  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mReturnedBank ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_routineDefinitionList::
reader_mPreservesBankAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mPreservesBank ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_routineDefinitionList::
reader_mIsNoReturnAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mIsNoReturn ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_midrange_instructionList  GGS_midrange_routineDefinitionList::
reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_midrange_instructionList  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_midrange_routineDefinitionList::
reader_mEndOfRoutineLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfRoutineLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMRoutineNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mRoutineName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMPageAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mPage = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMRequiredBankAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mRequiredBank = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMReturnedBankAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mReturnedBank = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMPreservesBankAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mPreservesBank = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMIsNoReturnAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mIsNoReturn = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_midrange_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_midrange_routineDefinitionList::
modifier_setMEndOfRoutineLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfRoutineLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_midrange_routineDefinitionList::cEnumerator::_mRoutineName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mRoutineName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_luint  & GGS_midrange_routineDefinitionList::cEnumerator::_mPage (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mPage ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_luint  & GGS_midrange_routineDefinitionList::cEnumerator::_mRequiredBank (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mRequiredBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_luint  & GGS_midrange_routineDefinitionList::cEnumerator::_mReturnedBank (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mReturnedBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_midrange_routineDefinitionList::cEnumerator::_mPreservesBank (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mPreservesBank ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_midrange_routineDefinitionList::cEnumerator::_mIsNoReturn (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mIsNoReturn ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_midrange_instructionList  & GGS_midrange_routineDefinitionList::cEnumerator::_mInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_midrange_routineDefinitionList::cEnumerator::_mEndOfRoutineLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mEndOfRoutineLocation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'midrange_model' struct                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_midrange_model::GGS_midrange_model (void) :
mProgramName (),
mDeviceName (),
mConfigDefinitionList (),
mAcceptDefaultConfiguration (),
mRamDefinitionList (),
mInterruptDefinitionList (),
mConstantDefinitionList (),
mRoutineDefinitionList (),
mNeedsComputedGoto2 (),
mNeedsComputedGoto4 (),
mEndOfProgram () {
}

//---------------------------------------------------------------------------*

GGS_midrange_model::~GGS_midrange_model (void) {
}

//---------------------------------------------------------------------------*

void GGS_midrange_model::_drop (void) {
  mProgramName._drop () ;
  mDeviceName._drop () ;
  mConfigDefinitionList._drop () ;
  mAcceptDefaultConfiguration._drop () ;
  mRamDefinitionList._drop () ;
  mInterruptDefinitionList._drop () ;
  mConstantDefinitionList._drop () ;
  mRoutineDefinitionList._drop () ;
  mNeedsComputedGoto2._drop () ;
  mNeedsComputedGoto4._drop () ;
  mEndOfProgram._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_midrange_model::_isBuilt (void) const {
  return mProgramName._isBuilt ()
    && mDeviceName._isBuilt ()
    && mConfigDefinitionList._isBuilt ()
    && mAcceptDefaultConfiguration._isBuilt ()
    && mRamDefinitionList._isBuilt ()
    && mInterruptDefinitionList._isBuilt ()
    && mConstantDefinitionList._isBuilt ()
    && mRoutineDefinitionList._isBuilt ()
    && mNeedsComputedGoto2._isBuilt ()
    && mNeedsComputedGoto4._isBuilt ()
    && mEndOfProgram._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_model::
_operator_isEqual (const GGS_midrange_model & inOperand) const {
  return mProgramName._operator_isEqual (inOperand.mProgramName)
    ._operator_and (mDeviceName._operator_isEqual (inOperand.mDeviceName))
    ._operator_and (mConfigDefinitionList._operator_isEqual (inOperand.mConfigDefinitionList))
    ._operator_and (mAcceptDefaultConfiguration._operator_isEqual (inOperand.mAcceptDefaultConfiguration))
    ._operator_and (mRamDefinitionList._operator_isEqual (inOperand.mRamDefinitionList))
    ._operator_and (mInterruptDefinitionList._operator_isEqual (inOperand.mInterruptDefinitionList))
    ._operator_and (mConstantDefinitionList._operator_isEqual (inOperand.mConstantDefinitionList))
    ._operator_and (mRoutineDefinitionList._operator_isEqual (inOperand.mRoutineDefinitionList))
    ._operator_and (mNeedsComputedGoto2._operator_isEqual (inOperand.mNeedsComputedGoto2))
    ._operator_and (mNeedsComputedGoto4._operator_isEqual (inOperand.mNeedsComputedGoto4))
    ._operator_and (mEndOfProgram._operator_isEqual (inOperand.mEndOfProgram)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_midrange_model::
_operator_isNotEqual (const GGS_midrange_model & inOperand) const {
  return mProgramName._operator_isNotEqual (inOperand.mProgramName)
    ._operator_or (mDeviceName._operator_isNotEqual (inOperand.mDeviceName))
    ._operator_or (mConfigDefinitionList._operator_isNotEqual (inOperand.mConfigDefinitionList))
    ._operator_or (mAcceptDefaultConfiguration._operator_isNotEqual (inOperand.mAcceptDefaultConfiguration))
    ._operator_or (mRamDefinitionList._operator_isNotEqual (inOperand.mRamDefinitionList))
    ._operator_or (mInterruptDefinitionList._operator_isNotEqual (inOperand.mInterruptDefinitionList))
    ._operator_or (mConstantDefinitionList._operator_isNotEqual (inOperand.mConstantDefinitionList))
    ._operator_or (mRoutineDefinitionList._operator_isNotEqual (inOperand.mRoutineDefinitionList))
    ._operator_or (mNeedsComputedGoto2._operator_isNotEqual (inOperand.mNeedsComputedGoto2))
    ._operator_or (mNeedsComputedGoto4._operator_isNotEqual (inOperand.mNeedsComputedGoto4))
    ._operator_or (mEndOfProgram._operator_isNotEqual (inOperand.mEndOfProgram)) ;
}

//---------------------------------------------------------------------------*

GGS_midrange_model GGS_midrange_model::
constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_configDefinitionList & argument_2,
                 const GGS_bool& argument_3,
                 const GGS_ramDefinitionList & argument_4,
                 const GGS_midrange_interruptDefinitionList & argument_5,
                 const GGS_constantDefinitionList & argument_6,
                 const GGS_midrange_routineDefinitionList & argument_7,
                 const GGS_bool& argument_8,
                 const GGS_bool& argument_9,
                 const GGS_location & argument_10) {
  GGS_midrange_model result ;
  result.mProgramName = argument_0 ;
  result.mDeviceName = argument_1 ;
  result.mConfigDefinitionList = argument_2 ;
  result.mAcceptDefaultConfiguration = argument_3 ;
  result.mRamDefinitionList = argument_4 ;
  result.mInterruptDefinitionList = argument_5 ;
  result.mConstantDefinitionList = argument_6 ;
  result.mRoutineDefinitionList = argument_7 ;
  result.mNeedsComputedGoto2 = argument_8 ;
  result.mNeedsComputedGoto4 = argument_9 ;
  result.mEndOfProgram = argument_10 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_midrange_model::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @midrange_model" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mProgramName " ;
    _s << mProgramName.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mDeviceName " ;
    _s << mDeviceName.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mConfigDefinitionList " ;
    _s << mConfigDefinitionList.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mAcceptDefaultConfiguration " ;
    _s << mAcceptDefaultConfiguration.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRamDefinitionList " ;
    _s << mRamDefinitionList.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mInterruptDefinitionList " ;
    _s << mInterruptDefinitionList.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mConstantDefinitionList " ;
    _s << mConstantDefinitionList.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineDefinitionList " ;
    _s << mRoutineDefinitionList.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mNeedsComputedGoto2 " ;
    _s << mNeedsComputedGoto2.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mNeedsComputedGoto4 " ;
    _s << mNeedsComputedGoto4.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEndOfProgram " ;
    _s << mEndOfProgram.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

