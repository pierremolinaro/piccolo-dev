//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'midrange_optimizations.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 14th, 2008, at 20h32'8"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_optimizations.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_optimizations.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@midrange_ipic_instruction.defineLabel'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction__defineLabel (C_Compiler &,
                                const cPtr_midrange_ipic_instruction * operand_605,
                                GGS_symbolTableForOptimizations  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inLineIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_605 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction.defineLabel' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction__defineLabel> gDispatchTableFor__midrange_ipic_instruction__defineLabel ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction__defineLabel (typeCategoryMethod__midrange_ipic_instruction__defineLabel inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction__defineLabel.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction__defineLabel
findCategoryMethod__midrange_ipic_instruction__defineLabel (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction__defineLabel result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction__defineLabel.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction__defineLabel (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction__defineLabel (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction__defineLabel.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@midrange_ipic_pseudo_LABEL.defineLabel'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_pseudo_LABEL__defineLabel (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_pseudo_LABEL * operand_847,
                                GGS_symbolTableForOptimizations  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inLineIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_847 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_847->mLabel, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "findMidRangeFirstInstructionFromAddress"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findMidRangeFirstInstructionFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_midrange_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_midrange_ipic_instruction  & var_cas_outFirstInstruction COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findMidRangeFirstInstructionFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_1835 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
  GGS_bool _condition_1835 (_variant_1835._isBuilt (), true) ;
  while (_condition_1835.isBuiltAndTrue ()) {
    _condition_1835 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_1835.isBuiltAndTrue ()) {
      if (_variant_1835.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (49)) ;
        _condition_1835 = GGS_bool (true, false) ;
      }else{
        _variant_1835._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_midrange_ipic_instruction _var_1822 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (42)) ; // CAST instruction
          if (_var_1822.getPtr () != NULL) {
            macroValidPointer (_var_1822.getPtr ()) ;
            if (dynamic_cast <cPtr_midrange_ipic_actualInstruction *> (_var_1822.getPtr ()) != NULL) {
              const GGS_midrange_ipic_actualInstruction var_cas_instr (_var_1822.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true, true) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findMidRangeFirstInstructionFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "findMidRangeFirstInstructionOrLabelFromAddress" *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_findMidRangeFirstInstructionOrLabelFromAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inLineIndex,
                                const GGS_midrange_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                GGS_midrange_ipic_instruction  & var_cas_outFirstInstruction,
                                GGS_stringset  & var_cas_outReachedLabelSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_findMidRangeFirstInstructionOrLabelFromAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outReachedLabelSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = var_cas_inLineIndex ;
  var_cas_outFirstInstruction = GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_2948 = var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_bool _condition_2948 (_variant_2948._isBuilt (), true) ;
  while (_condition_2948.isBuiltAndTrue ()) {
    _condition_2948 = ((var_cas_currentAddress)._operator_strictInf (var_cas_inGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (67))))._operator_and ((var_cas_found)._operator_not ()) ;
    if (_condition_2948.isBuiltAndTrue ()) {
      if (_variant_2948.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (80)) ;
        _condition_2948 = GGS_bool (true, false) ;
      }else{
        _variant_2948._decrement_operation (_inLexique COMMA_HERE) ;
        { const GGS_midrange_ipic_instruction _var_2935 = var_cas_inGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (69)) ; // CAST instruction
          if (_var_2935.getPtr () != NULL) {
            macroValidPointer (_var_2935.getPtr ()) ;
            if (dynamic_cast <cPtr_midrange_ipic_actualInstruction *> (_var_2935.getPtr ()) != NULL) {
              const GGS_midrange_ipic_actualInstruction var_cas_instr (_var_2935.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_found = GGS_bool (true, true) ;
            }else if (typeid (cPtr_midrange_ipic_pseudo_LABEL) == typeid (* (_var_2935.getPtr ()))) {
              const GGS_midrange_ipic_pseudo_LABEL var_cas_instr (_var_2935.getPtr ()) ;
              var_cas_outFirstInstruction = var_cas_instr ;
              var_cas_outReachedLabelSet._addAssign_operation (var_cas_instr.reader_mLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
            }else{
              var_cas_currentAddress._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_findMidRangeFirstInstructionOrLabelFromAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@midrange_ipic_JUMP.optimizeJUMP'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_JUMP__optimizeJUMP (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_JUMP * operand_3406,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3406 != NULL) {
    GGS_stringset  var_cas_reachedLabelSet ;
    GGS_midrange_ipic_instruction  automatic_var_0 ;
    ::routine_findMidRangeFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_ioGeneratedInstructionList,  automatic_var_0,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (98)) ;
    if ((var_cas_reachedLabelSet.reader_hasKey (_inLexique, operand_3406->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (101)) ;
      var_cas_ioListFileContents.writeString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
      var_cas_ioListFileContents.writeString (": JUMP branching to next instruction deleted\n") ;
    }else{
      GGS_uint  var_cas_line ;
      const GGS_symbolTableForOptimizations  _temp_4204 = var_cas_inSymbolTable ;
      if (_temp_4204._isBuilt ()) {
        _temp_4204 (HERE)->method_searchKey (_inLexique, operand_3406->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
      GGS_midrange_ipic_instruction  var_cas_firstInstruction ;
      ::routine_findMidRangeFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (108)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (108)) ;
      { const GGS_midrange_ipic_instruction _var_5845 = var_cas_firstInstruction ; // CAST instruction
        if (_var_5845.getPtr () != NULL) {
          macroValidPointer (_var_5845.getPtr ()) ;
          if (typeid (cPtr_midrange_ipic_instruction_RETURN) == typeid (* (_var_5845.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_instruction_RETURN ::constructor_new (_inLexique, operand_3406->mInstructionLocation COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (112)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
            var_cas_ioListFileContents.writeString (": JUMP branching to RETURN replaced by RETURN\n") ;
          }else if (typeid (cPtr_midrange_ipic_instruction_literalOperation) == typeid (* (_var_5845.getPtr ()))) {
            const GGS_midrange_ipic_instruction_literalOperation var_cas_literalOp (_var_5845.getPtr ()) ;
            if (((var_cas_literalOp.reader_mLiteralInstruction (_inLexique COMMA_SOURCE_FILE_AT_LINE (119)))._operator_isEqual (GGS_midrange_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_literalOp, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (120)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (125))) ;
              var_cas_ioListFileContents.writeString (": JUMP branching to RETLW replaced by RETLW\n") ;
            }
          }else if (typeid (cPtr_midrange_ipic_JUMP) == typeid (* (_var_5845.getPtr ()))) {
            const GGS_midrange_ipic_JUMP var_cas_jump (_var_5845.getPtr ()) ;
            if (((operand_3406->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_JUMP ::constructor_new (_inLexique, operand_3406->mInstructionLocation, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (130)), GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE), GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (129)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
              var_cas_ioListFileContents.writeString (": JUMP branching to JUMP replaced by JUMP\n") ;
            }
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@midrange_ipic_JUMP.optimizeJUMP'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_JUMP__optimizeJUMP> gDispatchTableFor__midrange_ipic_JUMP__optimizeJUMP ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_JUMP__optimizeJUMP (typeCategoryMethod__midrange_ipic_JUMP__optimizeJUMP inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_JUMP__optimizeJUMP
findCategoryMethod__midrange_ipic_JUMP__optimizeJUMP (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_JUMP__optimizeJUMP result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_JUMP__optimizeJUMP.count ()) {
    result = gDispatchTableFor__midrange_ipic_JUMP__optimizeJUMP (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_JUMP__optimizeJUMP (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_JUMP__optimizeJUMP.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@midrange_ipic_GOTO.optimizeGOTO'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_GOTO__optimizeGOTO (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_GOTO * operand_6003,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6003 != NULL) {
    GGS_stringset  var_cas_reachedLabelSet ;
    GGS_midrange_ipic_instruction  automatic_var_1 ;
    ::routine_findMidRangeFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (152)),  var_cas_ioGeneratedInstructionList,  automatic_var_1,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (152)) ;
    if ((var_cas_reachedLabelSet.reader_hasKey (_inLexique, operand_6003->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (154)) COMMA_SOURCE_FILE_AT_LINE (154))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (155)) ;
      var_cas_ioListFileContents.writeString ("  line ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (156))) ;
      var_cas_ioListFileContents.writeString (": GOTO branching to next instruction deleted\n") ;
    }else{
      GGS_uint  var_cas_line ;
      const GGS_symbolTableForOptimizations  _temp_6801 = var_cas_inSymbolTable ;
      if (_temp_6801._isBuilt ()) {
        _temp_6801 (HERE)->method_searchKey (_inLexique, operand_6003->mTargetLabel, var_cas_line COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
      GGS_midrange_ipic_instruction  var_cas_firstInstruction ;
      ::routine_findMidRangeFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (162)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (162)) ;
      { const GGS_midrange_ipic_instruction _var_8874 = var_cas_firstInstruction ; // CAST instruction
        if (_var_8874.getPtr () != NULL) {
          macroValidPointer (_var_8874.getPtr ()) ;
          if (typeid (cPtr_midrange_ipic_instruction_RETURN) == typeid (* (_var_8874.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_instruction_RETURN ::constructor_new (_inLexique, operand_6003->mInstructionLocation COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (166)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (171))) ;
            var_cas_ioListFileContents.writeString (": GOTO branching to RETURN replaced by RETURN\n") ;
          }else if (typeid (cPtr_midrange_ipic_instruction_literalOperation) == typeid (* (_var_8874.getPtr ()))) {
            const GGS_midrange_ipic_instruction_literalOperation var_cas_literalOp (_var_8874.getPtr ()) ;
            if (((var_cas_literalOp.reader_mLiteralInstruction (_inLexique COMMA_SOURCE_FILE_AT_LINE (173)))._operator_isEqual (GGS_midrange_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_literalOp, var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (174)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
              var_cas_ioListFileContents.writeString (": GOTO branching to RETLW replaced by RETLW\n") ;
            }
          }else if (typeid (cPtr_midrange_ipic_JUMP) == typeid (* (_var_8874.getPtr ()))) {
            const GGS_midrange_ipic_JUMP var_cas_jump (_var_8874.getPtr ()) ;
            if (((operand_6003->mTargetLabel)._operator_isNotEqual (var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_JUMP ::constructor_new (_inLexique, operand_6003->mInstructionLocation, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)), GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE), GGS_midrange_call_goto_bit::constructor_noChange (_inLexique COMMA_HERE) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (183)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (188))) ;
              var_cas_ioListFileContents.writeString (": GOTO branching to JUMP replaced by JUMP\n") ;
            }
          }else if (typeid (cPtr_midrange_ipic_GOTO) == typeid (* (_var_8874.getPtr ()))) {
            const GGS_midrange_ipic_GOTO var_cas_goto (_var_8874.getPtr ()) ;
            if (((operand_6003->mTargetLabel)._operator_isNotEqual (var_cas_goto.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (191)))).isBuiltAndTrue ()) {
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_GOTO ::constructor_new (_inLexique, operand_6003->mInstructionLocation, var_cas_goto.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (193)) COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (192)) ;
              var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (197))) ;
              var_cas_ioListFileContents.writeString (": GOTO branching to JUMP replaced by JUMP\n") ;
            }
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@midrange_ipic_GOTO.optimizeGOTO'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_GOTO__optimizeGOTO> gDispatchTableFor__midrange_ipic_GOTO__optimizeGOTO ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_GOTO__optimizeGOTO (typeCategoryMethod__midrange_ipic_GOTO__optimizeGOTO inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_GOTO__optimizeGOTO.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_GOTO__optimizeGOTO
findCategoryMethod__midrange_ipic_GOTO__optimizeGOTO (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_GOTO__optimizeGOTO result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_GOTO__optimizeGOTO.count ()) {
    result = gDispatchTableFor__midrange_ipic_GOTO__optimizeGOTO (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_GOTO__optimizeGOTO (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_GOTO__optimizeGOTO.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_literalOperation.optimizeMOVLW'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_literalOperation__optimizeMOVLW (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_literalOperation * operand_9981,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9981 != NULL) {
    if (((operand_9981->mLiteralInstruction)._operator_isEqual (GGS_midrange_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      GGS_midrange_ipic_instruction  var_cas_firstInstruction ;
      ::routine_findMidRangeFirstInstructionFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (239)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (239)) ;
      { const GGS_midrange_ipic_instruction _var_10931 = var_cas_firstInstruction ; // CAST instruction
        if (_var_10931.getPtr () != NULL) {
          macroValidPointer (_var_10931.getPtr ()) ;
          if (typeid (cPtr_midrange_ipic_instruction_RETURN) == typeid (* (_var_10931.getPtr ()))) {
            var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_instruction_literalOperation ::constructor_new (_inLexique, operand_9981->mInstructionLocation, GGS_midrange_literal_instruction_opcode::constructor_RETLW (_inLexique COMMA_HERE), operand_9981->mLiteralValue COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (243)) ;
            var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
            var_cas_ioListFileContents.writeString ("  line ") ;
            var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (248))) ;
            var_cas_ioListFileContents.writeString (": MOVLW followed by RETURN replaced by RETLW\n") ;
          }else{
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction_literalOperation.optimizeMOVLW'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW> gDispatchTableFor__midrange_ipic_instruction_literalOperation__optimizeMOVLW ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW (typeCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW
findCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction_literalOperation__optimizeMOVLW.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction_literalOperation__optimizeMOVLW (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction_literalOperation__optimizeMOVLW.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_incDecRegisterInCondition.optimizeTestDecInc'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_incDecRegisterInCondition * operand_11110,
                                const GGS_symbolTableForOptimizations   var_cas_inSymbolTable,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11110 != NULL) {
    GGS_uint  var_cas_line ;
    const GGS_symbolTableForOptimizations  _temp_11388 = var_cas_inSymbolTable ;
    if (_temp_11388._isBuilt ()) {
      _temp_11388 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_11110->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_line COMMA_SOURCE_FILE_AT_LINE (264)) ;
    }
    GGS_midrange_ipic_instruction  var_cas_firstInstruction ;
    ::routine_findMidRangeFirstInstructionFromAddress (_inLexique,  var_cas_line._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (267)),  var_cas_ioGeneratedInstructionList,  var_cas_firstInstruction COMMA_SOURCE_FILE_AT_LINE (267)) ;
    { const GGS_midrange_ipic_instruction _var_12670 = var_cas_firstInstruction ; // CAST instruction
      if (_var_12670.getPtr () != NULL) {
        macroValidPointer (_var_12670.getPtr ()) ;
        if (typeid (cPtr_midrange_ipic_JUMP) == typeid (* (_var_12670.getPtr ()))) {
          const GGS_midrange_ipic_JUMP var_cas_jump (_var_12670.getPtr ()) ;
          var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, operand_11110->mInstructionLocation, operand_11110->mRegisterDescription, var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (275)), operand_11110->mIncrement, operand_11110->m_W_isDestination, operand_11110->mBranchIfZero COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (271)) ;
          var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
          var_cas_ioListFileContents.writeString ("  line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (283))) ;
          var_cas_ioListFileContents.writeString (": label of ") ;
          var_cas_ioListFileContents.writeString ("JUMP ") ;
          if ((operand_11110->mIncrement).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString ("INCF ") ;
          }else{
            var_cas_ioListFileContents.writeString ("DECF ") ;
          }
          var_cas_ioListFileContents._dotAssign_operation (operand_11110->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (290))) ;
          if ((operand_11110->m_W_isDestination).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString (", W ") ;
          }
          if ((operand_11110->mBranchIfZero).isBuiltAndTrue ()) {
            var_cas_ioListFileContents.writeString ("Z") ;
          }else{
            var_cas_ioListFileContents.writeString ("NZ") ;
          }
          var_cas_ioListFileContents.writeString (" branching to JUMP replaced by second JUMP label\n") ;
        }else{
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_incDecRegisterInCondition.optimizeTestDecInc'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc> gDispatchTableFor__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (typeCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc
findCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc.count ()) {
    result = gDispatchTableFor__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@midrange_ipic_instruction_BitTestSkip.optimizeBitTestSkip'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (C_Compiler & _inLexique,
                                const cPtr_midrange_ipic_instruction_BitTestSkip * operand_12837,
                                const GGS_uint   var_cas_inLineIndex,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_bool & var_cas_ioOptimizationsDone
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12837 != NULL) {
    GGS_string var_cas_jumpLabel ;
    var_cas_jumpLabel = GGS_string (true, "") ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true, false) ;
    { const GGS_midrange_ipic_instruction _var_13286 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (315)) COMMA_SOURCE_FILE_AT_LINE (315)) ; // CAST instruction
      if (_var_13286.getPtr () != NULL) {
        macroValidPointer (_var_13286.getPtr ()) ;
        if (typeid (cPtr_midrange_ipic_JUMP) == typeid (* (_var_13286.getPtr ()))) {
          const GGS_midrange_ipic_JUMP var_cas_jump (_var_13286.getPtr ()) ;
          var_cas_jumpLabel = var_cas_jump.reader_mTargetLabel (_inLexique COMMA_SOURCE_FILE_AT_LINE (317)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (317)) ;
          var_cas_ok = GGS_bool (true, true) ;
        }else{
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      { const GGS_midrange_ipic_instruction _var_13642 = var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (323)) COMMA_SOURCE_FILE_AT_LINE (323)) ; // CAST instruction
        if (_var_13642.getPtr () != NULL) {
          macroValidPointer (_var_13642.getPtr ()) ;
          if (dynamic_cast <cPtr_midrange_ipic_actualInstruction *> (_var_13642.getPtr ()) != NULL) {
            const GGS_midrange_ipic_actualInstruction var_cas_instruction (_var_13642.getPtr ()) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_midrange_ipic_actualInstruction  _temp_13546 = var_cas_instruction ;
            if (_temp_13546._isBuilt ()) {
              _temp_13546 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (325)) ;
            }
            var_cas_ok = (var_cas_instructionLength)._operator_isEqual (GGS_uint (true, 1U)) ;
          }else{
            var_cas_ok = GGS_bool (true, false) ;
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      GGS_midrange_ipic_instruction  var_cas_thirdInstruction ;
      var_cas_thirdInstruction = GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE) ;
      GGS_stringset  var_cas_reachedLabelSet ;
      GGS_midrange_ipic_instruction  automatic_var_2 ;
      ::routine_findMidRangeFirstInstructionOrLabelFromAddress (_inLexique,  var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (335)),  var_cas_ioGeneratedInstructionList,  automatic_var_2,  var_cas_reachedLabelSet COMMA_SOURCE_FILE_AT_LINE (335)) ;
      var_cas_ok = var_cas_reachedLabelSet.reader_hasKey (_inLexique, var_cas_jumpLabel COMMA_SOURCE_FILE_AT_LINE (336)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_instruction_BitTestSkip ::constructor_new (_inLexique, operand_12837->mInstructionLocation, (operand_12837->mSkipIfSet)._operator_not (), operand_12837->mRegisterDescription, operand_12837->mBitNumber COMMA_HERE), var_cas_inLineIndex COMMA_SOURCE_FILE_AT_LINE (341)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_ioGeneratedInstructionList.reader_mInstructionAtIndex (_inLexique, var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (352)) COMMA_SOURCE_FILE_AT_LINE (352)), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (353)) COMMA_SOURCE_FILE_AT_LINE (351)) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (358)) COMMA_SOURCE_FILE_AT_LINE (356)) ;
      var_cas_ioOptimizationsDone = GGS_bool (true, true) ;
      var_cas_ioListFileContents.writeString ("  lines ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (363))) ;
      var_cas_ioListFileContents.writeString (" to ") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_inLineIndex._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (363)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (363))) ;
      var_cas_ioListFileContents.writeString (" bit test skip, following by a JUMP skipping next instruction, is complemented\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@midrange_ipic_instruction_BitTestSkip.optimizeBitTestSkip'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip> gDispatchTableFor__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (typeCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip
findCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip.count ()) {
    result = gDispatchTableFor__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (superClassPtr) ;
      gDispatchTableFor__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "perform_midrange_optimizations"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_perform_midrange_optimizations (C_Compiler & _inLexique,
                                GGS_midrange_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_perform_midrange_optimizations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (379))) ;
  var_cas_ioListFileContents.writeString ("\n") ;
  var_cas_ioListFileContents.writeString ("*") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "CODE OPTIMIZATION").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (380))) ;
  var_cas_ioListFileContents.writeString ("*\n") ;
  var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (381))) ;
  var_cas_ioListFileContents.writeString ("\n"
    "\n") ;
  GGS_symbolTableForOptimizations  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTableForOptimizations ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_lineIndex (true, 0) ;
    GGS_midrange_ipic_instructionList::cEnumerator enumerator_15998 (var_cas_ioGeneratedInstructionList, true) ;
    const GGS_midrange_ipic_instructionList::cElement * operand_15998 = NULL ;
    while (((operand_15998 = enumerator_15998.nextObject ()))) {
      macroValidPointer (operand_15998) ;
      const GGS_midrange_ipic_instruction  _temp_16041 = operand_15998->mInstruction ;
      if (_temp_16041._isBuilt ()) {
        typeCategoryMethod__midrange_ipic_instruction__defineLabel _method = findCategoryMethod__midrange_ipic_instruction__defineLabel (_temp_16041._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_16041 (HERE), var_cas_symbolTable, var_cas_lineIndex COMMA_SOURCE_FILE_AT_LINE (385)) ;
        }
      }
      var_cas_lineIndex.mValue ++ ;
    }
  }
  GGS_bool var_cas_optimizationsDone ;
  var_cas_optimizationsDone = GGS_bool (true, true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (true, 0U) ;
  GGS_uint _variant_19751 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (390)) ;
  GGS_bool _condition_19751 (_variant_19751._isBuilt (), true) ;
  while (_condition_19751.isBuiltAndTrue ()) {
    _condition_19751 = var_cas_optimizationsDone ;
    if (_condition_19751.isBuiltAndTrue ()) {
      if (_variant_19751.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (458)) ;
        _condition_19751 = GGS_bool (true, false) ;
      }else{
        _variant_19751._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_optimizationsDone = GGS_bool (true, false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)) ;
        var_cas_ioListFileContents.writeString ("Pass ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_iteration.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (395))) ;
        var_cas_ioListFileContents.writeString (":\n") ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_16461 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_16461 = NULL ;
          while (((operand_16461 = enumerator_16461.nextObject ()))) {
            macroValidPointer (operand_16461) ;
            { const GGS_midrange_ipic_instruction _var_17601 = operand_16461->mInstruction ; // CAST instruction
              if (_var_17601.getPtr () != NULL) {
                macroValidPointer (_var_17601.getPtr ()) ;
                if (typeid (cPtr_midrange_ipic_GOTO) == typeid (* (_var_17601.getPtr ()))) {
                  const GGS_midrange_ipic_GOTO var_cas_ipic_GOTO (_var_17601.getPtr ()) ;
                  const GGS_midrange_ipic_GOTO  _temp_16574 = var_cas_ipic_GOTO ;
                  if (_temp_16574._isBuilt ()) {
                    typeCategoryMethod__midrange_ipic_GOTO__optimizeGOTO _method = findCategoryMethod__midrange_ipic_GOTO__optimizeGOTO (_temp_16574._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_16574 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (400)) ;
                    }
                  }
                }else if (typeid (cPtr_midrange_ipic_JUMP) == typeid (* (_var_17601.getPtr ()))) {
                  const GGS_midrange_ipic_JUMP var_cas_ipic_JUMP (_var_17601.getPtr ()) ;
                  const GGS_midrange_ipic_JUMP  _temp_16744 = var_cas_ipic_JUMP ;
                  if (_temp_16744._isBuilt ()) {
                    typeCategoryMethod__midrange_ipic_JUMP__optimizeJUMP _method = findCategoryMethod__midrange_ipic_JUMP__optimizeJUMP (_temp_16744._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_16744 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (402)) ;
                    }
                  }
                }else if (typeid (cPtr_midrange_ipic_instruction_literalOperation) == typeid (* (_var_17601.getPtr ()))) {
                  const GGS_midrange_ipic_instruction_literalOperation var_cas_ipic_literal (_var_17601.getPtr ()) ;
                  const GGS_midrange_ipic_instruction_literalOperation  _temp_17104 = var_cas_ipic_literal ;
                  if (_temp_17104._isBuilt ()) {
                    typeCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW _method = findCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW (_temp_17104._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17104 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (406)) ;
                    }
                  }
                }else if (typeid (cPtr_midrange_ipic_incDecRegisterInCondition) == typeid (* (_var_17601.getPtr ()))) {
                  const GGS_midrange_ipic_incDecRegisterInCondition var_cas_ipic_decInc (_var_17601.getPtr ()) ;
                  const GGS_midrange_ipic_incDecRegisterInCondition  _temp_17292 = var_cas_ipic_decInc ;
                  if (_temp_17292._isBuilt ()) {
                    typeCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc _method = findCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (_temp_17292._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17292 (HERE), var_cas_symbolTable, var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (408)) ;
                    }
                  }
                }else if (typeid (cPtr_midrange_ipic_instruction_BitTestSkip) == typeid (* (_var_17601.getPtr ()))) {
                  const GGS_midrange_ipic_instruction_BitTestSkip var_cas_ipic_bitTestSkip (_var_17601.getPtr ()) ;
                  const GGS_midrange_ipic_instruction_BitTestSkip  _temp_17502 = var_cas_ipic_bitTestSkip ;
                  if (_temp_17502._isBuilt ()) {
                    typeCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip _method = findCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (_temp_17502._galgasObjectRunTimeInfo ()) ;
                    if (_method != NULL) {
                      _method (_inLexique, _temp_17502 (HERE), var_cas_idx, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_optimizationsDone COMMA_SOURCE_FILE_AT_LINE (410)) ;
                    }
                  }
                }else{
                }
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        GGS_stringset  var_cas_referencedLabels ;
        var_cas_referencedLabels = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_17746 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_17746 = NULL ;
          while (((operand_17746 = enumerator_17746.nextObject ()))) {
            macroValidPointer (operand_17746) ;
            const GGS_midrange_ipic_instruction  _temp_17790 = operand_17746->mInstruction ;
            if (_temp_17790._isBuilt ()) {
              _temp_17790 (HERE)->method_enterReferencedLabel (_inLexique, var_cas_referencedLabels COMMA_SOURCE_FILE_AT_LINE (417)) ;
            }
          }
        }
        {
          GGS_symbolTableForOptimizations::cEnumerator enumerator_17854 (var_cas_symbolTable, true) ;
          const GGS_symbolTableForOptimizations::cElement * operand_17854 = NULL ;
          while (((operand_17854 = enumerator_17854.nextObject ()))) {
            macroValidPointer (operand_17854) ;
            if (((var_cas_referencedLabels.reader_hasKey (_inLexique, operand_17854->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (420)) COMMA_SOURCE_FILE_AT_LINE (420)))._operator_not ()).isBuiltAndTrue ()) {
              GGS_uint  var_cas_definitionLine ;
              const GGS_symbolTableForOptimizations  _temp_17969 = var_cas_symbolTable ;
              if (_temp_17969._isBuilt ()) {
                _temp_17969 (HERE)->method_searchKey (_inLexique, operand_17854->mKey, var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (421)) ;
              }
              var_cas_ioListFileContents.writeString ("  line ") ;
              var_cas_ioListFileContents._dotAssign_operation (var_cas_definitionLine.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
              var_cas_ioListFileContents.writeString (": unreferenced label '") ;
              var_cas_ioListFileContents._dotAssign_operation (operand_17854->mKey) ;
              var_cas_ioListFileContents.writeString ("' is deleted\n") ;
              var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_definitionLine COMMA_SOURCE_FILE_AT_LINE (423)) ;
              GGS_uint  automatic_var_3 ;
              var_cas_symbolTable.modifier_removeKey (_inLexique, operand_17854->mKey, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (424)) ;
            }
          }
        }
        GGS_bool var_cas_reachable ;
        var_cas_reachable = GGS_bool (true, true) ;
        GGS_bool var_cas_skippingInstruction ;
        var_cas_skippingInstruction = GGS_bool (true, false) ;
        GGS_bool var_cas_previousWasSkippingInstruction ;
        var_cas_previousWasSkippingInstruction = GGS_bool (true, false) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_midrange_ipic_instructionList::cEnumerator enumerator_18489 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_midrange_ipic_instructionList::cElement * operand_18489 = NULL ;
          while (((operand_18489 = enumerator_18489.nextObject ()))) {
            macroValidPointer (operand_18489) ;
            if (((var_cas_reachable)._operator_or (var_cas_previousWasSkippingInstruction)).isBuiltAndTrue ()) {
              const GGS_midrange_ipic_instruction  _temp_18605 = operand_18489->mInstruction ;
              if (_temp_18605._isBuilt ()) {
                _temp_18605 (HERE)->method_nextInstructionIsReachable (_inLexique, var_cas_reachable COMMA_SOURCE_FILE_AT_LINE (433)) ;
              }
              var_cas_previousWasSkippingInstruction = var_cas_skippingInstruction ;
              const GGS_midrange_ipic_instruction  _temp_18729 = operand_18489->mInstruction ;
              if (_temp_18729._isBuilt ()) {
                _temp_18729 (HERE)->method_isSkippingInstruction (_inLexique, var_cas_skippingInstruction COMMA_SOURCE_FILE_AT_LINE (435)) ;
              }
            }else{
              GGS_bool var_cas_isLABELorORG ;
              const GGS_midrange_ipic_instruction  _temp_18822 = operand_18489->mInstruction ;
              if (_temp_18822._isBuilt ()) {
                _temp_18822 (HERE)->method_isLABELorORG (_inLexique, var_cas_isLABELorORG COMMA_SOURCE_FILE_AT_LINE (437)) ;
              }
              GGS_bool var_cas_isNULL ;
              const GGS_midrange_ipic_instruction  _temp_18884 = operand_18489->mInstruction ;
              if (_temp_18884._isBuilt ()) {
                _temp_18884 (HERE)->method_isNULL (_inLexique, var_cas_isNULL COMMA_SOURCE_FILE_AT_LINE (438)) ;
              }
              if ((((var_cas_isLABELorORG)._operator_not ())._operator_and ((var_cas_isNULL)._operator_not ())).isBuiltAndTrue ()) {
                var_cas_ioListFileContents.writeString ("  line ") ;
                var_cas_ioListFileContents._dotAssign_operation (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (440))) ;
                var_cas_ioListFileContents.writeString (": unreachable instruction is deleted\n") ;
                var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, GGS_midrange_ipic_NULL ::constructor_new (_inLexique COMMA_HERE), var_cas_idx COMMA_SOURCE_FILE_AT_LINE (441)) ;
              }else if ((var_cas_isLABELorORG).isBuiltAndTrue ()) {
                var_cas_reachable = GGS_bool (true, true) ;
                var_cas_previousWasSkippingInstruction = GGS_bool (true, false) ;
                var_cas_skippingInstruction = GGS_bool (true, false) ;
              }
            }
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_optimizationsDone)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("  No optimization\n"
            "\n") ;
          GGS_uint  var_cas_currentAddress ;
          var_cas_currentAddress = GGS_uint (true, 0U) ;
          {
            GGS_midrange_ipic_instructionList::cEnumerator enumerator_19549 (var_cas_ioGeneratedInstructionList, true) ;
            const GGS_midrange_ipic_instructionList::cElement * operand_19549 = NULL ;
            while (((operand_19549 = enumerator_19549.nextObject ()))) {
              macroValidPointer (operand_19549) ;
              const GGS_midrange_ipic_instruction  _temp_19592 = operand_19549->mInstruction ;
              if (_temp_19592._isBuilt ()) {
                _temp_19592 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (454)) ;
              }
            }
          }
          var_cas_ioListFileContents.writeString ("Minimum code size: ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (456))) ;
          var_cas_ioListFileContents.writeString (" instructions\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_perform_midrange_optimizations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_midrange_optimizations (void) {
 enterCategoryMethod__midrange_ipic_instruction__defineLabel (category_method__midrange_ipic_instruction__defineLabel, gClassInfoFor__midrange_ipic_instruction.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction__defineLabel ((typeCategoryMethod__midrange_ipic_instruction__defineLabel) category_method__midrange_ipic_pseudo_LABEL__defineLabel, gClassInfoFor__midrange_ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__midrange_ipic_JUMP__optimizeJUMP (category_method__midrange_ipic_JUMP__optimizeJUMP, gClassInfoFor__midrange_ipic_JUMP.slotID ()) ;
 enterCategoryMethod__midrange_ipic_GOTO__optimizeGOTO (category_method__midrange_ipic_GOTO__optimizeGOTO, gClassInfoFor__midrange_ipic_GOTO.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction_literalOperation__optimizeMOVLW (category_method__midrange_ipic_instruction_literalOperation__optimizeMOVLW, gClassInfoFor__midrange_ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc (category_method__midrange_ipic_incDecRegisterInCondition__optimizeTestDecInc, gClassInfoFor__midrange_ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip (category_method__midrange_ipic_instruction_BitTestSkip__optimizeBitTestSkip, gClassInfoFor__midrange_ipic_instruction_BitTestSkip.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_midrange_optimizations (prologueRoutineFor_midrange_optimizations,
                                   NULL) ;

//---------------------------------------------------------------------------*

