//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'midrange_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    december 14th, 2009, at 19h42'35"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "midrange_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "midrange_analyze"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_analyze (C_Compiler & inLexique,
                                const GGS_midrange_model  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_1673 = (var_cas_sourceFileBaseName).operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (22))) ;
  if (cond_1673.isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the program name ('")).operator_concat (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (23)))).operator_concat (GGS_string ("') should be identical to the file base name '"))).operator_concat (var_cas_sourceFileBaseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (25)) ;
  }
  GGS_string var_cas_listFileContents = GGS_string ("") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (29)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (29)) ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).enumValue ()) {
  case GGS_processorType::enum_midrange:
    {
    }
    break ;
  case GGS_processorType::enum_pic18_60:
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a pic18 device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (33)) ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a baseline device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (34)) ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasInterrupt = GGS_bool (false) ;
  {
    GGS_midrange_interruptDefinitionList::cEnumerator enumerator_2309 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (37)), true) ;
    const GGS_midrange_interruptDefinitionList::cElement * operand_2309 = NULL ;
    while (((operand_2309 = enumerator_2309.nextObject ()))) {
      macroValidPointer (operand_2309) ;
      const GGS_bool cond_2462 = var_cas_hasInterrupt ;
      if (cond_2462.isBuiltAndTrue ()) {
        operand_2309->mInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only one interrupt routine can be defined") COMMA_SOURCE_FILE_AT_LINE (40)) ;
      }
      var_cas_hasInterrupt = GGS_bool (true) ;
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (46)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (inLexique COMMA_SOURCE_FILE_AT_LINE (48)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (45)) ;
  GGS_ramBankTable  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_registerTable  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  ::routine_analyze_ram_sections (inLexique,  GGS_string ("DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (57)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (59)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_midrange_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_midrange_assembly_instruction_list (inLexique,  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (66)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (66)).add_operation (inLexique, GGS_uint (2047U) COMMA_SOURCE_FILE_AT_LINE (66)).divide_operation (inLexique, GGS_uint (2048U) COMMA_SOURCE_FILE_AT_LINE (66)),  var_cas_piccoloDeviceModel.reader_mBankCount (inLexique COMMA_SOURCE_FILE_AT_LINE (67)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (67)),  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (68)),  (var_cas_piccoloDeviceModel.reader_mSharedBankName (inLexique COMMA_SOURCE_FILE_AT_LINE (69))).operator_isNotEqual (GGS_string ("")),  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (65)) ;
  const GGS_bool cond_3924 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).operator_and (gOption_piccolo_5F_options_performOptimizations.reader_value ()) ;
  if (cond_3924.isBuiltAndTrue ()) {
    ::routine_perform_midrange_optimizations (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (78)) ;
  }
  const GGS_bool cond_4114 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_4114.isBuiltAndTrue ()) {
    ::routine_midrange_compute_JSR_JUMP (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
  const GGS_bool cond_4386 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_4386.isBuiltAndTrue ()) {
    GGS_string var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".list")) ;
    GGS_bool automatic_var_4378_0 ;
    const GGS_string temp_4364 = var_cas_listFileContents ;
    if (temp_4364.isBuilt ()) {
      temp_4364 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_listFile, automatic_var_4378_0 COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
  }
  const GGS_bool cond_6462 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_6462.isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_midrange_ipic_binary_code (inLexique,  var_cas_registerTable,  var_cas_piccoloDeviceModel.reader_mBankCount (inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (98)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (94)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (103)) ;
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_bool automatic_var_5025_0 ;
    const GGS_string temp_5001 = var_cas_contents ;
    if (temp_5001.isBuilt ()) {
      temp_5001 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_hexDestinationFile, automatic_var_5025_0 COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }
    const GGS_bool cond_5865 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
    if (cond_5865.isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage = ((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)))).operator_concat (GGS_string (" words;")) ;
      var_cas_verboseMessage.appendCString (" used: ") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
      var_cas_verboseMessage.appendCString (" words (") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (110)).divide_operation (inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (110))) ;
      var_cas_verboseMessage.appendCString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5413 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_5413 = NULL ;
        while (((operand_5413 = enumerator_5413.nextObject ()))) {
          macroValidPointer (operand_5413) ;
          GGS_uint  var_cas_bankSize = operand_5413->mInfo.mLastAddressPlusOne.substract_operation (inLexique, operand_5413->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (112)) ;
          GGS_uint  var_cas_usedSize = operand_5413->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_5413->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (113)) ;
          var_cas_verboseMessage.appendCString ("  RAM bank '") ;
          var_cas_verboseMessage.dotAssign_operation (operand_5413->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
          var_cas_verboseMessage.appendCString ("': ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_bankSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
          var_cas_verboseMessage.appendCString (" bytes, used ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116))) ;
          var_cas_verboseMessage.appendCString (" bytes (") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (117)).divide_operation (inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (117)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
          var_cas_verboseMessage.appendCString ("%).\n") ;
        }
      }
      inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
    const GGS_bool cond_6450 = gOption_piccolo_5F_options_generateAssembly.reader_value () ;
    if (cond_6450.isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_midrange_build_assembly_code (inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (125)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (126)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (124)) ;
      GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
      GGS_bool automatic_var_6440_0 ;
      const GGS_string temp_6416 = var_cas_assemblyCode ;
      if (temp_6416.isBuilt ()) {
        temp_6416 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_asmDestinationFile, automatic_var_6440_0 COMMA_SOURCE_FILE_AT_LINE (133)) ;
      }
    }
  }else if (cond_6462.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    const GGS_bool cond_6703 = var_cas_hexDestinationFile.reader_fileExists () ;
    if (cond_6703.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (138)) ;
    }
    GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
    const GGS_bool cond_6903 = var_cas_asmDestinationFile.reader_fileExists () ;
    if (cond_6903.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

