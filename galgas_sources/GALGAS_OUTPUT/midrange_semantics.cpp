//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'midrange_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     january 12th, 2009, at 14h23'52"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "midrange_analyze"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_analyze (C_Compiler & _inLexique,
                                const GGS_midrange_model  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (25)) ;
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (29)) ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)).enumValue ()) {
  case GGS_processorType::enum_midrange:
    {
    }
    break ;
  case GGS_processorType::enum_pic18_60:
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a pic18 device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (33)) ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a baseline device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (34)) ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasInterrupt ;
  var_cas_hasInterrupt = GGS_bool (true, false) ;
  {
    GGS_midrange_interruptDefinitionList::cEnumerator enumerator_2309 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (37)), true) ;
    const GGS_midrange_interruptDefinitionList::cElement * operand_2309 = NULL ;
    while (((operand_2309 = enumerator_2309.nextObject ()))) {
      macroValidPointer (operand_2309) ;
      if ((var_cas_hasInterrupt).isBuiltAndTrue ()) {
        operand_2309->mInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "only one interrupt routine can be defined") COMMA_SOURCE_FILE_AT_LINE (40)) ;
      }
      var_cas_hasInterrupt = GGS_bool (true, true) ;
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (_inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (_inLexique COMMA_SOURCE_FILE_AT_LINE (48)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (45)) ;
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  ::routine_analyze_ram_sections (_inLexique,  GGS_string (true, "DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_midrange_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_midrange_assembly_instruction_list (_inLexique,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (66))._add_operation (_inLexique, GGS_uint (true, 2047U) COMMA_SOURCE_FILE_AT_LINE (66))._divide_operation (_inLexique, GGS_uint (true, 2048U) COMMA_SOURCE_FILE_AT_LINE (66)),  var_cas_piccoloDeviceModel.reader_mBankCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)),  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)),  (var_cas_piccoloDeviceModel.reader_mSharedBankName (_inLexique COMMA_SOURCE_FILE_AT_LINE (69)))._operator_isNotEqual (GGS_string (true, "")),  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (65)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (77))))).isBuiltAndTrue ()) {
    ::routine_perform_midrange_optimizations (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (78)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    ::routine_midrange_compute_JSR_JUMP (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (85)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)))._operator_concat (GGS_string (true, ".list")) ;
    GGS_bool automatic_var_0 ;
    const GGS_string _temp_4352 = var_cas_listFileContents ;
    if (_temp_4352._isBuilt ()) {
      _temp_4352 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_midrange_ipic_binary_code (_inLexique,  var_cas_registerTable,  var_cas_piccoloDeviceModel.reader_mBankCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (94)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (103)) ;
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (104)))._operator_concat (GGS_string (true, ".hex")) ;
    GGS_bool automatic_var_1 ;
    const GGS_string _temp_4989 = var_cas_contents ;
    if (_temp_4989._isBuilt ()) {
      _temp_4989 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_hexDestinationFile, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (107)))).isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage ;
      var_cas_verboseMessage = ((GGS_string (true, "  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))))._operator_concat (GGS_string (true, " words;")) ;
      var_cas_verboseMessage.writeString (" used: ") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
      var_cas_verboseMessage.writeString (" words (") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (110))._divide_operation (_inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (110))) ;
      var_cas_verboseMessage.writeString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5395 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_5395 = NULL ;
        while (((operand_5395 = enumerator_5395.nextObject ()))) {
          macroValidPointer (operand_5395) ;
          GGS_uint  var_cas_bankSize ;
          var_cas_bankSize = operand_5395->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, operand_5395->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (112)) ;
          GGS_uint  var_cas_usedSize ;
          var_cas_usedSize = operand_5395->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_5395->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (113)) ;
          var_cas_verboseMessage.writeString ("  RAM bank '") ;
          var_cas_verboseMessage._dotAssign_operation (operand_5395->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
          var_cas_verboseMessage.writeString ("': ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_bankSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
          var_cas_verboseMessage.writeString (" bytes, used ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (116))) ;
          var_cas_verboseMessage.writeString (" bytes (") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (117))._divide_operation (_inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (117)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
          var_cas_verboseMessage.writeString ("%).\n") ;
        }
      }
      _inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (122)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_midrange_build_assembly_code (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (124)) ;
      GGS_string var_cas_asmDestinationFile ;
      var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (132)))._operator_concat (GGS_string (true, ".asm")) ;
      GGS_bool automatic_var_2 ;
      const GGS_string _temp_6392 = var_cas_assemblyCode ;
      if (_temp_6392._isBuilt ()) {
        _temp_6392 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_asmDestinationFile, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (133)) ;
      }
    }
  }else{
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (136)))._operator_concat (GGS_string (true, ".hex")) ;
    if ((var_cas_hexDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (137))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (138)) ;
    }
    GGS_string var_cas_asmDestinationFile ;
    var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (140)))._operator_concat (GGS_string (true, ".asm")) ;
    if ((var_cas_asmDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (141))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

