//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'midrange_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 23th, 2008, at 15h35'16"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "midrange_analyze"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_analyze (C_Compiler & _inLexique,
                                const GGS_midrange_model  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_midrange_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (20)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (20)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (28)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (28)) ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)).enumValue ()) {
  case GGS_processorType::enum_midrange:
    {
    }
    break ;
  case GGS_processorType::enum_pic18_60:
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a pic18 device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (32)) ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a baseline device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (33)) ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasInterrupt ;
  var_cas_hasInterrupt = GGS_bool (true, false) ;
  {
    GGS_midrange_interruptDefinitionList::cEnumerator enumerator_2222 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)), true) ;
    const GGS_midrange_interruptDefinitionList::cElement * operand_2222 = NULL ;
    while (((operand_2222 = enumerator_2222.nextObject ()))) {
      macroValidPointer (operand_2222) ;
      if ((var_cas_hasInterrupt).isBuiltAndTrue ()) {
        operand_2222->mInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "only one interrupt routine can be defined") COMMA_SOURCE_FILE_AT_LINE (39)) ;
      }
      var_cas_hasInterrupt = GGS_bool (true, true) ;
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (_inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (45)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (44)) ;
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ;
  GGS_registerTable  var_cas_registerTable ;
  ::routine_analyze_ram_sections (_inLexique,  var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (55)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (54)) ;
  GGS_midrange_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_midrange_assembly_instruction_list (_inLexique,  var_cas_piccoloDeviceModel.reader_mBankCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)),  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (63)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (72))))).isBuiltAndTrue ()) {
    ::routine_perform_midrange_optimizations (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (80)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)))._operator_concat (GGS_string (true, ".list")) ;
    const GGS_string _temp_4085 = var_cas_listFileContents ;
    if (_temp_4085._isBuilt ()) {
      _temp_4085 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile COMMA_SOURCE_FILE_AT_LINE (82)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    ::routine_build_midrange_ipic_binary_code (_inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)),  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (87)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (93)) ;
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_4559 = var_cas_contents ;
    if (_temp_4559._isBuilt ()) {
      _temp_4559 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (97)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_midrange_build_assembly_code (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (99)) ;
      GGS_string var_cas_asmDestinationFile ;
      var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)))._operator_concat (GGS_string (true, ".asm")) ;
      const GGS_string _temp_5122 = var_cas_assemblyCode ;
      if (_temp_5122._isBuilt ()) {
        _temp_5122 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
  }else{
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (111)))._operator_concat (GGS_string (true, ".hex")) ;
    if ((var_cas_hexDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (113)) ;
    }
    GGS_string var_cas_asmDestinationFile ;
    var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (115)))._operator_concat (GGS_string (true, ".asm")) ;
    if ((var_cas_asmDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (116))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_midrange_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

