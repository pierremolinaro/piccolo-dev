//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'midrange_semantics.cpp'                        *
//                        Generated by version 2.5.0                         *
//                      october 6th, 2013, at 19h5'29"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "midrange_semantics.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "piccolo_options.h"
#include "piccoloDevice_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                        Routine 'midrange_analyze'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_midrange_5F_analyze (const GALGAS_midrange_5F_model constinArgument_inPiccoloModel,
                                  const GALGAS_string constinArgument_inSourceFileName,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_sourceFileBaseName = constinArgument_inSourceFileName.reader_lastPathComponent (SOURCE_FILE_AT_LINE (20)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (20)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_sourceFileBaseName.objectCompare (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (21)).reader_string (SOURCE_FILE_AT_LINE (21)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (22)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the program name ('").operator_concat (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (22)).reader_string (SOURCE_FILE_AT_LINE (22)) COMMA_SOURCE_FILE_AT_LINE (22)).operator_concat (GALGAS_string ("') should be identical to the file base name '") COMMA_SOURCE_FILE_AT_LINE (23)).operator_concat (var_sourceFileBaseName COMMA_SOURCE_FILE_AT_LINE (23)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (23)) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  GALGAS_string var_listFileContents = GALGAS_string::makeEmptyString () ;
  GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
  {
  routine_parseDeviceDefinition (constinArgument_inPiccoloModel.reader_mDeviceName (SOURCE_FILE_AT_LINE (28)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (28)) ;
  }
  if (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (29)).isValid ()) {
    switch (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (29)).enumValue ()) {
    case GALGAS_processorType::kNotBuilt:
      break ;
    case GALGAS_processorType::kEnum_midrange: {
      } break ;
    case GALGAS_processorType::kEnum_pic_31__38__5F__36__30_: case GALGAS_processorType::kEnum_pic_31__38__5F__38__30_: {
      GALGAS_location location_2 (constinArgument_inPiccoloModel.reader_mDeviceName (SOURCE_FILE_AT_LINE (31)).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("a pic18 device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (31)) ;
      } break ;
    case GALGAS_processorType::kEnum_baseline: {
      GALGAS_location location_3 (constinArgument_inPiccoloModel.reader_mDeviceName (SOURCE_FILE_AT_LINE (32)).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("a baseline device is not accepted here : only a mid-range device") COMMA_SOURCE_FILE_AT_LINE (32)) ;
      } break ;
    }
  }
  GALGAS_bool var_hasInterrupt = GALGAS_bool (false) ;
  cEnumerator_midrange_5F_interruptDefinitionList enumerator_1996 (constinArgument_inPiccoloModel.reader_mInterruptDefinitionList (SOURCE_FILE_AT_LINE (36)), kEnumeration_up) ;
  while (enumerator_1996.hasCurrentObject ()) {
    const enumGalgasBool test_4 = var_hasInterrupt.boolEnum () ;
    if (kBoolTrue == test_4) {
      inCompiler->emitSemanticError (enumerator_1996.current_mInterruptLocation (HERE), GALGAS_string ("only one interrupt routine can be defined") COMMA_SOURCE_FILE_AT_LINE (38)) ;
    }
    var_hasInterrupt = GALGAS_bool (true) ;
    enumerator_1996.gotoNextObject () ;
  }
  GALGAS_actualConfigurationMap var_actualConfigurationMap ;
  {
  routine_buildConfig (var_piccoloDeviceModel.reader_mConfigRegisterMap (SOURCE_FILE_AT_LINE (45)), constinArgument_inPiccoloModel.reader_mConfigDefinitionList (SOURCE_FILE_AT_LINE (46)), var_listFileContents, var_actualConfigurationMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (44)) ;
  }
  GALGAS_ramBankTable var_ramBank = var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (51)) ;
  GALGAS_registerTable var_registerTable = var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (52)) ;
  GALGAS_declaredByteMap var_declaredByteMap ;
  {
  routine_analyze_5F_ram_5F_sections (GALGAS_string ("DECLARED VARIABLES"), constinArgument_inPiccoloModel.reader_mRamDefinitionList (SOURCE_FILE_AT_LINE (55)), var_ramBank, var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (57)), var_listFileContents, var_registerTable, var_declaredByteMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (53)) ;
  }
  GALGAS_stringset var_usedRegisters = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (63)) ;
  GALGAS_midrange_5F_intermediate_5F_instructionList var_generatedInstructionList ;
  {
  routine_build_5F_midrange_5F_assembly_5F_instruction_5F_list (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (65)).reader_uint (SOURCE_FILE_AT_LINE (65)).add_operation (GALGAS_uint ((PMUInt32) 2047U), inCompiler COMMA_SOURCE_FILE_AT_LINE (65)).divide_operation (GALGAS_uint ((PMUInt32) 2048U), inCompiler COMMA_SOURCE_FILE_AT_LINE (65)), var_piccoloDeviceModel.reader_mBankCount (SOURCE_FILE_AT_LINE (66)).reader_uint (SOURCE_FILE_AT_LINE (66)), var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (67)).reader_uint (SOURCE_FILE_AT_LINE (67)).reader_sint (inCompiler COMMA_SOURCE_FILE_AT_LINE (67)), var_piccoloDeviceModel.mAttribute_mSharedBankName, var_registerTable, constinArgument_inPiccoloModel, var_hasInterrupt, var_generatedInstructionList, var_listFileContents, var_usedRegisters, inCompiler COMMA_SOURCE_FILE_AT_LINE (64)) ;
  }
  GALGAS_stringset var_unusedDeclarationUnicity = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (77)) ;
  cEnumerator_lstringlist enumerator_3541 (constinArgument_inPiccoloModel.mAttribute_mUnusedRegisterList, kEnumeration_up) ;
  while (enumerator_3541.hasCurrentObject ()) {
    const enumGalgasBool test_5 = var_registerTable.reader_hasKey (enumerator_3541.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (79)).operator_not (SOURCE_FILE_AT_LINE (79)).boolEnum () ;
    if (kBoolTrue == test_5) {
      GALGAS_location location_6 (enumerator_3541.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_6, GALGAS_string ("the '").operator_concat (enumerator_3541.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80)).operator_concat (GALGAS_string ("' byte is not declared") COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80)) ;
    }else if (kBoolFalse == test_5) {
      const enumGalgasBool test_7 = var_unusedDeclarationUnicity.reader_hasKey (enumerator_3541.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (81)).boolEnum () ;
      if (kBoolTrue == test_7) {
        GALGAS_location location_8 (enumerator_3541.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_8, GALGAS_string ("the '").operator_concat (enumerator_3541.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)).operator_concat (GALGAS_string ("' byte is already declared as unused") COMMA_SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)) ;
      }else if (kBoolFalse == test_7) {
        const enumGalgasBool test_9 = var_usedRegisters.reader_hasKey (enumerator_3541.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (83)).boolEnum () ;
        if (kBoolTrue == test_9) {
          GALGAS_location location_10 (enumerator_3541.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticWarning (location_10, GALGAS_string ("the '").operator_concat (enumerator_3541.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (84)).operator_concat (GALGAS_string ("' byte is declared as unused, but is used") COMMA_SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (84)) ;
        }
      }
    }
    var_unusedDeclarationUnicity.addAssign_operation (enumerator_3541.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (86)) ;
    enumerator_3541.gotoNextObject () ;
  }
  cEnumerator_declaredByteMap enumerator_4061 (var_declaredByteMap, kEnumeration_up) ;
  while (enumerator_4061.hasCurrentObject ()) {
    const enumGalgasBool test_11 = var_usedRegisters.reader_hasKey (enumerator_4061.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (89)).operator_not (SOURCE_FILE_AT_LINE (89)).operator_and (var_unusedDeclarationUnicity.reader_hasKey (enumerator_4061.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (89)).operator_not (SOURCE_FILE_AT_LINE (89)) COMMA_SOURCE_FILE_AT_LINE (89)).boolEnum () ;
    if (kBoolTrue == test_11) {
      GALGAS_location location_12 (enumerator_4061.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_12, GALGAS_string ("the '").operator_concat (enumerator_4061.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (90)) COMMA_SOURCE_FILE_AT_LINE (90)).operator_concat (GALGAS_string ("' byte is unused") COMMA_SOURCE_FILE_AT_LINE (90)) COMMA_SOURCE_FILE_AT_LINE (90)) ;
    }
    enumerator_4061.gotoNextObject () ;
  }
  const enumGalgasBool test_13 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (94)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).operator_and (GALGAS_bool (gOption_piccolo_5F_options_performOptimizations.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (94)).boolEnum () ;
  if (kBoolTrue == test_13) {
    {
    routine_perform_5F_midrange_5F_optimizations (var_generatedInstructionList, var_listFileContents, inCompiler COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
  }
  const enumGalgasBool test_14 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (98)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_14) {
    {
    routine_midrange_5F_compute_5F_JSR_5F_JUMP (var_generatedInstructionList, var_listFileContents, inCompiler COMMA_SOURCE_FILE_AT_LINE (99)) ;
    }
  }
  const enumGalgasBool test_15 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (103)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_15) {
    GALGAS_uint var_usedROMsize ;
    {
    routine_build_5F_midrange_5F_ipic_5F_binary_5F_code (var_registerTable, var_piccoloDeviceModel.reader_mBankCount (SOURCE_FILE_AT_LINE (108)).reader_uint (SOURCE_FILE_AT_LINE (108)), var_generatedInstructionList, var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (110)).reader_uint (SOURCE_FILE_AT_LINE (110)), var_actualConfigurationMap, var_listFileContents, var_usedROMsize, inCompiler COMMA_SOURCE_FILE_AT_LINE (106)) ;
    }
    GALGAS_string var_contents ;
    {
    routine_getGeneratedContents (var_contents, inCompiler COMMA_SOURCE_FILE_AT_LINE (116)) ;
    }
    GALGAS_string var_destinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (117)).operator_concat (GALGAS_string (".hex") COMMA_SOURCE_FILE_AT_LINE (117)) ;
    GALGAS_bool joker_5346_0 ; // Joker input parameter
    var_contents.method_writeToFileWhenDifferentContents (var_destinationFile, joker_5346_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (118)) ;
    const enumGalgasBool test_16 = GALGAS_bool (gOption_piccolo_5F_options_output_5F_C_5F_Array.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_16) {
      GALGAS_string var_baseName = constinArgument_inSourceFileName.reader_lastPathComponent (SOURCE_FILE_AT_LINE (120)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (120)) ;
      {
      routine_get_5F_C_5F_ArrayImplementation (var_baseName, var_contents, inCompiler COMMA_SOURCE_FILE_AT_LINE (121)) ;
      }
      var_destinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (122)).operator_concat (GALGAS_string (".c") COMMA_SOURCE_FILE_AT_LINE (122)) ;
      GALGAS_bool joker_5716_0 ; // Joker input parameter
      var_contents.method_writeToFileWhenDifferentContents (var_destinationFile, joker_5716_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (123)) ;
      {
      routine_get_5F_C_5F_ArrayHeader (var_baseName, var_contents, inCompiler COMMA_SOURCE_FILE_AT_LINE (124)) ;
      }
      var_destinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (125)).operator_concat (GALGAS_string (".h") COMMA_SOURCE_FILE_AT_LINE (125)) ;
      GALGAS_bool joker_5917_0 ; // Joker input parameter
      var_contents.method_writeToFileWhenDifferentContents (var_destinationFile, joker_5917_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (126)) ;
    }
    const enumGalgasBool test_17 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_17) {
      GALGAS_string var_verboseMessage = GALGAS_string ("  ROM size: ").operator_concat (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (130)).reader_uint (SOURCE_FILE_AT_LINE (130)).reader_string (SOURCE_FILE_AT_LINE (130)) COMMA_SOURCE_FILE_AT_LINE (130)).operator_concat (GALGAS_string (" words;") COMMA_SOURCE_FILE_AT_LINE (130)) ;
      var_verboseMessage.dotAssign_operation (GALGAS_string (" used: ").operator_concat (var_usedROMsize.reader_string (SOURCE_FILE_AT_LINE (131)) COMMA_SOURCE_FILE_AT_LINE (131)).operator_concat (GALGAS_string (" words (") COMMA_SOURCE_FILE_AT_LINE (131)) COMMA_SOURCE_FILE_AT_LINE (131)) ;
      var_verboseMessage.dotAssign_operation (var_usedROMsize.multiply_operation (GALGAS_uint ((PMUInt32) 100U), inCompiler COMMA_SOURCE_FILE_AT_LINE (132)).divide_operation (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (132)).reader_uint (SOURCE_FILE_AT_LINE (132)), inCompiler COMMA_SOURCE_FILE_AT_LINE (132)).reader_string (SOURCE_FILE_AT_LINE (132)).operator_concat (GALGAS_string ("%).\n") COMMA_SOURCE_FILE_AT_LINE (132)) COMMA_SOURCE_FILE_AT_LINE (132)) ;
      cEnumerator_ramBankTable enumerator_6322 (var_ramBank, kEnumeration_up) ;
      while (enumerator_6322.hasCurrentObject ()) {
        GALGAS_uint var_bankSize = enumerator_6322.current_mLastAddressPlusOne (HERE).substract_operation (enumerator_6322.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (134)) ;
        GALGAS_uint var_usedSize = enumerator_6322.current_mFirstFreeAddress (HERE).substract_operation (enumerator_6322.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (135)) ;
        var_verboseMessage.dotAssign_operation (GALGAS_string ("  RAM bank '").operator_concat (enumerator_6322.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (136)).operator_concat (GALGAS_string ("': ") COMMA_SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (136)) ;
        var_verboseMessage.dotAssign_operation (var_bankSize.reader_string (SOURCE_FILE_AT_LINE (137)).operator_concat (GALGAS_string (" bytes, used ") COMMA_SOURCE_FILE_AT_LINE (137)) COMMA_SOURCE_FILE_AT_LINE (137)) ;
        var_verboseMessage.dotAssign_operation (var_usedSize.reader_string (SOURCE_FILE_AT_LINE (138)).operator_concat (GALGAS_string (" bytes (") COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)) ;
        var_verboseMessage.dotAssign_operation (var_usedSize.multiply_operation (GALGAS_uint ((PMUInt32) 100U), inCompiler COMMA_SOURCE_FILE_AT_LINE (139)).divide_operation (var_bankSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (139)).reader_string (SOURCE_FILE_AT_LINE (139)).operator_concat (GALGAS_string ("%).\n") COMMA_SOURCE_FILE_AT_LINE (139)) COMMA_SOURCE_FILE_AT_LINE (139)) ;
        enumerator_6322.gotoNextObject () ;
      }
      inCompiler->printMessage (var_verboseMessage COMMA_SOURCE_FILE_AT_LINE (141)) ;
    }
    const enumGalgasBool test_18 = GALGAS_bool (gOption_piccolo_5F_options_generateAssembly.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_18) {
      GALGAS_string var_assemblyCode ;
      {
      routine_midrange_5F_build_5F_assembly_5F_code (var_piccoloDeviceModel.reader_mDeviceName (SOURCE_FILE_AT_LINE (147)).reader_string (SOURCE_FILE_AT_LINE (147)), var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (148)), var_registerTable, var_generatedInstructionList, var_actualConfigurationMap, var_assemblyCode, inCompiler COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
      GALGAS_string var_asmDestinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (154)).operator_concat (GALGAS_string (".asm") COMMA_SOURCE_FILE_AT_LINE (154)) ;
      GALGAS_bool joker_7337_0 ; // Joker input parameter
      var_assemblyCode.method_writeToFileWhenDifferentContents (var_asmDestinationFile, joker_7337_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }
  }else if (kBoolFalse == test_15) {
    GALGAS_string var_hexDestinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (158)).operator_concat (GALGAS_string (".hex") COMMA_SOURCE_FILE_AT_LINE (158)) ;
    const enumGalgasBool test_19 = var_hexDestinationFile.reader_fileExists (SOURCE_FILE_AT_LINE (159)).boolEnum () ;
    if (kBoolTrue == test_19) {
      {
      GALGAS_string::class_method_deleteFile (var_hexDestinationFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (160)) ;
      }
    }
    GALGAS_string var_asmDestinationFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (162)).operator_concat (GALGAS_string (".asm") COMMA_SOURCE_FILE_AT_LINE (162)) ;
    const enumGalgasBool test_20 = var_asmDestinationFile.reader_fileExists (SOURCE_FILE_AT_LINE (163)).boolEnum () ;
    if (kBoolTrue == test_20) {
      {
      GALGAS_string::class_method_deleteFile (var_asmDestinationFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (164)) ;
      }
    }
  }
  const enumGalgasBool test_21 = GALGAS_bool (gOption_piccolo_5F_options_ouputListingFile.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_21) {
    GALGAS_string var_listFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (169)).operator_concat (GALGAS_string (".list") COMMA_SOURCE_FILE_AT_LINE (169)) ;
    GALGAS_bool joker_8075_0 ; // Joker input parameter
    var_listFileContents.method_writeToFileWhenDifferentContents (var_listFile, joker_8075_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (170)) ;
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


