//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'midrange_syntax.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 22th, 2008, at 18h30'38"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "midrange_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_start_symbol_midrange_syntax_76_19_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_midrange) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_programName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_deviceName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
  GGS_midrange_interruptDefinitionList  var_cas_interruptDefinitionList ;
  var_cas_interruptDefinitionList = GGS_midrange_interruptDefinitionList ::constructor_emptyList () ;
  GGS_midrange_routineDefinitionList  var_cas_routineDefinitionList ;
  var_cas_routineDefinitionList = GGS_midrange_routineDefinitionList ::constructor_emptyList () ;
  GGS_ramDefinitionList  var_cas_ramDefinitionList ;
  var_cas_ramDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  GGS_configDefinitionList  var_cas_configDefinitionList ;
  var_cas_configDefinitionList = GGS_configDefinitionList ::constructor_emptyList () ;
  GGS_constantDefinitionList  var_cas_constantDefinitionList ;
  var_cas_constantDefinitionList = GGS_constantDefinitionList ::constructor_emptyList () ;
  GGS_bool var_cas_acceptDefaultConfiguration ;
  var_cas_acceptDefaultConfiguration = GGS_bool (true, false) ;
  GGS_bool var_cas_needsComputedGoto2 ;
  var_cas_needsComputedGoto2 = GGS_bool (true, false) ;
  GGS_bool var_cas_needsComputedGoto4 ;
  var_cas_needsComputedGoto4 = GGS_bool (true, false) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_midrange_syntax_0 (_inLexique)) {
        case 2 : {
          nt_configuration_definition_ (_inLexique, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration) ;
          } break ;
        case 3 : {
          nt_ram_definition_ (_inLexique, var_cas_ramDefinitionList) ;
          } break ;
        case 4 : {
          nt_constant_definition_ (_inLexique, var_cas_constantDefinitionList) ;
          } break ;
        case 5 : {
          nt_midrange_interrupt_definition_ (_inLexique, var_cas_interruptDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        case 6 : {
          nt_midrange_routine_definition_ (_inLexique, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_midrange_model var_cas_piccoloModel ;
    var_cas_piccoloModel = GGS_midrange_model::constructor_new (var_cas_programName, var_cas_deviceName, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration, var_cas_ramDefinitionList, var_cas_interruptDefinitionList, var_cas_constantDefinitionList, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4, GGS_location (_inLexique)) ;
    ::routine_midrange_analyze (_inLexique,  var_cas_piccoloModel,  GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }else{
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (127)))._operator_concat (GGS_string (true, ".hex")) ;
    if ((var_cas_hexDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (129)) ;
    }
    GGS_string var_cas_asmDestinationFile ;
    var_cas_asmDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)))._operator_concat (GGS_string (true, ".asm")) ;
    if ((var_cas_asmDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (132))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (133)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_instruction_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_instruction_list_midrange_syntax_140_32_ (piccolo_lexique & _inLexique,
                                GGS_midrange_instructionList  &var_cas_outInstructionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  var_cas_outInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_midrange_syntax_1 (_inLexique)) {
        case 2 : {
          GGS_midrange_instruction  var_cas_instruction ;
          nt_midrange_simple_instruction_ (_inLexique, var_cas_instruction) ;
          var_cas_outInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_midrange_instruction  var_cas_instruction ;
          nt_midrange_structured_instruction_ (_inLexique, var_cas_instruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
          var_cas_outInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'midrange_interrupt_definition'      *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_interrupt_definition_midrange_syntax_164_36_ (piccolo_lexique & _inLexique,
                                GGS_midrange_interruptDefinitionList  &var_cas_ioInterruptDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  GGS_location  var_cas_interruptionLocation ;
  var_cas_interruptionLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_midrange_instructionList  var_cas_instructionList ;
  nt_midrange_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  var_cas_ioInterruptDefinitionList._addAssign_operation (var_cas_interruptionLocation, var_cas_instructionList, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'midrange_routine_definition'       *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_routine_definition_midrange_syntax_184_34_ (piccolo_lexique & _inLexique,
                                GGS_midrange_routineDefinitionList  &var_cas_ioRoutineDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_bool var_cas_noreturn ;
  switch (select_midrange_syntax_2 (_inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_routineName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_midrange_syntax_3 (_inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      switch (select_midrange_syntax_4 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (212)) ;
          }
          var_cas_preservesBank = GGS_bool (true, true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_requiredBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (true, false) ;
          switch (select_midrange_syntax_5 (_inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              if ((var_cas_noreturn).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (227)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (234)) ;
          }
          var_cas_preservesBank = GGS_bool (true, false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_midrange_instructionList  var_cas_instructionList ;
  nt_midrange_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  var_cas_ioRoutineDefinitionList._addAssign_operation (var_cas_routineName, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn, var_cas_instructionList, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of production rule 'midrange_structured_instruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_instruction_midrange_syntax_252_38_ (piccolo_lexique & _inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  switch (select_midrange_syntax_6 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_bank ;
      _inLexique._assignFromAttribute_uint32value (var_cas_bank) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_banksel ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_bank COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_nobanksel ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_register ;
      nt_register_parsing_ (_inLexique, var_cas_register) ;
      GGS_midrange_instructionList  var_cas_instructionList ;
      nt_midrange_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_savebank ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_register, var_cas_instructionList, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_midrange_instructionList  var_cas_instructionList ;
      nt_midrange_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_FOREVER ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instructionList, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumber) ;
      GGS_bool var_cas_skipIfSet ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)) ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_skipIfSet = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_skipIfSet = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_condition))._operator_concat (GGS_string (true, "' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (346)) ;
        var_cas_skipIfSet._drop () ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_instruction ;
      nt_midrange_simple_instruction_ (_inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_midrange_instruction_IF_BitTest ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_skipIfSet, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_bool var_cas_increment ;
      switch (select_midrange_syntax_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_bool var_cas_w_isTarget ;
      switch (select_midrange_syntax_8 (_inLexique)) {
        case 1 : {
          var_cas_w_isTarget = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_w_isTarget = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
      if (((var_cas_condition)._operator_isNotEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_condition))._operator_concat (GGS_string (true, "' condition; it should be 'nz'")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_instruction ;
      nt_midrange_simple_instruction_ (_inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_midrange_instruction_IF_IncDec ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_increment, var_cas_registerName, var_cas_w_isTarget COMMA_HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_midrange_structured_if_instruction_ (_inLexique, var_cas_outInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 8 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_midrange_instructionList  var_cas_repeatedInstructionList ;
      nt_midrange_instruction_list_ (_inLexique, var_cas_repeatedInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      GGS_location  var_cas_endOfRepeatedInstructionList ;
      var_cas_endOfRepeatedInstructionList = GGS_location (_inLexique) ;
      GGS_midrange_partList  var_cas_whilePartList ;
      var_cas_whilePartList = GGS_midrange_partList ::constructor_emptyList () ;
      { bool syntaxRepeat_9 = true ;
        while (syntaxRepeat_9) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            GGS_midrange_conditionExpression  var_cas_whileCondition ;
            nt_midrange_condition_expression_ (_inLexique, var_cas_whileCondition) ;
            GGS_midrange_instructionList  var_cas_instructionList ;
            nt_midrange_instruction_list_ (_inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
            var_cas_whilePartList._addAssign_operation (var_cas_whileCondition, var_cas_instructionList, GGS_location (_inLexique)) ;
          switch (select_repeat_midrange_syntax_9 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_9 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_do_while ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_repeatedInstructionList, var_cas_endOfRepeatedInstructionList, var_cas_whilePartList COMMA_HERE) ;
      } break ;
    case 9 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_luint  var_cas_occurrenceFactor ;
      _inLexique._assignFromAttribute_uint32value (var_cas_occurrenceFactor) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_MNOP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_occurrenceFactor COMMA_HERE) ;
      } break ;
    case 10 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_midrange_jumpInstructionKind::constructor_ipicExtended (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 11 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JUMP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_midrange_jumpInstructionKind::constructor_ipicExtended (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'midrange_structured_if_instruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_if_instruction_midrange_syntax_456_41_ (piccolo_lexique & _inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_location  var_cas_instructionLocation ;
  var_cas_instructionLocation = GGS_location (_inLexique) ;
  GGS_midrange_conditionExpression  var_cas_structured_if_condition ;
  nt_midrange_condition_expression_ (_inLexique, var_cas_structured_if_condition) ;
  GGS_midrange_instructionList  var_cas_thenInstructionList ;
  nt_midrange_instruction_list_ (_inLexique, var_cas_thenInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  GGS_midrange_instructionList  var_cas_elseInstructionList ;
  switch (select_midrange_syntax_10 (_inLexique)) {
    case 1 : {
      var_cas_elseInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_elsifPartInstruction ;
      nt_midrange_structured_if_instruction_ (_inLexique, var_cas_elsifPartInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      var_cas_elseInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
      var_cas_elseInstructionList._addAssign_operation (var_cas_elsifPartInstruction) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
      nt_midrange_instruction_list_ (_inLexique, var_cas_elseInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_endOfElsePartLocation ;
  var_cas_endOfElsePartLocation = GGS_location (_inLexique) ;
  var_cas_outInstruction = GGS_midrange_instruction_structured_if ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_structured_if_condition, var_cas_thenInstructionList, var_cas_elseInstructionList, var_cas_endOfElsePartLocation COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'midrange_simple_instruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_simple_instruction_midrange_syntax_503_34_ (piccolo_lexique & _inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction) {
  switch (select_midrange_syntax_11 (_inLexique)) {
    case 1 : {
      GGS_midrange_instruction_FD_base_code var_cas_baseCode ;
      switch (select_midrange_syntax_12 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_ADDWF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_ANDWF (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_COMF (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_DECF (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_INCF (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_IORWF (_inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_MOVF (_inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_RLF (_inLexique COMMA_HERE) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_RRF (_inLexique COMMA_HERE) ;
          } break ;
        case 10 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_SUBWF (_inLexique COMMA_HERE) ;
          } break ;
        case 11 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_SWAPF (_inLexique COMMA_HERE) ;
          } break ;
        case 12 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_XORWF (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      GGS_bool var_cas_W_isDestination ;
      nt_optional_w_as_dest_ (_inLexique, var_cas_W_isDestination) ;
      var_cas_outInstruction = GGS_midrange_instruction_FD ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_baseCode, var_cas_registerName, var_cas_W_isDestination COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_midrange_F_instruction_base_code var_cas_FAinstruction ;
      switch (select_midrange_syntax_13 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_midrange_F_instruction_base_code::constructor_CLRF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_midrange_F_instruction_base_code::constructor_MOVWF (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      var_cas_outInstruction = GGS_midrange_instruction_F ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_FAinstruction, var_cas_registerName COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_midrange_bit_oriented_op var_cas_bitOrientedOp ;
      switch (select_midrange_syntax_14 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_midrange_bit_oriented_op::constructor_BCF (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_midrange_bit_oriented_op::constructor_BSF (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_registerExpression  var_cas_registerName ;
      nt_register_parsing_ (_inLexique, var_cas_registerName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumber ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumber) ;
      var_cas_outInstruction = GGS_midrange_instruction_FB ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_bitOrientedOp, var_cas_registerName, var_cas_bitNumber COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JSR ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_midrange_jumpInstructionKind::constructor_native (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JUMP ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_targetLabelName, GGS_midrange_jumpInstructionKind::constructor_native (_inLexique COMMA_HERE) COMMA_HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrw) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_CLRW ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_CLRWDT ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 8 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_NOP ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 9 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_SLEEP ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 10 : {
      GGS_midrange_literal_instruction_opcode var_cas_literalInstruction ;
      switch (select_midrange_syntax_15 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_ADDLW (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_ANDLW (_inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_IORLW (_inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_SUBLW (_inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_XORLW (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation ;
      var_cas_instructionLocation = GGS_location (_inLexique) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_expression_ (_inLexique, var_cas_expression) ;
      var_cas_outInstruction = GGS_midrange_instruction_literalOperation ::constructor_new (_inLexique, var_cas_instructionLocation, var_cas_literalInstruction, var_cas_expression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_648_32_ (piccolo_lexique & _inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21) COMMA_HERE) ;
  GGS_midrange_conditionExpression  var_cas_condition ;
  nt_midrange_condition_factor_ (_inLexique, var_cas_condition) ;
  var_cas_outCondition = GGS_midrange_negateCondition ::constructor_new (_inLexique, var_cas_condition COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_659_32_ (piccolo_lexique & _inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  nt_midrange_condition_expression_ (_inLexique, var_cas_outCondition) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_667_32_ (piccolo_lexique & _inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  switch (select_midrange_syntax_16 (_inLexique)) {
    case 1 : {
      GGS_bool var_cas_isIncrement ;
      switch (select_midrange_syntax_17 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true, true) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true, false) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (_inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_W_isDestination ;
      switch (select_midrange_syntax_18 (_inLexique)) {
        case 1 : {
          var_cas_W_isDestination = GGS_bool (true, false) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_W_isDestination = GGS_bool (true, true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (686)) ;
      GGS_bool var_cas_branchIfZero ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (697)) ;
        var_cas_branchIfZero._drop () ;
      }
      var_cas_outCondition = GGS_midrange_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_registerExpression, var_cas_isIncrement, var_cas_W_isDestination, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (_inLexique, var_cas_registerExpression) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      nt_bit_number_parsing_ (_inLexique, var_cas_bitNumberExpression) ;
      GGS_lstring  var_cas_conditionString ;
      _inLexique._assignFromAttribute_tokenString (var_cas_conditionString) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition ;
      var_cas_condition = var_cas_conditionString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)) ;
      GGS_bool var_cas_BTFSSinstruction ;
      if (((var_cas_condition)._operator_isEqual (GGS_string (true, "Z"))).isBuiltAndTrue ()) {
        var_cas_BTFSSinstruction = GGS_bool (true, true) ;
      }else if (((var_cas_condition)._operator_isEqual (GGS_string (true, "NZ"))).isBuiltAndTrue ()) {
        var_cas_BTFSSinstruction = GGS_bool (true, false) ;
      }else{
        var_cas_conditionString.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "invalid '"))._operator_concat (var_cas_conditionString))._operator_concat (GGS_string (true, "' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (722)) ;
        var_cas_BTFSSinstruction._drop () ;
      }
      var_cas_outCondition = GGS_midrange_bitTest_in_structured_if_condition ::constructor_new (_inLexique, var_cas_registerExpression, var_cas_bitNumberExpression, var_cas_BTFSSinstruction COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'midrange_condition_expression'      *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_expression_midrange_syntax_733_36_ (piccolo_lexique & _inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28) COMMA_HERE) ;
  nt_midrange_condition_term_ (_inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_repeat_midrange_syntax_19 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C) COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_c ;
          nt_midrange_condition_term_ (_inLexique, var_cas_c) ;
          GGS_midrange_conditionExpression  var_cas_rc ;
          var_cas_rc = GGS_midrange_negateCondition ::constructor_new (_inLexique, var_cas_c COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_lc ;
          var_cas_lc = GGS_midrange_negateCondition ::constructor_new (_inLexique, var_cas_outCondition COMMA_HERE) ;
          var_cas_outCondition = GGS_midrange_negateCondition ::constructor_new (_inLexique, GGS_midrange_andCondition ::constructor_new (_inLexique, var_cas_lc, var_cas_rc COMMA_HERE) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'midrange_condition_term'         *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_term_midrange_syntax_752_30_ (piccolo_lexique & _inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  nt_midrange_condition_factor_ (_inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
      switch (select_repeat_midrange_syntax_20 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26) COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_c ;
          nt_midrange_condition_factor_ (_inLexique, var_cas_c) ;
          var_cas_outCondition = GGS_midrange_andCondition ::constructor_new (_inLexique, var_cas_outCondition, var_cas_c COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

