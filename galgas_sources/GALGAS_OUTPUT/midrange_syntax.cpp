//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'midrange_syntax.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 14th, 2009, at 17h40'42"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "midrange_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "midrange_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_start_symbol_midrange_syntax_120_19_ (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_midrange) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  inLexique.assignFromAttribute_tokenString (var_cas_programName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  inLexique.assignFromAttribute_tokenString (var_cas_deviceName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
  GGS_midrange_interruptDefinitionList  var_cas_interruptDefinitionList = GGS_midrange_interruptDefinitionList ::constructor_emptyList () ;
  GGS_midrange_routineDefinitionList  var_cas_routineDefinitionList = GGS_midrange_routineDefinitionList ::constructor_emptyList () ;
  GGS_ramDefinitionList  var_cas_ramDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  GGS_configDefinitionList  var_cas_configDefinitionList = GGS_configDefinitionList ::constructor_emptyList () ;
  GGS_constantDefinitionList  var_cas_constantDefinitionList = GGS_constantDefinitionList ::constructor_emptyList () ;
  GGS_bool var_cas_acceptDefaultConfiguration = GGS_bool (false) ;
  GGS_bool var_cas_needsComputedGoto2 = GGS_bool (false) ;
  GGS_bool var_cas_needsComputedGoto4 = GGS_bool (false) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_midrange_syntax_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mark) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_configuration_definition_ (inLexique, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration) ;
          } break ;
        case 4 : {
          nt_ram_definition_ (inLexique, var_cas_ramDefinitionList) ;
          } break ;
        case 5 : {
          nt_constant_definition_ (inLexique, var_cas_constantDefinitionList) ;
          } break ;
        case 6 : {
          nt_midrange_interrupt_definition_ (inLexique, var_cas_interruptDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        case 7 : {
          nt_midrange_routine_definition_ (inLexique, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
  const GGS_bool cond_4476 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_4476.isBuiltAndTrue ()) {
    GGS_midrange_model var_cas_piccoloModel = GGS_midrange_model::constructor_new (var_cas_programName, var_cas_deviceName, var_cas_configDefinitionList, var_cas_acceptDefaultConfiguration, var_cas_ramDefinitionList, var_cas_interruptDefinitionList, var_cas_constantDefinitionList, var_cas_routineDefinitionList, var_cas_needsComputedGoto2, var_cas_needsComputedGoto4, GGS_location (inLexique)) ;
    ::routine_midrange_analyze (inLexique,  var_cas_piccoloModel,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (172)) ;
  }else if (cond_4476.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    const GGS_bool cond_4689 = var_cas_hexDestinationFile.reader_fileExists () ;
    if (cond_4689.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
    GGS_string var_cas_asmDestinationFile = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
    const GGS_bool cond_4907 = var_cas_asmDestinationFile.reader_fileExists () ;
    if (cond_4907.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (180)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_start_symbol_midrange_syntax_120_19_importBootloaderSpecification (piccolo_lexique & inLexique,
                                GGS_piccoloDeviceModel &var_cas_outPiccoloDeviceModel,
                                GGS_uint  &var_cas_outAccessBankSplitOffset,
                                GGS_ramBankTable  &var_cas_outRamBank,
                                GGS_registerTable  &var_cas_outRegisterTable,
                                GGS_bootloaderReservedRAMmap  &var_cas_outBootloaderReservedRAMmap,
                                GGS_routineDeclarationList  &var_cas_outBootloaderRoutineDeclarationList,
                                GGS_routineDeclarationList  &var_cas_outUserRoutineDeclarationList,
                                GGS_luint  &var_cas_outBootloaderReservedROMsize) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_midrange) COMMA_HERE) ;
  GGS_lstring  var_cas_programName ;
  inLexique.assignFromAttribute_tokenString (var_cas_programName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  var_cas_programName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this file does not define a bootloader specification") COMMA_SOURCE_FILE_AT_LINE (200)) ;
  var_cas_outPiccoloDeviceModel.drop () ;
  var_cas_outAccessBankSplitOffset.drop () ;
  var_cas_outRamBank.drop () ;
  var_cas_outRegisterTable.drop () ;
  var_cas_outBootloaderReservedRAMmap.drop () ;
  var_cas_outBootloaderRoutineDeclarationList.drop () ;
  var_cas_outUserRoutineDeclarationList.drop () ;
  var_cas_outBootloaderReservedROMsize.drop () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_midrange_syntax_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mark) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_configuration_definition_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_ram_definition_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_constant_definition_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_midrange_interrupt_definition_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_midrange_routine_definition_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_instruction_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_instruction_list_midrange_syntax_222_32_ (piccolo_lexique & inLexique,
                                GGS_midrange_instructionList  &var_cas_outInstructionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  var_cas_outInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_midrange_syntax_1 (inLexique)) {
        case 2 : {
          GGS_midrange_instruction  var_cas_instruction ;
          nt_midrange_simple_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_midrange_instruction  var_cas_instruction ;
          nt_midrange_structured_instruction_ (inLexique, var_cas_instruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
          var_cas_outInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_instruction_list_midrange_syntax_222_32_parse (piccolo_lexique & inLexique) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_midrange_syntax_1 (inLexique)) {
        case 2 : {
          nt_midrange_simple_instruction_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_midrange_structured_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'midrange_interrupt_definition'      *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_interrupt_definition_midrange_syntax_246_36_ (piccolo_lexique & inLexique,
                                GGS_midrange_interruptDefinitionList  &var_cas_ioInterruptDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  GGS_location  var_cas_interruptionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_contextsave) COMMA_HERE) ;
  GGS_lstring  var_cas_firstSaveRegister ;
  inLexique.assignFromAttribute_tokenString (var_cas_firstSaveRegister) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
  GGS_lstring  var_cas_secondSaveRegister ;
  inLexique.assignFromAttribute_tokenString (var_cas_secondSaveRegister) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  GGS_midrange_instructionList  var_cas_instructionList ;
  nt_midrange_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_ioInterruptDefinitionList.addAssign_operation (var_cas_interruptionLocation, var_cas_instructionList, var_cas_firstSaveRegister, var_cas_secondSaveRegister, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_interrupt_definition_midrange_syntax_246_36_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_contextsave) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  nt_midrange_instruction_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'midrange_routine_definition'       *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_routine_definition_midrange_syntax_276_34_ (piccolo_lexique & inLexique,
                                GGS_midrange_routineDefinitionList  &var_cas_ioRoutineDefinitionList,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_bool var_cas_noreturn ;
  switch (select_midrange_syntax_2 (inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_page ;
  switch (select_midrange_syntax_3 (inLexique)) {
    case 1 : {
      var_cas_page = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_page) COMMA_HERE) ;
      inLexique.assignFromAttribute_uint32value (var_cas_page) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_midrange_syntax_4 (inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      switch (select_midrange_syntax_5 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          const GGS_bool cond_8318 = var_cas_noreturn ;
          if (cond_8318.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (313)) ;
          }
          var_cas_preservesBank = GGS_bool (true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_requiredBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (false) ;
          switch (select_midrange_syntax_6 (inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              const GGS_bool cond_8816 = var_cas_noreturn ;
              if (cond_8816.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (328)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          const GGS_bool cond_9018 = var_cas_noreturn ;
          if (cond_9018.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (335)) ;
          }
          var_cas_preservesBank = GGS_bool (false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  GGS_midrange_instructionList  var_cas_instructionList ;
  nt_midrange_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_ioRoutineDefinitionList.addAssign_operation (var_cas_routineName, var_cas_page, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn, var_cas_instructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_routine_definition_midrange_syntax_276_34_parse (piccolo_lexique & inLexique) {
  switch (select_midrange_syntax_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  switch (select_midrange_syntax_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_page) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_midrange_syntax_4 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      switch (select_midrange_syntax_5 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          switch (select_midrange_syntax_6 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  nt_midrange_instruction_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of production rule 'midrange_structured_instruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_instruction_midrange_syntax_353_38_ (piccolo_lexique & inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  switch (select_midrange_syntax_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_luint  var_cas_bank ;
      inLexique.assignFromAttribute_uint32value (var_cas_bank) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_banksel ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_bank COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_register ;
      nt_register_parsing_ (inLexique, var_cas_register) ;
      GGS_midrange_instructionList  var_cas_instructionList ;
      nt_midrange_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_savebank ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_register, var_cas_instructionList, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_nobanksel ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_midrange_instructionList  var_cas_instructionList ;
      nt_midrange_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_FOREVER ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instructionList, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerExpression ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      GGS_bool var_cas_skipIfSet ;
      switch (select_midrange_syntax_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
          nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_ (inLexique, var_cas_bitNumberExpression) ;
          var_cas_skipIfSet = GGS_bool (true) ;
          } break ;
        case 2 : {
          nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_ (inLexique, var_cas_bitNumberExpression) ;
          switch (select_midrange_syntax_9 (inLexique)) {
            case 1 : {
              var_cas_skipIfSet = GGS_bool (false) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_conditionString ;
              inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (454)).reader_uppercaseString () ;
              const GGS_bool cond_12959 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
              if (cond_12959.isBuiltAndTrue ()) {
                var_cas_skipIfSet = GGS_bool (true) ;
                GGS_string var_cas_s = (GGS_string ("if ! ")).operator_concat (var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (457)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457))) ;
                const GGS_bool cond_12736 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (458)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (458))).operator_strictSup (GGS_uint (0U)) ;
                if (cond_12736.isBuiltAndTrue ()) {
                  var_cas_s.appendCString (" [") ;
                  var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (459)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (459)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (459))) ;
                  var_cas_s.appendCString ("]") ;
                }
                var_cas_s.appendCString (".") ;
                const GGS_bitNumberExpression  temp_12791 = var_cas_bitNumberExpression ;
                if (temp_12791.isBuilt ()) {
                  temp_12791 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (461)) ;
                }
                var_cas_s.appendCString (" :") ;
                var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (463)) ;
              }else if (cond_12959.isBuiltAndFalse ()) {
                const GGS_bool cond_13461 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
                if (cond_13461.isBuiltAndTrue ()) {
                  var_cas_skipIfSet = GGS_bool (false) ;
                  GGS_string var_cas_s = (GGS_string ("if ")).operator_concat (var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (466)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466))) ;
                  const GGS_bool cond_13239 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (467)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (467))).operator_strictSup (GGS_uint (0U)) ;
                  if (cond_13239.isBuiltAndTrue ()) {
                    var_cas_s.appendCString (" [") ;
                    var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (468)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (468)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (468))) ;
                    var_cas_s.appendCString ("]") ;
                  }
                  var_cas_s.appendCString (".") ;
                  const GGS_bitNumberExpression  temp_13294 = var_cas_bitNumberExpression ;
                  if (temp_13294.isBuilt ()) {
                    temp_13294 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (470)) ;
                  }
                  var_cas_s.appendCString (" :") ;
                  var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (472)) ;
                }else if (cond_13461.isBuiltAndFalse ()) {
                  var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_condition)).operator_concat (GGS_string ("' condition; it should be 'z' or 'nz'")) COMMA_SOURCE_FILE_AT_LINE (475)) ;
                  var_cas_skipIfSet.drop () ;
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_instruction ;
      nt_midrange_simple_instruction_ (inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_midrange_instruction_IF_BitTest ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_skipIfSet, var_cas_registerExpression, var_cas_bitNumberExpression COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_bool var_cas_increment ;
      switch (select_midrange_syntax_10 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_increment = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_w_isTarget ;
      switch (select_midrange_syntax_11 (inLexique)) {
        case 1 : {
          var_cas_w_isTarget = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_w_isTarget = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (506)).reader_uppercaseString () ;
      const GGS_bool cond_14557 = (var_cas_condition).operator_isNotEqual (GGS_string ("NZ")) ;
      if (cond_14557.isBuiltAndTrue ()) {
        var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_condition)).operator_concat (GGS_string ("' condition; it should be 'nz'")) COMMA_SOURCE_FILE_AT_LINE (509)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_instruction ;
      nt_midrange_simple_instruction_ (inLexique, var_cas_instruction) ;
      var_cas_outInstruction = GGS_midrange_instruction_IF_IncDec ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_instruction, var_cas_increment, var_cas_registerExpression, var_cas_w_isTarget COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_midrange_structured_if_instruction_ (inLexique, var_cas_outInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_midrange_instructionList  var_cas_repeatedInstructionList ;
      nt_midrange_instruction_list_ (inLexique, var_cas_repeatedInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      GGS_location  var_cas_endOfRepeatedInstructionList = GGS_location (inLexique) ;
      GGS_midrange_partList  var_cas_whilePartList = GGS_midrange_partList ::constructor_emptyList () ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            GGS_midrange_conditionExpression  var_cas_whileCondition ;
            nt_midrange_condition_expression_ (inLexique, var_cas_whileCondition) ;
            GGS_midrange_instructionList  var_cas_instructionList ;
            nt_midrange_instruction_list_ (inLexique, var_cas_instructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
            var_cas_whilePartList.addAssign_operation (var_cas_whileCondition, var_cas_instructionList, GGS_location (inLexique)) ;
          switch (select_midrange_syntax_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_do_while ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_repeatedInstructionList, var_cas_endOfRepeatedInstructionList, var_cas_whilePartList COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_luint  var_cas_occurrenceFactor ;
      inLexique.assignFromAttribute_uint32value (var_cas_occurrenceFactor) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_MNOP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_occurrenceFactor COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JSR ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName COMMA_HERE) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_JUMP ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_instruction_midrange_syntax_353_38_parse (piccolo_lexique & inLexique) {
  switch (select_midrange_syntax_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksel) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_banksave) COMMA_HERE) ;
      nt_register_parsing_parse (inLexique) ;
      nt_midrange_instruction_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nobank) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_forever) COMMA_HERE) ;
      nt_midrange_instruction_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      switch (select_midrange_syntax_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
          nt_register_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_parse (inLexique) ;
          } break ;
        case 2 : {
          nt_register_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
          nt_bit_number_parsing_parse (inLexique) ;
          switch (select_midrange_syntax_9 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      nt_midrange_simple_instruction_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      switch (select_midrange_syntax_10 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      switch (select_midrange_syntax_11 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      nt_midrange_simple_instruction_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_if) COMMA_HERE) ;
      nt_midrange_structured_if_instruction_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_do) COMMA_HERE) ;
      nt_midrange_instruction_list_parse (inLexique) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_while) COMMA_HERE) ;
            nt_midrange_condition_expression_parse (inLexique) ;
            nt_midrange_instruction_list_parse (inLexique) ;
          switch (select_midrange_syntax_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_end) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_mnop) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jsr) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_jump) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'midrange_structured_if_instruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_if_instruction_midrange_syntax_585_41_ (piccolo_lexique & inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction,
                                GGS_bool &var_cas_ioNeedsComputedGoto2,
                                GGS_bool &var_cas_ioNeedsComputedGoto4) {
  GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_midrange_conditionExpression  var_cas_structured_if_condition ;
  nt_midrange_condition_expression_ (inLexique, var_cas_structured_if_condition) ;
  GGS_midrange_instructionList  var_cas_thenInstructionList ;
  nt_midrange_instruction_list_ (inLexique, var_cas_thenInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
  GGS_midrange_instructionList  var_cas_elseInstructionList ;
  switch (select_midrange_syntax_13 (inLexique)) {
    case 1 : {
      var_cas_elseInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
      GGS_midrange_instruction  var_cas_elsifPartInstruction ;
      nt_midrange_structured_if_instruction_ (inLexique, var_cas_elsifPartInstruction, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      var_cas_elseInstructionList = GGS_midrange_instructionList ::constructor_emptyList () ;
      var_cas_elseInstructionList.addAssign_operation (var_cas_elsifPartInstruction) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
      nt_midrange_instruction_list_ (inLexique, var_cas_elseInstructionList, var_cas_ioNeedsComputedGoto2, var_cas_ioNeedsComputedGoto4) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_endOfElsePartLocation = GGS_location (inLexique) ;
  var_cas_outInstruction = GGS_midrange_instruction_structured_if ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_structured_if_condition, var_cas_thenInstructionList, var_cas_elseInstructionList, var_cas_endOfElsePartLocation COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_structured_if_instruction_midrange_syntax_585_41_parse (piccolo_lexique & inLexique) {
  nt_midrange_condition_expression_parse (inLexique) ;
  nt_midrange_instruction_list_parse (inLexique) ;
  switch (select_midrange_syntax_13 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_elsif) COMMA_HERE) ;
      nt_midrange_structured_if_instruction_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_else) COMMA_HERE) ;
      nt_midrange_instruction_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'midrange_simple_instruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_simple_instruction_midrange_syntax_632_34_ (piccolo_lexique & inLexique,
                                GGS_midrange_instruction  &var_cas_outInstruction) {
  switch (select_midrange_syntax_14 (inLexique)) {
    case 1 : {
      GGS_midrange_instruction_FD_base_code var_cas_baseCode ;
      switch (select_midrange_syntax_15 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_ADDWF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_ANDWF (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_COMF (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_DECF (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_INCF (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_IORWF (inLexique COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_MOVF (inLexique COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_RLF (inLexique COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_RRF (inLexique COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_SUBWF (inLexique COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_SWAPF (inLexique COMMA_HERE) ;
          } break ;
        case 12 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          var_cas_baseCode = GGS_midrange_instruction_FD_base_code::constructor_XORWF (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_W_isDestination ;
      nt_optional_w_as_dest_ (inLexique, var_cas_W_isDestination) ;
      var_cas_outInstruction = GGS_midrange_instruction_FD ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_baseCode, var_cas_registerExpression, var_cas_W_isDestination COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_midrange_F_instruction_base_code var_cas_FAinstruction ;
      switch (select_midrange_syntax_16 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_midrange_F_instruction_base_code::constructor_CLRF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          var_cas_FAinstruction = GGS_midrange_F_instruction_base_code::constructor_MOVWF (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      var_cas_outInstruction = GGS_midrange_instruction_F ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_FAinstruction, var_cas_registerExpression COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_midrange_bit_oriented_op var_cas_bitOrientedOp ;
      switch (select_midrange_syntax_17 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_midrange_bit_oriented_op::constructor_BCF (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          var_cas_bitOrientedOp = GGS_midrange_bit_oriented_op::constructor_BSF (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      nt_bit_number_parsing_ (inLexique, var_cas_bitNumberExpression) ;
      var_cas_outInstruction = GGS_midrange_instruction_FB ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_bitOrientedOp, var_cas_registerExpression, var_cas_bitNumberExpression COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_GOTO ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_lstring  var_cas_targetLabelName ;
      inLexique.assignFromAttribute_tokenString (var_cas_targetLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_CALL ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_targetLabelName COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrw) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_CLRW ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_CLRWDT ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_NOP ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      var_cas_outInstruction = GGS_midrange_instruction_SLEEP ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 10 : {
      GGS_midrange_literal_instruction_opcode var_cas_literalInstruction ;
      switch (select_midrange_syntax_18 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_ADDLW (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_ANDLW (inLexique COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_IORLW (inLexique COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_SUBLW (inLexique COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          var_cas_literalInstruction = GGS_midrange_literal_instruction_opcode::constructor_XORLW (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
      GGS_immediatExpression  var_cas_expression ;
      nt_immediate_expression_ (inLexique, var_cas_expression) ;
      var_cas_outInstruction = GGS_midrange_instruction_literalOperation ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_literalInstruction, var_cas_expression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_simple_instruction_midrange_syntax_632_34_parse (piccolo_lexique & inLexique) {
  switch (select_midrange_syntax_14 (inLexique)) {
    case 1 : {
      switch (select_midrange_syntax_15 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andwf) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_comf) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorwf) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movf) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rlf) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rrf) COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_subwf) COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_swapf) COMMA_HERE) ;
          } break ;
        case 12 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorwf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      nt_optional_w_as_dest_parse (inLexique) ;
      } break ;
    case 2 : {
      switch (select_midrange_syntax_16 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movwf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      } break ;
    case 3 : {
      switch (select_midrange_syntax_17 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bcf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bsf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      nt_bit_number_parsing_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_goto) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_call) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrw) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_clrwdt) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_nop) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sleep) COMMA_HERE) ;
      } break ;
    case 10 : {
      switch (select_midrange_syntax_18 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_addlw) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_andlw) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_iorlw) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_movlw) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_sublw) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_xorlw) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_immediate_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_775_32_ (piccolo_lexique & inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
  GGS_midrange_conditionExpression  var_cas_condition ;
  nt_midrange_condition_factor_ (inLexique, var_cas_condition) ;
  var_cas_outCondition = GGS_midrange_negateCondition ::constructor_new (inLexique, var_cas_condition COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_775_32_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__21_) COMMA_HERE) ;
  nt_midrange_condition_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_786_32_ (piccolo_lexique & inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  nt_midrange_condition_expression_ (inLexique, var_cas_outCondition) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_786_32_parse (piccolo_lexique & inLexique) {
  nt_midrange_condition_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'midrange_condition_factor'        *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_794_32_ (piccolo_lexique & inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  switch (select_midrange_syntax_19 (inLexique)) {
    case 1 : {
      GGS_bool var_cas_isIncrement ;
      switch (select_midrange_syntax_20 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          var_cas_isIncrement = GGS_bool (false) ;
          } break ;
        default :
          break ;
      }
      GGS_registerExpression  var_cas_registerExpression ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      GGS_bool var_cas_W_isDestination ;
      switch (select_midrange_syntax_21 (inLexique)) {
        case 1 : {
          var_cas_W_isDestination = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          var_cas_W_isDestination = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_conditionString ;
      inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (813)).reader_uppercaseString () ;
      GGS_bool var_cas_branchIfZero ;
      const GGS_bool cond_23642 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
      if (cond_23642.isBuiltAndTrue ()) {
        var_cas_branchIfZero = GGS_bool (true) ;
      }else if (cond_23642.isBuiltAndFalse ()) {
        const GGS_bool cond_23704 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
        if (cond_23704.isBuiltAndTrue ()) {
          var_cas_branchIfZero = GGS_bool (false) ;
        }else if (cond_23704.isBuiltAndFalse ()) {
          var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (824)) ;
          var_cas_branchIfZero.drop () ;
        }
      }
      var_cas_outCondition = GGS_midrange_incDecRegisterInCondition ::constructor_new (inLexique, var_cas_registerExpression, var_cas_isIncrement, var_cas_W_isDestination, var_cas_branchIfZero COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_registerExpression  var_cas_registerExpression ;
      GGS_bitNumberExpression  var_cas_bitNumberExpression ;
      GGS_bool var_cas_BTFSSinstruction ;
      nt_register_parsing_ (inLexique, var_cas_registerExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      nt_bit_number_parsing_ (inLexique, var_cas_bitNumberExpression) ;
      switch (select_midrange_syntax_22 (inLexique)) {
        case 1 : {
          var_cas_BTFSSinstruction = GGS_bool (false) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_conditionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_conditionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          GGS_string var_cas_condition = var_cas_conditionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (842)).reader_uppercaseString () ;
          const GGS_bool cond_24895 = (var_cas_condition).operator_isEqual (GGS_string ("Z")) ;
          if (cond_24895.isBuiltAndTrue ()) {
            var_cas_BTFSSinstruction = GGS_bool (true) ;
            GGS_string var_cas_s = (GGS_string ("! ")).operator_concat (var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (845)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (845))) ;
            const GGS_bool cond_24700 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (846)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (846))).operator_strictSup (GGS_uint (0U)) ;
            if (cond_24700.isBuiltAndTrue ()) {
              var_cas_s.appendCString (" [") ;
              var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (847))) ;
              var_cas_s.appendCString ("]") ;
            }
            var_cas_s.appendCString (".") ;
            const GGS_bitNumberExpression  temp_24753 = var_cas_bitNumberExpression ;
            if (temp_24753.isBuilt ()) {
              temp_24753 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (849)) ;
            }
            var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (850)) ;
          }else if (cond_24895.isBuiltAndFalse ()) {
            const GGS_bool cond_25358 = (var_cas_condition).operator_isEqual (GGS_string ("NZ")) ;
            if (cond_25358.isBuiltAndTrue ()) {
              var_cas_BTFSSinstruction = GGS_bool (false) ;
              GGS_string var_cas_s = var_cas_registerExpression.reader_mRegisterName (inLexique COMMA_SOURCE_FILE_AT_LINE (853)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
              const GGS_bool cond_25164 = (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (854)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (854))).operator_strictSup (GGS_uint (0U)) ;
              if (cond_25164.isBuiltAndTrue ()) {
                var_cas_s.appendCString (" [") ;
                var_cas_s.dotAssign_operation (var_cas_registerExpression.reader_mOffset (inLexique COMMA_SOURCE_FILE_AT_LINE (855)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (855)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (855))) ;
                var_cas_s.appendCString ("]") ;
              }
              var_cas_s.appendCString (".") ;
              const GGS_bitNumberExpression  temp_25217 = var_cas_bitNumberExpression ;
              if (temp_25217.isBuilt ()) {
                temp_25217 (HERE)->method_display (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (857)) ;
              }
              var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("In Piccolo 1.2.0 and later, this construction is deprecated; use '")).operator_concat (var_cas_s)).operator_concat (GGS_string ("' instead")) COMMA_SOURCE_FILE_AT_LINE (858)) ;
            }else if (cond_25358.isBuiltAndFalse ()) {
              var_cas_conditionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("invalid '")).operator_concat (var_cas_conditionString)).operator_concat (GGS_string ("' condition; valid ones are: 'z' and 'nz'")) COMMA_SOURCE_FILE_AT_LINE (864)) ;
              var_cas_BTFSSinstruction.drop () ;
            }
          }
          } break ;
        default :
          break ;
      }
      var_cas_outCondition = GGS_midrange_bitTest_in_structured_if_condition ::constructor_new (inLexique, var_cas_registerExpression, var_cas_bitNumberExpression, var_cas_BTFSSinstruction COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_factor_midrange_syntax_794_32_parse (piccolo_lexique & inLexique) {
  switch (select_midrange_syntax_19 (inLexique)) {
    case 1 : {
      switch (select_midrange_syntax_20 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_incf) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_decf) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      nt_register_parsing_parse (inLexique) ;
      switch (select_midrange_syntax_21 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2C_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_w) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_register_parsing_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__2E_) COMMA_HERE) ;
      nt_bit_number_parsing_parse (inLexique) ;
      switch (select_midrange_syntax_22 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'midrange_condition_expression'      *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_expression_midrange_syntax_876_36_ (piccolo_lexique & inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
  nt_midrange_condition_term_ (inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
      switch (select_midrange_syntax_23 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_c ;
          nt_midrange_condition_term_ (inLexique, var_cas_c) ;
          GGS_midrange_conditionExpression  var_cas_rc = GGS_midrange_negateCondition ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_lc = GGS_midrange_negateCondition ::constructor_new (inLexique, var_cas_outCondition COMMA_HERE) ;
          var_cas_outCondition = GGS_midrange_negateCondition ::constructor_new (inLexique, GGS_midrange_andCondition ::constructor_new (inLexique, var_cas_lc, var_cas_rc COMMA_HERE) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_expression_midrange_syntax_876_36_parse (piccolo_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__28_) COMMA_HERE) ;
  nt_midrange_condition_term_parse (inLexique) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
      switch (select_midrange_syntax_23 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7C_) COMMA_HERE) ;
          nt_midrange_condition_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'midrange_condition_term'         *
//                                                                           *
//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_term_midrange_syntax_895_30_ (piccolo_lexique & inLexique,
                                GGS_midrange_conditionExpression  &var_cas_outCondition) {
  nt_midrange_condition_factor_ (inLexique, var_cas_outCondition) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
      switch (select_midrange_syntax_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          GGS_midrange_conditionExpression  var_cas_c ;
          nt_midrange_condition_factor_ (inLexique, var_cas_c) ;
          var_cas_outCondition = GGS_midrange_andCondition ::constructor_new (inLexique, var_cas_outCondition, var_cas_c COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void midrange_syntax::
pr_midrange_condition_term_midrange_syntax_895_30_parse (piccolo_lexique & inLexique) {
  nt_midrange_condition_factor_parse (inLexique) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
      switch (select_midrange_syntax_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__26_) COMMA_HERE) ;
          nt_midrange_condition_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

