//---------------------------------------------------------------------------*
//                                                                           *
//           File 'pic18_bootloader_specification_semantics.cpp'             *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     december 31th, 2008, at 14h7'23"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_bootloader_specification_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_bootloader_specification_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "pic18BootloaderSpecificationAnalysis"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18BootloaderSpecificationAnalysis (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inSourceFileName,
                                const GGS_lstring   var_cas_inBootloaderName,
                                const GGS_lstring   var_cas_inDeviceName,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationList,
                                const GGS_bootloaderReservedRAMmap   var_cas_inBootloaderReservedRAMmap,
                                const GGS_luint   var_cas_inReservedRomSize,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationList,
                                const GGS_ramDefinitionList   var_cas_inSharedRamDefinitionList,
                                GGS_string & var_cas_outListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18BootloaderSpecificationAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (18)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inBootloaderName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (19)))).isBuiltAndTrue ()) {
    var_cas_inBootloaderName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the bootloader name ('"))._operator_concat (var_cas_inBootloaderName))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  var_cas_outListFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inDeviceName,  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (26)) ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (28)).enumValue ()) {
  case GGS_processorType::enum_pic18_60:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 96U) ;
    }
    break ;
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 128U) ;
    }
    break ;
  case GGS_processorType::enum_midrange:
    {
    var_cas_inDeviceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (32)) ;
    var_cas_accessBankSplitOffset._drop () ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inDeviceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (33)) ;
    var_cas_accessBankSplitOffset._drop () ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (35))) ;
  var_cas_outListFileContents.writeString ("\n") ;
  var_cas_outListFileContents.writeString ("*") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "BOOTLOADER FOOTPRINT").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (36))) ;
  var_cas_outListFileContents.writeString ("*\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (37))) ;
  var_cas_outListFileContents.writeString ("\n"
    "\n") ;
  if (((var_cas_inReservedRomSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)))._operator_supOrEqual (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)))).isBuiltAndTrue ()) {
    var_cas_inReservedRomSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "reserved size for bootloader ("))._operator_concat (var_cas_inReservedRomSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))))._operator_concat (GGS_string (true, " bytes) is greater than ROM size (")))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (41))))._operator_concat (GGS_string (true, " bytes) of ")))._operator_concat (var_cas_inDeviceName))._operator_concat (GGS_string (true, " micro controller")) COMMA_SOURCE_FILE_AT_LINE (43)) ;
  }
  var_cas_outListFileContents.writeString ("ROM size : ") ;
  var_cas_outListFileContents._dotAssign_operation (var_cas_inReservedRomSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))) ;
  var_cas_outListFileContents.writeString (" bytes.\n"
    "\n") ;
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ;
  {
    GGS_bootloaderReservedRAMmap::cEnumerator enumerator_2573 (var_cas_inBootloaderReservedRAMmap, true) ;
    const GGS_bootloaderReservedRAMmap::cElement * operand_2573 = NULL ;
    while (((operand_2573 = enumerator_2573.nextObject ()))) {
      macroValidPointer (operand_2573) ;
      GGS_uint  var_cas_firstAddress ;
      GGS_uint  var_cas_firstFreeAddress ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uintlist  var_cas_mirrorOffsetList ;
      const GGS_ramBankTable  _temp_2727 = var_cas_ramBank ;
      if (_temp_2727._isBuilt ()) {
        _temp_2727 (HERE)->method_searchKey (_inLexique, operand_2573->mKey, var_cas_firstAddress, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne, var_cas_mirrorOffsetList COMMA_SOURCE_FILE_AT_LINE (52)) ;
      }
      var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_2573->mInfo.mReservedSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) COMMA_SOURCE_FILE_AT_LINE (53)) ;
      if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
        operand_2573->mInfo.mReservedSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "reserved size is greater than size of '"))._operator_concat (operand_2573->mKey))._operator_concat (GGS_string (true, "' bank (")))._operator_concat (var_cas_lastAddressPlusOne._substract_operation (_inLexique, var_cas_firstAddress COMMA_SOURCE_FILE_AT_LINE (56)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (56))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (57)) ;
      }else{
        var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_2573->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)) ;
        var_cas_outListFileContents.writeString ("'") ;
        var_cas_outListFileContents._dotAssign_operation (operand_2573->mKey) ;
        var_cas_outListFileContents.writeString ("' RAM size : ") ;
        var_cas_outListFileContents._dotAssign_operation (operand_2573->mInfo.mReservedSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (59))) ;
        var_cas_outListFileContents.writeString (" bytes (from ") ;
        var_cas_outListFileContents._dotAssign_operation (var_cas_firstAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
        var_cas_outListFileContents.writeString (" to ") ;
        var_cas_outListFileContents._dotAssign_operation (var_cas_firstFreeAddress._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (60)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
        var_cas_outListFileContents.writeString (").\n"
          "\n") ;
      }
    }
  }
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (64))) ;
  var_cas_outListFileContents.writeString ("\n") ;
  var_cas_outListFileContents.writeString ("*") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "BOOTLOADER ROUTINES").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (65))) ;
  var_cas_outListFileContents.writeString ("*\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (66))) ;
  var_cas_outListFileContents.writeString ("\n"
    "\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "Routine").reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (67))) ;
  var_cas_outListFileContents.writeString (" Entry point address\n") ;
  GGS_stringset  var_cas_routineNameSet ;
  var_cas_routineNameSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_entryPointAddress ;
  var_cas_entryPointAddress = GGS_uint (true, 4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_3922 (var_cas_inBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_3922 = NULL ;
    while (((operand_3922 = enumerator_3922.nextObject ()))) {
      macroValidPointer (operand_3922) ;
      if ((var_cas_routineNameSet.reader_hasKey (_inLexique, operand_3922->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_SOURCE_FILE_AT_LINE (71))).isBuiltAndTrue ()) {
        operand_3922->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This routine is already declared") COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
      var_cas_routineNameSet._addAssign_operation (operand_3922->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
      var_cas_outListFileContents._dotAssign_operation (operand_3922->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (75))) ;
      var_cas_outListFileContents.writeString (" ") ;
      var_cas_outListFileContents._dotAssign_operation (var_cas_entryPointAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
      var_cas_outListFileContents.writeString ("\n") ;
      var_cas_entryPointAddress = var_cas_entryPointAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (76)) ;
      if (((var_cas_entryPointAddress)._operator_isEqual (GGS_uint (true, 8U))).isBuiltAndTrue ()) {
        var_cas_entryPointAddress = GGS_uint (true, 12U) ;
      }else if (((var_cas_entryPointAddress)._operator_isEqual (GGS_uint (true, 24U))).isBuiltAndTrue ()) {
        var_cas_entryPointAddress = GGS_uint (true, 28U) ;
      }
    }
  }
  var_cas_outListFileContents.writeString ("\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (85))) ;
  var_cas_outListFileContents.writeString ("\n") ;
  var_cas_outListFileContents.writeString ("*") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "USER PROGRAM ROUTINES").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (86))) ;
  var_cas_outListFileContents.writeString ("*\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (87))) ;
  var_cas_outListFileContents.writeString ("\n"
    "\n") ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "Routine").reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (88))) ;
  var_cas_outListFileContents.writeString (" Entry point address\n") ;
  var_cas_entryPointAddress = var_cas_inReservedRomSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_4994 (var_cas_inUserRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_4994 = NULL ;
    while (((operand_4994 = enumerator_4994.nextObject ()))) {
      macroValidPointer (operand_4994) ;
      if ((var_cas_routineNameSet.reader_hasKey (_inLexique, operand_4994->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)) COMMA_SOURCE_FILE_AT_LINE (91))).isBuiltAndTrue ()) {
        operand_4994->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This routine is already declared") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
      var_cas_routineNameSet._addAssign_operation (operand_4994->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
      var_cas_outListFileContents._dotAssign_operation (operand_4994->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (95)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (95))) ;
      var_cas_outListFileContents.writeString (" ") ;
      var_cas_outListFileContents._dotAssign_operation (var_cas_entryPointAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
      var_cas_outListFileContents.writeString ("\n") ;
      var_cas_entryPointAddress = var_cas_entryPointAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (96)) ;
    }
  }
  var_cas_outListFileContents.writeString ("\n") ;
  GGS_registerTable  var_cas_registerTable ;
  ::routine_analyze_ram_sections (_inLexique,  GGS_string (true, "SHARED VARIABLES"),  var_cas_inSharedRamDefinitionList,  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (105)),  var_cas_outListFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (101)) ;
  var_cas_outListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (109))) ;
  var_cas_outListFileContents.writeString ("\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18BootloaderSpecificationAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*

