//---------------------------------------------------------------------------*
//                                                                           *
//           File 'pic18_bootloader_specification_semantics.cpp'             *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 9th, 2009, at 22h45'17"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_bootloader_specification_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_bootloader_specification_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "pic18BootloaderSpecificationAnalysis"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18BootloaderSpecificationAnalysis (C_Compiler & inLexique,
                                const GGS_string  var_cas_inSourceFileName,
                                const GGS_lstring   var_cas_inBootloaderName,
                                const GGS_lstring   var_cas_inDeviceName,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationList,
                                const GGS_bootloaderReservedRAMmap   var_cas_inBootloaderReservedRAMmap,
                                const GGS_luint   var_cas_inReservedRomSize,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationList,
                                const GGS_ramDefinitionList   var_cas_inSharedRamDefinitionList,
                                GGS_string & var_cas_outListFileContents,
                                GGS_piccoloDeviceModel & var_cas_outPiccoloDeviceModel,
                                GGS_uint  & var_cas_outAccessBankSplitOffset,
                                GGS_ramBankTable  & var_cas_outRamBank,
                                GGS_registerTable  & var_cas_outRegisterTable COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18BootloaderSpecificationAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (22)) ;
  if (((var_cas_sourceFileBaseName).operator_isNotEqual (var_cas_inBootloaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)))).isBuiltAndTrue ()) {
    var_cas_inBootloaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the bootloader name ('")).operator_concat (var_cas_inBootloaderName)).operator_concat (GGS_string ("') should be identical to the file base name '"))).operator_concat (var_cas_sourceFileBaseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (26)) ;
  }
  var_cas_outListFileContents = GGS_string ("") ;
  ::routine_parseDeviceDefinition (inLexique,  var_cas_inDeviceName,  var_cas_outPiccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (29)) ;
  switch (var_cas_outPiccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).enumValue ()) {
  case GGS_processorType::enum_pic18_60:
    {
    var_cas_outAccessBankSplitOffset = GGS_uint (96U) ;
    }
    break ;
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_outAccessBankSplitOffset = GGS_uint (128U) ;
    }
    break ;
  case GGS_processorType::enum_midrange:
    {
    var_cas_inDeviceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (34)) ;
    var_cas_outAccessBankSplitOffset.drop () ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inDeviceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (35)) ;
    var_cas_outAccessBankSplitOffset.drop () ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (37))) ;
  var_cas_outListFileContents.appendCString ("\n") ;
  var_cas_outListFileContents.appendCString ("*") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("BOOTLOADER FOOTPRINT").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (38))) ;
  var_cas_outListFileContents.appendCString ("*\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (39))) ;
  var_cas_outListFileContents.appendCString ("\n"
    "\n") ;
  if (((var_cas_inReservedRomSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (40))).operator_supOrEqual (var_cas_outPiccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (40)))).isBuiltAndTrue ()) {
    var_cas_inReservedRomSize.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("reserved size for bootloader (")).operator_concat (var_cas_inReservedRomSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (42)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (42)))).operator_concat (GGS_string (" bytes) is greater than ROM size ("))).operator_concat (var_cas_outPiccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" bytes) of "))).operator_concat (var_cas_inDeviceName)).operator_concat (GGS_string (" micro controller")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
  }
  var_cas_outListFileContents.appendCString ("ROM size : ") ;
  var_cas_outListFileContents.dotAssign_operation (var_cas_inReservedRomSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (46)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (46))) ;
  var_cas_outListFileContents.appendCString (" bytes.\n"
    "\n") ;
  var_cas_outRamBank = var_cas_outPiccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
  {
    GGS_bootloaderReservedRAMmap::cEnumerator enumerator_2657 (var_cas_inBootloaderReservedRAMmap, true) ;
    const GGS_bootloaderReservedRAMmap::cElement * operand_2657 = NULL ;
    while (((operand_2657 = enumerator_2657.nextObject ()))) {
      macroValidPointer (operand_2657) ;
      GGS_uint  var_cas_firstAddress ;
      GGS_uint  var_cas_firstFreeAddress ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uintlist  var_cas_mirrorOffsetList ;
      const GGS_ramBankTable  temp_2814 = var_cas_outRamBank ;
      if (temp_2814.isBuilt ()) {
        temp_2814 (HERE)->method_searchKey (inLexique, operand_2657->mKey, var_cas_firstAddress, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne, var_cas_mirrorOffsetList COMMA_SOURCE_FILE_AT_LINE (54)) ;
      }
      var_cas_firstFreeAddress = var_cas_firstFreeAddress.add_operation (inLexique, operand_2657->mInfo.mReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) ;
      if (((var_cas_firstFreeAddress).operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
        operand_2657->mInfo.mReservedSize.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("reserved size is greater than size of '")).operator_concat (operand_2657->mKey)).operator_concat (GGS_string ("' bank ("))).operator_concat (var_cas_lastAddressPlusOne.substract_operation (inLexique, var_cas_firstAddress COMMA_SOURCE_FILE_AT_LINE (58)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
      }else{
        var_cas_outRamBank.modifier_setMFirstFreeAddressForKey (inLexique, var_cas_firstFreeAddress, operand_2657->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60)) ;
        var_cas_outListFileContents.appendCString ("'") ;
        var_cas_outListFileContents.dotAssign_operation (operand_2657->mKey) ;
        var_cas_outListFileContents.appendCString ("' RAM size : ") ;
        var_cas_outListFileContents.dotAssign_operation (operand_2657->mInfo.mReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (61))) ;
        var_cas_outListFileContents.appendCString (" bytes (from ") ;
        var_cas_outListFileContents.dotAssign_operation (var_cas_firstAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
        var_cas_outListFileContents.appendCString (" to ") ;
        var_cas_outListFileContents.dotAssign_operation (var_cas_firstFreeAddress.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (62)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
        var_cas_outListFileContents.appendCString (").\n"
          "\n") ;
      }
    }
  }
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (66))) ;
  var_cas_outListFileContents.appendCString ("\n") ;
  var_cas_outListFileContents.appendCString ("*") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("BOOTLOADER ROUTINES").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (67))) ;
  var_cas_outListFileContents.appendCString ("*\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (68))) ;
  var_cas_outListFileContents.appendCString ("\n"
    "\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("Routine").reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (69))) ;
  var_cas_outListFileContents.appendCString (" Entry point address\n") ;
  GGS_stringset  var_cas_routineNameSet ;
  var_cas_routineNameSet = GGS_stringset ::constructor_emptySet () ;
  GGS_uint  var_cas_entryPointAddress ;
  var_cas_entryPointAddress = GGS_uint (4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_4012 (var_cas_inBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_4012 = NULL ;
    while (((operand_4012 = enumerator_4012.nextObject ()))) {
      macroValidPointer (operand_4012) ;
      if ((var_cas_routineNameSet.reader_hasKey (inLexique, operand_4012->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) COMMA_SOURCE_FILE_AT_LINE (73))).isBuiltAndTrue ()) {
        operand_4012->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This routine is already declared") COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }
      var_cas_routineNameSet._addAssign_operation (operand_4012->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76))) ;
      var_cas_outListFileContents.dotAssign_operation (operand_4012->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (77))) ;
      var_cas_outListFileContents.appendCString (" ") ;
      var_cas_outListFileContents.dotAssign_operation (var_cas_entryPointAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (77))) ;
      var_cas_outListFileContents.appendCString ("\n") ;
      var_cas_entryPointAddress = var_cas_entryPointAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (78)) ;
      if (((var_cas_entryPointAddress).operator_isEqual (GGS_uint (8U))).isBuiltAndTrue ()) {
        var_cas_entryPointAddress = GGS_uint (12U) ;
      }else if (((var_cas_entryPointAddress).operator_isEqual (GGS_uint (24U))).isBuiltAndTrue ()) {
        var_cas_entryPointAddress = GGS_uint (28U) ;
      }
    }
  }
  var_cas_outListFileContents.appendCString ("\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (87))) ;
  var_cas_outListFileContents.appendCString ("\n") ;
  var_cas_outListFileContents.appendCString ("*") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("USER PROGRAM ROUTINES").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (88))) ;
  var_cas_outListFileContents.appendCString ("*\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (89))) ;
  var_cas_outListFileContents.appendCString ("\n"
    "\n") ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("Routine").reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (90))) ;
  var_cas_outListFileContents.appendCString (" Entry point address\n") ;
  var_cas_entryPointAddress = var_cas_inReservedRomSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_5084 (var_cas_inUserRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_5084 = NULL ;
    while (((operand_5084 = enumerator_5084.nextObject ()))) {
      macroValidPointer (operand_5084) ;
      if ((var_cas_routineNameSet.reader_hasKey (inLexique, operand_5084->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) COMMA_SOURCE_FILE_AT_LINE (93))).isBuiltAndTrue ()) {
        operand_5084->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This routine is already declared") COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
      var_cas_routineNameSet._addAssign_operation (operand_5084->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
      var_cas_outListFileContents.dotAssign_operation (operand_5084->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_stringByLeftPadding (inLexique, GGS_uint (40U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (97))) ;
      var_cas_outListFileContents.appendCString (" ") ;
      var_cas_outListFileContents.dotAssign_operation (var_cas_entryPointAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (97))) ;
      var_cas_outListFileContents.appendCString ("\n") ;
      var_cas_entryPointAddress = var_cas_entryPointAddress.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (98)) ;
    }
  }
  var_cas_outListFileContents.appendCString ("\n") ;
  var_cas_outRegisterTable = var_cas_outPiccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
  ::routine_analyze_ram_sections (inLexique,  GGS_string ("SHARED VARIABLES"),  var_cas_inSharedRamDefinitionList,  var_cas_outRamBank,  var_cas_outPiccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (107)),  var_cas_outListFileContents,  var_cas_outRegisterTable COMMA_SOURCE_FILE_AT_LINE (103)) ;
  var_cas_outListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (111))) ;
  var_cas_outListFileContents.appendCString ("\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18BootloaderSpecificationAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*

