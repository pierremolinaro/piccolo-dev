//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'pic18_bootloader_syntax.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 9th, 2009, at 17h27'22"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_bootloader_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_bootloader_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_bootloader'            *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_parse_bootloader_pic18_bootloader_syntax_46_23_ (piccolo_lexique & inLexique,
                                GGS_lstring  &var_cas_outBootloaderName,
                                GGS_lstring  &var_cas_outDeviceName,
                                GGS_routineDeclarationList  &var_cas_outBootloaderRoutineDeclarationList,
                                GGS_bootloaderReservedRAMmap  &var_cas_outBootloaderReservedRAMmap,
                                GGS_luint  &var_cas_outReservedRomSize,
                                GGS_routineDeclarationList  &var_cas_outUserRoutineDeclarationList,
                                GGS_ramDefinitionList  &var_cas_outSharedRamDefinitionList,
                                GGS_string &var_cas_outListFileContents,
                                GGS_piccoloDeviceModel &var_cas_outPiccoloDeviceModel,
                                GGS_uint  &var_cas_outAccessBankSplitOffset,
                                GGS_ramBankTable  &var_cas_outRamBank,
                                GGS_registerTable  &var_cas_outRegisterTable) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pic_31__38_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outBootloaderName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outDeviceName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  var_cas_outBootloaderRoutineDeclarationList = GGS_routineDeclarationList ::constructor_emptyList () ;
  var_cas_outBootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outReservedRomSize = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_pic18_bootloader_syntax_0 (inLexique)) {
        case 2 : {
          nt_routine_declaration_ (inLexique, var_cas_outBootloaderRoutineDeclarationList) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rom) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D_) COMMA_HERE) ;
          GGS_luint  var_cas_rs ;
          inLexique.assignFromAttribute_uint32value (var_cas_rs) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          const GGS_bool cond_2678 = (var_cas_outReservedRomSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (76))).operator_isNotEqual (GGS_uint (0U)) ;
          if (cond_2678.isBuiltAndTrue ()) {
            var_cas_rs.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ROM size already defined") COMMA_SOURCE_FILE_AT_LINE (78)) ;
          }else if (cond_2678.isBuiltAndFalse ()) {
            const GGS_bool cond_2751 = (var_cas_rs.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (78))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_2751.isBuiltAndTrue ()) {
              var_cas_rs.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ROM size should be > 0") COMMA_SOURCE_FILE_AT_LINE (80)) ;
            }else if (cond_2751.isBuiltAndFalse ()) {
              const GGS_bool cond_2843 = (var_cas_rs.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (80))).operator_isNotEqual (GGS_uint (0U)) ;
              if (cond_2843.isBuiltAndTrue ()) {
                var_cas_rs.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ROM size should be a multiple of 8") COMMA_SOURCE_FILE_AT_LINE (82)) ;
              }else if (cond_2843.isBuiltAndFalse ()) {
                var_cas_outReservedRomSize = var_cas_rs ;
              }
            }
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
          GGS_lstring  var_cas_bankName ;
          inLexique.assignFromAttribute_tokenString (var_cas_bankName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D_) COMMA_HERE) ;
          GGS_luint  var_cas_rs ;
          inLexique.assignFromAttribute_uint32value (var_cas_rs) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          const GGS_bool cond_3138 = var_cas_outBootloaderReservedRAMmap.reader_hasKey (inLexique, var_cas_bankName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) COMMA_SOURCE_FILE_AT_LINE (90)) ;
          if (cond_3138.isBuiltAndTrue ()) {
            var_cas_rs.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("RAM size already defined for '")).operator_concat (var_cas_bankName)).operator_concat (GGS_string ("' bank")) COMMA_SOURCE_FILE_AT_LINE (92)) ;
          }else if (cond_3138.isBuiltAndFalse ()) {
            const GGS_bool cond_3210 = (var_cas_rs.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_3210.isBuiltAndTrue ()) {
              var_cas_rs.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("RAM size should be > 0") COMMA_SOURCE_FILE_AT_LINE (94)) ;
            }else if (cond_3210.isBuiltAndFalse ()) {
              var_cas_outBootloaderReservedRAMmap.modifier_insertKey (inLexique, var_cas_bankName, var_cas_rs COMMA_SOURCE_FILE_AT_LINE (95)) ;
            }
          }
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  var_cas_outUserRoutineDeclarationList = GGS_routineDeclarationList ::constructor_emptyList () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_pic18_bootloader_syntax_1 (inLexique)) {
        case 2 : {
          nt_routine_declaration_ (inLexique, var_cas_outUserRoutineDeclarationList) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  var_cas_outSharedRamDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_pic18_bootloader_syntax_2 (inLexique)) {
        case 2 : {
          nt_ram_definition_ (inLexique, var_cas_outSharedRamDefinitionList) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D_) COMMA_HERE) ;
  ::routine_pic18BootloaderSpecificationAnalysis (inLexique,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE),  var_cas_outBootloaderName,  var_cas_outDeviceName,  var_cas_outBootloaderRoutineDeclarationList,  var_cas_outBootloaderReservedRAMmap,  var_cas_outReservedRomSize,  var_cas_outUserRoutineDeclarationList,  var_cas_outSharedRamDefinitionList,  var_cas_outListFileContents,  var_cas_outPiccoloDeviceModel,  var_cas_outAccessBankSplitOffset,  var_cas_outRamBank,  var_cas_outRegisterTable COMMA_SOURCE_FILE_AT_LINE (116)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_start_symbol_pic18_bootloader_syntax_135_19_ (piccolo_lexique & inLexique) {
  GGS_lstring  var_cas_bootloaderName ;
  GGS_lstring  var_cas_deviceName ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationList ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  GGS_luint  var_cas_reservedRomSize ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationList ;
  GGS_ramDefinitionList  var_cas_sharedRamDefinitionList ;
  GGS_string var_cas_listFileContents ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  GGS_ramBankTable  var_cas_ramBank ;
  GGS_registerTable  var_cas_registerTable ;
  nt_parse_bootloader_ (inLexique, var_cas_bootloaderName, var_cas_deviceName, var_cas_bootloaderRoutineDeclarationList, var_cas_bootloaderReservedRAMmap, var_cas_reservedRomSize, var_cas_userRoutineDeclarationList, var_cas_sharedRamDefinitionList, var_cas_listFileContents, var_cas_piccoloDeviceModel, var_cas_accessBankSplitOffset, var_cas_ramBank, var_cas_registerTable) ;
  GGS_string var_cas_listingFile = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (163))).operator_concat (GGS_string (".list")) ;
  const GGS_bool cond_5277 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).operator_and (gOption_piccolo_5F_options_ouputListingFile.value ()) ;
  if (cond_5277.isBuiltAndTrue ()) {
    GGS_bool automatic_var_0 ;
    const GGS_string temp_5252 = var_cas_listFileContents ;
    if (temp_5252.isBuilt ()) {
      temp_5252 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_listingFile, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (165)) ;
    }
  }
  const GGS_bool cond_5369 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_strictSup (GGS_uint (0U)) ;
  if (cond_5369.isBuiltAndTrue ()) {
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_listingFile COMMA_SOURCE_FILE_AT_LINE (168)) ;
  }
}

//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_start_symbol_pic18_bootloader_syntax_135_19_importBootloaderSpecification (piccolo_lexique & inLexique,
                                GGS_piccoloDeviceModel &var_cas_outPiccoloDeviceModel,
                                GGS_uint  &var_cas_outAccessBankSplitOffset,
                                GGS_ramBankTable  &var_cas_outRamBank,
                                GGS_registerTable  &var_cas_outRegisterTable,
                                GGS_bootloaderReservedRAMmap  &var_cas_outBootloaderReservedRAMmap,
                                GGS_routineDeclarationList  &var_cas_outBootloaderRoutineDeclarationList,
                                GGS_routineDeclarationList  &var_cas_outUserRoutineDeclarationList,
                                GGS_luint  &var_cas_outBootloaderReservedROMsize) {
  GGS_lstring  var_cas_bootloaderName ;
  GGS_lstring  var_cas_deviceName ;
  GGS_ramDefinitionList  var_cas_sharedRamDefinitionList ;
  GGS_string var_cas_listFileContents ;
  nt_parse_bootloader_ (inLexique, var_cas_bootloaderName, var_cas_deviceName, var_cas_outBootloaderRoutineDeclarationList, var_cas_outBootloaderReservedRAMmap, var_cas_outBootloaderReservedROMsize, var_cas_outUserRoutineDeclarationList, var_cas_sharedRamDefinitionList, var_cas_listFileContents, var_cas_outPiccoloDeviceModel, var_cas_outAccessBankSplitOffset, var_cas_outRamBank, var_cas_outRegisterTable) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'routine_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_routine_declaration_pic18_bootloader_syntax_202_26_ (piccolo_lexique & inLexique,
                                GGS_routineDeclarationList  &var_cas_ioRoutineDefinitionList) {
  GGS_bool var_cas_noreturn ;
  switch (select_pic18_bootloader_syntax_3 (inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_pic18_bootloader_syntax_4 (inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A_) COMMA_HERE) ;
      switch (select_pic18_bootloader_syntax_5 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          const GGS_bool cond_6961 = var_cas_noreturn ;
          if (cond_6961.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (228)) ;
          }
          var_cas_preservesBank = GGS_bool (true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_requiredBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (false) ;
          switch (select_pic18_bootloader_syntax_6 (inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              const GGS_bool cond_7459 = var_cas_noreturn ;
              if (cond_7459.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (243)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          inLexique.assignFromAttribute_uint32value (var_cas_returnedBank) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          const GGS_bool cond_7661 = var_cas_noreturn ;
          if (cond_7661.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (250)) ;
          }
          var_cas_preservesBank = GGS_bool (false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (inLexique, GGS_uint ::constructor_max (inLexique COMMA_HERE), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  var_cas_ioRoutineDefinitionList.addAssign_operation (var_cas_routineName, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn) ;
}

//---------------------------------------------------------------------------*

