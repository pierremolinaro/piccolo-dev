//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'pic18_bootloader_syntax.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    december 31th, 2008, at 14h26'47"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_bootloader_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_bootloader_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_start_symbol_pic18_bootloader_syntax_17_19_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pic18) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
  GGS_lstring  var_cas_bootloaderName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_bootloaderName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_deviceName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationList ;
  var_cas_bootloaderRoutineDeclarationList = GGS_routineDeclarationList ::constructor_emptyList () ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  var_cas_bootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_luint  var_cas_reservedRomSize ;
  var_cas_reservedRomSize = GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_pic18_bootloader_syntax_0 (_inLexique)) {
        case 2 : {
          nt_routine_declaration_ (_inLexique, var_cas_bootloaderRoutineDeclarationList) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_rom) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D) COMMA_HERE) ;
          GGS_luint  var_cas_rs ;
          _inLexique._assignFromAttribute_uint32value (var_cas_rs) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          if (((var_cas_reservedRomSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (34)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            var_cas_rs.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ROM size already defined") COMMA_SOURCE_FILE_AT_LINE (36)) ;
          }else if (((var_cas_rs.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            var_cas_rs.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ROM size should be > 0") COMMA_SOURCE_FILE_AT_LINE (38)) ;
          }else if (((var_cas_rs.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (38))._modulo_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (38)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            var_cas_rs.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ROM size should be a multiple of 8") COMMA_SOURCE_FILE_AT_LINE (40)) ;
          }else{
            var_cas_reservedRomSize = var_cas_rs ;
          }
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) COMMA_HERE) ;
          GGS_lstring  var_cas_bankName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_bankName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3D) COMMA_HERE) ;
          GGS_luint  var_cas_rs ;
          _inLexique._assignFromAttribute_uint32value (var_cas_rs) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          if ((var_cas_bootloaderReservedRAMmap.reader_hasKey (_inLexique, var_cas_bankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (48)) COMMA_SOURCE_FILE_AT_LINE (48))).isBuiltAndTrue ()) {
            var_cas_rs.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "RAM size already defined for '"))._operator_concat (var_cas_bankName))._operator_concat (GGS_string (true, "' bank")) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }else if (((var_cas_rs.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (50)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            var_cas_rs.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "RAM size should be > 0") COMMA_SOURCE_FILE_AT_LINE (52)) ;
          }else{
            var_cas_bootloaderReservedRAMmap.modifier_insertKey (_inLexique, var_cas_bankName, var_cas_rs COMMA_SOURCE_FILE_AT_LINE (53)) ;
          }
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationList ;
  var_cas_userRoutineDeclarationList = GGS_routineDeclarationList ::constructor_emptyList () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_pic18_bootloader_syntax_1 (_inLexique)) {
        case 2 : {
          nt_routine_declaration_ (_inLexique, var_cas_userRoutineDeclarationList) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  GGS_ramDefinitionList  var_cas_sharedRamDefinitionList ;
  var_cas_sharedRamDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_pic18_bootloader_syntax_2 (_inLexique)) {
        case 2 : {
          nt_ram_definition_ (_inLexique, var_cas_sharedRamDefinitionList) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  GGS_string var_cas_listingFile ;
  var_cas_listingFile = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)))._operator_concat (GGS_string (true, ".list")) ;
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFileContents ;
    ::routine_pic18BootloaderSpecificationAnalysis (_inLexique,  GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE),  var_cas_bootloaderName,  var_cas_deviceName,  var_cas_bootloaderRoutineDeclarationList,  var_cas_bootloaderReservedRAMmap,  var_cas_reservedRomSize,  var_cas_userRoutineDeclarationList,  var_cas_sharedRamDefinitionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (77)) ;
    if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (88))))).isBuiltAndTrue ()) {
      GGS_bool automatic_var_0 ;
      const GGS_string _temp_2848 = var_cas_listFileContents ;
      if (_temp_2848._isBuilt ()) {
        _temp_2848 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listingFile, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (89)) ;
      }
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_deleteFileIfExists (_inLexique, var_cas_listingFile COMMA_SOURCE_FILE_AT_LINE (93)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'routine_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_routine_declaration_pic18_bootloader_syntax_99_26_ (piccolo_lexique & _inLexique,
                                GGS_routineDeclarationList  &var_cas_ioRoutineDefinitionList) {
  GGS_bool var_cas_noreturn ;
  switch (select_pic18_bootloader_syntax_3 (_inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_routineName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_pic18_bootloader_syntax_4 (_inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      switch (select_pic18_bootloader_syntax_5 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (125)) ;
          }
          var_cas_preservesBank = GGS_bool (true, true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_requiredBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (true, false) ;
          switch (select_pic18_bootloader_syntax_6 (_inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              if ((var_cas_noreturn).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (140)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (147)) ;
          }
          var_cas_preservesBank = GGS_bool (true, false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  var_cas_ioRoutineDefinitionList._addAssign_operation (var_cas_routineName, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn) ;
}

//---------------------------------------------------------------------------*

