//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'pic18_bootloader_syntax.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     december 30th, 2008, at 22h1'0"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_bootloader_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_bootloader_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_start_symbol_pic18_bootloader_syntax_20_19_ (piccolo_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_pic18) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bootloader) COMMA_HERE) ;
  GGS_lstring  var_cas_bootloaderName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_bootloaderName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_deviceName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_routineDefinitionList  var_cas_bootloaderRoutineDefinitionList ;
  var_cas_bootloaderRoutineDefinitionList = GGS_routineDefinitionList ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_pic18_bootloader_syntax_0 (_inLexique)) {
        case 2 : {
          nt_routine_declaration_ (_inLexique, var_cas_bootloaderRoutineDefinitionList) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  GGS_routineDefinitionList  var_cas_userRoutineDefinitionList ;
  var_cas_userRoutineDefinitionList = GGS_routineDefinitionList ::constructor_emptyList () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_pic18_bootloader_syntax_1 (_inLexique)) {
        case 2 : {
          nt_routine_declaration_ (_inLexique, var_cas_userRoutineDefinitionList) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
  GGS_ramDefinitionList  var_cas_ramDefinitionList ;
  var_cas_ramDefinitionList = GGS_ramDefinitionList ::constructor_emptyList () ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_pic18_bootloader_syntax_2 (_inLexique)) {
        case 2 : {
          nt_ram_definition_ (_inLexique, var_cas_ramDefinitionList) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'routine_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void pic18_bootloader_syntax::
pr_routine_declaration_pic18_bootloader_syntax_79_26_ (piccolo_lexique & _inLexique,
                                GGS_routineDefinitionList  &var_cas_ioRoutineDefinitionList) {
  GGS_bool var_cas_noreturn ;
  switch (select_pic18_bootloader_syntax_3 (_inLexique)) {
    case 1 : {
      var_cas_noreturn = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_noreturn) COMMA_HERE) ;
      var_cas_noreturn = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_routineName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_requiredBank ;
  GGS_luint  var_cas_returnedBank ;
  GGS_bool var_cas_preservesBank ;
  switch (select_pic18_bootloader_syntax_4 (_inLexique)) {
    case 1 : {
      var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_preservesBank = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_bank) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) COMMA_HERE) ;
      switch (select_pic18_bootloader_syntax_5 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_preserved) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:preserved\" setting") COMMA_SOURCE_FILE_AT_LINE (105)) ;
          }
          var_cas_preservesBank = GGS_bool (true, true) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_requires) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_requiredBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          var_cas_preservesBank = GGS_bool (true, false) ;
          switch (select_pic18_bootloader_syntax_6 (_inLexique)) {
            case 1 : {
              var_cas_returnedBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
              _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
              if ((var_cas_noreturn).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (120)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_ensures) COMMA_HERE) ;
          _inLexique._assignFromAttribute_uint32value (var_cas_returnedBank) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (piccolo_lexique::piccolo_lexique_1_integer) COMMA_HERE) ;
          if ((var_cas_noreturn).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine cannot accept \"bank:returned\" setting") COMMA_SOURCE_FILE_AT_LINE (127)) ;
          }
          var_cas_preservesBank = GGS_bool (true, false) ;
          var_cas_requiredBank = GGS_luint ::constructor_new (_inLexique, GGS_uint ::constructor_max (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_instructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_instructionList ::constructor_emptyList () ;
  var_cas_ioRoutineDefinitionList._addAssign_operation (var_cas_routineName, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank, var_cas_noreturn, var_cas_instructionList, GGS_location (_inLexique)) ;
}

//---------------------------------------------------------------------------*

