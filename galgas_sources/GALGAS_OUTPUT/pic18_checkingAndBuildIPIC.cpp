//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'pic18_checkingAndBuildIPIC.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      april 9th, 2010, at 22h29'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_checkingAndBuildIPIC.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_checkingAndBuildIPIC.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true) ;
  {
    GGS_instructionList::cEnumerator enumerator_1728 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_1728 = NULL ;
    while (((operand_1728 = enumerator_1728.nextObject ()))) {
      macroValidPointer (operand_1728) ;
      const GGS_bool cond_1888 = (var_cas_outContinuesInSequence).operator_not () ;
      if (cond_1888.isBuiltAndTrue ()) {
        operand_1728->mInstruction.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unreachable code") COMMA_SOURCE_FILE_AT_LINE (50)) ;
        var_cas_outContinuesInSequence = GGS_bool (true) ;
      }
      const GGS_piccolo_instruction  temp_1936 = operand_1728->mInstruction ;
      if (temp_1936.isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_1936.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_1936 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_nobanksel * operand_2379,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2379 != NULL) {
    const GGS_bool cond_2965 = var_cas_inShouldPreserveBSR ;
    if (cond_2965.isBuiltAndTrue ()) {
      operand_2379->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"nobank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_savebank * operand_3159,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3159 != NULL) {
    GGS_registerExpression  var_cas_BSRregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("BSR"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (106)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (106)) COMMA_SOURCE_FILE_AT_LINE (106)) ;
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_BSR_IPICregisterDescription ;
    const GGS_registerExpression  temp_3780 = var_cas_BSRregister ;
    if (temp_3780.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_3780.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3780 (HERE), var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_save_IPICregisterDescription ;
    const GGS_registerExpression  temp_4009 = operand_3159->mRegister ;
    if (temp_4009.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_4009.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_4009 (HERE), var_cas_inRegisterTable, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3159->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (119))) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_3159->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (126)) ;
    const GGS_bool cond_4833 = (var_cas_ioContinuesInSequence).operator_not () ;
    if (cond_4833.isBuiltAndTrue ()) {
      operand_3159->mEndOfSaveBankInstruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3159->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (144))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_banksel * operand_5186,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5186 != NULL) {
    const GGS_bool cond_5764 = var_cas_inShouldPreserveBSR ;
    if (cond_5764.isBuiltAndTrue ()) {
      operand_5186->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    const GGS_bool cond_5938 = (operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (169))).operator_strictSup (GGS_uint (15U)) ;
    if (cond_5938.isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("selected bank idx should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (171)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
    }else if (cond_5938.isBuiltAndFalse ()) {
      const GGS_bool cond_6093 = (operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (172))).operator_isEqual (var_cas_ioCurrentBank) ;
      if (cond_6093.isBuiltAndTrue ()) {
        operand_5186->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("useless instruction: the bank ")).operator_concat (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (173)))).operator_concat (GGS_string (" is already selected")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
      }else if (cond_6093.isBuiltAndFalse ()) {
        var_cas_ioCurrentBank = operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, operand_5186->mInstructionLocation, operand_5186->mBankIndex COMMA_SOURCE_FILE_AT_LINE (178))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FDA * operand_6379,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_6989_0 ;
    const GGS_registerExpression  temp_6880 = operand_6379->mRegisterExpression ;
    if (temp_6880.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_6880.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_6880 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_6989_0 COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_6379->mInstructionLocation, operand_6379->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_6379->m_W_isDestination COMMA_SOURCE_FILE_AT_LINE (204))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FA * operand_7296,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7296 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7906_0 ;
    const GGS_registerExpression  temp_7797 = operand_7296->mRegisterExpression ;
    if (temp_7797.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_7797.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_7797 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_7906_0 COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_7296->mInstructionLocation, operand_7296->mFAinstruction, var_cas_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (235))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MOVFF * operand_8180,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8180 != NULL) {
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_sourceIPICregisterDescription ;
    const GGS_registerExpression  temp_8740 = operand_8180->mSourceRegisterName ;
    if (temp_8740.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_8740.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_8740 (HERE), var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_destinationIPICregisterDescription ;
    const GGS_registerExpression  temp_8947 = operand_8180->mDestinationRegisterName ;
    if (temp_8947.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_8947.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_8947 (HERE), var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_8180->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (267))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FBA * operand_9313,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9313 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_9847 = operand_9313->mRegisterExpression ;
    if (temp_9847.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_9847.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_9847 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_10017 = operand_9313->mBitNumber ;
    if (temp_10017.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_10017.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_10017 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FBA ::constructor_new (inLexique, operand_9313->mInstructionLocation, operand_9313->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (303))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JSR * operand_10343,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10343 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  temp_10894 = var_cas_inRoutineMap ;
    if (temp_10894.isBuilt ()) {
      temp_10894 (HERE)->method_searchKey (inLexique, operand_10343->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    const GGS_bool cond_11420 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (332)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_11420.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_10343->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_11301 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (335))) ;
      if (cond_11301.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_11301.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
      }
      operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    const GGS_bool cond_11561 = var_cas_isNoReturn ;
    if (cond_11561.isBuiltAndTrue ()) {
      operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (344)) ;
    }
    const GGS_bool cond_11758 = (var_cas_preservesBank).operator_not () ;
    if (cond_11758.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
      const GGS_bool cond_11747 = var_cas_inShouldPreserveBSR ;
      if (cond_11747.isBuiltAndTrue ()) {
        operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the routine call should preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JSR ::constructor_new (inLexique, operand_10343->mInstructionLocation, operand_10343->mTargetLabel, operand_10343->mKind COMMA_SOURCE_FILE_AT_LINE (352))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMP * operand_12006,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12006 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_12557_0 ;
    GGS_bool automatic_var_12557_1 ;
    const GGS_routineMap  temp_12510 = var_cas_inRoutineMap ;
    if (temp_12510.isBuilt ()) {
      temp_12510 (HERE)->method_searchKey (inLexique, operand_12006->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_12557_0, automatic_var_12557_1 COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    const GGS_bool cond_13013 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (378)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_13013.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_12006->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (379))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_12894 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (381))) ;
      if (cond_12894.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_12894.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (384))) ;
      }
      operand_12006->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (387)) ;
    }
    const GGS_bool cond_13149 = (var_cas_isNoReturn).operator_not () ;
    if (cond_13149.isBuiltAndTrue ()) {
      operand_12006->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_12006->mInstructionLocation, operand_12006->mTargetLabel, operand_12006->mKind COMMA_SOURCE_FILE_AT_LINE (393))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMPCC * operand_13435,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13435 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_13975_0 ;
    GGS_bool automatic_var_13975_1 ;
    const GGS_routineMap  temp_13928 = var_cas_inRoutineMap ;
    if (temp_13928.isBuilt ()) {
      temp_13928 (HERE)->method_searchKey (inLexique, operand_13435->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_13975_0, automatic_var_13975_1 COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    const GGS_bool cond_14431 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (419)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_14431.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_13435->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_14312 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
      if (cond_14312.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_14312.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425))) ;
      }
      operand_13435->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (428)) ;
    }
    const GGS_bool cond_14567 = (var_cas_isNoReturn).operator_not () ;
    if (cond_14567.isBuiltAndTrue ()) {
      operand_13435->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    const GGS_bool cond_14675 = operand_13435->mIsBcc ;
    if (cond_14675.isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (435)) ;
    }else if (cond_14675.isBuiltAndFalse ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (437)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_13435->mInstructionLocation, var_cas_mode, operand_13435->mConditionalBranch, operand_13435->mTargetLabel COMMA_SOURCE_FILE_AT_LINE (439))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_CLRWDT * operand_15021,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15021 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_CLRWDT ::constructor_new (inLexique, operand_15021->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (462))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_DAW * operand_15678,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15678 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_DAW ::constructor_new (inLexique, operand_15678->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (482))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_NOP * operand_16332,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16332 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_NOP ::constructor_new (inLexique, operand_16332->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (502))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_POP * operand_16986,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16986 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_POP ::constructor_new (inLexique, operand_16986->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (522))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_PUSH * operand_17641,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17641 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_PUSH ::constructor_new (inLexique, operand_17641->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (542))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_RESET * operand_18298,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18298 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RESET ::constructor_new (inLexique, operand_18298->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (562))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_SLEEP * operand_18956,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18956 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_SLEEP ::constructor_new (inLexique, operand_18956->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (582))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_literalOperation * operand_19625,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19625 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  temp_20086 = operand_19625->mImmediatExpression ;
    if (temp_20086.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_20086.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_20086 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (602)) ;
      }
    }
    const GGS_bool cond_20313 = ((var_cas_result).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
    if (cond_20313.isBuiltAndTrue ()) {
      operand_19625->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (605)))).operator_concat (GGS_string (" (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, operand_19625->mInstructionLocation, operand_19625->mLiteralInstruction, (var_cas_result).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (611)) COMMA_SOURCE_FILE_AT_LINE (608))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_LFSR * operand_20619,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20619 != NULL) {
    const GGS_bool cond_21186 = (operand_20619->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (630))).operator_strictSup (GGS_uint (2U)) ;
    if (cond_21186.isBuiltAndTrue ()) {
      operand_20619->mFSRindex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the LFSR register idx (")).operator_concat (operand_20619->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (631)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (631)))).operator_concat (GGS_string (") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  temp_21239 = operand_20619->mImmediatExpression ;
    if (temp_21239.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_21239.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_21239 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }
    }
    const GGS_bool cond_21462 = ((var_cas_result).operator_strictSup (GGS_sint (4095L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (0L))) ;
    if (cond_21462.isBuiltAndTrue ()) {
      operand_20619->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (637)))).operator_concat (GGS_string (" (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_LFSR ::constructor_new (inLexique, operand_20619->mInstructionLocation, operand_20619->mFSRindex, var_cas_result.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_SOURCE_FILE_AT_LINE (639))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLRD * operand_21726,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21726 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLRD ::constructor_new (inLexique, operand_21726->mInstructionLocation, operand_21726->mOption COMMA_SOURCE_FILE_AT_LINE (661))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLWT * operand_22397,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22397 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLWT ::constructor_new (inLexique, operand_22397->mInstructionLocation, operand_22397->mOption COMMA_SOURCE_FILE_AT_LINE (682))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_retlw * operand_23077,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23077 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (708)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_23876 = operand_23077->mSizeExpression ;
    if (temp_23876.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_23876.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_23876 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
    const GGS_bool cond_24055 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_24055.isBuiltAndTrue ()) {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }else if (cond_24055.isBuiltAndFalse ()) {
      const GGS_bool cond_24190 = (var_cas_size).operator_strictSup (GGS_sint (128L)) ;
      if (cond_24190.isBuiltAndTrue ()) {
        operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      }else if (cond_24190.isBuiltAndFalse ()) {
        const GGS_bool cond_24425 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_isNotEqual (operand_23077->mImmediateExpressionList.reader_length ()) ;
        if (cond_24425.isBuiltAndTrue ()) {
          operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the constant list length (")).operator_concat (operand_23077->mImmediateExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (719)) ;
        }
      }
    }
    GGS_uintlist  var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_24511 (operand_23077->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_24511 = NULL ;
      while (((operand_24511 = enumerator_24511.nextObject ()))) {
        macroValidPointer (operand_24511) ;
        GGS_sint  var_cas_v ;
        const GGS_immediatExpression  temp_24556 = operand_24511->mExpression ;
        if (temp_24556.isBuilt ()) {
          typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_24556.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_24556 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_v COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
        }
        const GGS_bool cond_24776 = ((var_cas_v).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_v).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
        if (cond_24776.isBuiltAndTrue ()) {
          operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("immediate value with idx ")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725)))).operator_concat (GGS_string (" is evaluated as "))).operator_concat (var_cas_v.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725)))).operator_concat (GGS_string (" (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
        var_cas_literalValues.addAssign_operation ((var_cas_v).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_retlw ::constructor_new (inLexique, operand_23077->mInstructionLocation, var_cas_literalValues, operand_23077->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (730))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MNOP * operand_25125,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25125 != NULL) {
    const GGS_bool cond_25689 = (operand_25125->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (753))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_25689.isBuiltAndTrue ()) {
      operand_25125->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MNOP ::constructor_new (inLexique, operand_25125->mInstructionLocation, operand_25125->mOccurrenceFactor COMMA_SOURCE_FILE_AT_LINE (757))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_bra * operand_25954,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25954 != NULL) {
    GGS_bool var_cas_allPreserveBankSetting = GGS_bool (true) ;
    GGS_bool var_cas_allReturnBank = GGS_bool (true) ;
    GGS_uint  var_cas_returnedBankValue = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26473 (operand_25954->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26473 = NULL ;
      while (((operand_26473 = enumerator_26473.nextObject ()))) {
        macroValidPointer (operand_26473) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_26603 = var_cas_inRoutineMap ;
        if (temp_26603.isBuilt ()) {
          temp_26603 (HERE)->method_searchKey (inLexique, operand_26473->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (787)) ;
        }
        const GGS_bool cond_27161 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (789)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_27161.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_26473->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_27039 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (792))) ;
          if (cond_27039.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_27039.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (795))) ;
          }
          operand_26473->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (798)) ;
        }
        const GGS_bool cond_27278 = var_cas_preservesBank ;
        if (cond_27278.isBuiltAndTrue ()) {
          var_cas_allReturnBank = GGS_bool (false) ;
        }else if (cond_27278.isBuiltAndFalse ()) {
          const GGS_bool cond_27554 = ((var_cas_returnedBankValue).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (802)))).operator_and ((var_cas_returnedBankValue).operator_isNotEqual (var_cas_returnedBank)) ;
          if (cond_27554.isBuiltAndTrue ()) {
            operand_26473->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("this routine ensures setting of bank '")).operator_concat (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (803)))).operator_concat (GGS_string ("', but "))).operator_concat (GGS_string ("previous routine(s) ensure setting of bank '"))).operator_concat (var_cas_returnedBankValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (804)))).operator_concat (GGS_string ("'.")) COMMA_SOURCE_FILE_AT_LINE (805)) ;
          }else if (cond_27554.isBuiltAndFalse ()) {
            var_cas_allPreserveBankSetting = GGS_bool (false) ;
            var_cas_returnedBankValue = var_cas_returnedBank ;
          }
        }
        const GGS_bool cond_27898 = ((GGS_routineKind::constructor_regularRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (809))).operator_isNotEqual (var_cas_inRoutineKind)).operator_and ((var_cas_isNoReturn).operator_not ()) ;
        if (cond_27898.isBuiltAndTrue ()) {
          operand_26473->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed bra from a regular routine, the '")).operator_concat (operand_26473->mValue)).operator_concat (GGS_string ("' routine should be declared without any \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }
      }
    }
    const GGS_bool cond_28026 = (var_cas_allReturnBank).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
    if (cond_28026.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBankValue ;
    }else if (cond_28026.isBuiltAndFalse ()) {
      const GGS_bool cond_28207 = ((var_cas_allReturnBank).operator_not ()).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
      if (cond_28207.isBuiltAndTrue ()) {
        operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine should either all preserve bank, eihter return the same selected bank") COMMA_SOURCE_FILE_AT_LINE (818)) ;
      }
    }
    const GGS_bool cond_28366 = (var_cas_inShouldPreserveBSR).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
    if (cond_28366.isBuiltAndTrue ()) {
      operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine(s) do(es) not preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (821)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (830)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_28763 = operand_25954->mSizeExpression ;
    if (temp_28763.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_28763.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_28763 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
    }
    const GGS_bool cond_28942 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_28942.isBuiltAndTrue ()) {
      operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (834)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    }else if (cond_28942.isBuiltAndFalse ()) {
      const GGS_bool cond_29077 = (var_cas_size).operator_strictSup (GGS_sint (128L)) ;
      if (cond_29077.isBuiltAndTrue ()) {
        operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (836)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (837)) ;
      }else if (cond_29077.isBuiltAndFalse ()) {
        const GGS_bool cond_29294 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (837))).operator_isNotEqual (operand_25954->mTargetLabels.reader_length ()) ;
        if (cond_29294.isBuiltAndTrue ()) {
          operand_25954->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_25954->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (838)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (838)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
        }
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_bra ::constructor_new (inLexique, operand_25954->mInstructionLocation, operand_25954->mTargetLabels, operand_25954->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (841))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_goto * operand_29587,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29587 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_30006 (operand_29587->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30006 = NULL ;
      while (((operand_30006 = enumerator_30006.nextObject ()))) {
        macroValidPointer (operand_30006) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_30126_0 ;
        GGS_bool automatic_var_30126_1 ;
        const GGS_routineMap  temp_30085 = var_cas_inRoutineMap ;
        if (temp_30085.isBuilt ()) {
          temp_30085 (HERE)->method_searchKey (inLexique, operand_30006->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_30126_0, automatic_var_30126_1 COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }
        const GGS_bool cond_30591 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (868)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_30591.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_30006->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_30469 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (871))) ;
          if (cond_30469.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_30469.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874))) ;
          }
          operand_30006->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (877)) ;
        }
        const GGS_bool cond_30768 = (var_cas_isNoReturn).operator_not () ;
        if (cond_30768.isBuiltAndTrue ()) {
          operand_30006->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed goto, the '")).operator_concat (operand_30006->mValue)).operator_concat (GGS_string ("' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_29587->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (886)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_29587->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (889)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_31177 = operand_29587->mSizeExpression ;
    if (temp_31177.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_31177.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_31177 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    const GGS_bool cond_31356 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_31356.isBuiltAndTrue ()) {
      operand_29587->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (893)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (894)) ;
    }else if (cond_31356.isBuiltAndFalse ()) {
      const GGS_bool cond_31489 = (var_cas_size).operator_strictSup (GGS_sint (64L)) ;
      if (cond_31489.isBuiltAndTrue ()) {
        operand_29587->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (895)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (896)) ;
      }else if (cond_31489.isBuiltAndFalse ()) {
        const GGS_bool cond_31706 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (896))).operator_isNotEqual (operand_29587->mTargetLabels.reader_length ()) ;
        if (cond_31706.isBuiltAndTrue ()) {
          operand_29587->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_29587->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (898)) ;
        }
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_goto ::constructor_new (inLexique, operand_29587->mInstructionLocation, operand_29587->mTargetLabels, operand_29587->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (900))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_rcall.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_rcall__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_rcall * operand_32001,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32001 != NULL) {
    GGS_bool var_cas_allPreserveBank = GGS_bool (true) ;
    GGS_bool var_cas_someReturnsBank = GGS_bool (false) ;
    GGS_uint  var_cas_returnedBankSelection = var_cas_ioCurrentBank ;
    {
      GGS_lstringlist::cEnumerator enumerator_32531 (operand_32001->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_32531 = NULL ;
      while (((operand_32531 = enumerator_32531.nextObject ()))) {
        macroValidPointer (operand_32531) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_32661 = var_cas_inRoutineMap ;
        if (temp_32661.isBuilt ()) {
          temp_32661 (HERE)->method_searchKey (inLexique, operand_32531->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (931)) ;
        }
        const GGS_bool cond_33190 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (932)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_33190.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_32531->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_33068 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (935))) ;
          if (cond_33068.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_33068.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
          }
          operand_32531->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (941)) ;
        }
        const GGS_bool cond_33367 = var_cas_isNoReturn ;
        if (cond_33367.isBuiltAndTrue ()) {
          operand_32531->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed rcall, the '")).operator_concat (operand_32531->mValue)).operator_concat (GGS_string ("' routine should be declared without the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (944)) ;
        }
        const GGS_bool cond_33521 = (var_cas_inShouldPreserveBSR).operator_and ((var_cas_preservesBank).operator_not ()) ;
        if (cond_33521.isBuiltAndTrue ()) {
          operand_32531->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_32531->mValue)).operator_concat (GGS_string ("' routine should preserved bank selection")) COMMA_SOURCE_FILE_AT_LINE (947)) ;
        }else if (cond_33521.isBuiltAndFalse ()) {
          const GGS_bool cond_34380 = ((var_cas_inShouldPreserveBSR).operator_not ()).operator_and ((var_cas_preservesBank).operator_not ()) ;
          if (cond_34380.isBuiltAndTrue ()) {
            const GGS_bool cond_33704 = (var_cas_someReturnsBank).operator_not () ;
            if (cond_33704.isBuiltAndTrue ()) {
              var_cas_returnedBankSelection = var_cas_returnedBank ;
              var_cas_someReturnsBank = GGS_bool (true) ;
            }else if (cond_33704.isBuiltAndFalse ()) {
              const GGS_bool cond_34364 = (var_cas_returnedBankSelection).operator_isNotEqual (var_cas_returnedBank) ;
              if (cond_34364.isBuiltAndTrue ()) {
                GGS_string var_cas_errorMessage = ((GGS_string ("the '")).operator_concat (operand_32531->mValue)).operator_concat (GGS_string ("' routine returns ")) ;
                const GGS_bool cond_33931 = (var_cas_returnedBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (953))) ;
                if (cond_33931.isBuiltAndTrue ()) {
                  var_cas_errorMessage.appendCString ("no bank selection") ;
                }else if (cond_33931.isBuiltAndFalse ()) {
                  var_cas_errorMessage.appendCString ("bank selection set to  ") ;
                  var_cas_errorMessage.dotAssign_operation (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (956))) ;
                }
                var_cas_errorMessage.appendCString (", but previous routine(s) return(s) ") ;
                const GGS_bool cond_34210 = (var_cas_returnedBankSelection).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (959))) ;
                if (cond_34210.isBuiltAndTrue ()) {
                  var_cas_errorMessage.appendCString ("no bank selection") ;
                }else if (cond_34210.isBuiltAndFalse ()) {
                  var_cas_errorMessage.appendCString ("bank selection set to  ") ;
                  var_cas_errorMessage.dotAssign_operation (var_cas_returnedBankSelection.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (962))) ;
                }
                operand_32531->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (965)) ;
              }
            }
          }else if (cond_34380.isBuiltAndFalse ()) {
            const GGS_bool cond_34436 = ((var_cas_inShouldPreserveBSR).operator_not ()).operator_and (var_cas_preservesBank) ;
            if (cond_34436.isBuiltAndTrue ()) {
            }
          }
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true) ;
    var_cas_ioCurrentBank = var_cas_returnedBankSelection ;
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_34581 = operand_32001->mSizeExpression ;
    if (temp_34581.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_34581.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_34581 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (973)) ;
      }
    }
    const GGS_bool cond_34760 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_34760.isBuiltAndTrue ()) {
      operand_32001->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (975)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (976)) ;
    }else if (cond_34760.isBuiltAndFalse ()) {
      const GGS_bool cond_34893 = (var_cas_size).operator_strictSup (GGS_sint (64L)) ;
      if (cond_34893.isBuiltAndTrue ()) {
        operand_32001->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (977)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
      }else if (cond_34893.isBuiltAndFalse ()) {
        const GGS_bool cond_35110 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (978))).operator_isNotEqual (operand_32001->mTargetLabels.reader_length ()) ;
        if (cond_35110.isBuiltAndTrue ()) {
          operand_32001->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_32001->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (979)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (979)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (980)) ;
        }
      }
    }
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (982))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (983)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_rcall ::constructor_new (inLexique, operand_32001->mInstructionLocation, operand_32001->mTargetLabels, var_cas_label0, operand_32001->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (984))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FOREVER * operand_35498,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35498 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_35498->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_35498->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1013)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1016))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35498->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1018)) COMMA_SOURCE_FILE_AT_LINE (1018))) ;
    ::routine_handleInstructionList (inLexique,  operand_35498->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    const GGS_bool cond_36891 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank) ;
    if (cond_36891.isBuiltAndTrue ()) {
      operand_35498->mEndOfInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1035)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_35498->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35498->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1037)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037))) ;
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_37267,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37267 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_37267->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_38174_0 ;
    const GGS_registerExpression  temp_38065 = operand_37267->mRegisterExpression ;
    if (temp_38065.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_38065.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_38065 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_38174_0 COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_37267->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (1072))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_38421 = operand_37267->mInstruction ;
    if (temp_38421.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_38421.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_38421 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_BitTest * operand_38827,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38827 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_39319 = operand_38827->mRegisterExpression ;
    if (temp_39319.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_39319.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39319 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_39489 = operand_38827->mBitNumber ;
    if (temp_39489.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_39489.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39489 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, operand_38827->mInstructionLocation, operand_38827->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1123))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_39800 = operand_38827->mInstruction ;
    if (temp_39800.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_39800.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39800 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_40852,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40852 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    const GGS_bool cond_41312 = var_cas_inComplementaryBranch ;
    if (cond_41312.isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (inLexique,  operand_40852->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    }else if (cond_41312.isBuiltAndFalse ()) {
      var_cas_condition = operand_40852->mCondition ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)), var_cas_condition, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1190)) COMMA_SOURCE_FILE_AT_LINE (1186))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_41724,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41724 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_41971,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41971 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    const GGS_bool cond_42428 = var_cas_inComplementaryBranch ;
    if (cond_42428.isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_41971->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    }else if (cond_42428.isBuiltAndFalse ()) {
      var_cas_comparison = operand_41971->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_42675_0 ;
    const GGS_registerExpression  temp_42566 = operand_41971->mRegisterExpression ;
    if (temp_42566.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_42566.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_42566 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_42675_0 COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1232))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_43035,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43035 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    const GGS_bool cond_43238 = var_cas_inComplementaryBranch ;
    if (cond_43238.isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_43035->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1249)) ;
    }else if (cond_43238.isBuiltAndFalse ()) {
      var_cas_comparison = operand_43035->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1253)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_incDecRegisterInCondition * operand_43502,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43502 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_44018_0 ;
    const GGS_registerExpression  temp_43909 = operand_43502->mRegisterExpression ;
    if (temp_43909.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_43909.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_43909 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_44018_0 COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_43502->mIncrement, operand_43502->m_W_isDestination, (operand_43502->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1278))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_44440,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44440 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerTestCondition * operand_44681,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44681 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_45197_0 ;
    const GGS_registerExpression  temp_45088 = operand_44681->mRegisterExpression ;
    if (temp_45088.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_45088.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_45088 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_45197_0 COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_44681->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1320))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_45569,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45569 != NULL) {
    const GGS_bool cond_45718 = (operand_45569->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch) ;
    if (cond_45718.isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (3U) ;
    }else if (cond_45718.isBuiltAndFalse ()) {
      var_cas_outInstructionCount = GGS_uint (2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_45896,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45896 != NULL) {
    const GGS_conditionExpression  temp_46246 = operand_45896->mCondition ;
    if (temp_46246.isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_46246.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_46246 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch).operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_46619,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46619 != NULL) {
    const GGS_conditionExpression  temp_46732 = operand_46619->mCondition ;
    if (temp_46732.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_46732.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_46732 (HERE), (var_cas_inComplementaryBranch).operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1374)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_46927,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46927 != NULL) {
    const GGS_bool cond_47844 = var_cas_inComplementaryBranch ;
    if (cond_47844.isBuiltAndTrue ()) {
      const GGS_conditionExpression  temp_47316 = operand_46927->mLeftExpression ;
      if (temp_47316.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47316.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47316 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1394)) ;
        }
      }
      const GGS_conditionExpression  temp_47604 = operand_46927->mRightExpression ;
      if (temp_47604.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47604.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47604 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1405)) ;
        }
      }
    }else if (cond_47844.isBuiltAndFalse ()) {
      GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)) ;
      const GGS_conditionExpression  temp_47984 = operand_46927->mLeftExpression ;
      if (temp_47984.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47984.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47984 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1418)) ;
        }
      }
      const GGS_conditionExpression  temp_48265 = operand_46927->mRightExpression ;
      if (temp_48265.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_48265.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_48265 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1429)) ;
        }
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1440)) COMMA_SOURCE_FILE_AT_LINE (1440))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_48755,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48755 != NULL) {
    GGS_uint  var_cas_countLeft ;
    const GGS_conditionExpression  temp_48893 = operand_48755->mLeftExpression ;
    if (temp_48893.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_48893.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_48893 (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1451)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    const GGS_conditionExpression  temp_49017 = operand_48755->mLeftExpression ;
    if (temp_49017.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_49017.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49017 (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft.add_operation (inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_49271,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49271 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_49711 = operand_49271->mRegisterExpression ;
    if (temp_49711.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_49711.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49711 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1478)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_49881 = operand_49271->mBitNumber ;
    if (temp_49881.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_49881.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49881 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, var_cas_inInstructionLocation, (operand_49271->mBTFSSinstruction).operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1490))) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1496)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1496)) COMMA_SOURCE_FILE_AT_LINE (1496))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_50439,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50439 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_structured_if * operand_50676,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50676 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition = GGS_bool (false) ;
    const GGS_bool cond_52013 = gOption_piccolo_5F_options_performOptimizations.reader_value () ;
    if (cond_52013.isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      const GGS_conditionExpression  temp_51259 = operand_50676->mIfCondition ;
      if (temp_51259.isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_51259.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_51259 (HERE), GGS_bool (true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1526)) ;
        }
      }
      const GGS_bool cond_51358 = (operand_50676->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_51358.isBuiltAndTrue ()) {
        var_cas_directCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1528)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      const GGS_conditionExpression  temp_51444 = operand_50676->mIfCondition ;
      if (temp_51444.isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_51444.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_51444 (HERE), GGS_bool (false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1530)) ;
        }
      }
      const GGS_bool cond_51558 = (operand_50676->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_51558.isBuiltAndTrue ()) {
        var_cas_complementaryCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) ;
      }
      const GGS_bool cond_52002 = (var_cas_complementaryCount).operator_strictInf (var_cas_directCount) ;
      if (cond_52002.isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1536))) ;
        var_cas_ioListFileContents.appendCString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1537)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1537))) ;
        var_cas_ioListFileContents.appendCString (" instruction") ;
        const GGS_bool cond_51953 = (var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1538))).operator_strictSup (GGS_uint (1U)) ;
        if (cond_51953.isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("s") ;
        }
        var_cas_ioListFileContents.appendCString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    const GGS_bool cond_54057 = var_cas_generateComplementaryCondition ;
    if (cond_54057.isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1550))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) ;
      const GGS_conditionExpression  temp_52509 = operand_50676->mIfCondition ;
      if (temp_52509.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_52509.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_52509 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_50676->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1553)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50676->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1565)) ;
      const GGS_bool cond_53385 = (operand_50676->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_53385.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50676->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1581)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)) COMMA_SOURCE_FILE_AT_LINE (1581))) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1583)) COMMA_SOURCE_FILE_AT_LINE (1583))) ;
      ::routine_handleInstructionList (inLexique,  operand_50676->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1584)) ;
      const GGS_bool cond_54045 = (operand_50676->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_54045.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1599)) COMMA_SOURCE_FILE_AT_LINE (1599))) ;
      }
    }else if (cond_54057.isBuiltAndFalse ()) {
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      const GGS_conditionExpression  temp_54345 = operand_50676->mIfCondition ;
      if (temp_54345.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_54345.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_54345 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_50676->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50676->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1618)) ;
      const GGS_bool cond_55220 = (operand_50676->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_55220.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50676->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1634)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1634)) COMMA_SOURCE_FILE_AT_LINE (1634))) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1636)) COMMA_SOURCE_FILE_AT_LINE (1636))) ;
      ::routine_handleInstructionList (inLexique,  operand_50676->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1637)) ;
      const GGS_bool cond_55878 = (operand_50676->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_55878.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50676->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1652)) COMMA_SOURCE_FILE_AT_LINE (1652))) ;
      }
    }
    const GGS_bool cond_55997 = (var_cas_elseBranchFinalBank).operator_isEqual (var_cas_thenBranchFinalBank) ;
    if (cond_55997.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else if (cond_55997.isBuiltAndFalse ()) {
      operand_50676->mEndOfElsePartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1659)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1659)) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence).operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_do_while * operand_56390,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56390 != NULL) {
    GGS_string var_cas_labelInstructionBegin = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1681))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1681)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56390->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1683)) COMMA_SOURCE_FILE_AT_LINE (1683))) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_56390->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1686)) ;
    const GGS_bool cond_57521 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank) ;
    if (cond_57521.isBuiltAndTrue ()) {
      operand_56390->mEndOfRepeatedInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1702)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_57568 (operand_56390->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_57568 = NULL ;
      while (((operand_57568 = enumerator_57568.nextObject ()))) {
        macroValidPointer (operand_57568) ;
        const GGS_bool cond_57935 = (operand_57568->mInstructionList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_57935.isBuiltAndTrue ()) {
          const GGS_conditionExpression  temp_57665 = operand_57568->mCondition ;
          if (temp_57665.isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_57665.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_57665 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_56390->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1706)) ;
            }
          }
        }else if (cond_57935.isBuiltAndFalse ()) {
          GGS_string var_cas_nextBranchLabel = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1718))) ;
          var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1718)) ;
          const GGS_conditionExpression  temp_58083 = operand_57568->mCondition ;
          if (temp_58083.isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_58083.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_58083 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_56390->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1719)) ;
            }
          }
          GGS_uint  var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (inLexique,  operand_57568->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1731)) ;
          const GGS_bool cond_58859 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_bank) ;
          if (cond_58859.isBuiltAndTrue ()) {
            operand_57568->mEndOfPartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1747)) ;
          }
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_56390->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56390->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1748)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)) COMMA_SOURCE_FILE_AT_LINE (1748))) ;
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_nextBranchLabel, operand_56390->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1749)) COMMA_SOURCE_FILE_AT_LINE (1749))) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_IncDec * operand_59322,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59322 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    const GGS_bool cond_59833 = (operand_59322->mIncrement).operator_and (operand_59322->mSkipIfZero) ;
    if (cond_59833.isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1772)) ;
    }else if (cond_59833.isBuiltAndFalse ()) {
      const GGS_bool cond_59929 = (operand_59322->mIncrement).operator_and ((operand_59322->mSkipIfZero).operator_not ()) ;
      if (cond_59929.isBuiltAndTrue ()) {
        var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1774)) ;
      }else if (cond_59929.isBuiltAndFalse ()) {
        const GGS_bool cond_60026 = ((operand_59322->mIncrement).operator_not ()).operator_and (operand_59322->mSkipIfZero) ;
        if (cond_60026.isBuiltAndTrue ()) {
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)) ;
        }else if (cond_60026.isBuiltAndFalse ()) {
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)) ;
        }
      }
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_60295_0 ;
    const GGS_registerExpression  temp_60186 = operand_59322->mRegisterExpression ;
    if (temp_60186.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_60186.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_60186 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_60295_0 COMMA_SOURCE_FILE_AT_LINE (1782)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_59322->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_59322->m_W_isDestination COMMA_SOURCE_FILE_AT_LINE (1790))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_60573 = operand_59322->mInstruction ;
    if (temp_60573.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_60573.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_60573 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1798)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "build_ipic18_assembly_instruction_list"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_assembly_instruction_list (C_Compiler & inLexique,
                                const GGS_programKind  var_cas_inProgramKind,
                                const GGS_sint   var_cas_inROMSize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForBootloaderImplementation,
                                const GGS_luint   var_cas_inBootloaderReservedROMsize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForUserProgramImplementation,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic18_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_assembly_instruction_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages = GGS_string ("") ;
  GGS_routineMap  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_61853 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_61853 = NULL ;
    while (((operand_61853 = enumerator_61853.nextObject ()))) {
      macroValidPointer (operand_61853) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_61853->mRoutineName, operand_61853->mIsNoReturn, operand_61853->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)), operand_61853->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)), operand_61853->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1835)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62063 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62063 = NULL ;
    while (((operand_62063 = enumerator_62063.nextObject ()))) {
      macroValidPointer (operand_62063) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62063->mRoutineName, operand_62063->mIsNoReturn, operand_62063->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)), operand_62063->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)), operand_62063->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_62212 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1840)), true) ;
    const GGS_routineDefinitionList::cElement * operand_62212 = NULL ;
    while (((operand_62212 = enumerator_62212.nextObject ()))) {
      macroValidPointer (operand_62212) ;
      const GGS_bool cond_62426 = ((operand_62212->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1841))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1841)))).operator_and ((operand_62212->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1841))).operator_strictSup (GGS_uint (15U))) ;
      if (cond_62426.isBuiltAndTrue ()) {
        operand_62212->mRequiredBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      }
      const GGS_bool cond_62604 = ((operand_62212->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1844)))).operator_and ((operand_62212->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_strictSup (GGS_uint (15U))) ;
      if (cond_62604.isBuiltAndTrue ()) {
        operand_62212->mReturnedBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1846)) ;
      }
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62212->mRoutineName, operand_62212->mIsNoReturn, operand_62212->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1847)), operand_62212->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1847)), operand_62212->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1847)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62963 (var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62963 = NULL ;
    while (((operand_62963 = enumerator_62963.nextObject ()))) {
      macroValidPointer (operand_62963) ;
      const GGS_bool cond_63590 = var_cas_routineMap.reader_hasKey (operand_62963->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1852))) ;
      if (cond_63590.isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_63156 = var_cas_routineMap ;
        if (temp_63156.isBuilt ()) {
          temp_63156 (HERE)->method_searchKey (inLexique, operand_62963->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1857)) ;
        }
        const GGS_bool cond_63576 = ((((var_cas_isNoReturn).operator_isNotEqual (operand_62963->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_62963->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1858))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_62963->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1858))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_62963->mPreservesBank)) ;
        if (cond_63576.isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_62963->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1859)) COMMA_SOURCE_FILE_AT_LINE (1859)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_62963->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1860)) ;
        }
      }else if (cond_63590.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_62963->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      }
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_63956 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_63956 = NULL ;
    while (((operand_63956 = enumerator_63956.nextObject ()))) {
      macroValidPointer (operand_63956) ;
      const GGS_bool cond_64583 = var_cas_routineMap.reader_hasKey (operand_63956->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1868))) ;
      if (cond_64583.isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_64149 = var_cas_routineMap ;
        if (temp_64149.isBuilt ()) {
          temp_64149 (HERE)->method_searchKey (inLexique, operand_63956->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1873)) ;
        }
        const GGS_bool cond_64569 = ((((var_cas_isNoReturn).operator_isNotEqual (operand_63956->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_63956->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_63956->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_63956->mPreservesBank)) ;
        if (cond_64569.isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_63956->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)) COMMA_SOURCE_FILE_AT_LINE (1875)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_63956->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1876)) ;
        }
      }else if (cond_64583.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_63956->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1879)) ;
      }
    }
  }
  GGS_constantMap  var_cas_constantMap = GGS_constantMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1882)) ;
  GGS_lstring  var_cas_romSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("ROM_SIZE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1884)) ;
  var_cas_constantMap.modifier_insertKey (inLexique, var_cas_romSizeString, var_cas_inROMSize COMMA_SOURCE_FILE_AT_LINE (1885)) ;
  const GGS_bool cond_65227 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_regularProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1887))) ;
  if (cond_65227.isBuiltAndTrue ()) {
    GGS_lstring  var_cas_bootloaderSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("BOOTLOADER_SIZE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1888)) ;
    var_cas_constantMap.modifier_insertKey (inLexique, var_cas_bootloaderSizeString, var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)) COMMA_SOURCE_FILE_AT_LINE (1889)) ;
  }
  {
    GGS_constantDefinitionList::cEnumerator enumerator_65272 (var_cas_inPiccoloModel.reader_mConstantDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1892)), true) ;
    const GGS_constantDefinitionList::cElement * operand_65272 = NULL ;
    while (((operand_65272 = enumerator_65272.nextObject ()))) {
      macroValidPointer (operand_65272) ;
      GGS_sint  var_cas_result ;
      const GGS_immediatExpression  temp_65351 = operand_65272->mExpression ;
      if (temp_65351.isBuilt ()) {
        typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_65351.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_65351 (HERE), var_cas_inRegisterTable, var_cas_constantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1893)) ;
        }
      }
      const GGS_bool cond_65573 = var_cas_inRegisterTable.reader_hasKey (operand_65272->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1894))) ;
      if (cond_65573.isBuiltAndTrue ()) {
        operand_65272->mConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (operand_65272->mConstantName)).operator_concat (GGS_string ("' is already declared as ram register or special register")) COMMA_SOURCE_FILE_AT_LINE (1896)) ;
      }else if (cond_65573.isBuiltAndFalse ()) {
        var_cas_constantMap.modifier_insertKey (inLexique, operand_65272->mConstantName, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1897)) ;
      }
    }
  }
  const GGS_bool cond_65858 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_65858.isBuiltAndTrue ()) {
    ::routine_print_constant_definition (inLexique,  var_cas_constantMap,  var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1902)) ;
  }
  const GGS_bool cond_66630 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1908))) ;
  if (cond_66630.isBuiltAndTrue ()) {
    const GGS_bool cond_66515 = var_cas_routineMap.reader_hasKey (GGS_string ("main")) ;
    if (cond_66515.isBuiltAndTrue ()) {
      GGS_bool var_cas_isNoReturn ;
      GGS_uint  var_cas_requiredBank ;
      GGS_uint  automatic_var_66171_0 ;
      GGS_bool automatic_var_66171_1 ;
      const GGS_routineMap  temp_66108 = var_cas_routineMap ;
      if (temp_66108.isBuilt ()) {
        temp_66108 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1912)), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_66171_0, automatic_var_66171_1 COMMA_SOURCE_FILE_AT_LINE (1912)) ;
      }
      const GGS_bool cond_66330 = (var_cas_isNoReturn).operator_not () ;
      if (cond_66330.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1915)) ;
      }
      const GGS_bool cond_66501 = (var_cas_requiredBank).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_66501.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      }
    }else if (cond_66515.isBuiltAndFalse ()) {
      var_cas_inPiccoloModel.reader_mEndOfProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1920)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (1921)) ;
    }
  }
  var_cas_outGeneratedInstructionList = GGS_ipic18_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_entryPoint = GGS_uint (4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_66891 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_66891 = NULL ;
    while (((operand_66891 = enumerator_66891.nextObject ()))) {
      macroValidPointer (operand_66891) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1927))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_66891->mRoutineName COMMA_SOURCE_FILE_AT_LINE (1928))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1929)) ;
      const GGS_bool cond_67147 = (var_cas_entryPoint).operator_isEqual (GGS_uint (8U)) ;
      if (cond_67147.isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (12U) ;
      }else if (cond_67147.isBuiltAndFalse ()) {
        const GGS_bool cond_67206 = (var_cas_entryPoint).operator_isEqual (GGS_uint (24U)) ;
        if (cond_67206.isBuiltAndTrue ()) {
          var_cas_entryPoint = GGS_uint (28U) ;
        }
      }
    }
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1937)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_67433 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_67433 = NULL ;
    while (((operand_67433 = enumerator_67433.nextObject ()))) {
      macroValidPointer (operand_67433) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1939))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_67433->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1940)) COMMA_SOURCE_FILE_AT_LINE (1940))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1941)) ;
    }
  }
  const GGS_bool cond_68000 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1944))) ;
  if (cond_68000.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1945))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1946)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1946)) COMMA_SOURCE_FILE_AT_LINE (1946))) ;
  }
  GGS_routineDeclarationList  var_cas_tempBootloaderRoutineDeclarationList = var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation ;
  const GGS_bool cond_68581 = (var_cas_tempBootloaderRoutineDeclarationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_68581.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1951))) ;
    GGS_lstring  var_cas_routineName ;
    GGS_luint  automatic_var_68462_0 ;
    GGS_luint  automatic_var_68462_1 ;
    GGS_bool automatic_var_68462_2 ;
    GGS_bool automatic_var_68462_3 ;
    var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_68462_0, automatic_var_68462_1, automatic_var_68462_2, automatic_var_68462_3 COMMA_SOURCE_FILE_AT_LINE (1953)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1954)) COMMA_SOURCE_FILE_AT_LINE (1954))) ;
  }
  const GGS_bool cond_68942 = var_cas_inHasHighInterrupt ;
  if (cond_68942.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (1958))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1959)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1959)) COMMA_SOURCE_FILE_AT_LINE (1959))) ;
  }
  var_cas_entryPoint = GGS_uint (12U) ;
  GGS_uint _variant_69557 = var_cas_tempBootloaderRoutineDeclarationList.reader_length () ;
  GGS_bool _condition_69557 (_variant_69557.isBuilt (), true) ;
  while (_condition_69557.isBuiltAndTrue ()) {
    _condition_69557 = ((var_cas_tempBootloaderRoutineDeclarationList.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_entryPoint).operator_strictInf (GGS_uint (24U))) ;
    if (_condition_69557.isBuiltAndTrue ()) {
      if (_variant_69557.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1971)) ;
        _condition_69557 = GGS_bool (false) ;
      }else{
        _variant_69557.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1966))) ;
        GGS_lstring  var_cas_routineName ;
        GGS_luint  automatic_var_69401_0 ;
        GGS_luint  automatic_var_69401_1 ;
        GGS_bool automatic_var_69401_2 ;
        GGS_bool automatic_var_69401_3 ;
        var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_69401_0, automatic_var_69401_1, automatic_var_69401_2, automatic_var_69401_3 COMMA_SOURCE_FILE_AT_LINE (1968)) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)) COMMA_SOURCE_FILE_AT_LINE (1969))) ;
        var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1970)) ;
      }
    }
  }
  const GGS_bool cond_69877 = var_cas_inHasLowInterrupt ;
  if (cond_69877.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (24U) COMMA_SOURCE_FILE_AT_LINE (1974))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1975)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1975)) COMMA_SOURCE_FILE_AT_LINE (1975))) ;
  }
  var_cas_entryPoint = GGS_uint (28U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_70042 (var_cas_tempBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_70042 = NULL ;
    while (((operand_70042 = enumerator_70042.nextObject ()))) {
      macroValidPointer (operand_70042) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1980))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_70042->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1981)) COMMA_SOURCE_FILE_AT_LINE (1981))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1982)) ;
    }
  }
  GGS_uint  var_cas_localLabelIndex = GGS_uint (0U) ;
  const GGS_bool cond_71473 = var_cas_inHasLowInterrupt ;
  if (cond_71473.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1987)) COMMA_SOURCE_FILE_AT_LINE (1987))) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_70533 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1988)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_70533 = NULL ;
      while (((operand_70533 = enumerator_70533.nextObject ()))) {
        macroValidPointer (operand_70533) ;
        const GGS_bool cond_71444 = (operand_70533->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1989))).operator_isEqual (GGS_string ("low")) ;
        if (cond_71444.isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1991)) ;
          ::routine_handleInstructionList (inLexique,  operand_70533->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_70533->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)) COMMA_SOURCE_FILE_AT_LINE (1992)) ;
          const GGS_bool cond_71295 = (var_cas_continuesInSequence).operator_not () ;
          if (cond_71295.isBuiltAndTrue ()) {
            operand_70533->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2008)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), operand_70533->mFastReturn COMMA_SOURCE_FILE_AT_LINE (2010))) ;
        }
      }
    }
  }
  const GGS_bool cond_72631 = var_cas_inHasHighInterrupt ;
  if (cond_72631.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2016)) COMMA_SOURCE_FILE_AT_LINE (2016))) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_71700 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2017)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_71700 = NULL ;
      while (((operand_71700 = enumerator_71700.nextObject ()))) {
        macroValidPointer (operand_71700) ;
        const GGS_bool cond_72602 = (operand_71700->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2018))).operator_isEqual (GGS_string ("high")) ;
        if (cond_72602.isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2020)) ;
          ::routine_handleInstructionList (inLexique,  operand_71700->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_71700->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)) COMMA_SOURCE_FILE_AT_LINE (2021)) ;
          const GGS_bool cond_72464 = (var_cas_continuesInSequence).operator_not () ;
          if (cond_72464.isBuiltAndTrue ()) {
            operand_71700->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2037)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2039))) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_72711 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2044)), true) ;
    const GGS_routineDefinitionList::cElement * operand_72711 = NULL ;
    while (((operand_72711 = enumerator_72711.nextObject ()))) {
      macroValidPointer (operand_72711) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank = operand_72711->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      GGS_routineKind var_cas_routineKind ;
      const GGS_bool cond_72950 = operand_72711->mIsNoReturn ;
      if (cond_72950.isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2049)) ;
      }else if (cond_72950.isBuiltAndFalse ()) {
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2051)) ;
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_72711->mRoutineName COMMA_SOURCE_FILE_AT_LINE (2053))) ;
      ::routine_handleInstructionList (inLexique,  operand_72711->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_72711->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (2054)) ;
      const GGS_bool cond_73637 = (((operand_72711->mIsNoReturn).operator_not ()).operator_and ((operand_72711->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2068))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2068))))).operator_and ((var_cas_currentBank).operator_isNotEqual (operand_72711->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2068)))) ;
      if (cond_73637.isBuiltAndTrue ()) {
        operand_72711->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("execution will not set BSR to ")).operator_concat (operand_72711->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2069)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2069))) COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      }
      const GGS_bool cond_73786 = (operand_72711->mIsNoReturn).operator_and (var_cas_continuesInSequence) ;
      if (cond_73786.isBuiltAndTrue ()) {
        operand_72711->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      }
      const GGS_bool cond_73986 = (operand_72711->mIsNoReturn).operator_not () ;
      if (cond_73986.isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, operand_72711->mRoutineName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2076)) COMMA_SOURCE_FILE_AT_LINE (2076))) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("WREG"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2081)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2081)) COMMA_SOURCE_FILE_AT_LINE (2081)) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_74435_0 ;
  const GGS_registerExpression  temp_74318 = var_cas_WREGregister ;
  if (temp_74318.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74318.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74318 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_74435_0 COMMA_SOURCE_FILE_AT_LINE (2083)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSL"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2091)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2091)) COMMA_SOURCE_FILE_AT_LINE (2091)) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_74772_0 ;
  const GGS_registerExpression  temp_74655 = var_cas_TOSLregister ;
  if (temp_74655.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74655.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74655 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_74772_0 COMMA_SOURCE_FILE_AT_LINE (2093)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSH"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2101)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2101)) COMMA_SOURCE_FILE_AT_LINE (2101)) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_75109_0 ;
  const GGS_registerExpression  temp_74992 = var_cas_TOSHregister ;
  if (temp_74992.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74992.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74992 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_75109_0 COMMA_SOURCE_FILE_AT_LINE (2103)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSU"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2111)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2111)) COMMA_SOURCE_FILE_AT_LINE (2111)) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_75446_0 ;
  const GGS_registerExpression  temp_75329 = var_cas_TOSUregister ;
  if (temp_75329.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_75329.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_75329 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_75446_0 COMMA_SOURCE_FILE_AT_LINE (2113)) ;
    }
  }
  const GGS_bool cond_75834 = var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2121)) ;
  if (cond_75834.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2122)) COMMA_SOURCE_FILE_AT_LINE (2122))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2125)), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2123))) ;
  }
  const GGS_bool cond_75997 = var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2130)) ;
  if (cond_75997.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2131)) COMMA_SOURCE_FILE_AT_LINE (2131))) ;
  }
  const GGS_bool cond_77124 = (var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2133))).operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2133))) ;
  if (cond_77124.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2136)), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2134))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2142)), var_cas_TOSL_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2140))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, GGS_location (inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_SOURCE_FILE_AT_LINE (2148)), GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (2146))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_SOURCE_FILE_AT_LINE (2153)), var_cas_TOSH_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2151))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_SOURCE_FILE_AT_LINE (2159)), var_cas_TOSU_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2157))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2163))) ;
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2168)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_77313 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_77313 = NULL ;
    while (((operand_77313 = enumerator_77313.nextObject ()))) {
      macroValidPointer (operand_77313) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (2170))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_77313->mRoutineName COMMA_SOURCE_FILE_AT_LINE (2171))) ;
      const GGS_bool cond_77614 = operand_77313->mIsNoReturn ;
      if (cond_77614.isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_77313->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (2173)) COMMA_SOURCE_FILE_AT_LINE (2173))) ;
      }else if (cond_77614.isBuiltAndFalse ()) {
        const GGS_bool cond_77756 = (operand_77313->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2174))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2174))) ;
        if (cond_77756.isBuiltAndTrue ()) {
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, GGS_location (inLexique), operand_77313->mReturnedBank COMMA_SOURCE_FILE_AT_LINE (2175))) ;
        }
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2177))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (2178)) ;
    }
  }
  const GGS_bool cond_79047 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_79047.isBuiltAndTrue ()) {
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("*") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (GGS_uint (77U), GGS_char (TO_UNICODE (' ')))) ;
    var_cas_ioListFileContents.appendCString ("*\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n"
      "\n") ;
    const GGS_bool cond_78459 = (var_cas_generationOptimizationMessages.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_78459.isBuiltAndTrue ()) {
      var_cas_ioListFileContents.appendCString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.appendCString ("\n") ;
    }
    var_cas_ioListFileContents.appendCString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
    {
      GGS_ipic18_instructionList::cEnumerator enumerator_78618 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic18_instructionList::cElement * operand_78618 = NULL ;
      while (((operand_78618 = enumerator_78618.nextObject ()))) {
        macroValidPointer (operand_78618) ;
        const GGS_ipic18_instruction  temp_78659 = operand_78618->mInstruction ;
        if (temp_78659.isBuilt ()) {
          temp_78659 (HERE)->method_setCurrentAddress (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2194)) ;
        }
        var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2195)).reader_stringByLeftPadding (GGS_uint (5U), GGS_char (TO_UNICODE (' ')))) ;
        var_cas_ioListFileContents.appendCString (": ") ;
        const GGS_ipic18_instruction  temp_78802 = operand_78618->mInstruction ;
        if (temp_78802.isBuilt ()) {
          temp_78802 (HERE)->method_displayIPICinstruction (inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2196)) ;
        }
        var_cas_ioListFileContents.appendCString ("\n") ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2198)) ;
      }
    }
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2201))) ;
    var_cas_ioListFileContents.appendCString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_assembly_instruction_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_pic18_checkingAndBuildIPIC (void) {
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_rcall__buildIPICinstructionList, gClassInfoFor__instruction_computed_rcall.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_pic18_checkingAndBuildIPIC (void) {
  gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.free () ;
  gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.free () ;
  gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_pic18_checkingAndBuildIPIC (prologueRoutineFor_pic18_checkingAndBuildIPIC, epilogueRoutineFor_pic18_checkingAndBuildIPIC) ;

//---------------------------------------------------------------------------*

