//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'pic18_checkingAndBuildIPIC.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      december 6th, 2008, at 15h5'7"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_checkingAndBuildIPIC.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_checkingAndBuildIPIC.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableFor__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableFor__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & _inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_1728 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_1728 = NULL ;
    while (((operand_1728 = enumerator_1728.nextObject ()))) {
      macroValidPointer (operand_1728) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_1728->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (50)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_1936 = operand_1728->mInstruction ;
      if (_temp_1936._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_1936._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_1936 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_nobanksel * operand_2379,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2379 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_2379->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"nobank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_savebank * operand_3159,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3159 != NULL) {
    GGS_registerExpression  var_cas_BSRregister ;
    var_cas_BSRregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "BSR"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_BSR_IPICregisterDescription ;
    const GGS_registerExpression  _temp_3780 = var_cas_BSRregister ;
    if (_temp_3780._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_3780._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3780 (HERE), var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_save_IPICregisterDescription ;
    const GGS_registerExpression  _temp_4009 = operand_3159->mRegister ;
    if (_temp_4009._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_4009._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4009 (HERE), var_cas_inRegisterTable, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_3159->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_3159->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (true, false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (126)) ;
    if (((var_cas_ioContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
      operand_3159->mEndOfSaveBankInstruction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_3159->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_banksel * operand_5186,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5186 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_5186->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    if (((operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (169)))._operator_strictSup (GGS_uint (true, 15U))).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "selected bank index should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (171)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }else if (((operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)))._operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "useless instruction: the bank "))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (173))))._operator_concat (GGS_string (true, " is already selected")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
    }else{
      var_cas_ioCurrentBank = operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (_inLexique, operand_5186->mInstructionLocation, operand_5186->mBankIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_6381,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6381 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_6882 = operand_6381->mRegisterExpression ;
    if (_temp_6882._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_6882._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6882 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, operand_6381->mInstructionLocation, operand_6381->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_6381->m_W_isDestination COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_7298,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7298 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_7799 = operand_7298->mRegisterExpression ;
    if (_temp_7799._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_7799._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7799 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (_inLexique, operand_7298->mInstructionLocation, operand_7298->mFAinstruction, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8182,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8182 != NULL) {
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_sourceIPICregisterDescription ;
    const GGS_registerExpression  _temp_8742 = operand_8182->mSourceRegisterName ;
    if (_temp_8742._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_8742._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8742 (HERE), var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_destinationIPICregisterDescription ;
    const GGS_registerExpression  _temp_8949 = operand_8182->mDestinationRegisterName ;
    if (_temp_8949._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_8949._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8949 (HERE), var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_8182->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_9315,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9315 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_9849 = operand_9315->mRegisterExpression ;
    if (_temp_9849._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_9849._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9849 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_10019 = operand_9315->mBitNumber ;
    if (_temp_10019._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_10019._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10019 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FBA ::constructor_new (_inLexique, operand_9315->mInstructionLocation, operand_9315->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_10345,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10345 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  _temp_10896 = var_cas_inRoutineMap ;
    if (_temp_10896._isBuilt ()) {
      _temp_10896 (HERE)->method_searchKey (_inLexique, operand_10345->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_10345->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
      }
      operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (344)) ;
    }
    if (((var_cas_preservesBank)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
      if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
        operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the routine call should preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JSR ::constructor_new (_inLexique, operand_10345->mInstructionLocation, operand_10345->mTargetLabel, operand_10345->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_12008,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12008 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_2 ;
    GGS_bool automatic_var_3 ;
    const GGS_routineMap  _temp_12512 = var_cas_inRoutineMap ;
    if (_temp_12512._isBuilt ()) {
      _temp_12512 (HERE)->method_searchKey (_inLexique, operand_12008->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_12008->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (379))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))) ;
      }
      operand_12008->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (387)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_12008->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_12008->mInstructionLocation, operand_12008->mTargetLabel, operand_12008->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_13437,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13437 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_4 ;
    GGS_bool automatic_var_5 ;
    const GGS_routineMap  _temp_13930 = var_cas_inRoutineMap ;
    if (_temp_13930._isBuilt ()) {
      _temp_13930 (HERE)->method_searchKey (_inLexique, operand_13437->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_13437->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (420))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (425))) ;
      }
      operand_13437->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (428)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_13437->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    if ((operand_13437->mIsBcc).isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }else{
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (_inLexique, operand_13437->mInstructionLocation, var_cas_mode, operand_13437->mConditionalBranch, operand_13437->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_15023,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15023 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_CLRWDT ::constructor_new (_inLexique, operand_15023->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_15680,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15680 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_DAW ::constructor_new (_inLexique, operand_15680->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_16334,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16334 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_NOP ::constructor_new (_inLexique, operand_16334->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_16988,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16988 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_POP ::constructor_new (_inLexique, operand_16988->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_17643,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17643 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_PUSH ::constructor_new (_inLexique, operand_17643->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_18300,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18300 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RESET ::constructor_new (_inLexique, operand_18300->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_18958,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18958 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_SLEEP ::constructor_new (_inLexique, operand_18958->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_19627,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19627 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_20088 = operand_19627->mImmediatExpression ;
    if (_temp_20088._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_20088._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20088 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (602)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_19627->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (605))))._operator_concat (GGS_string (true, " (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (_inLexique, operand_19627->mInstructionLocation, operand_19627->mLiteralInstruction, (var_cas_result)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_20621,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20621 != NULL) {
    if (((operand_20621->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (630)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_20621->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_20621->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (631)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (631))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_21243 = operand_20621->mImmediatExpression ;
    if (_temp_21243._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_21243._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21243 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 4095L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 0L)))).isBuiltAndTrue ()) {
      operand_20621->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (637))))._operator_concat (GGS_string (true, " (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_LFSR ::constructor_new (_inLexique, operand_20621->mInstructionLocation, operand_20621->mFSRindex, var_cas_result.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_21730,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21730 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_TBLRD ::constructor_new (_inLexique, operand_21730->mInstructionLocation, operand_21730->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_22401,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22401 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_TBLWT ::constructor_new (_inLexique, operand_22401->mInstructionLocation, operand_22401->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_23081,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23081 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (708)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_23880 = operand_23081->mSizeExpression ;
    if (_temp_23880._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_23880._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23880 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (714))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (716))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))._operator_isNotEqual (operand_23081->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the constant list length ("))._operator_concat (operand_23081->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (718))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (718))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    GGS_uintlist  var_cas_literalValues ;
    var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_24515 (operand_23081->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_24515 = NULL ;
      while (((operand_24515 = enumerator_24515.nextObject ()))) {
        macroValidPointer (operand_24515) ;
        GGS_sint  var_cas_v ;
        const GGS_immediatExpression  _temp_24555 = operand_24515->mExpression ;
        if (_temp_24555._isBuilt ()) {
          typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_24555._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_24555 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_v COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
        }
        if ((((var_cas_v)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_v)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "immediate value with index "))._operator_concat (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725))))._operator_concat (GGS_string (true, " is evaluated as ")))._operator_concat (var_cas_v.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725))))._operator_concat (GGS_string (true, " (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
        var_cas_literalValues._addAssign_operation ((var_cas_v)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_retlw ::constructor_new (_inLexique, operand_23081->mInstructionLocation, var_cas_literalValues, operand_23081->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_25126,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25126 != NULL) {
    if (((operand_25126->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (753)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_25126->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MNOP ::constructor_new (_inLexique, operand_25126->mInstructionLocation, operand_25126->mOccurrenceFactor COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_25955,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25955 != NULL) {
    GGS_bool var_cas_allPreserveBankSetting ;
    var_cas_allPreserveBankSetting = GGS_bool (true, true) ;
    GGS_bool var_cas_allReturnBank ;
    var_cas_allReturnBank = GGS_bool (true, true) ;
    GGS_uint  var_cas_returnedBankValue ;
    var_cas_returnedBankValue = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26474 (operand_25955->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26474 = NULL ;
      while (((operand_26474 = enumerator_26474.nextObject ()))) {
        macroValidPointer (operand_26474) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  _temp_26604 = var_cas_inRoutineMap ;
        if (_temp_26604._isBuilt ()) {
          _temp_26604 (HERE)->method_searchKey (_inLexique, operand_26474->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (787)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_26474->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (795))) ;
          }
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (798)) ;
        }
        if ((var_cas_preservesBank).isBuiltAndTrue ()) {
          var_cas_allReturnBank = GGS_bool (true, false) ;
        }else if ((((var_cas_returnedBankValue)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_returnedBankValue)._operator_isNotEqual (var_cas_returnedBank))).isBuiltAndTrue ()) {
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((((GGS_string (true, "this routine ensures setting of bank '"))._operator_concat (var_cas_returnedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (803))))._operator_concat (GGS_string (true, "', but ")))._operator_concat (GGS_string (true, "previous routine(s) ensure setting of bank '")))._operator_concat (var_cas_returnedBankValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (804))))._operator_concat (GGS_string (true, "'.")) COMMA_SOURCE_FILE_AT_LINE (805)) ;
        }else{
          var_cas_allPreserveBankSetting = GGS_bool (true, false) ;
          var_cas_returnedBankValue = var_cas_returnedBank ;
        }
        if ((((GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE))._operator_isNotEqual (var_cas_inRoutineKind))._operator_and ((var_cas_isNoReturn)._operator_not ())).isBuiltAndTrue ()) {
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra from a regular routine, the '"))._operator_concat (operand_26474->mValue))._operator_concat (GGS_string (true, "' routine should be declared without any \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }
      }
    }
    if (((var_cas_allReturnBank)._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBankValue ;
    }else if ((((var_cas_allReturnBank)._operator_not ())._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "invoked routine should either all preserve bank, eihter return the same selected bank") COMMA_SOURCE_FILE_AT_LINE (818)) ;
    }
    if (((var_cas_inShouldPreserveBSR)._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "invoked routine(s) do(es) not preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (821)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (830)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_28764 = operand_25955->mSizeExpression ;
    if (_temp_28764._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_28764._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28764 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (834))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (836))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))._operator_isNotEqual (operand_25955->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_25955->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (838)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (838))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (838))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_bra ::constructor_new (_inLexique, operand_25955->mInstructionLocation, operand_25955->mTargetLabels, operand_25955->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_29588,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29588 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_30007 (operand_29588->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30007 = NULL ;
      while (((operand_30007 = enumerator_30007.nextObject ()))) {
        macroValidPointer (operand_30007) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_6 ;
        GGS_bool automatic_var_7 ;
        const GGS_routineMap  _temp_30086 = var_cas_inRoutineMap ;
        if (_temp_30086._isBuilt ()) {
          _temp_30086 (HERE)->method_searchKey (_inLexique, operand_30007->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_30007->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (874))) ;
          }
          operand_30007->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (877)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_30007->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_30007->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (886)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (889)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_31178 = operand_29588->mSizeExpression ;
    if (_temp_31178._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_31178._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31178 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (893))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (894)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 64L))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (895))))._operator_concat (GGS_string (true, ") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (896)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (896)))._operator_isNotEqual (operand_29588->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (896)))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_29588->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (897)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (897))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (897))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (898)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_goto ::constructor_new (_inLexique, operand_29588->mInstructionLocation, operand_29588->mTargetLabels, operand_29588->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_rcall.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_rcall__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_rcall * operand_32002,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32002 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_32414 (operand_32002->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_32414 = NULL ;
      while (((operand_32414 = enumerator_32414.nextObject ()))) {
        macroValidPointer (operand_32414) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_8 ;
        GGS_bool automatic_var_9 ;
        const GGS_routineMap  _temp_32493 = var_cas_inRoutineMap ;
        if (_temp_32493._isBuilt ()) {
          _temp_32493 (HERE)->method_searchKey (_inLexique, operand_32414->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (926)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_32414->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (928))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
          }
          operand_32414->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (936)) ;
        }
        if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
          operand_32414->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed rcall, the '"))._operator_concat (operand_32414->mValue))._operator_concat (GGS_string (true, "' routine should be declared without the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (939)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a no return routine does not accept computed rcall instruction") COMMA_SOURCE_FILE_AT_LINE (946)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (948)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_33587 = operand_32002->mSizeExpression ;
    if (_temp_33587._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_33587._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_33587 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (950)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (952))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (953)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 64L))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (954))))._operator_concat (GGS_string (true, ") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (955)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (955)))._operator_isNotEqual (operand_32002->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (955)))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_32002->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (956)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (956))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (956))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (957)) ;
    }
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (959))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (960)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_rcall ::constructor_new (_inLexique, operand_32002->mInstructionLocation, operand_32002->mTargetLabels, var_cas_label0, operand_32002->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_34504,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34504 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_34504->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (987)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_34504->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (990)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (993))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (994)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_34504->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    ::routine_handleInstructionList (_inLexique,  operand_34504->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (996)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_34504->mEndOfInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1012)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_34504->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_34504->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_36273,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36273 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_36273->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_37071 = operand_36273->mRegisterExpression ;
    if (_temp_37071._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_37071._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_37071 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1042)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (_inLexique, operand_36273->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_37427 = operand_36273->mInstruction ;
    if (_temp_37427._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_37427._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_37427 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1056)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_37833,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37833 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_38325 = operand_37833->mRegisterExpression ;
    if (_temp_38325._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_38325._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_38325 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_38495 = operand_37833->mBitNumber ;
    if (_temp_38495._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_38495._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_38495 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1096)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (_inLexique, operand_37833->mInstructionLocation, operand_37833->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_38806 = operand_37833->mInstruction ;
    if (_temp_38806._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_38806._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_38806 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableFor__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_39858,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39858 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (_inLexique,  operand_39858->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1159)) ;
    }else{
      var_cas_condition = operand_39858->mCondition ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_40730,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40730 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_40977,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40977 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_40977->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1195)) ;
    }else{
      var_cas_comparison = operand_40977->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_11 ;
    const GGS_registerExpression  _temp_41572 = operand_40977->mRegisterExpression ;
    if (_temp_41572._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_41572._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_41572 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (1201)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_42041,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42041 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_42041->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1226)) ;
    }else{
      var_cas_comparison = operand_42041->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (_inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1230)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_42508,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42508 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_12 ;
    const GGS_registerExpression  _temp_42915 = operand_42508->mRegisterExpression ;
    if (_temp_42915._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_42915._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_42915 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_42508->mIncrement, operand_42508->m_W_isDestination, (operand_42508->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_43446,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43446 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_43687,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43687 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_13 ;
    const GGS_registerExpression  _temp_44094 = operand_43687->mRegisterExpression ;
    if (_temp_44094._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_44094._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_44094 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (1289)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_43687->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_44575,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44575 != NULL) {
    if (((operand_44575->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (true, 3U) ;
    }else{
      var_cas_outInstructionCount = GGS_uint (true, 2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_44902,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44902 != NULL) {
    const GGS_conditionExpression  _temp_45252 = operand_44902->mCondition ;
    if (_temp_45252._isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_45252._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45252 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch)._operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1332)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_45625,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45625 != NULL) {
    const GGS_conditionExpression  _temp_45738 = operand_45625->mCondition ;
    if (_temp_45738._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_45738._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45738 (HERE), (var_cas_inComplementaryBranch)._operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_45933,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45933 != NULL) {
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      const GGS_conditionExpression  _temp_46322 = operand_45933->mLeftExpression ;
      if (_temp_46322._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_46322._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_46322 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1371)) ;
        }
      }
      const GGS_conditionExpression  _temp_46610 = operand_45933->mRightExpression ;
      if (_temp_46610._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_46610._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_46610 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1382)) ;
        }
      }
    }else{
      GGS_string var_cas_label0 ;
      var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1394))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1394)) ;
      const GGS_conditionExpression  _temp_46990 = operand_45933->mLeftExpression ;
      if (_temp_46990._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_46990._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_46990 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1395)) ;
        }
      }
      const GGS_conditionExpression  _temp_47271 = operand_45933->mRightExpression ;
      if (_temp_47271._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_47271._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_47271 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1406)) ;
        }
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_47761,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47761 != NULL) {
    GGS_uint  var_cas_countLeft ;
    const GGS_conditionExpression  _temp_47899 = operand_47761->mLeftExpression ;
    if (_temp_47899._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_47899._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_47899 (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1428)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    const GGS_conditionExpression  _temp_48023 = operand_47761->mLeftExpression ;
    if (_temp_48023._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_48023._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_48023 (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1433)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft._add_operation (_inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1437)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_48277,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48277 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_48717 = operand_48277->mRegisterExpression ;
    if (_temp_48717._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_48717._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_48717 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1455)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_48887 = operand_48277->mBitNumber ;
    if (_temp_48887._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_48887._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_48887 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1463)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (_inLexique, var_cas_inInstructionLocation, (operand_48277->mBTFSSinstruction)._operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_49445,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49445 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_49682,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49682 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition ;
    var_cas_generateComplementaryCondition = GGS_bool (true, false) ;
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (1502)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      const GGS_conditionExpression  _temp_50259 = operand_49682->mIfCondition ;
      if (_temp_50259._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_50259._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_50259 (HERE), GGS_bool (true, true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1503)) ;
        }
      }
      if (((operand_49682->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1504)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_directCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1505)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      const GGS_conditionExpression  _temp_50444 = operand_49682->mIfCondition ;
      if (_temp_50444._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_50444._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_50444 (HERE), GGS_bool (true, false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1507)) ;
        }
      }
      if (((operand_49682->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1508)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_complementaryCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1509)) ;
      }
      if (((var_cas_complementaryCount)._operator_strictInf (var_cas_directCount)).isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true, true) ;
        var_cas_ioListFileContents.writeString ("  line ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1513)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1513))) ;
        var_cas_ioListFileContents.writeString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1514)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1514))) ;
        var_cas_ioListFileContents.writeString (" instruction") ;
        if (((var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1515)))._operator_strictSup (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("s") ;
        }
        var_cas_ioListFileContents.writeString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank ;
    var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank ;
    var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    if ((var_cas_generateComplementaryCondition).isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1527))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1527)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1528))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1528)) ;
      const GGS_conditionExpression  _temp_51509 = operand_49682->mIfCondition ;
      if (_temp_51509._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_51509._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_51509 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_49682->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1530)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_49682->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1542)) ;
      if (((operand_49682->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_49682->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_49682->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_49682->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_49682->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1561)) ;
      if (((operand_49682->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_49682->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }else{
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1580))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1580)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1581))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1581)) ;
      const GGS_conditionExpression  _temp_53345 = operand_49682->mIfCondition ;
      if (_temp_53345._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_53345._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_53345 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_49682->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1583)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_49682->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1595)) ;
      if (((operand_49682->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1610)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_49682->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_49682->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_49682->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_49682->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1614)) ;
      if (((operand_49682->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1628)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_49682->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }
    if (((var_cas_elseBranchFinalBank)._operator_isEqual (var_cas_thenBranchFinalBank)).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else{
      operand_49682->mEndOfElsePartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1636)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence)._operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_55390,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55390 != NULL) {
    GGS_string var_cas_labelInstructionBegin ;
    var_cas_labelInstructionBegin = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1658))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1658)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_55390->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_55390->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1663)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_55390->mEndOfRepeatedInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1679)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_56568 (operand_55390->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_56568 = NULL ;
      while (((operand_56568 = enumerator_56568.nextObject ()))) {
        macroValidPointer (operand_56568) ;
        if (((operand_56568->mInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1682)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          const GGS_conditionExpression  _temp_56665 = operand_56568->mCondition ;
          if (_temp_56665._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_56665._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_56665 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_55390->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1683)) ;
            }
          }
        }else{
          GGS_string var_cas_nextBranchLabel ;
          var_cas_nextBranchLabel = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1695))) ;
          var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1695)) ;
          const GGS_conditionExpression  _temp_57083 = operand_56568->mCondition ;
          if (_temp_57083._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_57083._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_57083 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_55390->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1696)) ;
            }
          }
          GGS_uint  var_cas_bank ;
          var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (_inLexique,  operand_56568->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1708)) ;
          if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
            operand_56568->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1724)) ;
          }
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_55390->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_55390->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_nextBranchLabel, operand_55390->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_58322,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58322 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_58322->mIncrement)._operator_and (operand_58322->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_58322->mIncrement)._operator_and ((operand_58322->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_58322->mIncrement)._operator_not ())._operator_and (operand_58322->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_14 ;
    const GGS_registerExpression  _temp_59186 = operand_58322->mRegisterExpression ;
    if (_temp_59186._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_59186._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_59186 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (1759)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, operand_58322->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_58322->m_W_isDestination COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_59573 = operand_58322->mInstruction ;
    if (_temp_59573._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_59573._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_59573 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1775)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "build_ipic18_assembly_instruction_list"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_assembly_instruction_list (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic18_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_assembly_instruction_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages ;
  var_cas_generationOptimizationMessages = GGS_string (true, "") ;
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDefinitionList::cEnumerator enumerator_60359 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1804)), true) ;
    const GGS_routineDefinitionList::cElement * operand_60359 = NULL ;
    while (((operand_60359 = enumerator_60359.nextObject ()))) {
      macroValidPointer (operand_60359) ;
      if ((((operand_60359->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1805)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_60359->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1805)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_60359->mRequiredBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1807)) ;
      }
      if ((((operand_60359->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1808)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_60359->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1808)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_60359->mReturnedBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1810)) ;
      }
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_60359->mRoutineName, operand_60359->mIsNoReturn, operand_60359->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1811)), operand_60359->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1811)), operand_60359->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1811)) ;
    }
  }
  GGS_constantMap  var_cas_constantMap ;
  var_cas_constantMap = GGS_constantMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_constantDefinitionList::cEnumerator enumerator_60995 (var_cas_inPiccoloModel.reader_mConstantDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1815)), true) ;
    const GGS_constantDefinitionList::cElement * operand_60995 = NULL ;
    while (((operand_60995 = enumerator_60995.nextObject ()))) {
      macroValidPointer (operand_60995) ;
      GGS_sint  var_cas_result ;
      const GGS_immediatExpression  _temp_61074 = operand_60995->mExpression ;
      if (_temp_61074._isBuilt ()) {
        typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_61074._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_61074 (HERE), var_cas_inRegisterTable, var_cas_constantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1816)) ;
        }
      }
      if ((var_cas_inRegisterTable.reader_hasKey (_inLexique, operand_60995->mConstantName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1817)) COMMA_SOURCE_FILE_AT_LINE (1817))).isBuiltAndTrue ()) {
        operand_60995->mConstantName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "'"))._operator_concat (operand_60995->mConstantName))._operator_concat (GGS_string (true, "' is alreday declared as ram register or special register")) COMMA_SOURCE_FILE_AT_LINE (1819)) ;
      }else{
        var_cas_constantMap.modifier_insertKey (_inLexique, operand_60995->mConstantName, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1820)) ;
      }
    }
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (1824)))).isBuiltAndTrue ()) {
    ::routine_print_constant_definition (_inLexique,  var_cas_constantMap,  var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1825)) ;
  }
  if ((var_cas_routineMap.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1831))).isBuiltAndTrue ()) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_15 ;
    GGS_bool automatic_var_16 ;
    const GGS_routineMap  _temp_61763 = var_cas_routineMap ;
    if (_temp_61763._isBuilt ()) {
      _temp_61763 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_15, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (1834)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1837)) ;
    }
    if (((var_cas_requiredBank)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
    }
  }else{
    var_cas_inPiccoloModel.reader_mEndOfProgram (_inLexique COMMA_SOURCE_FILE_AT_LINE (1842)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (1843)) ;
  }
  var_cas_outGeneratedInstructionList = GGS_ipic18_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  if (((var_cas_inHasLowInterrupt)._operator_and (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_63113 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1857)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_63113 = NULL ;
      while (((operand_63113 = enumerator_63113.nextObject ()))) {
        macroValidPointer (operand_63113) ;
        if (((operand_63113->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1858)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_63113->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_63113->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1861)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_63113->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (1877)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), operand_63113->mFastReturn COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_64369 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1890)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_64369 = NULL ;
      while (((operand_64369 = enumerator_64369.nextObject ()))) {
        macroValidPointer (operand_64369) ;
        if (((operand_64369->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1891)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_64369->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_64369->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1894)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_64369->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (1910)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_65380 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1917)), true) ;
    const GGS_routineDefinitionList::cElement * operand_65380 = NULL ;
    while (((operand_65380 = enumerator_65380.nextObject ()))) {
      macroValidPointer (operand_65380) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_65380->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1919)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_65380->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_65380->mRoutineName COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_65380->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_65380->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (1927)) ;
      if (((((operand_65380->mIsNoReturn)._operator_not ())._operator_and ((operand_65380->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1941)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))))._operator_and ((var_cas_currentBank)._operator_isNotEqual (operand_65380->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1941))))).isBuiltAndTrue ()) {
        operand_65380->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "execution will not set BSR to "))._operator_concat (operand_65380->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1942)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1942))) COMMA_SOURCE_FILE_AT_LINE (1943)) ;
      }
      if (((operand_65380->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_65380->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (1946)) ;
      }
      if (((operand_65380->mIsNoReturn)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, operand_65380->mRoutineName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1949)) COMMA_HERE)) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister ;
  var_cas_WREGregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_17 ;
  const GGS_registerExpression  _temp_66894 = var_cas_WREGregister ;
  if (_temp_66894._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_66894._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_66894 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (1955)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister ;
  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_18 ;
  const GGS_registerExpression  _temp_67231 = var_cas_TOSLregister ;
  if (_temp_67231._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_67231._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_67231 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (1965)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister ;
  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_19 ;
  const GGS_registerExpression  _temp_67568 = var_cas_TOSHregister ;
  if (_temp_67568._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_67568._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_67568 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_19 COMMA_SOURCE_FILE_AT_LINE (1975)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister ;
  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSU"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_20 ;
  const GGS_registerExpression  _temp_67905 = var_cas_TOSUregister ;
  if (_temp_67905._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_67905._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_67905 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (1985)) ;
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1993))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2002))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2005)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2005)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSL_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_uint (true, 0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSH_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSU_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (2040)))).isBuiltAndTrue ()) {
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2041))) ;
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("*") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2042))) ;
    var_cas_ioListFileContents.writeString ("*\n") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2043))) ;
    var_cas_ioListFileContents.writeString ("\n"
      "\n") ;
    if (((var_cas_generationOptimizationMessages.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (2044)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioListFileContents.writeString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.writeString ("\n") ;
    }
    var_cas_ioListFileContents.writeString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (true, 0U) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = GGS_uint (true, 0U) ;
    {
      GGS_ipic18_instructionList::cEnumerator enumerator_70432 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic18_instructionList::cElement * operand_70432 = NULL ;
      while (((operand_70432 = enumerator_70432.nextObject ()))) {
        macroValidPointer (operand_70432) ;
        const GGS_ipic18_instruction  _temp_70473 = operand_70432->mInstruction ;
        if (_temp_70473._isBuilt ()) {
          _temp_70473 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2053)) ;
        }
        var_cas_ioListFileContents._dotAssign_operation (var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2054)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 5U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2054))) ;
        var_cas_ioListFileContents.writeString (": ") ;
        const GGS_ipic18_instruction  _temp_70618 = operand_70432->mInstruction ;
        if (_temp_70618._isBuilt ()) {
          _temp_70618 (HERE)->method_displayIPICinstruction (_inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2055)) ;
        }
        var_cas_ioListFileContents.writeString ("\n") ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      }
    }
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2060))) ;
    var_cas_ioListFileContents.writeString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_assembly_instruction_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_pic18_checkingAndBuildIPIC (void) {
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_rcall__buildIPICinstructionList, gClassInfoFor__instruction_computed_rcall.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_pic18_checkingAndBuildIPIC (prologueRoutineFor_pic18_checkingAndBuildIPIC,
                                   NULL) ;

//---------------------------------------------------------------------------*

