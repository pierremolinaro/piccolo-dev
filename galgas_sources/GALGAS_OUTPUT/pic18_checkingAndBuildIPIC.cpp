//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'pic18_checkingAndBuildIPIC.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 23th, 2010, at 16h3'24"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_checkingAndBuildIPIC.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_checkingAndBuildIPIC.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true) ;
  {
    GGS_instructionList::cEnumerator enumerator_1801 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_1801 = NULL ;
    while (((operand_1801 = enumerator_1801.nextObject ()))) {
      macroValidPointer (operand_1801) ;
      const GGS_bool cond_1961 = (var_cas_outContinuesInSequence).operator_not () ;
      if (cond_1961.isBuiltAndTrue ()) {
        operand_1801->mInstruction.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unreachable code") COMMA_SOURCE_FILE_AT_LINE (52)) ;
        var_cas_outContinuesInSequence = GGS_bool (true) ;
      }
      { typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (operand_1801->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_1801->mInstruction (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_nobanksel * operand_2452,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2452 != NULL) {
    const GGS_bool cond_3038 = var_cas_inShouldPreserveBSR ;
    if (cond_3038.isBuiltAndTrue ()) {
      operand_2452->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"nobank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_savebank * operand_3232,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3232 != NULL) {
    GGS_registerExpression  var_cas_BSRregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("BSR"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (108)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)) ;
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_BSR_IPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (var_cas_BSRregister.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_BSRregister (HERE), var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (110)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_save_IPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (operand_3232->mRegister.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3232->mRegister (HERE), var_cas_inRegisterTable, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3232->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (121))) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_3232->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (128)) ;
    const GGS_bool cond_4906 = (var_cas_ioContinuesInSequence).operator_not () ;
    if (cond_4906.isBuiltAndTrue ()) {
      operand_3232->mEndOfSaveBankInstruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3232->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (146))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_banksel * operand_5259,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5259 != NULL) {
    const GGS_bool cond_5837 = var_cas_inShouldPreserveBSR ;
    if (cond_5837.isBuiltAndTrue ()) {
      operand_5259->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (170)) ;
    }
    const GGS_bool cond_6011 = (operand_5259->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (171))).operator_strictSup (GGS_uint (15U)) ;
    if (cond_6011.isBuiltAndTrue ()) {
      operand_5259->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("selected bank idx should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (173)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) ;
    }else if (cond_6011.isBuiltAndFalse ()) {
      const GGS_bool cond_6166 = (operand_5259->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (174))).operator_isEqual (var_cas_ioCurrentBank) ;
      if (cond_6166.isBuiltAndTrue ()) {
        operand_5259->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("useless instruction: the bank ")).operator_concat (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (175)))).operator_concat (GGS_string (" is already selected")) COMMA_SOURCE_FILE_AT_LINE (175)) ;
      }else if (cond_6166.isBuiltAndFalse ()) {
        var_cas_ioCurrentBank = operand_5259->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, operand_5259->mInstructionLocation, operand_5259->mBankIndex COMMA_SOURCE_FILE_AT_LINE (180))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FDA * operand_6452,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6452 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7062_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_6452->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6452->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_7062_0 COMMA_SOURCE_FILE_AT_LINE (199)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_6452->mInstructionLocation, operand_6452->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_6452->m_W_isDestination COMMA_SOURCE_FILE_AT_LINE (206))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FA * operand_7369,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7369 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_7979_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_7369->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7369->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_7979_0 COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_7369->mInstructionLocation, operand_7369->mFAinstruction, var_cas_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (237))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MOVFF * operand_8253,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8253 != NULL) {
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_sourceIPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (operand_8253->mSourceRegisterName.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8253->mSourceRegisterName (HERE), var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_destinationIPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (operand_8253->mDestinationRegisterName.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8253->mDestinationRegisterName (HERE), var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (265)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_8253->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (269))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FBA * operand_9386,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9386 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_9386->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9386->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    { typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (operand_9386->mBitNumber.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9386->mBitNumber (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (301)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FBA ::constructor_new (inLexique, operand_9386->mInstructionLocation, operand_9386->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (305))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JSR * operand_10416,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10416 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    if (var_cas_inRoutineMap.isBuilt ()) {
      var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_10416->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (333)) ;
    }
    const GGS_bool cond_11493 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (334)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_11493.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_10416->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_11374 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (337))) ;
      if (cond_11374.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_11374.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340))) ;
      }
      operand_10416->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (343)) ;
    }
    const GGS_bool cond_11634 = var_cas_isNoReturn ;
    if (cond_11634.isBuiltAndTrue ()) {
      operand_10416->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (346)) ;
    }
    const GGS_bool cond_11831 = (var_cas_preservesBank).operator_not () ;
    if (cond_11831.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
      const GGS_bool cond_11820 = var_cas_inShouldPreserveBSR ;
      if (cond_11820.isBuiltAndTrue ()) {
        operand_10416->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the routine call should preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (351)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JSR ::constructor_new (inLexique, operand_10416->mInstructionLocation, operand_10416->mTargetLabel, operand_10416->mKind COMMA_SOURCE_FILE_AT_LINE (354))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMP * operand_12079,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12079 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_12630_0 ;
    GGS_bool automatic_var_12630_1 ;
    if (var_cas_inRoutineMap.isBuilt ()) {
      var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_12079->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_12630_0, automatic_var_12630_1 COMMA_SOURCE_FILE_AT_LINE (379)) ;
    }
    const GGS_bool cond_13086 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (380)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_13086.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_12079->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (381))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_12967 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (383))) ;
      if (cond_12967.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_12967.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (386))) ;
      }
      operand_12079->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (389)) ;
    }
    const GGS_bool cond_13222 = (var_cas_isNoReturn).operator_not () ;
    if (cond_13222.isBuiltAndTrue ()) {
      operand_12079->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (392)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_12079->mInstructionLocation, operand_12079->mTargetLabel, operand_12079->mKind COMMA_SOURCE_FILE_AT_LINE (395))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMPCC * operand_13508,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13508 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_14048_0 ;
    GGS_bool automatic_var_14048_1 ;
    if (var_cas_inRoutineMap.isBuilt ()) {
      var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_13508->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_14048_0, automatic_var_14048_1 COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }
    const GGS_bool cond_14504 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (421)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
    if (cond_14504.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_13508->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      const GGS_bool cond_14385 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (424))) ;
      if (cond_14385.isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else if (cond_14385.isBuiltAndFalse ()) {
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (427))) ;
      }
      operand_13508->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (430)) ;
    }
    const GGS_bool cond_14640 = (var_cas_isNoReturn).operator_not () ;
    if (cond_14640.isBuiltAndTrue ()) {
      operand_13508->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    const GGS_bool cond_14748 = operand_13508->mIsBcc ;
    if (cond_14748.isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (437)) ;
    }else if (cond_14748.isBuiltAndFalse ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (439)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_13508->mInstructionLocation, var_cas_mode, operand_13508->mConditionalBranch, operand_13508->mTargetLabel COMMA_SOURCE_FILE_AT_LINE (441))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_CLRWDT * operand_15094,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15094 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_CLRWDT ::constructor_new (inLexique, operand_15094->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (464))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_DAW * operand_15751,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15751 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_DAW ::constructor_new (inLexique, operand_15751->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (484))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_NOP * operand_16405,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16405 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_NOP ::constructor_new (inLexique, operand_16405->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (504))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_POP * operand_17059,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17059 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_POP ::constructor_new (inLexique, operand_17059->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (524))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_PUSH * operand_17714,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17714 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_PUSH ::constructor_new (inLexique, operand_17714->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (544))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_RESET * operand_18371,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18371 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RESET ::constructor_new (inLexique, operand_18371->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (564))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_SLEEP * operand_19029,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19029 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_SLEEP ::constructor_new (inLexique, operand_19029->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (584))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_literalOperation * operand_19698,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19698 != NULL) {
    GGS_sint  var_cas_result ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_19698->mImmediatExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_19698->mImmediatExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (604)) ;
      }
    }
    const GGS_bool cond_20386 = ((var_cas_result).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
    if (cond_20386.isBuiltAndTrue ()) {
      operand_19698->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (607)))).operator_concat (GGS_string (" (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (608)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, operand_19698->mInstructionLocation, operand_19698->mLiteralInstruction, (var_cas_result).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (613)) COMMA_SOURCE_FILE_AT_LINE (610))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_LFSR * operand_20692,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20692 != NULL) {
    const GGS_bool cond_21259 = (operand_20692->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (632))).operator_strictSup (GGS_uint (2U)) ;
    if (cond_21259.isBuiltAndTrue ()) {
      operand_20692->mFSRindex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the LFSR register idx (")).operator_concat (operand_20692->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (633)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (633)))).operator_concat (GGS_string (") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (634)) ;
    }
    GGS_sint  var_cas_result ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_20692->mImmediatExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_20692->mImmediatExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (636)) ;
      }
    }
    const GGS_bool cond_21535 = ((var_cas_result).operator_strictSup (GGS_sint (4095L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (0L))) ;
    if (cond_21535.isBuiltAndTrue ()) {
      operand_20692->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639)))).operator_concat (GGS_string (" (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (640)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_LFSR ::constructor_new (inLexique, operand_20692->mInstructionLocation, operand_20692->mFSRindex, var_cas_result.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (644)) COMMA_SOURCE_FILE_AT_LINE (641))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLRD * operand_21799,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21799 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLRD ::constructor_new (inLexique, operand_21799->mInstructionLocation, operand_21799->mOption COMMA_SOURCE_FILE_AT_LINE (663))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLWT * operand_22470,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22470 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLWT ::constructor_new (inLexique, operand_22470->mInstructionLocation, operand_22470->mOption COMMA_SOURCE_FILE_AT_LINE (684))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_retlw * operand_23150,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23150 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_23150->mSizeExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_23150->mSizeExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (714)) ;
      }
    }
    const GGS_bool cond_24128 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_24128.isBuiltAndTrue ()) {
      operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
    }else if (cond_24128.isBuiltAndFalse ()) {
      const GGS_bool cond_24263 = (var_cas_size).operator_strictSup (GGS_sint (128L)) ;
      if (cond_24263.isBuiltAndTrue ()) {
        operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (719)) ;
      }else if (cond_24263.isBuiltAndFalse ()) {
        const GGS_bool cond_24498 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (719))).operator_isNotEqual (operand_23150->mImmediateExpressionList.reader_length ()) ;
        if (cond_24498.isBuiltAndTrue ()) {
          operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the constant list length (")).operator_concat (operand_23150->mImmediateExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (721)) ;
        }
      }
    }
    GGS_uintlist  var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_24584 (operand_23150->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_24584 = NULL ;
      while (((operand_24584 = enumerator_24584.nextObject ()))) {
        macroValidPointer (operand_24584) ;
        GGS_sint  var_cas_v ;
        { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_24584->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_24584->mExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_v COMMA_SOURCE_FILE_AT_LINE (725)) ;
          }
        }
        const GGS_bool cond_24849 = ((var_cas_v).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_v).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE))) ;
        if (cond_24849.isBuiltAndTrue ()) {
          operand_23150->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("immediate value with idx ")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (727)))).operator_concat (GGS_string (" is evaluated as "))).operator_concat (var_cas_v.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (727)))).operator_concat (GGS_string (" (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (728)) ;
        }
        var_cas_literalValues.addAssign_operation ((var_cas_v).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (729))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_retlw ::constructor_new (inLexique, operand_23150->mInstructionLocation, var_cas_literalValues, operand_23150->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (732))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MNOP * operand_25198,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25198 != NULL) {
    const GGS_bool cond_25762 = (operand_25198->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (755))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_25762.isBuiltAndTrue ()) {
      operand_25198->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (756)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MNOP ::constructor_new (inLexique, operand_25198->mInstructionLocation, operand_25198->mOccurrenceFactor COMMA_SOURCE_FILE_AT_LINE (759))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_bra * operand_26027,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26027 != NULL) {
    GGS_bool var_cas_allPreserveBankSetting = GGS_bool (true) ;
    GGS_bool var_cas_allReturnBank = GGS_bool (true) ;
    GGS_uint  var_cas_returnedBankValue = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26546 (operand_26027->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26546 = NULL ;
      while (((operand_26546 = enumerator_26546.nextObject ()))) {
        macroValidPointer (operand_26546) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        if (var_cas_inRoutineMap.isBuilt ()) {
          var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_26546->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (789)) ;
        }
        const GGS_bool cond_27234 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (791)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_27234.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_26546->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (792))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_27112 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (794))) ;
          if (cond_27112.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_27112.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (797))) ;
          }
          operand_26546->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (800)) ;
        }
        const GGS_bool cond_27351 = var_cas_preservesBank ;
        if (cond_27351.isBuiltAndTrue ()) {
          var_cas_allReturnBank = GGS_bool (false) ;
        }else if (cond_27351.isBuiltAndFalse ()) {
          const GGS_bool cond_27627 = ((var_cas_returnedBankValue).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (804)))).operator_and ((var_cas_returnedBankValue).operator_isNotEqual (var_cas_returnedBank)) ;
          if (cond_27627.isBuiltAndTrue ()) {
            operand_26546->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("this routine ensures setting of bank '")).operator_concat (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (805)))).operator_concat (GGS_string ("', but "))).operator_concat (GGS_string ("previous routine(s) ensure setting of bank '"))).operator_concat (var_cas_returnedBankValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (806)))).operator_concat (GGS_string ("'.")) COMMA_SOURCE_FILE_AT_LINE (807)) ;
          }else if (cond_27627.isBuiltAndFalse ()) {
            var_cas_allPreserveBankSetting = GGS_bool (false) ;
            var_cas_returnedBankValue = var_cas_returnedBank ;
          }
        }
        const GGS_bool cond_27971 = ((GGS_routineKind::constructor_regularRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (811))).operator_isNotEqual (var_cas_inRoutineKind)).operator_and ((var_cas_isNoReturn).operator_not ()) ;
        if (cond_27971.isBuiltAndTrue ()) {
          operand_26546->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed bra from a regular routine, the '")).operator_concat (operand_26546->mValue)).operator_concat (GGS_string ("' routine should be declared without any \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (813)) ;
        }
      }
    }
    const GGS_bool cond_28099 = (var_cas_allReturnBank).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
    if (cond_28099.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBankValue ;
    }else if (cond_28099.isBuiltAndFalse ()) {
      const GGS_bool cond_28280 = ((var_cas_allReturnBank).operator_not ()).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
      if (cond_28280.isBuiltAndTrue ()) {
        operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine should either all preserve bank, eihter return the same selected bank") COMMA_SOURCE_FILE_AT_LINE (820)) ;
      }
    }
    const GGS_bool cond_28439 = (var_cas_inShouldPreserveBSR).operator_and ((var_cas_allPreserveBankSetting).operator_not ()) ;
    if (cond_28439.isBuiltAndTrue ()) {
      operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine(s) do(es) not preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (823)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_26027->mSizeExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_26027->mSizeExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (834)) ;
      }
    }
    const GGS_bool cond_29015 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_29015.isBuiltAndTrue ()) {
      operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (836)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else if (cond_29015.isBuiltAndFalse ()) {
      const GGS_bool cond_29150 = (var_cas_size).operator_strictSup (GGS_sint (128L)) ;
      if (cond_29150.isBuiltAndTrue ()) {
        operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (838)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
      }else if (cond_29150.isBuiltAndFalse ()) {
        const GGS_bool cond_29367 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (839))).operator_isNotEqual (operand_26027->mTargetLabels.reader_length ()) ;
        if (cond_29367.isBuiltAndTrue ()) {
          operand_26027->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_26027->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (840)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (840)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (841)) ;
        }
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_bra ::constructor_new (inLexique, operand_26027->mInstructionLocation, operand_26027->mTargetLabels, operand_26027->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (843))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_goto * operand_29660,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29660 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_30079 (operand_29660->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30079 = NULL ;
      while (((operand_30079 = enumerator_30079.nextObject ()))) {
        macroValidPointer (operand_30079) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_30199_0 ;
        GGS_bool automatic_var_30199_1 ;
        if (var_cas_inRoutineMap.isBuilt ()) {
          var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_30079->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_30199_0, automatic_var_30199_1 COMMA_SOURCE_FILE_AT_LINE (869)) ;
        }
        const GGS_bool cond_30664 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (870)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_30664.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_30079->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (871))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_30542 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (873))) ;
          if (cond_30542.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_30542.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (876))) ;
          }
          operand_30079->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (879)) ;
        }
        const GGS_bool cond_30841 = (var_cas_isNoReturn).operator_not () ;
        if (cond_30841.isBuiltAndTrue ()) {
          operand_30079->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed goto, the '")).operator_concat (operand_30079->mValue)).operator_concat (GGS_string ("' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (882)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_29660->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (888)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_29660->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_29660->mSizeExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29660->mSizeExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (893)) ;
      }
    }
    const GGS_bool cond_31429 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_31429.isBuiltAndTrue ()) {
      operand_29660->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (895)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (896)) ;
    }else if (cond_31429.isBuiltAndFalse ()) {
      const GGS_bool cond_31562 = (var_cas_size).operator_strictSup (GGS_sint (64L)) ;
      if (cond_31562.isBuiltAndTrue ()) {
        operand_29660->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (898)) ;
      }else if (cond_31562.isBuiltAndFalse ()) {
        const GGS_bool cond_31779 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (898))).operator_isNotEqual (operand_29660->mTargetLabels.reader_length ()) ;
        if (cond_31779.isBuiltAndTrue ()) {
          operand_29660->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_29660->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (899)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (899)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (900)) ;
        }
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_goto ::constructor_new (inLexique, operand_29660->mInstructionLocation, operand_29660->mTargetLabels, operand_29660->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (902))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_rcall.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_rcall__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_rcall * operand_32074,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32074 != NULL) {
    GGS_bool var_cas_allPreserveBank = GGS_bool (true) ;
    GGS_bool var_cas_someReturnsBank = GGS_bool (false) ;
    GGS_uint  var_cas_returnedBankSelection = var_cas_ioCurrentBank ;
    {
      GGS_lstringlist::cEnumerator enumerator_32604 (operand_32074->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_32604 = NULL ;
      while (((operand_32604 = enumerator_32604.nextObject ()))) {
        macroValidPointer (operand_32604) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        if (var_cas_inRoutineMap.isBuilt ()) {
          var_cas_inRoutineMap (HERE)->method_searchKey (inLexique, operand_32604->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (933)) ;
        }
        const GGS_bool cond_33263 = ((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (934)))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank)) ;
        if (cond_33263.isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_32604->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (935))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          const GGS_bool cond_33141 = (var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (937))) ;
          if (cond_33141.isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else if (cond_33141.isBuiltAndFalse ()) {
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (940))) ;
          }
          operand_32604->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (943)) ;
        }
        const GGS_bool cond_33440 = var_cas_isNoReturn ;
        if (cond_33440.isBuiltAndTrue ()) {
          operand_32604->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed rcall, the '")).operator_concat (operand_32604->mValue)).operator_concat (GGS_string ("' routine should be declared without the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (946)) ;
        }
        const GGS_bool cond_33594 = (var_cas_inShouldPreserveBSR).operator_and ((var_cas_preservesBank).operator_not ()) ;
        if (cond_33594.isBuiltAndTrue ()) {
          operand_32604->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_32604->mValue)).operator_concat (GGS_string ("' routine should preserved bank selection")) COMMA_SOURCE_FILE_AT_LINE (949)) ;
        }else if (cond_33594.isBuiltAndFalse ()) {
          const GGS_bool cond_34453 = ((var_cas_inShouldPreserveBSR).operator_not ()).operator_and ((var_cas_preservesBank).operator_not ()) ;
          if (cond_34453.isBuiltAndTrue ()) {
            const GGS_bool cond_33777 = (var_cas_someReturnsBank).operator_not () ;
            if (cond_33777.isBuiltAndTrue ()) {
              var_cas_returnedBankSelection = var_cas_returnedBank ;
              var_cas_someReturnsBank = GGS_bool (true) ;
            }else if (cond_33777.isBuiltAndFalse ()) {
              const GGS_bool cond_34437 = (var_cas_returnedBankSelection).operator_isNotEqual (var_cas_returnedBank) ;
              if (cond_34437.isBuiltAndTrue ()) {
                GGS_string var_cas_errorMessage = ((GGS_string ("the '")).operator_concat (operand_32604->mValue)).operator_concat (GGS_string ("' routine returns ")) ;
                const GGS_bool cond_34004 = (var_cas_returnedBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (955))) ;
                if (cond_34004.isBuiltAndTrue ()) {
                  var_cas_errorMessage.appendCString ("no bank selection") ;
                }else if (cond_34004.isBuiltAndFalse ()) {
                  var_cas_errorMessage.appendCString ("bank selection set to  ") ;
                  var_cas_errorMessage.dotAssign_operation (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (958))) ;
                }
                var_cas_errorMessage.appendCString (", but previous routine(s) return(s) ") ;
                const GGS_bool cond_34283 = (var_cas_returnedBankSelection).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (961))) ;
                if (cond_34283.isBuiltAndTrue ()) {
                  var_cas_errorMessage.appendCString ("no bank selection") ;
                }else if (cond_34283.isBuiltAndFalse ()) {
                  var_cas_errorMessage.appendCString ("bank selection set to  ") ;
                  var_cas_errorMessage.dotAssign_operation (var_cas_returnedBankSelection.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (964))) ;
                }
                operand_32604->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (967)) ;
              }
            }
          }else if (cond_34453.isBuiltAndFalse ()) {
            const GGS_bool cond_34509 = ((var_cas_inShouldPreserveBSR).operator_not ()).operator_and (var_cas_preservesBank) ;
            if (cond_34509.isBuiltAndTrue ()) {
            }
          }
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true) ;
    var_cas_ioCurrentBank = var_cas_returnedBankSelection ;
    GGS_sint  var_cas_size ;
    { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_32074->mSizeExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32074->mSizeExpression (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (975)) ;
      }
    }
    const GGS_bool cond_34833 = (var_cas_size).operator_strictInf (GGS_sint (2L)) ;
    if (cond_34833.isBuiltAndTrue ()) {
      operand_32074->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (977)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }else if (cond_34833.isBuiltAndFalse ()) {
      const GGS_bool cond_34966 = (var_cas_size).operator_strictSup (GGS_sint (64L)) ;
      if (cond_34966.isBuiltAndTrue ()) {
        operand_32074->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (979)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (980)) ;
      }else if (cond_34966.isBuiltAndFalse ()) {
        const GGS_bool cond_35183 = (var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (980))).operator_isNotEqual (operand_32074->mTargetLabels.reader_length ()) ;
        if (cond_35183.isBuiltAndTrue ()) {
          operand_32074->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_32074->mTargetLabels.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (981)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (981)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (982)) ;
        }
      }
    }
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (984))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (985)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_rcall ::constructor_new (inLexique, operand_32074->mInstructionLocation, operand_32074->mTargetLabels, var_cas_label0, operand_32074->mUsesRelativeCall COMMA_SOURCE_FILE_AT_LINE (986))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FOREVER * operand_35571,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35571 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_35571->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_35571->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1015)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1018))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35571->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1020)) COMMA_SOURCE_FILE_AT_LINE (1020))) ;
    ::routine_handleInstructionList (inLexique,  operand_35571->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1021)) ;
    const GGS_bool cond_36964 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank) ;
    if (cond_36964.isBuiltAndTrue ()) {
      operand_35571->mEndOfInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1037)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_35571->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35571->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1039)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) COMMA_SOURCE_FILE_AT_LINE (1039))) ;
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_37340,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37340 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_37340->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (inLexique COMMA_SOURCE_FILE_AT_LINE (1063)) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_38247_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_37340->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37340->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_38247_0 COMMA_SOURCE_FILE_AT_LINE (1067)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_37340->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (1074))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    { typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (operand_37340->mInstruction.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37340->mInstruction (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1081)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_BitTest * operand_38900,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38900 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_38900->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38900->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    { typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (operand_38900->mBitNumber.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38900->mBitNumber (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1121)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, operand_38900->mInstructionLocation, operand_38900->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1125))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    { typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (operand_38900->mInstruction.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38900->mInstruction (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_40925,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40925 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    const GGS_bool cond_41385 = var_cas_inComplementaryBranch ;
    if (cond_41385.isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (inLexique,  operand_40925->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1184)) ;
    }else if (cond_41385.isBuiltAndFalse ()) {
      var_cas_condition = operand_40925->mCondition ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)), var_cas_condition, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1192)) COMMA_SOURCE_FILE_AT_LINE (1188))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_41797,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41797 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_42044,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42044 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    const GGS_bool cond_42501 = var_cas_inComplementaryBranch ;
    if (cond_42501.isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_42044->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1220)) ;
    }else if (cond_42501.isBuiltAndFalse ()) {
      var_cas_comparison = operand_42044->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_42748_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_42044->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42044->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_42748_0 COMMA_SOURCE_FILE_AT_LINE (1226)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1234))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_43108,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43108 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    const GGS_bool cond_43311 = var_cas_inComplementaryBranch ;
    if (cond_43311.isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_43108->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1251)) ;
    }else if (cond_43311.isBuiltAndFalse ()) {
      var_cas_comparison = operand_43108->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1255)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_incDecRegisterInCondition * operand_43575,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43575 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_44091_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_43575->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43575->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_44091_0 COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_43575->mIncrement, operand_43575->m_W_isDestination, (operand_43575->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1280))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_44513,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44513 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerTestCondition * operand_44754,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44754 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_45270_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_44754->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44754->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_45270_0 COMMA_SOURCE_FILE_AT_LINE (1314)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_44754->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1322))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_45642,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45642 != NULL) {
    const GGS_bool cond_45791 = (operand_45642->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch) ;
    if (cond_45791.isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (3U) ;
    }else if (cond_45791.isBuiltAndFalse ()) {
      var_cas_outInstructionCount = GGS_uint (2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_45969,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45969 != NULL) {
    { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_45969->mCondition.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45969->mCondition (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch).operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_46692,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46692 != NULL) {
    { typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (operand_46692->mCondition.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46692->mCondition (HERE), (var_cas_inComplementaryBranch).operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1376)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_47000,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47000 != NULL) {
    const GGS_bool cond_47917 = var_cas_inComplementaryBranch ;
    if (cond_47917.isBuiltAndTrue ()) {
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_47000->mLeftExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_47000->mLeftExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1396)) ;
        }
      }
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_47000->mRightExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_47000->mRightExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1407)) ;
        }
      }
    }else if (cond_47917.isBuiltAndFalse ()) {
      GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1419))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1419)) ;
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_47000->mLeftExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_47000->mLeftExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1420)) ;
        }
      }
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_47000->mRightExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_47000->mRightExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1431)) ;
        }
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1442)) COMMA_SOURCE_FILE_AT_LINE (1442))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_48828,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48828 != NULL) {
    GGS_uint  var_cas_countLeft ;
    { typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (operand_48828->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48828->mLeftExpression (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1453)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    { typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (operand_48828->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48828->mLeftExpression (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1458)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft.add_operation (inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1462)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_49344,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49344 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_49344->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49344->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1480)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    { typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (operand_49344->mBitNumber.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49344->mBitNumber (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1488)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, var_cas_inInstructionLocation, (operand_49344->mBTFSSinstruction).operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1492))) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1498)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1498)) COMMA_SOURCE_FILE_AT_LINE (1498))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_50512,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50512 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_structured_if * operand_50749,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50749 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition = GGS_bool (false) ;
    const GGS_bool cond_52086 = gOption_piccolo_5F_options_performOptimizations.reader_value () ;
    if (cond_52086.isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      { typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (operand_50749->mIfCondition.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_50749->mIfCondition (HERE), GGS_bool (true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1528)) ;
        }
      }
      const GGS_bool cond_51431 = (operand_50749->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_51431.isBuiltAndTrue ()) {
        var_cas_directCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1530)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      { typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (operand_50749->mIfCondition.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_50749->mIfCondition (HERE), GGS_bool (false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1532)) ;
        }
      }
      const GGS_bool cond_51631 = (operand_50749->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_51631.isBuiltAndTrue ()) {
        var_cas_complementaryCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1534)) ;
      }
      const GGS_bool cond_52075 = (var_cas_complementaryCount).operator_strictInf (var_cas_directCount) ;
      if (cond_52075.isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1538))) ;
        var_cas_ioListFileContents.appendCString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1539)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1539))) ;
        var_cas_ioListFileContents.appendCString (" instruction") ;
        const GGS_bool cond_52026 = (var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1540))).operator_strictSup (GGS_uint (1U)) ;
        if (cond_52026.isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("s") ;
        }
        var_cas_ioListFileContents.appendCString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    const GGS_bool cond_54130 = var_cas_generateComplementaryCondition ;
    if (cond_54130.isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1552))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1553))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) ;
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_50749->mIfCondition.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_50749->mIfCondition (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_50749->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1555)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50749->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1567)) ;
      const GGS_bool cond_53458 = (operand_50749->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_53458.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50749->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1583)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)) COMMA_SOURCE_FILE_AT_LINE (1583))) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1585)) COMMA_SOURCE_FILE_AT_LINE (1585))) ;
      ::routine_handleInstructionList (inLexique,  operand_50749->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1586)) ;
      const GGS_bool cond_54118 = (operand_50749->mThenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_54118.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1601)) COMMA_SOURCE_FILE_AT_LINE (1601))) ;
      }
    }else if (cond_54130.isBuiltAndFalse ()) {
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1605))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1606))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1606)) ;
      { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_50749->mIfCondition.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_50749->mIfCondition (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_50749->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1608)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50749->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1620)) ;
      const GGS_bool cond_55293 = (operand_50749->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_55293.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50749->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1636)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1636)) COMMA_SOURCE_FILE_AT_LINE (1636))) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1638)) COMMA_SOURCE_FILE_AT_LINE (1638))) ;
      ::routine_handleInstructionList (inLexique,  operand_50749->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1639)) ;
      const GGS_bool cond_55951 = (operand_50749->mElseInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_55951.isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50749->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1654)) COMMA_SOURCE_FILE_AT_LINE (1654))) ;
      }
    }
    const GGS_bool cond_56070 = (var_cas_elseBranchFinalBank).operator_isEqual (var_cas_thenBranchFinalBank) ;
    if (cond_56070.isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else if (cond_56070.isBuiltAndFalse ()) {
      operand_50749->mEndOfElsePartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1661)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1661)) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence).operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_do_while * operand_56463,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56463 != NULL) {
    GGS_string var_cas_labelInstructionBegin = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1683))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1683)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56463->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1685)) COMMA_SOURCE_FILE_AT_LINE (1685))) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_56463->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1688)) ;
    const GGS_bool cond_57594 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank) ;
    if (cond_57594.isBuiltAndTrue ()) {
      operand_56463->mEndOfRepeatedInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1704)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_57641 (operand_56463->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_57641 = NULL ;
      while (((operand_57641 = enumerator_57641.nextObject ()))) {
        macroValidPointer (operand_57641) ;
        const GGS_bool cond_58008 = (operand_57641->mInstructionList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_58008.isBuiltAndTrue ()) {
          { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_57641->mCondition.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_57641->mCondition (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_56463->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1708)) ;
            }
          }
        }else if (cond_58008.isBuiltAndFalse ()) {
          GGS_string var_cas_nextBranchLabel = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1720))) ;
          var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)) ;
          { typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (operand_57641->mCondition.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_57641->mCondition (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_56463->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1721)) ;
            }
          }
          GGS_uint  var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (inLexique,  operand_57641->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1733)) ;
          const GGS_bool cond_58932 = (var_cas_ioCurrentBank).operator_isNotEqual (var_cas_bank) ;
          if (cond_58932.isBuiltAndTrue ()) {
            operand_57641->mEndOfPartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1749)) ;
          }
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_56463->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56463->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1750)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) COMMA_SOURCE_FILE_AT_LINE (1750))) ;
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_nextBranchLabel, operand_56463->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1751)) COMMA_SOURCE_FILE_AT_LINE (1751))) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_IncDec * operand_59395,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59395 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    const GGS_bool cond_59906 = (operand_59395->mIncrement).operator_and (operand_59395->mSkipIfZero) ;
    if (cond_59906.isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1774)) ;
    }else if (cond_59906.isBuiltAndFalse ()) {
      const GGS_bool cond_60002 = (operand_59395->mIncrement).operator_and ((operand_59395->mSkipIfZero).operator_not ()) ;
      if (cond_60002.isBuiltAndTrue ()) {
        var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)) ;
      }else if (cond_60002.isBuiltAndFalse ()) {
        const GGS_bool cond_60099 = ((operand_59395->mIncrement).operator_not ()).operator_and (operand_59395->mSkipIfZero) ;
        if (cond_60099.isBuiltAndTrue ()) {
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)) ;
        }else if (cond_60099.isBuiltAndFalse ()) {
          var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) ;
        }
      }
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_60368_0 ;
    { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (operand_59395->mRegisterExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59395->mRegisterExpression (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_60368_0 COMMA_SOURCE_FILE_AT_LINE (1784)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_59395->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_59395->m_W_isDestination COMMA_SOURCE_FILE_AT_LINE (1792))) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    { typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (operand_59395->mInstruction.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59395->mInstruction (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1800)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "build_ipic18_assembly_instruction_list"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_assembly_instruction_list (C_Compiler & inLexique,
                                const GGS_programKind  var_cas_inProgramKind,
                                const GGS_sint   var_cas_inROMSize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForBootloaderImplementation,
                                const GGS_luint   var_cas_inBootloaderReservedROMsize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForUserProgramImplementation,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic18_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_assembly_instruction_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages = GGS_string ("") ;
  GGS_routineMap  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_61926 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_61926 = NULL ;
    while (((operand_61926 = enumerator_61926.nextObject ()))) {
      macroValidPointer (operand_61926) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_61926->mRoutineName, operand_61926->mIsNoReturn, operand_61926->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1837)), operand_61926->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1837)), operand_61926->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1837)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62136 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62136 = NULL ;
    while (((operand_62136 = enumerator_62136.nextObject ()))) {
      macroValidPointer (operand_62136) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62136->mRoutineName, operand_62136->mIsNoReturn, operand_62136->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1840)), operand_62136->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1840)), operand_62136->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1840)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_62285 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1842)), true) ;
    const GGS_routineDefinitionList::cElement * operand_62285 = NULL ;
    while (((operand_62285 = enumerator_62285.nextObject ()))) {
      macroValidPointer (operand_62285) ;
      const GGS_bool cond_62499 = ((operand_62285->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1843))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1843)))).operator_and ((operand_62285->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1843))).operator_strictSup (GGS_uint (15U))) ;
      if (cond_62499.isBuiltAndTrue ()) {
        operand_62285->mRequiredBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1845)) ;
      }
      const GGS_bool cond_62677 = ((operand_62285->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1846))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1846)))).operator_and ((operand_62285->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1846))).operator_strictSup (GGS_uint (15U))) ;
      if (cond_62677.isBuiltAndTrue ()) {
        operand_62285->mReturnedBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1848)) ;
      }
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62285->mRoutineName, operand_62285->mIsNoReturn, operand_62285->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1849)), operand_62285->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1849)), operand_62285->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1849)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_63036 (var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_63036 = NULL ;
    while (((operand_63036 = enumerator_63036.nextObject ()))) {
      macroValidPointer (operand_63036) ;
      const GGS_bool cond_63663 = var_cas_routineMap.reader_hasKey (operand_63036->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1854))) ;
      if (cond_63663.isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        if (var_cas_routineMap.isBuilt ()) {
          var_cas_routineMap (HERE)->method_searchKey (inLexique, operand_63036->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1859)) ;
        }
        const GGS_bool cond_63649 = ((((var_cas_isNoReturn).operator_isNotEqual (operand_63036->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_63036->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1860))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_63036->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1860))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_63036->mPreservesBank)) ;
        if (cond_63649.isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_63036->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)) COMMA_SOURCE_FILE_AT_LINE (1861)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_63036->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1862)) ;
        }
      }else if (cond_63663.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_63036->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1865)) ;
      }
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_64029 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_64029 = NULL ;
    while (((operand_64029 = enumerator_64029.nextObject ()))) {
      macroValidPointer (operand_64029) ;
      const GGS_bool cond_64656 = var_cas_routineMap.reader_hasKey (operand_64029->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1870))) ;
      if (cond_64656.isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        if (var_cas_routineMap.isBuilt ()) {
          var_cas_routineMap (HERE)->method_searchKey (inLexique, operand_64029->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1875)) ;
        }
        const GGS_bool cond_64642 = ((((var_cas_isNoReturn).operator_isNotEqual (operand_64029->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_64029->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1876))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_64029->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1876))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_64029->mPreservesBank)) ;
        if (cond_64642.isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_64029->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1877)) COMMA_SOURCE_FILE_AT_LINE (1877)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_64029->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1878)) ;
        }
      }else if (cond_64656.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_64029->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1881)) ;
      }
    }
  }
  GGS_constantMap  var_cas_constantMap = GGS_constantMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1884)) ;
  GGS_lstring  var_cas_romSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("ROM_SIZE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1886)) ;
  var_cas_constantMap.modifier_insertKey (inLexique, var_cas_romSizeString, var_cas_inROMSize COMMA_SOURCE_FILE_AT_LINE (1887)) ;
  const GGS_bool cond_65300 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_regularProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1889))) ;
  if (cond_65300.isBuiltAndTrue ()) {
    GGS_lstring  var_cas_bootloaderSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("BOOTLOADER_SIZE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1890)) ;
    var_cas_constantMap.modifier_insertKey (inLexique, var_cas_bootloaderSizeString, var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)) COMMA_SOURCE_FILE_AT_LINE (1891)) ;
  }
  {
    GGS_constantDefinitionList::cEnumerator enumerator_65345 (var_cas_inPiccoloModel.reader_mConstantDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)), true) ;
    const GGS_constantDefinitionList::cElement * operand_65345 = NULL ;
    while (((operand_65345 = enumerator_65345.nextObject ()))) {
      macroValidPointer (operand_65345) ;
      GGS_sint  var_cas_result ;
      { typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (operand_65345->mExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_65345->mExpression (HERE), var_cas_inRegisterTable, var_cas_constantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1895)) ;
        }
      }
      const GGS_bool cond_65646 = var_cas_inRegisterTable.reader_hasKey (operand_65345->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1896))) ;
      if (cond_65646.isBuiltAndTrue ()) {
        operand_65345->mConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (operand_65345->mConstantName)).operator_concat (GGS_string ("' is already declared as ram register or special register")) COMMA_SOURCE_FILE_AT_LINE (1898)) ;
      }else if (cond_65646.isBuiltAndFalse ()) {
        var_cas_constantMap.modifier_insertKey (inLexique, operand_65345->mConstantName, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1899)) ;
      }
    }
  }
  const GGS_bool cond_65931 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_65931.isBuiltAndTrue ()) {
    ::routine_print_constant_definition (inLexique,  var_cas_constantMap,  var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1904)) ;
  }
  const GGS_bool cond_66703 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1910))) ;
  if (cond_66703.isBuiltAndTrue ()) {
    const GGS_bool cond_66588 = var_cas_routineMap.reader_hasKey (GGS_string ("main")) ;
    if (cond_66588.isBuiltAndTrue ()) {
      GGS_bool var_cas_isNoReturn ;
      GGS_uint  var_cas_requiredBank ;
      GGS_uint  automatic_var_66244_0 ;
      GGS_bool automatic_var_66244_1 ;
      if (var_cas_routineMap.isBuilt ()) {
        var_cas_routineMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1914)), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_66244_0, automatic_var_66244_1 COMMA_SOURCE_FILE_AT_LINE (1914)) ;
      }
      const GGS_bool cond_66403 = (var_cas_isNoReturn).operator_not () ;
      if (cond_66403.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1917)) ;
      }
      const GGS_bool cond_66574 = (var_cas_requiredBank).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_66574.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1920)) ;
      }
    }else if (cond_66588.isBuiltAndFalse ()) {
      var_cas_inPiccoloModel.reader_mEndOfProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1922)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (1923)) ;
    }
  }
  var_cas_outGeneratedInstructionList = GGS_ipic18_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_entryPoint = GGS_uint (4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_66964 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_66964 = NULL ;
    while (((operand_66964 = enumerator_66964.nextObject ()))) {
      macroValidPointer (operand_66964) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1929))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_66964->mRoutineName COMMA_SOURCE_FILE_AT_LINE (1930))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1931)) ;
      const GGS_bool cond_67220 = (var_cas_entryPoint).operator_isEqual (GGS_uint (8U)) ;
      if (cond_67220.isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (12U) ;
      }else if (cond_67220.isBuiltAndFalse ()) {
        const GGS_bool cond_67279 = (var_cas_entryPoint).operator_isEqual (GGS_uint (24U)) ;
        if (cond_67279.isBuiltAndTrue ()) {
          var_cas_entryPoint = GGS_uint (28U) ;
        }
      }
    }
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1939)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_67506 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_67506 = NULL ;
    while (((operand_67506 = enumerator_67506.nextObject ()))) {
      macroValidPointer (operand_67506) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1941))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_67506->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1942)) COMMA_SOURCE_FILE_AT_LINE (1942))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1943)) ;
    }
  }
  const GGS_bool cond_68073 = (var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1946))) ;
  if (cond_68073.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1947))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1948)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1948)) COMMA_SOURCE_FILE_AT_LINE (1948))) ;
  }
  GGS_routineDeclarationList  var_cas_tempBootloaderRoutineDeclarationList = var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation ;
  const GGS_bool cond_68654 = (var_cas_tempBootloaderRoutineDeclarationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_68654.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1953))) ;
    GGS_lstring  var_cas_routineName ;
    GGS_luint  automatic_var_68535_0 ;
    GGS_luint  automatic_var_68535_1 ;
    GGS_bool automatic_var_68535_2 ;
    GGS_bool automatic_var_68535_3 ;
    var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_68535_0, automatic_var_68535_1, automatic_var_68535_2, automatic_var_68535_3 COMMA_SOURCE_FILE_AT_LINE (1955)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1956)) COMMA_SOURCE_FILE_AT_LINE (1956))) ;
  }
  const GGS_bool cond_69015 = var_cas_inHasHighInterrupt ;
  if (cond_69015.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (1960))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1961)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1961)) COMMA_SOURCE_FILE_AT_LINE (1961))) ;
  }
  var_cas_entryPoint = GGS_uint (12U) ;
  GGS_uint _variant_69630 = var_cas_tempBootloaderRoutineDeclarationList.reader_length () ;
  GGS_bool _condition_69630 (_variant_69630.isBuilt (), true) ;
  while (_condition_69630.isBuiltAndTrue ()) {
    _condition_69630 = ((var_cas_tempBootloaderRoutineDeclarationList.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_entryPoint).operator_strictInf (GGS_uint (24U))) ;
    if (_condition_69630.isBuiltAndTrue ()) {
      if (_variant_69630.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1973)) ;
        _condition_69630 = GGS_bool (false) ;
      }else{
        _variant_69630.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1968))) ;
        GGS_lstring  var_cas_routineName ;
        GGS_luint  automatic_var_69474_0 ;
        GGS_luint  automatic_var_69474_1 ;
        GGS_bool automatic_var_69474_2 ;
        GGS_bool automatic_var_69474_3 ;
        var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_69474_0, automatic_var_69474_1, automatic_var_69474_2, automatic_var_69474_3 COMMA_SOURCE_FILE_AT_LINE (1970)) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1971)) COMMA_SOURCE_FILE_AT_LINE (1971))) ;
        var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1972)) ;
      }
    }
  }
  const GGS_bool cond_69950 = var_cas_inHasLowInterrupt ;
  if (cond_69950.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (24U) COMMA_SOURCE_FILE_AT_LINE (1976))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1977)), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1977)) COMMA_SOURCE_FILE_AT_LINE (1977))) ;
  }
  var_cas_entryPoint = GGS_uint (28U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_70115 (var_cas_tempBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_70115 = NULL ;
    while (((operand_70115 = enumerator_70115.nextObject ()))) {
      macroValidPointer (operand_70115) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (1982))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_70115->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (1983)) COMMA_SOURCE_FILE_AT_LINE (1983))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1984)) ;
    }
  }
  GGS_uint  var_cas_localLabelIndex = GGS_uint (0U) ;
  const GGS_bool cond_71546 = var_cas_inHasLowInterrupt ;
  if (cond_71546.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1989)) COMMA_SOURCE_FILE_AT_LINE (1989))) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_70606 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1990)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_70606 = NULL ;
      while (((operand_70606 = enumerator_70606.nextObject ()))) {
        macroValidPointer (operand_70606) ;
        const GGS_bool cond_71517 = (operand_70606->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1991))).operator_isEqual (GGS_string ("low")) ;
        if (cond_71517.isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (1993)) ;
          ::routine_handleInstructionList (inLexique,  operand_70606->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_70606->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)) COMMA_SOURCE_FILE_AT_LINE (1994)) ;
          const GGS_bool cond_71368 = (var_cas_continuesInSequence).operator_not () ;
          if (cond_71368.isBuiltAndTrue ()) {
            operand_70606->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2010)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), operand_70606->mFastReturn COMMA_SOURCE_FILE_AT_LINE (2012))) ;
        }
      }
    }
  }
  const GGS_bool cond_72704 = var_cas_inHasHighInterrupt ;
  if (cond_72704.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2018)) COMMA_SOURCE_FILE_AT_LINE (2018))) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_71773 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2019)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_71773 = NULL ;
      while (((operand_71773 = enumerator_71773.nextObject ()))) {
        macroValidPointer (operand_71773) ;
        const GGS_bool cond_72675 = (operand_71773->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2020))).operator_isEqual (GGS_string ("high")) ;
        if (cond_72675.isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2022)) ;
          ::routine_handleInstructionList (inLexique,  operand_71773->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_71773->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2035)) COMMA_SOURCE_FILE_AT_LINE (2023)) ;
          const GGS_bool cond_72537 = (var_cas_continuesInSequence).operator_not () ;
          if (cond_72537.isBuiltAndTrue ()) {
            operand_71773->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2039)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2041))) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_72784 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)), true) ;
    const GGS_routineDefinitionList::cElement * operand_72784 = NULL ;
    while (((operand_72784 = enumerator_72784.nextObject ()))) {
      macroValidPointer (operand_72784) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank = operand_72784->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2048)) ;
      GGS_routineKind var_cas_routineKind ;
      const GGS_bool cond_73023 = operand_72784->mIsNoReturn ;
      if (cond_73023.isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2051)) ;
      }else if (cond_73023.isBuiltAndFalse ()) {
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (inLexique COMMA_SOURCE_FILE_AT_LINE (2053)) ;
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_72784->mRoutineName COMMA_SOURCE_FILE_AT_LINE (2055))) ;
      ::routine_handleInstructionList (inLexique,  operand_72784->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_72784->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (2056)) ;
      const GGS_bool cond_73710 = (((operand_72784->mIsNoReturn).operator_not ()).operator_and ((operand_72784->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2070))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2070))))).operator_and ((var_cas_currentBank).operator_isNotEqual (operand_72784->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2070)))) ;
      if (cond_73710.isBuiltAndTrue ()) {
        operand_72784->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("execution will not set BSR to ")).operator_concat (operand_72784->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2071)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2071))) COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      }
      const GGS_bool cond_73859 = (operand_72784->mIsNoReturn).operator_and (var_cas_continuesInSequence) ;
      if (cond_73859.isBuiltAndTrue ()) {
        operand_72784->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (2075)) ;
      }
      const GGS_bool cond_74059 = (operand_72784->mIsNoReturn).operator_not () ;
      if (cond_74059.isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, operand_72784->mRoutineName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2078)) COMMA_SOURCE_FILE_AT_LINE (2078))) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("WREG"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2083)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2083)) COMMA_SOURCE_FILE_AT_LINE (2083)) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_74508_0 ;
  { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (var_cas_WREGregister.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_WREGregister (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_74508_0 COMMA_SOURCE_FILE_AT_LINE (2085)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSL"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2093)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2093)) COMMA_SOURCE_FILE_AT_LINE (2093)) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_74845_0 ;
  { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (var_cas_TOSLregister.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_TOSLregister (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_74845_0 COMMA_SOURCE_FILE_AT_LINE (2095)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSH"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2103)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2103)) COMMA_SOURCE_FILE_AT_LINE (2103)) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_75182_0 ;
  { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (var_cas_TOSHregister.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_TOSHregister (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_75182_0 COMMA_SOURCE_FILE_AT_LINE (2105)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSU"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2113)), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2113)) COMMA_SOURCE_FILE_AT_LINE (2113)) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_75519_0 ;
  { typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (var_cas_TOSUregister.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_TOSUregister (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_75519_0 COMMA_SOURCE_FILE_AT_LINE (2115)) ;
    }
  }
  const GGS_bool cond_75907 = var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2123)) ;
  if (cond_75907.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2124)) COMMA_SOURCE_FILE_AT_LINE (2124))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2127)), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2125))) ;
  }
  const GGS_bool cond_76070 = var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2132)) ;
  if (cond_76070.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2133)) COMMA_SOURCE_FILE_AT_LINE (2133))) ;
  }
  const GGS_bool cond_77197 = (var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2135))).operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2135))) ;
  if (cond_77197.isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2138)), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2136))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_SOURCE_FILE_AT_LINE (2144)), var_cas_TOSL_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2142))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, GGS_location (inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_SOURCE_FILE_AT_LINE (2150)), GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (2148))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_SOURCE_FILE_AT_LINE (2155)), var_cas_TOSH_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2153))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_SOURCE_FILE_AT_LINE (2161)), var_cas_TOSU_IPICregisterDescription, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (2159))) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2165))) ;
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2170)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_77386 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_77386 = NULL ;
    while (((operand_77386 = enumerator_77386.nextObject ()))) {
      macroValidPointer (operand_77386) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_SOURCE_FILE_AT_LINE (2172))) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_77386->mRoutineName COMMA_SOURCE_FILE_AT_LINE (2173))) ;
      const GGS_bool cond_77687 = operand_77386->mIsNoReturn ;
      if (cond_77687.isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_77386->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_SOURCE_FILE_AT_LINE (2175)) COMMA_SOURCE_FILE_AT_LINE (2175))) ;
      }else if (cond_77687.isBuiltAndFalse ()) {
        const GGS_bool cond_77829 = (operand_77386->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2176))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (2176))) ;
        if (cond_77829.isBuiltAndTrue ()) {
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, GGS_location (inLexique), operand_77386->mReturnedBank COMMA_SOURCE_FILE_AT_LINE (2177))) ;
        }
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2179))) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (2180)) ;
    }
  }
  const GGS_bool cond_79120 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_79120.isBuiltAndTrue ()) {
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("*") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (GGS_uint (77U), GGS_char (TO_UNICODE (' ')))) ;
    var_cas_ioListFileContents.appendCString ("*\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (GGS_uint (79U), GGS_char (TO_UNICODE ('*')))) ;
    var_cas_ioListFileContents.appendCString ("\n"
      "\n") ;
    const GGS_bool cond_78532 = (var_cas_generationOptimizationMessages.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_78532.isBuiltAndTrue ()) {
      var_cas_ioListFileContents.appendCString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.appendCString ("\n") ;
    }
    var_cas_ioListFileContents.appendCString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
    {
      GGS_ipic18_instructionList::cEnumerator enumerator_78691 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic18_instructionList::cElement * operand_78691 = NULL ;
      while (((operand_78691 = enumerator_78691.nextObject ()))) {
        macroValidPointer (operand_78691) ;
        if (operand_78691->mInstruction.isBuilt ()) {
          operand_78691->mInstruction (HERE)->method_setCurrentAddress (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2196)) ;
        }
        var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2197)).reader_stringByLeftPadding (GGS_uint (5U), GGS_char (TO_UNICODE (' ')))) ;
        var_cas_ioListFileContents.appendCString (": ") ;
        if (operand_78691->mInstruction.isBuilt ()) {
          operand_78691->mInstruction (HERE)->method_displayIPICinstruction (inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2198)) ;
        }
        var_cas_ioListFileContents.appendCString ("\n") ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2200)) ;
      }
    }
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2203))) ;
    var_cas_ioListFileContents.appendCString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_assembly_instruction_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_pic18_checkingAndBuildIPIC (void) {
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_rcall__buildIPICinstructionList, gClassInfoFor__instruction_computed_rcall.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
  enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
  enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_pic18_checkingAndBuildIPIC (void) {
  gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.free () ;
  gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.free () ;
  gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_pic18_checkingAndBuildIPIC (prologueRoutineFor_pic18_checkingAndBuildIPIC, epilogueRoutineFor_pic18_checkingAndBuildIPIC) ;

//---------------------------------------------------------------------------*

