//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'pic18_checkingAndBuildIPIC.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     january 1st, 2009, at 20h26'39"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_checkingAndBuildIPIC.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_checkingAndBuildIPIC.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableFor__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableFor__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & _inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true, true) ;
  {
    GGS_instructionList::cEnumerator enumerator_1728 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_1728 = NULL ;
    while (((operand_1728 = enumerator_1728.nextObject ()))) {
      macroValidPointer (operand_1728) ;
      if (((var_cas_outContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
        operand_1728->mInstruction.reader_mInstructionLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unreachable code") COMMA_SOURCE_FILE_AT_LINE (50)) ;
        var_cas_outContinuesInSequence = GGS_bool (true, true) ;
      }
      const GGS_piccolo_instruction  _temp_1936 = operand_1728->mInstruction ;
      if (_temp_1936._isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_1936._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_1936 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_nobanksel * operand_2379,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2379 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_2379->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"nobank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_savebank * operand_3159,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3159 != NULL) {
    GGS_registerExpression  var_cas_BSRregister ;
    var_cas_BSRregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "BSR"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_BSR_IPICregisterDescription ;
    const GGS_registerExpression  _temp_3780 = var_cas_BSRregister ;
    if (_temp_3780._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_3780._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3780 (HERE), var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_save_IPICregisterDescription ;
    const GGS_registerExpression  _temp_4009 = operand_3159->mRegister ;
    if (_temp_4009._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_4009._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4009 (HERE), var_cas_inRegisterTable, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_3159->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_3159->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (true, false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (126)) ;
    if (((var_cas_ioContinuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
      operand_3159->mEndOfSaveBankInstruction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_3159->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_banksel * operand_5186,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5186 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_5186->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    if (((operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (169)))._operator_strictSup (GGS_uint (true, 15U))).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "selected bank index should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (171)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }else if (((operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)))._operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "useless instruction: the bank "))._operator_concat (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (173))))._operator_concat (GGS_string (true, " is already selected")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
    }else{
      var_cas_ioCurrentBank = operand_5186->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (_inLexique, operand_5186->mInstructionLocation, operand_5186->mBankIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_6381,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6381 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_6882 = operand_6381->mRegisterExpression ;
    if (_temp_6882._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_6882._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6882 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, operand_6381->mInstructionLocation, operand_6381->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_6381->m_W_isDestination COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_7298,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7298 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_7799 = operand_7298->mRegisterExpression ;
    if (_temp_7799._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_7799._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7799 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (_inLexique, operand_7298->mInstructionLocation, operand_7298->mFAinstruction, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8182,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8182 != NULL) {
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_sourceIPICregisterDescription ;
    const GGS_registerExpression  _temp_8742 = operand_8182->mSourceRegisterName ;
    if (_temp_8742._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_8742._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8742 (HERE), var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_destinationIPICregisterDescription ;
    const GGS_registerExpression  _temp_8949 = operand_8182->mDestinationRegisterName ;
    if (_temp_8949._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank _method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (_temp_8949._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8949 (HERE), var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (_inLexique, operand_8182->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_9315,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9315 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_9849 = operand_9315->mRegisterExpression ;
    if (_temp_9849._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_9849._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9849 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_10019 = operand_9315->mBitNumber ;
    if (_temp_10019._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_10019._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10019 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FBA ::constructor_new (_inLexique, operand_9315->mInstructionLocation, operand_9315->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JSR * operand_10345,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10345 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  _temp_10896 = var_cas_inRoutineMap ;
    if (_temp_10896._isBuilt ()) {
      _temp_10896 (HERE)->method_searchKey (_inLexique, operand_10345->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_10345->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
      }
      operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (344)) ;
    }
    if (((var_cas_preservesBank)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
      if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
        operand_10345->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the routine call should preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JSR ::constructor_new (_inLexique, operand_10345->mInstructionLocation, operand_10345->mTargetLabel, operand_10345->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMP * operand_12008,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12008 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_2 ;
    GGS_bool automatic_var_3 ;
    const GGS_routineMap  _temp_12512 = var_cas_inRoutineMap ;
    if (_temp_12512._isBuilt ()) {
      _temp_12512 (HERE)->method_searchKey (_inLexique, operand_12008->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_12008->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (379))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))) ;
      }
      operand_12008->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (387)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_12008->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_12008->mInstructionLocation, operand_12008->mTargetLabel, operand_12008->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_JUMPCC * operand_13437,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13437 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_4 ;
    GGS_bool automatic_var_5 ;
    const GGS_routineMap  _temp_13930 = var_cas_inRoutineMap ;
    if (_temp_13930._isBuilt ()) {
      _temp_13930 (HERE)->method_searchKey (_inLexique, operand_13437->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_13437->mTargetLabel))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (420))) ;
      var_cas_errorMessage.writeString (", but BSR ") ;
      if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.writeString ("is set to ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (425))) ;
      }
      operand_13437->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (428)) ;
    }
    if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
      operand_13437->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    if ((operand_13437->mIsBcc).isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }else{
      var_cas_mode = GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (_inLexique, operand_13437->mInstructionLocation, var_cas_mode, operand_13437->mConditionalBranch, operand_13437->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_15023,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15023 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_CLRWDT ::constructor_new (_inLexique, operand_15023->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_15680,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15680 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_DAW ::constructor_new (_inLexique, operand_15680->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_16334,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16334 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_NOP ::constructor_new (_inLexique, operand_16334->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_16988,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16988 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_POP ::constructor_new (_inLexique, operand_16988->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_17643,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17643 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_PUSH ::constructor_new (_inLexique, operand_17643->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_18300,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18300 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RESET ::constructor_new (_inLexique, operand_18300->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_18958,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18958 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_SLEEP ::constructor_new (_inLexique, operand_18958->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_19627,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19627 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_20088 = operand_19627->mImmediatExpression ;
    if (_temp_20088._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_20088._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_20088 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (602)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_19627->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (605))))._operator_concat (GGS_string (true, " (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (_inLexique, operand_19627->mInstructionLocation, operand_19627->mLiteralInstruction, (var_cas_result)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_20621,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20621 != NULL) {
    if (((operand_20621->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (630)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_20621->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the LFSR register index ("))._operator_concat (operand_20621->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (631)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (631))))._operator_concat (GGS_string (true, ") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  _temp_21243 = operand_20621->mImmediatExpression ;
    if (_temp_21243._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_21243._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21243 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }
    }
    if ((((var_cas_result)._operator_strictSup (GGS_sint (true, 4095L)))._operator_or ((var_cas_result)._operator_strictInf (GGS_sint (true, 0L)))).isBuiltAndTrue ()) {
      operand_20621->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value is evaluated as "))._operator_concat (var_cas_result.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (637))))._operator_concat (GGS_string (true, " (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_LFSR ::constructor_new (_inLexique, operand_20621->mInstructionLocation, operand_20621->mFSRindex, var_cas_result.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_21730,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21730 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_TBLRD ::constructor_new (_inLexique, operand_21730->mInstructionLocation, operand_21730->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_22401,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22401 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_TBLWT ::constructor_new (_inLexique, operand_22401->mInstructionLocation, operand_22401->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_23081,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23081 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (708)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_23880 = operand_23081->mSizeExpression ;
    if (_temp_23880._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_23880._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23880 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (714))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (716))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))._operator_isNotEqual (operand_23081->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).isBuiltAndTrue ()) {
      operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the constant list length ("))._operator_concat (operand_23081->mImmediateExpressionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (718))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (718))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    GGS_uintlist  var_cas_literalValues ;
    var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_24515 (operand_23081->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_24515 = NULL ;
      while (((operand_24515 = enumerator_24515.nextObject ()))) {
        macroValidPointer (operand_24515) ;
        GGS_sint  var_cas_v ;
        const GGS_immediatExpression  _temp_24555 = operand_24515->mExpression ;
        if (_temp_24555._isBuilt ()) {
          typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_24555._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_24555 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_v COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
        }
        if ((((var_cas_v)._operator_strictSup (GGS_sint (true, 255L)))._operator_or ((var_cas_v)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_23081->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "immediate value with index "))._operator_concat (var_cas_idx.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725))))._operator_concat (GGS_string (true, " is evaluated as ")))._operator_concat (var_cas_v.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725))))._operator_concat (GGS_string (true, " (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
        var_cas_literalValues._addAssign_operation ((var_cas_v)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_retlw ::constructor_new (_inLexique, operand_23081->mInstructionLocation, var_cas_literalValues, operand_23081->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_25126,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25126 != NULL) {
    if (((operand_25126->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (753)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_25126->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MNOP ::constructor_new (_inLexique, operand_25126->mInstructionLocation, operand_25126->mOccurrenceFactor COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_25955,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25955 != NULL) {
    GGS_bool var_cas_allPreserveBankSetting ;
    var_cas_allPreserveBankSetting = GGS_bool (true, true) ;
    GGS_bool var_cas_allReturnBank ;
    var_cas_allReturnBank = GGS_bool (true, true) ;
    GGS_uint  var_cas_returnedBankValue ;
    var_cas_returnedBankValue = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26474 (operand_25955->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26474 = NULL ;
      while (((operand_26474 = enumerator_26474.nextObject ()))) {
        macroValidPointer (operand_26474) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  _temp_26604 = var_cas_inRoutineMap ;
        if (_temp_26604._isBuilt ()) {
          _temp_26604 (HERE)->method_searchKey (_inLexique, operand_26474->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (787)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_26474->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (795))) ;
          }
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (798)) ;
        }
        if ((var_cas_preservesBank).isBuiltAndTrue ()) {
          var_cas_allReturnBank = GGS_bool (true, false) ;
        }else if ((((var_cas_returnedBankValue)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_returnedBankValue)._operator_isNotEqual (var_cas_returnedBank))).isBuiltAndTrue ()) {
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((((GGS_string (true, "this routine ensures setting of bank '"))._operator_concat (var_cas_returnedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (803))))._operator_concat (GGS_string (true, "', but ")))._operator_concat (GGS_string (true, "previous routine(s) ensure setting of bank '")))._operator_concat (var_cas_returnedBankValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (804))))._operator_concat (GGS_string (true, "'.")) COMMA_SOURCE_FILE_AT_LINE (805)) ;
        }else{
          var_cas_allPreserveBankSetting = GGS_bool (true, false) ;
          var_cas_returnedBankValue = var_cas_returnedBank ;
        }
        if ((((GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE))._operator_isNotEqual (var_cas_inRoutineKind))._operator_and ((var_cas_isNoReturn)._operator_not ())).isBuiltAndTrue ()) {
          operand_26474->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed bra from a regular routine, the '"))._operator_concat (operand_26474->mValue))._operator_concat (GGS_string (true, "' routine should be declared without any \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }
      }
    }
    if (((var_cas_allReturnBank)._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBankValue ;
    }else if ((((var_cas_allReturnBank)._operator_not ())._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "invoked routine should either all preserve bank, eihter return the same selected bank") COMMA_SOURCE_FILE_AT_LINE (818)) ;
    }
    if (((var_cas_inShouldPreserveBSR)._operator_and ((var_cas_allPreserveBankSetting)._operator_not ())).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "invoked routine(s) do(es) not preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (821)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (830)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_28764 = operand_25955->mSizeExpression ;
    if (_temp_28764._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_28764._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28764 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (834))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 128L))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (836))))._operator_concat (GGS_string (true, ") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))._operator_isNotEqual (operand_25955->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))).isBuiltAndTrue ()) {
      operand_25955->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_25955->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (838)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (838))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (838))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_bra ::constructor_new (_inLexique, operand_25955->mInstructionLocation, operand_25955->mTargetLabels, operand_25955->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_29588,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29588 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_30007 (operand_29588->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30007 = NULL ;
      while (((operand_30007 = enumerator_30007.nextObject ()))) {
        macroValidPointer (operand_30007) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_6 ;
        GGS_bool automatic_var_7 ;
        const GGS_routineMap  _temp_30086 = var_cas_inRoutineMap ;
        if (_temp_30086._isBuilt ()) {
          _temp_30086 (HERE)->method_searchKey (_inLexique, operand_30007->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_30007->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (874))) ;
          }
          operand_30007->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (877)) ;
        }
        if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
          operand_30007->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed goto, the '"))._operator_concat (operand_30007->mValue))._operator_concat (GGS_string (true, "' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (886)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (889)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_31178 = operand_29588->mSizeExpression ;
    if (_temp_31178._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_31178._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31178 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (893))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (894)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 64L))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (895))))._operator_concat (GGS_string (true, ") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (896)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (896)))._operator_isNotEqual (operand_29588->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (896)))).isBuiltAndTrue ()) {
      operand_29588->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_29588->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (897)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (897))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (897))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (898)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_goto ::constructor_new (_inLexique, operand_29588->mInstructionLocation, operand_29588->mTargetLabels, operand_29588->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_rcall.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_rcall__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_rcall * operand_32002,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32002 != NULL) {
    GGS_bool var_cas_allPreserveBank ;
    var_cas_allPreserveBank = GGS_bool (true, true) ;
    GGS_bool var_cas_someReturnsBank ;
    var_cas_someReturnsBank = GGS_bool (true, false) ;
    GGS_uint  var_cas_returnedBankSelection ;
    var_cas_returnedBankSelection = var_cas_ioCurrentBank ;
    {
      GGS_lstringlist::cEnumerator enumerator_32532 (operand_32002->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_32532 = NULL ;
      while (((operand_32532 = enumerator_32532.nextObject ()))) {
        macroValidPointer (operand_32532) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  _temp_32662 = var_cas_inRoutineMap ;
        if (_temp_32662._isBuilt ()) {
          _temp_32662 (HERE)->method_searchKey (_inLexique, operand_32532->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (931)) ;
        }
        if ((((var_cas_requiredBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredBank)._operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage ;
          var_cas_errorMessage = (((GGS_string (true, "the routine '"))._operator_concat (operand_32532->mValue))._operator_concat (GGS_string (true, "' requires BSR to be set to ")))._operator_concat (var_cas_requiredBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
          var_cas_errorMessage.writeString (", but BSR ") ;
          if (((var_cas_ioCurrentBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.writeString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.writeString ("is set to ") ;
            var_cas_errorMessage._dotAssign_operation (var_cas_ioCurrentBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
          }
          operand_32532->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (941)) ;
        }
        if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
          operand_32532->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for being named in a computed rcall, the '"))._operator_concat (operand_32532->mValue))._operator_concat (GGS_string (true, "' routine should be declared without the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (944)) ;
        }
        if (((var_cas_inShouldPreserveBSR)._operator_and ((var_cas_preservesBank)._operator_not ())).isBuiltAndTrue ()) {
          operand_32532->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_32532->mValue))._operator_concat (GGS_string (true, "' routine should preserved bank selection")) COMMA_SOURCE_FILE_AT_LINE (947)) ;
        }else if ((((var_cas_inShouldPreserveBSR)._operator_not ())._operator_and ((var_cas_preservesBank)._operator_not ())).isBuiltAndTrue ()) {
          if (((var_cas_someReturnsBank)._operator_not ()).isBuiltAndTrue ()) {
            var_cas_returnedBankSelection = var_cas_returnedBank ;
            var_cas_someReturnsBank = GGS_bool (true, true) ;
          }else if (((var_cas_returnedBankSelection)._operator_isNotEqual (var_cas_returnedBank)).isBuiltAndTrue ()) {
            GGS_string var_cas_errorMessage ;
            var_cas_errorMessage = ((GGS_string (true, "the '"))._operator_concat (operand_32532->mValue))._operator_concat (GGS_string (true, "' routine returns ")) ;
            if (((var_cas_returnedBank)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_errorMessage.writeString ("no bank selection") ;
            }else{
              var_cas_errorMessage.writeString ("bank selection set to  ") ;
              var_cas_errorMessage._dotAssign_operation (var_cas_returnedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (956))) ;
            }
            var_cas_errorMessage.writeString (", but previous routine(s) return(s) ") ;
            if (((var_cas_returnedBankSelection)._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_errorMessage.writeString ("no bank selection") ;
            }else{
              var_cas_errorMessage.writeString ("bank selection set to  ") ;
              var_cas_errorMessage._dotAssign_operation (var_cas_returnedBankSelection.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (962))) ;
            }
            operand_32532->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (965)) ;
          }
        }else if ((((var_cas_inShouldPreserveBSR)._operator_not ())._operator_and (var_cas_preservesBank)).isBuiltAndTrue ()) {
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    var_cas_ioCurrentBank = var_cas_returnedBankSelection ;
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  _temp_34582 = operand_32002->mSizeExpression ;
    if (_temp_34582._isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_34582._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_34582 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (973)) ;
      }
    }
    if (((var_cas_size)._operator_strictInf (GGS_sint (true, 2L))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (975))))._operator_concat (GGS_string (true, ") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (976)) ;
    }else if (((var_cas_size)._operator_strictSup (GGS_sint (true, 64L))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the computed range ("))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (977))))._operator_concat (GGS_string (true, ") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }else if (((var_cas_size.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (978)))._operator_isNotEqual (operand_32002->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (978)))).isBuiltAndTrue ()) {
      operand_32002->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the routine name list length ("))._operator_concat (operand_32002->mTargetLabels.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (979)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (979))))._operator_concat (GGS_string (true, ") should be equal to the computed range (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (979))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (980)) ;
    }
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (982))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (983)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_computed_rcall ::constructor_new (_inLexique, operand_32002->mInstructionLocation, operand_32002->mTargetLabels, var_cas_label0, operand_32002->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_35499,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35499 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_35499->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_35499->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1013)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1016))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1017)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_35499->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    ::routine_handleInstructionList (_inLexique,  operand_35499->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_35499->mEndOfInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1035)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_35499->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_35499->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_37268,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37268 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_37268->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  _temp_38066 = operand_37268->mRegisterExpression ;
    if (_temp_38066._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_38066._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_38066 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (_inLexique, operand_37268->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_38422 = operand_37268->mInstruction ;
    if (_temp_38422._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_38422._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_38422 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_38828,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38828 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_39320 = operand_38828->mRegisterExpression ;
    if (_temp_39320._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_39320._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_39320 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_39490 = operand_38828->mBitNumber ;
    if (_temp_39490._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_39490._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_39490 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (_inLexique, operand_38828->mInstructionLocation, operand_38828->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_39801 = operand_38828->mInstruction ;
    if (_temp_39801._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_39801._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_39801 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableFor__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableFor__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_40853,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40853 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (_inLexique,  operand_40853->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    }else{
      var_cas_condition = operand_40853->mCondition ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_41725,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41725 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_41972,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41972 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_41972->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    }else{
      var_cas_comparison = operand_41972->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_42567 = operand_41972->mRegisterExpression ;
    if (_temp_42567._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_42567._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_42567 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_registerComparisonCondition * operand_43036,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43036 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (_inLexique,  operand_43036->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1249)) ;
    }else{
      var_cas_comparison = operand_43036->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (_inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1253)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_incDecRegisterInCondition * operand_43503,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43503 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  _temp_43910 = operand_43503->mRegisterExpression ;
    if (_temp_43910._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_43910._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_43910 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_43503->mIncrement, operand_43503->m_W_isDestination, (operand_43503->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_44441,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44441 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_registerTestCondition * operand_44682,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44682 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_11 ;
    const GGS_registerExpression  _temp_45089 = operand_44682->mRegisterExpression ;
    if (_temp_45089._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_45089._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_45089 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_44682->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch), GGS_bool (true, true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_45570,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45570 != NULL) {
    if (((operand_45570->mBranchIfZero)._operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (true, 3U) ;
    }else{
      var_cas_outInstructionCount = GGS_uint (true, 2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_45897,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45897 != NULL) {
    const GGS_conditionExpression  _temp_46247 = operand_45897->mCondition ;
    if (_temp_46247._isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_46247._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_46247 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch)._operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_negateCondition * operand_46620,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46620 != NULL) {
    const GGS_conditionExpression  _temp_46733 = operand_46620->mCondition ;
    if (_temp_46733._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_46733._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_46733 (HERE), (var_cas_inComplementaryBranch)._operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1374)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_46928,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46928 != NULL) {
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      const GGS_conditionExpression  _temp_47317 = operand_46928->mLeftExpression ;
      if (_temp_47317._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_47317._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_47317 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1394)) ;
        }
      }
      const GGS_conditionExpression  _temp_47605 = operand_46928->mRightExpression ;
      if (_temp_47605._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_47605._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_47605 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1405)) ;
        }
      }
    }else{
      GGS_string var_cas_label0 ;
      var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1417)) ;
      const GGS_conditionExpression  _temp_47985 = operand_46928->mLeftExpression ;
      if (_temp_47985._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_47985._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_47985 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1418)) ;
        }
      }
      const GGS_conditionExpression  _temp_48266 = operand_46928->mRightExpression ;
      if (_temp_48266._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_48266._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_48266 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1429)) ;
        }
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & _inLexique,
                                const cPtr_andCondition * operand_48756,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48756 != NULL) {
    GGS_uint  var_cas_countLeft ;
    const GGS_conditionExpression  _temp_48894 = operand_48756->mLeftExpression ;
    if (_temp_48894._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_48894._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_48894 (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1451)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    const GGS_conditionExpression  _temp_49018 = operand_48756->mLeftExpression ;
    if (_temp_49018._isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_49018._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49018 (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft._add_operation (_inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_49272,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49272 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  _temp_49712 = operand_49272->mRegisterExpression ;
    if (_temp_49712._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_49712._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49712 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1478)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_49882 = operand_49272->mBitNumber ;
    if (_temp_49882._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_49882._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_49882 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (_inLexique, var_cas_inInstructionLocation, (operand_49272->mBTFSSinstruction)._operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_50440,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50440 != NULL) {
    var_cas_outInstructionCount = GGS_uint (true, 2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_50677,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50677 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition ;
    var_cas_generateComplementaryCondition = GGS_bool (true, false) ;
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (1525)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      const GGS_conditionExpression  _temp_51254 = operand_50677->mIfCondition ;
      if (_temp_51254._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_51254._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_51254 (HERE), GGS_bool (true, true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1526)) ;
        }
      }
      if (((operand_50677->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1527)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_directCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1528)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      const GGS_conditionExpression  _temp_51439 = operand_50677->mIfCondition ;
      if (_temp_51439._isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition _method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (_temp_51439._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_51439 (HERE), GGS_bool (true, false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1530)) ;
        }
      }
      if (((operand_50677->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1531)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_complementaryCount._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) ;
      }
      if (((var_cas_complementaryCount)._operator_strictInf (var_cas_directCount)).isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true, true) ;
        var_cas_ioListFileContents.writeString ("  line ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1536)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1536))) ;
        var_cas_ioListFileContents.writeString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents._dotAssign_operation (var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1537)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1537))) ;
        var_cas_ioListFileContents.writeString (" instruction") ;
        if (((var_cas_directCount._substract_operation (_inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1538)))._operator_strictSup (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("s") ;
        }
        var_cas_ioListFileContents.writeString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank ;
    var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank ;
    var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    if ((var_cas_generateComplementaryCondition).isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1551))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) ;
      const GGS_conditionExpression  _temp_52504 = operand_50677->mIfCondition ;
      if (_temp_52504._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_52504._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_52504 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_50677->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1553)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_50677->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1565)) ;
      if (((operand_50677->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1580)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_50677->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_50677->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_50677->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_50677->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1584)) ;
      if (((operand_50677->mThenInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1598)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_50677->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }else{
      GGS_string var_cas_label_nextCondition ;
      var_cas_label_nextCondition = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1603))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) ;
      GGS_string var_cas_label_endOfIfinstruction ;
      var_cas_label_endOfIfinstruction = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1604))) ;
      var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      const GGS_conditionExpression  _temp_54340 = operand_50677->mIfCondition ;
      if (_temp_54340._isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_54340._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_54340 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_50677->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        }
      }
      ::routine_handleInstructionList (_inLexique,  operand_50677->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1618)) ;
      if (((operand_50677->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1633)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_50677->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_50677->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_nextCondition, operand_50677->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_50677->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1637)) ;
      if (((operand_50677->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1651)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label_endOfIfinstruction, operand_50677->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }
    if (((var_cas_elseBranchFinalBank)._operator_isEqual (var_cas_thenBranchFinalBank)).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else{
      operand_50677->mEndOfElsePartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1659)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence)._operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_56385,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56385 != NULL) {
    GGS_string var_cas_labelInstructionBegin ;
    var_cas_labelInstructionBegin = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1681))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1681)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_56385->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank ;
    var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (_inLexique,  operand_56385->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1686)) ;
    if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_56385->mEndOfRepeatedInstructionList.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1702)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_57563 (operand_56385->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_57563 = NULL ;
      while (((operand_57563 = enumerator_57563.nextObject ()))) {
        macroValidPointer (operand_57563) ;
        if (((operand_57563->mInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1705)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          const GGS_conditionExpression  _temp_57660 = operand_57563->mCondition ;
          if (_temp_57660._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_57660._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_57660 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, false), operand_56385->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1706)) ;
            }
          }
        }else{
          GGS_string var_cas_nextBranchLabel ;
          var_cas_nextBranchLabel = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1718))) ;
          var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1718)) ;
          const GGS_conditionExpression  _temp_58078 = operand_57563->mCondition ;
          if (_temp_58078._isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition _method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (_temp_58078._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_58078 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true, true), operand_56385->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1719)) ;
            }
          }
          GGS_uint  var_cas_bank ;
          var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (_inLexique,  operand_57563->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1731)) ;
          if (((var_cas_ioCurrentBank)._operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
            operand_57563->mEndOfPartLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1747)) ;
          }
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, operand_56385->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_labelInstructionBegin, operand_56385->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
          var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_nextBranchLabel, operand_56385->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_59317,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59317 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_59317->mIncrement)._operator_and (operand_59317->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_59317->mIncrement)._operator_and ((operand_59317->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_59317->mIncrement)._operator_not ())._operator_and (operand_59317->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_12 ;
    const GGS_registerExpression  _temp_60181 = operand_59317->mRegisterExpression ;
    if (_temp_60181._isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_60181._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_60181 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (1782)) ;
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, operand_59317->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_59317->m_W_isDestination COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_piccolo_instruction  _temp_60568 = operand_59317->mInstruction ;
    if (_temp_60568._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList _method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (_temp_60568._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_60568 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1798)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "build_ipic18_assembly_instruction_list"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_assembly_instruction_list (C_Compiler & _inLexique,
                                const GGS_programKind  var_cas_inProgramKind,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForBootloaderImplementation,
                                const GGS_luint   var_cas_inBootloaderReservedROMsize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForUserProgramImplementation,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic18_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_assembly_instruction_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages ;
  var_cas_generationOptimizationMessages = GGS_string (true, "") ;
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_61828 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_61828 = NULL ;
    while (((operand_61828 = enumerator_61828.nextObject ()))) {
      macroValidPointer (operand_61828) ;
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_61828->mRoutineName, operand_61828->mIsNoReturn, operand_61828->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1834)), operand_61828->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1834)), operand_61828->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1834)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62038 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62038 = NULL ;
    while (((operand_62038 = enumerator_62038.nextObject ()))) {
      macroValidPointer (operand_62038) ;
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_62038->mRoutineName, operand_62038->mIsNoReturn, operand_62038->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1837)), operand_62038->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1837)), operand_62038->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1837)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_62187 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1839)), true) ;
    const GGS_routineDefinitionList::cElement * operand_62187 = NULL ;
    while (((operand_62187 = enumerator_62187.nextObject ()))) {
      macroValidPointer (operand_62187) ;
      if ((((operand_62187->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1840)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_62187->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1840)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_62187->mRequiredBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
      }
      if ((((operand_62187->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1843)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((operand_62187->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1843)))._operator_strictSup (GGS_uint (true, 15U)))).isBuiltAndTrue ()) {
        operand_62187->mReturnedBank.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1845)) ;
      }
      var_cas_routineMap.modifier_insertKey (_inLexique, operand_62187->mRoutineName, operand_62187->mIsNoReturn, operand_62187->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1846)), operand_62187->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1846)), operand_62187->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1846)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62938 (var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62938 = NULL ;
    while (((operand_62938 = enumerator_62938.nextObject ()))) {
      macroValidPointer (operand_62938) ;
      if ((var_cas_routineMap.reader_hasKey (_inLexique, operand_62938->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1851)) COMMA_SOURCE_FILE_AT_LINE (1851))).isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  _temp_63131 = var_cas_routineMap ;
        if (_temp_63131._isBuilt ()) {
          _temp_63131 (HERE)->method_searchKey (_inLexique, operand_62938->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1856)) ;
        }
        if ((((((var_cas_isNoReturn)._operator_isNotEqual (operand_62938->mIsNoReturn))._operator_or ((var_cas_requiredBank)._operator_isNotEqual (operand_62938->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1857)))))._operator_or ((var_cas_returnedBank)._operator_isNotEqual (operand_62938->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1857)))))._operator_or ((var_cas_preservesBank)._operator_isNotEqual (operand_62938->mPreservesBank))).isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (_inLexique, operand_62938->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1858)) COMMA_SOURCE_FILE_AT_LINE (1858)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_62938->mRoutineName))._operator_concat (GGS_string (true, "' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1859)) ;
        }
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bootloader specification requires the implementation to define the '"))._operator_concat (operand_62938->mRoutineName))._operator_concat (GGS_string (true, "' routine")) COMMA_SOURCE_FILE_AT_LINE (1862)) ;
      }
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_63931 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_63931 = NULL ;
    while (((operand_63931 = enumerator_63931.nextObject ()))) {
      macroValidPointer (operand_63931) ;
      if ((var_cas_routineMap.reader_hasKey (_inLexique, operand_63931->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1867)) COMMA_SOURCE_FILE_AT_LINE (1867))).isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  _temp_64124 = var_cas_routineMap ;
        if (_temp_64124._isBuilt ()) {
          _temp_64124 (HERE)->method_searchKey (_inLexique, operand_63931->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1872)) ;
        }
        if ((((((var_cas_isNoReturn)._operator_isNotEqual (operand_63931->mIsNoReturn))._operator_or ((var_cas_requiredBank)._operator_isNotEqual (operand_63931->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1873)))))._operator_or ((var_cas_returnedBank)._operator_isNotEqual (operand_63931->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1873)))))._operator_or ((var_cas_preservesBank)._operator_isNotEqual (operand_63931->mPreservesBank))).isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (_inLexique, operand_63931->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1874)) COMMA_SOURCE_FILE_AT_LINE (1874)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_63931->mRoutineName))._operator_concat (GGS_string (true, "' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1875)) ;
        }
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bootloader specification requires the implementation to define the '"))._operator_concat (operand_63931->mRoutineName))._operator_concat (GGS_string (true, "' routine")) COMMA_SOURCE_FILE_AT_LINE (1878)) ;
      }
    }
  }
  GGS_constantMap  var_cas_constantMap ;
  var_cas_constantMap = GGS_constantMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_constantDefinitionList::cEnumerator enumerator_64815 (var_cas_inPiccoloModel.reader_mConstantDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1882)), true) ;
    const GGS_constantDefinitionList::cElement * operand_64815 = NULL ;
    while (((operand_64815 = enumerator_64815.nextObject ()))) {
      macroValidPointer (operand_64815) ;
      GGS_sint  var_cas_result ;
      const GGS_immediatExpression  _temp_64894 = operand_64815->mExpression ;
      if (_temp_64894._isBuilt ()) {
        typeCategoryMethod__immediatExpression__eval _method = findCategoryMethod__immediatExpression__eval (_temp_64894._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_64894 (HERE), var_cas_inRegisterTable, var_cas_constantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1883)) ;
        }
      }
      if ((var_cas_inRegisterTable.reader_hasKey (_inLexique, operand_64815->mConstantName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1884)) COMMA_SOURCE_FILE_AT_LINE (1884))).isBuiltAndTrue ()) {
        operand_64815->mConstantName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "'"))._operator_concat (operand_64815->mConstantName))._operator_concat (GGS_string (true, "' is alreday declared as ram register or special register")) COMMA_SOURCE_FILE_AT_LINE (1886)) ;
      }else{
        var_cas_constantMap.modifier_insertKey (_inLexique, operand_64815->mConstantName, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1887)) ;
      }
    }
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (1891)))).isBuiltAndTrue ()) {
    ::routine_print_constant_definition (_inLexique,  var_cas_constantMap,  var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1892)) ;
  }
  if (((var_cas_inProgramKind)._operator_isNotEqual (GGS_programKind::constructor_userProgram (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    if ((var_cas_routineMap.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1899))).isBuiltAndTrue ()) {
      GGS_bool var_cas_isNoReturn ;
      GGS_uint  var_cas_requiredBank ;
      GGS_uint  automatic_var_13 ;
      GGS_bool automatic_var_14 ;
      const GGS_routineMap  _temp_65645 = var_cas_routineMap ;
      if (_temp_65645._isBuilt ()) {
        _temp_65645 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_13, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (1902)) ;
      }
      if (((var_cas_isNoReturn)._operator_not ()).isBuiltAndTrue ()) {
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1905)) ;
      }
      if (((var_cas_requiredBank)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      }
    }else{
      var_cas_inPiccoloModel.reader_mEndOfProgram (_inLexique COMMA_SOURCE_FILE_AT_LINE (1910)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (1911)) ;
    }
  }
  var_cas_outGeneratedInstructionList = GGS_ipic18_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_entryPoint ;
  var_cas_entryPoint = GGS_uint (true, 4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_66428 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_66428 = NULL ;
    while (((operand_66428 = enumerator_66428.nextObject ()))) {
      macroValidPointer (operand_66428) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_66428->mRoutineName COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1919)) ;
      if (((var_cas_entryPoint)._operator_isEqual (GGS_uint (true, 8U))).isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (true, 12U) ;
      }else if (((var_cas_entryPoint)._operator_isEqual (GGS_uint (true, 24U))).isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (true, 28U) ;
      }
    }
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1927)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_66970 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_66970 = NULL ;
    while (((operand_66970 = enumerator_66970.nextObject ()))) {
      macroValidPointer (operand_66970) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), operand_66970->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1931)) ;
    }
  }
  if (((var_cas_inProgramKind)._operator_isNotEqual (GGS_programKind::constructor_userProgram (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  GGS_routineDeclarationList  var_cas_tempBootloaderRoutineDeclarationList ;
  var_cas_tempBootloaderRoutineDeclarationList = var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation ;
  if (((var_cas_tempBootloaderRoutineDeclarationList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1940)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 4U) COMMA_HERE)) ;
    GGS_lstring  var_cas_routineName ;
    GGS_luint  automatic_var_15 ;
    GGS_luint  automatic_var_16 ;
    GGS_bool automatic_var_17 ;
    GGS_bool automatic_var_18 ;
    var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (_inLexique, var_cas_routineName, automatic_var_15, automatic_var_16, automatic_var_17, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (1943)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_high_interrupt"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_entryPoint = GGS_uint (true, 12U) ;
  GGS_uint _variant_69094 = var_cas_tempBootloaderRoutineDeclarationList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1953)) ;
  GGS_bool _condition_69094 (_variant_69094._isBuilt (), true) ;
  while (_condition_69094.isBuiltAndTrue ()) {
    _condition_69094 = ((var_cas_tempBootloaderRoutineDeclarationList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1954)))._operator_strictSup (GGS_uint (true, 0U)))._operator_and ((var_cas_entryPoint)._operator_strictInf (GGS_uint (true, 24U))) ;
    if (_condition_69094.isBuiltAndTrue ()) {
      if (_variant_69094.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1961)) ;
        _condition_69094 = GGS_bool (true, false) ;
      }else{
        _variant_69094._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, var_cas_entryPoint COMMA_HERE)) ;
        GGS_lstring  var_cas_routineName ;
        GGS_luint  automatic_var_19 ;
        GGS_luint  automatic_var_20 ;
        GGS_bool automatic_var_21 ;
        GGS_bool automatic_var_22 ;
        var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (_inLexique, var_cas_routineName, automatic_var_19, automatic_var_20, automatic_var_21, automatic_var_22 COMMA_SOURCE_FILE_AT_LINE (1958)) ;
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
        var_cas_entryPoint = var_cas_entryPoint._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1960)) ;
      }
    }
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_low_interrupt"), GGS_location (_inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_entryPoint = GGS_uint (true, 28U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_69579 (var_cas_tempBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_69579 = NULL ;
    while (((operand_69579 = enumerator_69579.nextObject ()))) {
      macroValidPointer (operand_69579) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), operand_69579->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1972)) ;
    }
  }
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_low_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_70070 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1978)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_70070 = NULL ;
      while (((operand_70070 = enumerator_70070.nextObject ()))) {
        macroValidPointer (operand_70070) ;
        if (((operand_70070->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1979)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_70070->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_70070->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1982)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_70070->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (1998)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), operand_70070->mFastReturn COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_high_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_71237 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2007)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_71237 = NULL ;
      while (((operand_71237 = enumerator_71237.nextObject ()))) {
        macroValidPointer (operand_71237) ;
        if (((operand_71237->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2008)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank ;
          var_cas_currentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (_inLexique,  operand_71237->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_71237->mFastReturn)._operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2011)) ;
          if (((var_cas_continuesInSequence)._operator_not ()).isBuiltAndTrue ()) {
            operand_71237->mEndOfInterruptLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2027)) ;
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_72248 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (2034)), true) ;
    const GGS_routineDefinitionList::cElement * operand_72248 = NULL ;
    while (((operand_72248 = enumerator_72248.nextObject ()))) {
      macroValidPointer (operand_72248) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank ;
      var_cas_currentBank = operand_72248->mRequiredBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2036)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_72248->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (_inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (_inLexique COMMA_HERE) ;
      }
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_72248->mRoutineName COMMA_HERE)) ;
      ::routine_handleInstructionList (_inLexique,  operand_72248->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_72248->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (2044)) ;
      if (((((operand_72248->mIsNoReturn)._operator_not ())._operator_and ((operand_72248->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2058)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))))._operator_and ((var_cas_currentBank)._operator_isNotEqual (operand_72248->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2058))))).isBuiltAndTrue ()) {
        operand_72248->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "execution will not set BSR to "))._operator_concat (operand_72248->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2059)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2059))) COMMA_SOURCE_FILE_AT_LINE (2060)) ;
      }
      if (((operand_72248->mIsNoReturn)._operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_72248->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      }
      if (((operand_72248->mIsNoReturn)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, operand_72248->mRoutineName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2066)) COMMA_HERE)) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister ;
  var_cas_WREGregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_23 ;
  const GGS_registerExpression  _temp_73855 = var_cas_WREGregister ;
  if (_temp_73855._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_73855._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_73855 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (2073)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister ;
  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_24 ;
  const GGS_registerExpression  _temp_74192 = var_cas_TOSLregister ;
  if (_temp_74192._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_74192._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_74192 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_24 COMMA_SOURCE_FILE_AT_LINE (2083)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister ;
  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_25 ;
  const GGS_registerExpression  _temp_74529 = var_cas_TOSHregister ;
  if (_temp_74529._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_74529._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_74529 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_25 COMMA_SOURCE_FILE_AT_LINE (2093)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister ;
  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSU"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_26 ;
  const GGS_registerExpression  _temp_74866 = var_cas_TOSUregister ;
  if (_temp_74866._isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess _method = findCategoryMethod__registerExpression__resolveAccess (_temp_74866._galgasObjectRunTimeInfo ()) ;
    if (_method != NULL) {
      _method (_inLexique, _temp_74866 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (true, 0U), var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (2103)) ;
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2111))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2120))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2123)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (2123)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSL_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_uint (true, 0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSH_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), var_cas_TOSU_IPICregisterDescription, GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2158)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_76852 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_76852 = NULL ;
    while (((operand_76852 = enumerator_76852.nextObject ()))) {
      macroValidPointer (operand_76852) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_76852->mRoutineName COMMA_HERE)) ;
      if ((operand_76852->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_JUMP ::constructor_new (_inLexique, GGS_location (_inLexique), operand_76852->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (_inLexique COMMA_HERE) COMMA_HERE)) ;
      }else if (((operand_76852->mReturnedBank.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (2164)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (_inLexique, GGS_location (_inLexique), operand_76852->mReturnedBank COMMA_HERE)) ;
      }
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (2168)) ;
    }
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (2171)))).isBuiltAndTrue ()) {
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2172))) ;
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("*") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2173))) ;
    var_cas_ioListFileContents.writeString ("*\n") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (2174))) ;
    var_cas_ioListFileContents.writeString ("\n"
      "\n") ;
    if (((var_cas_generationOptimizationMessages.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (2175)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioListFileContents.writeString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents._dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.writeString ("\n") ;
    }
    var_cas_ioListFileContents.writeString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (true, 0U) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = GGS_uint (true, 0U) ;
    {
      GGS_ipic18_instructionList::cEnumerator enumerator_78153 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic18_instructionList::cElement * operand_78153 = NULL ;
      while (((operand_78153 = enumerator_78153.nextObject ()))) {
        macroValidPointer (operand_78153) ;
        const GGS_ipic18_instruction  _temp_78194 = operand_78153->mInstruction ;
        if (_temp_78194._isBuilt ()) {
          _temp_78194 (HERE)->method_setCurrentAddress (_inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2184)) ;
        }
        var_cas_ioListFileContents._dotAssign_operation (var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2185)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 5U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (2185))) ;
        var_cas_ioListFileContents.writeString (": ") ;
        const GGS_ipic18_instruction  _temp_78339 = operand_78153->mInstruction ;
        if (_temp_78339._isBuilt ()) {
          _temp_78339 (HERE)->method_displayIPICinstruction (_inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2186)) ;
        }
        var_cas_ioListFileContents.writeString ("\n") ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (2188)) ;
      }
    }
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2191))) ;
    var_cas_ioListFileContents.writeString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_assembly_instruction_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_pic18_checkingAndBuildIPIC (void) {
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_rcall__buildIPICinstructionList, gClassInfoFor__instruction_computed_rcall.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_pic18_checkingAndBuildIPIC (prologueRoutineFor_pic18_checkingAndBuildIPIC,
                                   NULL) ;

//---------------------------------------------------------------------------*

