//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'pic18_checkingAndBuildIPIC.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 4th, 2009, at 15h1'20"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_checkingAndBuildIPIC.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_checkingAndBuildIPIC.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.buildIPICinstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__buildIPICinstructionList> gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__buildIPICinstructionList (typeCategoryMethod__piccolo_instruction__buildIPICinstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__buildIPICinstructionList
findCategoryMethod__piccolo_instruction__buildIPICinstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__buildIPICinstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.count ()) {
    result = gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (superClassPtr) ;
      gDispatchTableForMethod__piccolo_instruction__buildIPICinstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "handleInstructionList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleInstructionList (C_Compiler & inLexique,
                                const GGS_instructionList   var_cas_inInstructionList,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_outContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outContinuesInSequence = GGS_bool (true) ;
  {
    GGS_instructionList::cEnumerator enumerator_1728 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_1728 = NULL ;
    while (((operand_1728 = enumerator_1728.nextObject ()))) {
      macroValidPointer (operand_1728) ;
      if (((var_cas_outContinuesInSequence).operator_not ()).isBuiltAndTrue ()) {
        operand_1728->mInstruction.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unreachable code") COMMA_SOURCE_FILE_AT_LINE (50)) ;
        var_cas_outContinuesInSequence = GGS_bool (true) ;
      }
      const GGS_piccolo_instruction  temp_1936 = operand_1728->mInstruction ;
      if (temp_1936.isBuilt ()) {
        typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_1936.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_1936 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_outContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_nobanksel.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_nobanksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_nobanksel * operand_2379,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2379 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_2379->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"nobank\" here: BSR should be preserved (use it in a \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_savebank.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_savebank__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_savebank * operand_3159,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3159 != NULL) {
    GGS_registerExpression  var_cas_BSRregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("BSR"), GGS_location (inLexique) COMMA_HERE), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_BSR_IPICregisterDescription ;
    const GGS_registerExpression  temp_3780 = var_cas_BSRregister ;
    if (temp_3780.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_3780.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3780 (HERE), var_cas_inRegisterTable, var_cas_BSR_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_save_IPICregisterDescription ;
    const GGS_registerExpression  temp_4009 = operand_3159->mRegister ;
    if (temp_4009.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_4009.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_4009 (HERE), var_cas_inRegisterTable, var_cas_save_IPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3159->mInstructionLocation, var_cas_BSR_IPICregisterDescription, var_cas_save_IPICregisterDescription COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_3159->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  GGS_bool (false),  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (126)) ;
    if (((var_cas_ioContinuesInSequence).operator_not ()).isBuiltAndTrue ()) {
      operand_3159->mEndOfSaveBankInstruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("useless saving: execution does reach the end of \"savebank\" instruction list") COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_3159->mInstructionLocation, var_cas_save_IPICregisterDescription, var_cas_BSR_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_banksel.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_banksel__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_banksel * operand_5186,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5186 != NULL) {
    if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
      operand_5186->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("cannot use \"banksel\" here: BSR should be preserved (use it in \"banksave\" construct)") COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
    if (((operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (169))).operator_strictSup (GGS_uint (15U))).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("selected bank idx should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (171)) ;
      var_cas_ioCurrentBank = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
    }else if (((operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (172))).operator_isEqual (var_cas_ioCurrentBank)).isBuiltAndTrue ()) {
      operand_5186->mBankIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("useless instruction: the bank ")).operator_concat (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (173)))).operator_concat (GGS_string (" is already selected")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
    }else{
      var_cas_ioCurrentBank = operand_5186->mBankIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, operand_5186->mInstructionLocation, operand_5186->mBankIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FDA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FDA * operand_6379,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  temp_6880 = operand_6379->mRegisterExpression ;
    if (temp_6880.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_6880.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_6880 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_6379->mInstructionLocation, operand_6379->mInstruction_FDA_base_code, var_cas_IPICregisterDescription, operand_6379->m_W_isDestination COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FA * operand_7296,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7296 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  temp_7797 = operand_7296->mRegisterExpression ;
    if (temp_7797.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_7797.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_7797 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_7296->mInstructionLocation, operand_7296->mFAinstruction, var_cas_IPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_MOVFF.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MOVFF * operand_8180,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8180 != NULL) {
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_sourceIPICregisterDescription ;
    const GGS_registerExpression  temp_8740 = operand_8180->mSourceRegisterName ;
    if (temp_8740.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_8740.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_8740 (HERE), var_cas_inRegisterTable, var_cas_sourceIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
    }
    GGS_ipic_registerExpressionWithoutBSRIndication var_cas_destinationIPICregisterDescription ;
    const GGS_registerExpression  temp_8947 = operand_8180->mDestinationRegisterName ;
    if (temp_8947.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank method = findCategoryMethod__registerExpression__resolveAccessWithoutCheckingBank (temp_8947.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_8947 (HERE), var_cas_inRegisterTable, var_cas_destinationIPICregisterDescription COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVFF ::constructor_new (inLexique, operand_8180->mInstructionLocation, var_cas_sourceIPICregisterDescription, var_cas_destinationIPICregisterDescription COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FBA.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FBA * operand_9313,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9313 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_9847 = operand_9313->mRegisterExpression ;
    if (temp_9847.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_9847.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_9847 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_10017 = operand_9313->mBitNumber ;
    if (temp_10017.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_10017.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_10017 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (299)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FBA ::constructor_new (inLexique, operand_9313->mInstructionLocation, operand_9313->mBitOrientedOp, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JSR.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JSR * operand_10343,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10343 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  var_cas_returnedBank ;
    GGS_bool var_cas_preservesBank ;
    const GGS_routineMap  temp_10894 = var_cas_inRoutineMap ;
    if (temp_10894.isBuilt ()) {
      temp_10894 (HERE)->method_searchKey (inLexique, operand_10343->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_10343->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
      }
      operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
      operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine should be called with a BRA, GOTO, Bcc or JUMP instruction") COMMA_SOURCE_FILE_AT_LINE (344)) ;
    }
    if (((var_cas_preservesBank).operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBank ;
      if ((var_cas_inShouldPreserveBSR).isBuiltAndTrue ()) {
        operand_10343->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the routine call should preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JSR ::constructor_new (inLexique, operand_10343->mInstructionLocation, operand_10343->mTargetLabel, operand_10343->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_JUMP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMP * operand_12006,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12006 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_2 ;
    GGS_bool automatic_var_3 ;
    const GGS_routineMap  temp_12510 = var_cas_inRoutineMap ;
    if (temp_12510.isBuilt ()) {
      temp_12510 (HERE)->method_searchKey (inLexique, operand_12006->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_12006->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (379))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (384))) ;
      }
      operand_12006->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (387)) ;
    }
    if (((var_cas_isNoReturn).operator_not ()).isBuiltAndTrue ()) {
      operand_12006->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_12006->mInstructionLocation, operand_12006->mTargetLabel, operand_12006->mKind COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_JUMPCC.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_JUMPCC__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_JUMPCC * operand_13435,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13435 != NULL) {
    GGS_bool var_cas_isNoReturn ;
    GGS_uint  var_cas_requiredBank ;
    GGS_uint  automatic_var_4 ;
    GGS_bool automatic_var_5 ;
    const GGS_routineMap  temp_13928 = var_cas_inRoutineMap ;
    if (temp_13928.isBuilt ()) {
      temp_13928 (HERE)->method_searchKey (inLexique, operand_13435->mTargetLabel, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_13435->mTargetLabel)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420))) ;
      var_cas_errorMessage.appendCString (", but BSR ") ;
      if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.appendCString ("does contain any reliable value") ;
      }else{
        var_cas_errorMessage.appendCString ("is set to ") ;
        var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425))) ;
      }
      operand_13435->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (428)) ;
    }
    if (((var_cas_isNoReturn).operator_not ()).isBuiltAndTrue ()) {
      operand_13435->mTargetLabel.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine should be called with a RCALL, CALL or JSR instruction") COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }
    GGS_condionalBranchMode var_cas_mode ;
    if ((operand_13435->mIsBcc).isBuiltAndTrue ()) {
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_HERE) ;
    }else{
      var_cas_mode = GGS_condionalBranchMode::constructor_native (inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, operand_13435->mInstructionLocation, var_cas_mode, operand_13435->mConditionalBranch, operand_13435->mTargetLabel COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_CLRWDT.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_CLRWDT * operand_15021,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15021 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_CLRWDT ::constructor_new (inLexique, operand_15021->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_DAW.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_DAW * operand_15678,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15678 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_DAW ::constructor_new (inLexique, operand_15678->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_NOP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_NOP * operand_16332,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16332 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_NOP ::constructor_new (inLexique, operand_16332->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_POP.buildIPICinstructionList'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_POP * operand_16986,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16986 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_POP ::constructor_new (inLexique, operand_16986->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_PUSH.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_PUSH * operand_17641,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17641 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_PUSH ::constructor_new (inLexique, operand_17641->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_RESET.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_RESET * operand_18298,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18298 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RESET ::constructor_new (inLexique, operand_18298->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_SLEEP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_SLEEP * operand_18956,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18956 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_SLEEP ::constructor_new (inLexique, operand_18956->mInstructionLocation COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_literalOperation.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_literalOperation * operand_19625,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19625 != NULL) {
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  temp_20086 = operand_19625->mImmediatExpression ;
    if (temp_20086.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_20086.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_20086 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (602)) ;
      }
    }
    if ((((var_cas_result).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_19625->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (605)))).operator_concat (GGS_string (" (should be betwween -128 and 255)")) COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, operand_19625->mInstructionLocation, operand_19625->mLiteralInstruction, (var_cas_result).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (611)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_LFSR.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_LFSR * operand_20619,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20619 != NULL) {
    if (((operand_20619->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (630))).operator_strictSup (GGS_uint (2U))).isBuiltAndTrue ()) {
      operand_20619->mFSRindex.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the LFSR register idx (")).operator_concat (operand_20619->mFSRindex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (631)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (631)))).operator_concat (GGS_string (") should be lower or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    GGS_sint  var_cas_result ;
    const GGS_immediatExpression  temp_21239 = operand_20619->mImmediatExpression ;
    if (temp_21239.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_21239.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_21239 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }
    }
    if ((((var_cas_result).operator_strictSup (GGS_sint (4095L))).operator_or ((var_cas_result).operator_strictInf (GGS_sint (0L)))).isBuiltAndTrue ()) {
      operand_20619->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("immediate value is evaluated as ")).operator_concat (var_cas_result.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (637)))).operator_concat (GGS_string (" (should be between 0 and 4095)")) COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_LFSR ::constructor_new (inLexique, operand_20619->mInstructionLocation, operand_20619->mFSRindex, var_cas_result.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLRD.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLRD * operand_21726,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21726 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLRD ::constructor_new (inLexique, operand_21726->mInstructionLocation, operand_21726->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_TBLWT.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_TBLWT * operand_22397,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22397 != NULL) {
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_TBLWT ::constructor_new (inLexique, operand_22397->mInstructionLocation, operand_22397->mOption COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_retlw.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_retlw * operand_23077,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23077 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a \"noreturn\" routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (708)) ;
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed retlw instruction") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_23876 = operand_23077->mSizeExpression ;
    if (temp_23876.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_23876.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_23876 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
    if (((var_cas_size).operator_strictInf (GGS_sint (2L))).isBuiltAndTrue ()) {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }else if (((var_cas_size).operator_strictSup (GGS_sint (128L))).isBuiltAndTrue ()) {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
    }else if (((var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_isNotEqual (operand_23077->mImmediateExpressionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).isBuiltAndTrue ()) {
      operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the constant list length (")).operator_concat (operand_23077->mImmediateExpressionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    GGS_uintlist  var_cas_literalValues = GGS_uintlist ::constructor_emptyList () ;
    {
        GGS_uint var_cas_idx (true, 0) ;
      GGS_immediatExpressionList::cEnumerator enumerator_24511 (operand_23077->mImmediateExpressionList, true) ;
      const GGS_immediatExpressionList::cElement * operand_24511 = NULL ;
      while (((operand_24511 = enumerator_24511.nextObject ()))) {
        macroValidPointer (operand_24511) ;
        GGS_sint  var_cas_v ;
        const GGS_immediatExpression  temp_24551 = operand_24511->mExpression ;
        if (temp_24551.isBuilt ()) {
          typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_24551.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_24551 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_v COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
        }
        if ((((var_cas_v).operator_strictSup (GGS_sint (255L))).operator_or ((var_cas_v).operator_strictInf (GGS_sint (128L).operator_unary_minus (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_23077->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("immediate value with idx ")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725)))).operator_concat (GGS_string (" is evaluated as "))).operator_concat (var_cas_v.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725)))).operator_concat (GGS_string (" (should be <= 255)")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
        var_cas_literalValues.addAssign_operation ((var_cas_v).operator_and (GGS_sint (255L)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        var_cas_idx.mValue ++ ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_retlw ::constructor_new (inLexique, operand_23077->mInstructionLocation, var_cas_literalValues, operand_23077->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_MNOP.buildIPICinstructionList'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_MNOP * operand_25120,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   /* var_cas_inRoutineMap */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_constantMap   /* var_cas_inConstantMap */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & /* var_cas_ioCurrentBank */,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25120 != NULL) {
    if (((operand_25120->mOccurrenceFactor.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (753))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      operand_25120->mOccurrenceFactor.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("occurrence argument is zero: no generated code") COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MNOP ::constructor_new (inLexique, operand_25120->mInstructionLocation, operand_25120->mOccurrenceFactor COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_bra.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_bra * operand_25949,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25949 != NULL) {
    GGS_bool var_cas_allPreserveBankSetting = GGS_bool (true) ;
    GGS_bool var_cas_allReturnBank = GGS_bool (true) ;
    GGS_uint  var_cas_returnedBankValue = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
    {
      GGS_lstringlist::cEnumerator enumerator_26468 (operand_25949->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26468 = NULL ;
      while (((operand_26468 = enumerator_26468.nextObject ()))) {
        macroValidPointer (operand_26468) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_26598 = var_cas_inRoutineMap ;
        if (temp_26598.isBuilt ()) {
          temp_26598 (HERE)->method_searchKey (inLexique, operand_26468->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (787)) ;
        }
        if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_26468->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (790))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (795))) ;
          }
          operand_26468->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (798)) ;
        }
        if ((var_cas_preservesBank).isBuiltAndTrue ()) {
          var_cas_allReturnBank = GGS_bool (false) ;
        }else if ((((var_cas_returnedBankValue).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_returnedBankValue).operator_isNotEqual (var_cas_returnedBank))).isBuiltAndTrue ()) {
          operand_26468->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("this routine ensures setting of bank '")).operator_concat (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (803)))).operator_concat (GGS_string ("', but "))).operator_concat (GGS_string ("previous routine(s) ensure setting of bank '"))).operator_concat (var_cas_returnedBankValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (804)))).operator_concat (GGS_string ("'.")) COMMA_SOURCE_FILE_AT_LINE (805)) ;
        }else{
          var_cas_allPreserveBankSetting = GGS_bool (false) ;
          var_cas_returnedBankValue = var_cas_returnedBank ;
        }
        if ((((GGS_routineKind::constructor_regularRoutine (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inRoutineKind)).operator_and ((var_cas_isNoReturn).operator_not ())).isBuiltAndTrue ()) {
          operand_26468->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed bra from a regular routine, the '")).operator_concat (operand_26468->mValue)).operator_concat (GGS_string ("' routine should be declared without any \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }
      }
    }
    if (((var_cas_allReturnBank).operator_and ((var_cas_allPreserveBankSetting).operator_not ())).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_returnedBankValue ;
    }else if ((((var_cas_allReturnBank).operator_not ()).operator_and ((var_cas_allPreserveBankSetting).operator_not ())).isBuiltAndTrue ()) {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine should either all preserve bank, eihter return the same selected bank") COMMA_SOURCE_FILE_AT_LINE (818)) ;
    }
    if (((var_cas_inShouldPreserveBSR).operator_and ((var_cas_allPreserveBankSetting).operator_not ())).isBuiltAndTrue ()) {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("invoked routine(s) do(es) not preserve bank selection") COMMA_SOURCE_FILE_AT_LINE (821)) ;
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed bra instruction") COMMA_SOURCE_FILE_AT_LINE (830)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_28758 = operand_25949->mSizeExpression ;
    if (temp_28758.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_28758.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_28758 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
    }
    if (((var_cas_size).operator_strictInf (GGS_sint (2L))).isBuiltAndTrue ()) {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (834)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    }else if (((var_cas_size).operator_strictSup (GGS_sint (128L))).isBuiltAndTrue ()) {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (836)))).operator_concat (GGS_string (") should be lower or equal to 128")) COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else if (((var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (837))).operator_isNotEqual (operand_25949->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (837)))).isBuiltAndTrue ()) {
      operand_25949->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_25949->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (838)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (838)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (838)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_bra ::constructor_new (inLexique, operand_25949->mInstructionLocation, operand_25949->mTargetLabels, operand_25949->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_goto.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_goto * operand_29582,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  /* var_cas_inShouldPreserveBSR */,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29582 != NULL) {
    {
      GGS_lstringlist::cEnumerator enumerator_30001 (operand_29582->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30001 = NULL ;
      while (((operand_30001 = enumerator_30001.nextObject ()))) {
        macroValidPointer (operand_30001) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  automatic_var_6 ;
        GGS_bool automatic_var_7 ;
        const GGS_routineMap  temp_30080 = var_cas_inRoutineMap ;
        if (temp_30080.isBuilt ()) {
          temp_30080 (HERE)->method_searchKey (inLexique, operand_30001->mValue, var_cas_isNoReturn, var_cas_requiredBank, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }
        if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_30001->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874))) ;
          }
          operand_30001->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (877)) ;
        }
        if (((var_cas_isNoReturn).operator_not ()).isBuiltAndTrue ()) {
          operand_30001->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed goto, the '")).operator_concat (operand_30001->mValue)).operator_concat (GGS_string ("' routine should be declared with the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_29582->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (886)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_29582->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept computed goto instruction") COMMA_SOURCE_FILE_AT_LINE (889)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_31172 = operand_29582->mSizeExpression ;
    if (temp_31172.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_31172.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_31172 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    if (((var_cas_size).operator_strictInf (GGS_sint (2L))).isBuiltAndTrue ()) {
      operand_29582->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (893)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (894)) ;
    }else if (((var_cas_size).operator_strictSup (GGS_sint (64L))).isBuiltAndTrue ()) {
      operand_29582->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (895)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (896)) ;
    }else if (((var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (896))).operator_isNotEqual (operand_29582->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (896)))).isBuiltAndTrue ()) {
      operand_29582->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_29582->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (897)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (898)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_goto ::constructor_new (inLexique, operand_29582->mInstructionLocation, operand_29582->mTargetLabels, operand_29582->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_computed_rcall.buildIPICinstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_rcall__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_computed_rcall * operand_31996,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  /* var_cas_inRoutineKind */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31996 != NULL) {
    GGS_bool var_cas_allPreserveBank = GGS_bool (true) ;
    GGS_bool var_cas_someReturnsBank = GGS_bool (false) ;
    GGS_uint  var_cas_returnedBankSelection = var_cas_ioCurrentBank ;
    {
      GGS_lstringlist::cEnumerator enumerator_32526 (operand_31996->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_32526 = NULL ;
      while (((operand_32526 = enumerator_32526.nextObject ()))) {
        macroValidPointer (operand_32526) ;
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_32656 = var_cas_inRoutineMap ;
        if (temp_32656.isBuilt ()) {
          temp_32656 (HERE)->method_searchKey (inLexique, operand_32526->mValue, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (931)) ;
        }
        if ((((var_cas_requiredBank).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((var_cas_requiredBank).operator_isNotEqual (var_cas_ioCurrentBank))).isBuiltAndTrue ()) {
          GGS_string var_cas_errorMessage = (((GGS_string ("the routine '")).operator_concat (operand_32526->mValue)).operator_concat (GGS_string ("' requires BSR to be set to "))).operator_concat (var_cas_requiredBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
          var_cas_errorMessage.appendCString (", but BSR ") ;
          if (((var_cas_ioCurrentBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_errorMessage.appendCString ("does contain any reliable value") ;
          }else{
            var_cas_errorMessage.appendCString ("is set to ") ;
            var_cas_errorMessage.dotAssign_operation (var_cas_ioCurrentBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
          }
          operand_32526->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (941)) ;
        }
        if ((var_cas_isNoReturn).isBuiltAndTrue ()) {
          operand_32526->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for being named in a computed rcall, the '")).operator_concat (operand_32526->mValue)).operator_concat (GGS_string ("' routine should be declared without the \"noreturn\" qualifier")) COMMA_SOURCE_FILE_AT_LINE (944)) ;
        }
        if (((var_cas_inShouldPreserveBSR).operator_and ((var_cas_preservesBank).operator_not ())).isBuiltAndTrue ()) {
          operand_32526->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_32526->mValue)).operator_concat (GGS_string ("' routine should preserved bank selection")) COMMA_SOURCE_FILE_AT_LINE (947)) ;
        }else if ((((var_cas_inShouldPreserveBSR).operator_not ()).operator_and ((var_cas_preservesBank).operator_not ())).isBuiltAndTrue ()) {
          if (((var_cas_someReturnsBank).operator_not ()).isBuiltAndTrue ()) {
            var_cas_returnedBankSelection = var_cas_returnedBank ;
            var_cas_someReturnsBank = GGS_bool (true) ;
          }else if (((var_cas_returnedBankSelection).operator_isNotEqual (var_cas_returnedBank)).isBuiltAndTrue ()) {
            GGS_string var_cas_errorMessage = ((GGS_string ("the '")).operator_concat (operand_32526->mValue)).operator_concat (GGS_string ("' routine returns ")) ;
            if (((var_cas_returnedBank).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_errorMessage.appendCString ("no bank selection") ;
            }else{
              var_cas_errorMessage.appendCString ("bank selection set to  ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_returnedBank.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (956))) ;
            }
            var_cas_errorMessage.appendCString (", but previous routine(s) return(s) ") ;
            if (((var_cas_returnedBankSelection).operator_isEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
              var_cas_errorMessage.appendCString ("no bank selection") ;
            }else{
              var_cas_errorMessage.appendCString ("bank selection set to  ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_returnedBankSelection.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (962))) ;
            }
            operand_32526->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (965)) ;
          }
        }else if ((((var_cas_inShouldPreserveBSR).operator_not ()).operator_and (var_cas_preservesBank)).isBuiltAndTrue ()) {
        }
      }
    }
    var_cas_ioContinuesInSequence = GGS_bool (true) ;
    var_cas_ioCurrentBank = var_cas_returnedBankSelection ;
    GGS_sint  var_cas_size ;
    const GGS_immediatExpression  temp_34576 = operand_31996->mSizeExpression ;
    if (temp_34576.isBuilt ()) {
      typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_34576.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_34576 (HERE), var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_size COMMA_SOURCE_FILE_AT_LINE (973)) ;
      }
    }
    if (((var_cas_size).operator_strictInf (GGS_sint (2L))).isBuiltAndTrue ()) {
      operand_31996->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (975)))).operator_concat (GGS_string (") should be greater or equal to 2")) COMMA_SOURCE_FILE_AT_LINE (976)) ;
    }else if (((var_cas_size).operator_strictSup (GGS_sint (64L))).isBuiltAndTrue ()) {
      operand_31996->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the computed range (")).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (977)))).operator_concat (GGS_string (") should be lower or equal to 64")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }else if (((var_cas_size.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (978))).operator_isNotEqual (operand_31996->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (978)))).isBuiltAndTrue ()) {
      operand_31996->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the routine name list length (")).operator_concat (operand_31996->mTargetLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (979)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (979)))).operator_concat (GGS_string (") should be equal to the computed range ("))).operator_concat (var_cas_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (979)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (980)) ;
    }
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (982))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (983)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_computed_rcall ::constructor_new (inLexique, operand_31996->mInstructionLocation, operand_31996->mTargetLabels, var_cas_label0, operand_31996->mUsesRelativeCall COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_FOREVER.buildIPICinstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_FOREVER * operand_35493,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35493 != NULL) {
    switch (var_cas_inRoutineKind.enumValue ()) {
    case GGS_routineKind::enum_regularRoutine:
      {
      operand_35493->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a regular routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      }
      break ;
    case GGS_routineKind::enum_noReturnRoutine:
      {
      }
      break ;
    case GGS_routineKind::enum_interruptRoutine:
      {
      operand_35493->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an interrupt routine does not accept the \"forever\" instruction") COMMA_SOURCE_FILE_AT_LINE (1013)) ;
      }
      break ;
    case GGS_routineKind::kNotBuilt:
      break ;
    }
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1016))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35493->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    ::routine_handleInstructionList (inLexique,  operand_35493->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    if (((var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_35493->mEndOfInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("instruction list does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1035)) ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_35493->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label0, operand_35493->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
    var_cas_ioContinuesInSequence = GGS_bool (false) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_IF_FA_SEMI_COLON.buildIPICinstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_37262,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37262 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_37262->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_8 ;
    const GGS_registerExpression  temp_38060 = operand_37262->mRegisterExpression ;
    if (temp_38060.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_38060.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_38060 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FA ::constructor_new (inLexique, operand_37262->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_38416 = operand_37262->mInstruction ;
    if (temp_38416.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_38416.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_38416 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_BitTest.buildIPICinstructionList'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_BitTest * operand_38822,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38822 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_39314 = operand_38822->mRegisterExpression ;
    if (temp_39314.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_39314.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39314 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_39484 = operand_38822->mBitNumber ;
    if (temp_39484.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_39484.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39484 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, operand_38822->mInstructionLocation, operand_38822->mSkipIfSet, var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_39795 = operand_38822->mInstruction ;
    if (temp_39795.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_39795.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_39795 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition> gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition (typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition
findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__buildIPICinstructionForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__computeInstructionCountForCondition> gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__computeInstructionCountForCondition (typeCategoryMethod__conditionExpression__computeInstructionCountForCondition inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__computeInstructionCountForCondition
findCategoryMethod__conditionExpression__computeInstructionCountForCondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__computeInstructionCountForCondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.count ()) {
    result = gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (superClassPtr) ;
      gDispatchTableForMethod__conditionExpression__computeInstructionCountForCondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_40847,
                                const GGS_uint   /* var_cas_inAccessBankSplitOffset */,
                                const GGS_uint   /* var_cas_inCurrentBank */,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40847 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (inLexique,  operand_40847->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    }else{
      var_cas_condition = operand_40847->mCondition ;
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_conditionalBranch ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bcc_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bcc_in_structured_if_condition * operand_41719,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41719 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_41966,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41966 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_41966->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    }else{
      var_cas_comparison = operand_41966->mComparison ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  temp_42561 = operand_41966->mRegisterExpression ;
    if (temp_42561.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_42561.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_42561 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_registerComparisonCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, var_cas_comparison, GGS_bool (true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerComparisonCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerComparisonCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_registerComparisonCondition * operand_43030,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43030 != NULL) {
    GGS_registerComparison var_cas_comparison ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getRegisterComparisonComplementary (inLexique,  operand_43030->mComparison,  var_cas_comparison COMMA_SOURCE_FILE_AT_LINE (1249)) ;
    }else{
      var_cas_comparison = operand_43030->mComparison ;
    }
    ::routine_getRegisterComparisonInstructionCount (inLexique,  var_cas_comparison,  var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1253)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_incDecRegisterInCondition * operand_43497,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43497 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_10 ;
    const GGS_registerExpression  temp_43904 = operand_43497->mRegisterExpression ;
    if (temp_43904.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_43904.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_43904 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_incDecRegisterInCondition ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, operand_43497->mIncrement, operand_43497->m_W_isDestination, (operand_43497->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@incDecRegisterInCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incDecRegisterInCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_incDecRegisterInCondition * operand_44435,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44435 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.buildIPICinstructionForCondition'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_registerTestCondition * operand_44676,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44676 != NULL) {
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_11 ;
    const GGS_registerExpression  temp_45083 = operand_44676->mRegisterExpression ;
    if (temp_45083.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_45083.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_45083 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_jump_test_register ::constructor_new (inLexique, var_cas_inInstructionLocation, var_cas_IPICregisterDescription, var_cas_inTargetLabel, (operand_44676->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch), GGS_bool (true) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@registerTestCondition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerTestCondition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_registerTestCondition * operand_45564,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45564 != NULL) {
    if (((operand_45564->mBranchIfZero).operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_outInstructionCount = GGS_uint (3U) ;
    }else{
      var_cas_outInstructionCount = GGS_uint (2U) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@negateCondition.buildIPICinstructionForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_45891,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45891 != NULL) {
    const GGS_conditionExpression  temp_46241 = operand_45891->mCondition ;
    if (temp_46241.isBuilt ()) {
      typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_46241.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_46241 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, (var_cas_inComplementaryBranch).operator_not (), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@negateCondition.computeInstructionCountForCondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__negateCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_negateCondition * operand_46614,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46614 != NULL) {
    const GGS_conditionExpression  temp_46727 = operand_46614->mCondition ;
    if (temp_46727.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_46727.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_46727 (HERE), (var_cas_inComplementaryBranch).operator_not (), var_cas_outInstructionCount COMMA_SOURCE_FILE_AT_LINE (1374)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@andCondition.buildIPICinstructionForCondition'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_46922,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46922 != NULL) {
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      const GGS_conditionExpression  temp_47311 = operand_46922->mLeftExpression ;
      if (temp_47311.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47311.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47311 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1394)) ;
        }
      }
      const GGS_conditionExpression  temp_47599 = operand_46922->mRightExpression ;
      if (temp_47599.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47599.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47599 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1405)) ;
        }
      }
    }else{
      GGS_string var_cas_label0 = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)) ;
      const GGS_conditionExpression  temp_47979 = operand_46922->mLeftExpression ;
      if (temp_47979.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_47979.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_47979 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), var_cas_inInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1418)) ;
        }
      }
      const GGS_conditionExpression  temp_48260 = operand_46922->mRightExpression ;
      if (temp_48260.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_48260.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_48260 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), var_cas_inInstructionLocation, var_cas_inTargetLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1429)) ;
        }
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label0, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@andCondition.computeInstructionCountForCondition'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andCondition__computeInstructionCountForCondition (C_Compiler & inLexique,
                                const cPtr_andCondition * operand_48750,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48750 != NULL) {
    GGS_uint  var_cas_countLeft ;
    const GGS_conditionExpression  temp_48888 = operand_48750->mLeftExpression ;
    if (temp_48888.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_48888.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_48888 (HERE), var_cas_inComplementaryBranch, var_cas_countLeft COMMA_SOURCE_FILE_AT_LINE (1451)) ;
      }
    }
    GGS_uint  var_cas_countRight ;
    const GGS_conditionExpression  temp_49012 = operand_48750->mLeftExpression ;
    if (temp_49012.isBuilt ()) {
      typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_49012.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49012 (HERE), var_cas_inComplementaryBranch, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      }
    }
    var_cas_outInstructionCount = var_cas_countLeft.add_operation (inLexique, var_cas_countRight COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.buildIPICinstructionForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition (C_Compiler & inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_49266,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_uint   var_cas_inCurrentBank,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49266 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    const GGS_registerExpression  temp_49706 = operand_49266->mRegisterExpression ;
    if (temp_49706.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_49706.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49706 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1478)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  temp_49876 = operand_49266->mBitNumber ;
    if (temp_49876.isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber method = findCategoryMethod__bitNumberExpression__getBitNumber (temp_49876.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_49876 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_BitTestSkip ::constructor_new (inLexique, var_cas_inInstructionLocation, (operand_49266->mBTFSSinstruction).operator_xor (var_cas_inComplementaryBranch), var_cas_IPICregisterDescription, var_cas_bitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.computeInstructionCountForCondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition (C_Compiler &,
                                const cPtr_bitTest_in_structured_if_condition * operand_50434,
                                const GGS_bool  /* var_cas_inComplementaryBranch */,
                                GGS_uint  & var_cas_outInstructionCount
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50434 != NULL) {
    var_cas_outInstructionCount = GGS_uint (2U) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_structured_if.buildIPICinstructionList'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_structured_if * operand_50671,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50671 != NULL) {
    GGS_bool var_cas_generateComplementaryCondition = GGS_bool (false) ;
    if ((gOption_piccolo_5F_options_performOptimizations.value ()).isBuiltAndTrue ()) {
      GGS_uint  var_cas_directCount ;
      const GGS_conditionExpression  temp_51248 = operand_50671->mIfCondition ;
      if (temp_51248.isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_51248.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_51248 (HERE), GGS_bool (true), var_cas_directCount COMMA_SOURCE_FILE_AT_LINE (1526)) ;
        }
      }
      if (((operand_50671->mElseInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1527))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_directCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1528)) ;
      }
      GGS_uint  var_cas_complementaryCount ;
      const GGS_conditionExpression  temp_51433 = operand_50671->mIfCondition ;
      if (temp_51433.isBuilt ()) {
        typeCategoryMethod__conditionExpression__computeInstructionCountForCondition method = findCategoryMethod__conditionExpression__computeInstructionCountForCondition (temp_51433.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_51433 (HERE), GGS_bool (false), var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1530)) ;
        }
      }
      if (((operand_50671->mThenInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1531))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_complementaryCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) ;
      }
      if (((var_cas_complementaryCount).operator_strictInf (var_cas_directCount)).isBuiltAndTrue ()) {
        var_cas_generateComplementaryCondition = GGS_bool (true) ;
        var_cas_ioListFileContents.appendCString ("  line ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_ioGeneratedInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1536)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1536))) ;
        var_cas_ioListFileContents.appendCString (": generates complementary test (saves ") ;
        var_cas_ioListFileContents.dotAssign_operation (var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1537)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1537))) ;
        var_cas_ioListFileContents.appendCString (" instruction") ;
        if (((var_cas_directCount.substract_operation (inLexique, var_cas_complementaryCount COMMA_SOURCE_FILE_AT_LINE (1538))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.appendCString ("s") ;
        }
        var_cas_ioListFileContents.appendCString (")\n") ;
      }
    }
    GGS_uint  var_cas_elseBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_uint  var_cas_thenBranchFinalBank = var_cas_ioCurrentBank ;
    GGS_bool var_cas_elseContinuesInSequence ;
    GGS_bool var_cas_thenContinuesInSequence ;
    if ((var_cas_generateComplementaryCondition).isBuiltAndTrue ()) {
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1550))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) ;
      const GGS_conditionExpression  temp_52498 = operand_50671->mIfCondition ;
      if (temp_52498.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_52498.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_52498 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_50671->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1553)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50671->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1565)) ;
      if (((operand_50671->mThenInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1580))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50671->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50671->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50671->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (inLexique,  operand_50671->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1584)) ;
      if (((operand_50671->mThenInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1598))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50671->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }else{
      GGS_string var_cas_label_nextCondition = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) ;
      GGS_string var_cas_label_endOfIfinstruction = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604))) ;
      var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      const GGS_conditionExpression  temp_54334 = operand_50671->mIfCondition ;
      if (temp_54334.isBuilt ()) {
        typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_54334.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_54334 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_50671->mInstructionLocation, var_cas_label_nextCondition, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        }
      }
      ::routine_handleInstructionList (inLexique,  operand_50671->mThenInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_thenBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_thenContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1618)) ;
      if (((operand_50671->mElseInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1633))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_50671->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50671->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
      }
      var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_nextCondition, operand_50671->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      ::routine_handleInstructionList (inLexique,  operand_50671->mElseInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_elseBranchFinalBank,  var_cas_inShouldPreserveBSR,  var_cas_elseContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1637)) ;
      if (((operand_50671->mElseInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1651))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_label_endOfIfinstruction, operand_50671->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
      }
    }
    if (((var_cas_elseBranchFinalBank).operator_isEqual (var_cas_thenBranchFinalBank)).isBuiltAndTrue ()) {
      var_cas_ioCurrentBank = var_cas_elseBranchFinalBank ;
    }else{
      operand_50671->mEndOfElsePartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value as the first one does") COMMA_SOURCE_FILE_AT_LINE (1659)) ;
      var_cas_elseBranchFinalBank = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
    }
    var_cas_ioContinuesInSequence = (var_cas_thenContinuesInSequence).operator_or (var_cas_elseContinuesInSequence) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_do_while.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_do_while * operand_56379,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & var_cas_ioContinuesInSequence,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56379 != NULL) {
    GGS_string var_cas_labelInstructionBegin = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1681))) ;
    var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1681)) ;
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56379->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    GGS_uint  var_cas_finalBank = var_cas_ioCurrentBank ;
    ::routine_handleInstructionList (inLexique,  operand_56379->mRepeatedInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_finalBank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1686)) ;
    if (((var_cas_ioCurrentBank).operator_isNotEqual (var_cas_finalBank)).isBuiltAndTrue ()) {
      operand_56379->mEndOfRepeatedInstructionList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1702)) ;
    }
    {
      GGS_partList::cEnumerator enumerator_57557 (operand_56379->mWhilePartList, true) ;
      const GGS_partList::cElement * operand_57557 = NULL ;
      while (((operand_57557 = enumerator_57557.nextObject ()))) {
        macroValidPointer (operand_57557) ;
        if (((operand_57557->mInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1705))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
          const GGS_conditionExpression  temp_57654 = operand_57557->mCondition ;
          if (temp_57654.isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_57654.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_57654 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (false), operand_56379->mInstructionLocation, var_cas_labelInstructionBegin, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1706)) ;
            }
          }
        }else{
          GGS_string var_cas_nextBranchLabel = (GGS_string ("_label_")).operator_concat (var_cas_ioLocalLabelIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1718))) ;
          var_cas_ioLocalLabelIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1718)) ;
          const GGS_conditionExpression  temp_58072 = operand_57557->mCondition ;
          if (temp_58072.isBuilt ()) {
            typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition method = findCategoryMethod__conditionExpression__buildIPICinstructionForCondition (temp_58072.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_58072 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_ioLocalLabelIndex, GGS_bool (true), operand_56379->mInstructionLocation, var_cas_nextBranchLabel, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1719)) ;
            }
          }
          GGS_uint  var_cas_bank = var_cas_ioCurrentBank ;
          ::routine_handleInstructionList (inLexique,  operand_57557->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_inRoutineMap,  var_cas_inRegisterTable,  var_cas_inConstantMap,  var_cas_ioLocalLabelIndex,  var_cas_ioGeneratedInstructionList,  var_cas_ioListFileContents,  var_cas_bank,  var_cas_inShouldPreserveBSR,  var_cas_ioContinuesInSequence,  var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1731)) ;
          if (((var_cas_ioCurrentBank).operator_isNotEqual (var_cas_bank)).isBuiltAndTrue ()) {
            operand_57557->mEndOfPartLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("This branch does not leave BSR value unchanged") COMMA_SOURCE_FILE_AT_LINE (1747)) ;
          }
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, operand_56379->mInstructionLocation, GGS_lstring ::constructor_new (inLexique, var_cas_labelInstructionBegin, operand_56379->mInstructionLocation COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
          var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_nextBranchLabel, operand_56379->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_IncDec.buildIPICinstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__buildIPICinstructionList (C_Compiler & inLexique,
                                const cPtr_instruction_IF_IncDec * operand_59311,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_routineMap   var_cas_inRoutineMap,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_constantMap   var_cas_inConstantMap,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic18_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_uint  & var_cas_ioCurrentBank,
                                const GGS_bool  var_cas_inShouldPreserveBSR,
                                GGS_bool & /* var_cas_ioContinuesInSequence */,
                                const GGS_routineKind  var_cas_inRoutineKind
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59311 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_59311->mIncrement).operator_and (operand_59311->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (inLexique COMMA_HERE) ;
    }else if (((operand_59311->mIncrement).operator_and ((operand_59311->mSkipIfZero).operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (inLexique COMMA_HERE) ;
    }else if ((((operand_59311->mIncrement).operator_not ()).operator_and (operand_59311->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (inLexique COMMA_HERE) ;
    }
    GGS_ipic_registerExpression var_cas_IPICregisterDescription ;
    GGS_bitSliceTable  automatic_var_12 ;
    const GGS_registerExpression  temp_60175 = operand_59311->mRegisterExpression ;
    if (temp_60175.isBuilt ()) {
      typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_60175.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_60175 (HERE), var_cas_inAccessBankSplitOffset, var_cas_ioCurrentBank, var_cas_inRegisterTable, var_cas_IPICregisterDescription, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (1782)) ;
      }
    }
    var_cas_ioGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, operand_59311->mInstructionLocation, var_cas_baseCode, var_cas_IPICregisterDescription, operand_59311->m_W_isDestination COMMA_HERE)) ;
    GGS_bool var_cas_unusedContinuesInSequence = GGS_bool (true) ;
    const GGS_piccolo_instruction  temp_60562 = operand_59311->mInstruction ;
    if (temp_60562.isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__buildIPICinstructionList method = findCategoryMethod__piccolo_instruction__buildIPICinstructionList (temp_60562.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_60562 (HERE), var_cas_inAccessBankSplitOffset, var_cas_inRoutineMap, var_cas_inRegisterTable, var_cas_inConstantMap, var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList, var_cas_ioListFileContents, var_cas_ioCurrentBank, var_cas_inShouldPreserveBSR, var_cas_unusedContinuesInSequence, var_cas_inRoutineKind COMMA_SOURCE_FILE_AT_LINE (1798)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "build_ipic18_assembly_instruction_list"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_build_ipic18_assembly_instruction_list (C_Compiler & inLexique,
                                const GGS_programKind  var_cas_inProgramKind,
                                const GGS_sint   var_cas_inROMSize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForBootloaderImplementation,
                                const GGS_luint   var_cas_inBootloaderReservedROMsize,
                                const GGS_routineDeclarationList   var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation,
                                const GGS_routineDeclarationList   var_cas_inUserRoutineDeclarationListForUserProgramImplementation,
                                const GGS_uint   var_cas_inAccessBankSplitOffset,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic18_instructionList  & var_cas_outGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_build_ipic18_assembly_instruction_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_generationOptimizationMessages = GGS_string ("") ;
  GGS_routineMap  var_cas_routineMap = GGS_routineMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_61842 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_61842 = NULL ;
    while (((operand_61842 = enumerator_61842.nextObject ()))) {
      macroValidPointer (operand_61842) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_61842->mRoutineName, operand_61842->mIsNoReturn, operand_61842->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)), operand_61842->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)), operand_61842->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1835)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62052 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62052 = NULL ;
    while (((operand_62052 = enumerator_62052.nextObject ()))) {
      macroValidPointer (operand_62052) ;
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62052->mRoutineName, operand_62052->mIsNoReturn, operand_62052->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)), operand_62052->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)), operand_62052->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_62201 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1840)), true) ;
    const GGS_routineDefinitionList::cElement * operand_62201 = NULL ;
    while (((operand_62201 = enumerator_62201.nextObject ()))) {
      macroValidPointer (operand_62201) ;
      if ((((operand_62201->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1841))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((operand_62201->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1841))).operator_strictSup (GGS_uint (15U)))).isBuiltAndTrue ()) {
        operand_62201->mRequiredBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the required bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      }
      if ((((operand_62201->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).operator_and ((operand_62201->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_strictSup (GGS_uint (15U)))).isBuiltAndTrue ()) {
        operand_62201->mReturnedBank.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the returned bank value should be lower or equal to 15") COMMA_SOURCE_FILE_AT_LINE (1846)) ;
      }
      var_cas_routineMap.modifier_insertKey (inLexique, operand_62201->mRoutineName, operand_62201->mIsNoReturn, operand_62201->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1847)), operand_62201->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1847)), operand_62201->mPreservesBank COMMA_SOURCE_FILE_AT_LINE (1847)) ;
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_62952 (var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_62952 = NULL ;
    while (((operand_62952 = enumerator_62952.nextObject ()))) {
      macroValidPointer (operand_62952) ;
      if ((var_cas_routineMap.reader_hasKey (inLexique, operand_62952->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1852)) COMMA_SOURCE_FILE_AT_LINE (1852))).isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_63145 = var_cas_routineMap ;
        if (temp_63145.isBuilt ()) {
          temp_63145 (HERE)->method_searchKey (inLexique, operand_62952->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1857)) ;
        }
        if ((((((var_cas_isNoReturn).operator_isNotEqual (operand_62952->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_62952->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1858))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_62952->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1858))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_62952->mPreservesBank))).isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_62952->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1859)) COMMA_SOURCE_FILE_AT_LINE (1859)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_62952->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1860)) ;
        }
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_62952->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      }
    }
  }
  {
    GGS_routineDeclarationList::cEnumerator enumerator_63945 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_63945 = NULL ;
    while (((operand_63945 = enumerator_63945.nextObject ()))) {
      macroValidPointer (operand_63945) ;
      if ((var_cas_routineMap.reader_hasKey (inLexique, operand_63945->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1868)) COMMA_SOURCE_FILE_AT_LINE (1868))).isBuiltAndTrue ()) {
        GGS_bool var_cas_isNoReturn ;
        GGS_uint  var_cas_requiredBank ;
        GGS_uint  var_cas_returnedBank ;
        GGS_bool var_cas_preservesBank ;
        const GGS_routineMap  temp_64138 = var_cas_routineMap ;
        if (temp_64138.isBuilt ()) {
          temp_64138 (HERE)->method_searchKey (inLexique, operand_63945->mRoutineName, var_cas_isNoReturn, var_cas_requiredBank, var_cas_returnedBank, var_cas_preservesBank COMMA_SOURCE_FILE_AT_LINE (1873)) ;
        }
        if ((((((var_cas_isNoReturn).operator_isNotEqual (operand_63945->mIsNoReturn)).operator_or ((var_cas_requiredBank).operator_isNotEqual (operand_63945->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))))).operator_or ((var_cas_returnedBank).operator_isNotEqual (operand_63945->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))))).operator_or ((var_cas_preservesBank).operator_isNotEqual (operand_63945->mPreservesBank))).isBuiltAndTrue ()) {
          var_cas_routineMap.reader_locationForKey (inLexique, operand_63945->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)) COMMA_SOURCE_FILE_AT_LINE (1875)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_63945->mRoutineName)).operator_concat (GGS_string ("' routine header does not conform to its declaration in bootloader specification")) COMMA_SOURCE_FILE_AT_LINE (1876)) ;
        }
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The bootloader specification requires the implementation to define the '")).operator_concat (operand_63945->mRoutineName)).operator_concat (GGS_string ("' routine")) COMMA_SOURCE_FILE_AT_LINE (1879)) ;
      }
    }
  }
  GGS_constantMap  var_cas_constantMap = GGS_constantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_romSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("ROM_SIZE"), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_constantMap.modifier_insertKey (inLexique, var_cas_romSizeString, var_cas_inROMSize COMMA_SOURCE_FILE_AT_LINE (1885)) ;
  if (((var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_regularProgram (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    GGS_lstring  var_cas_bootloaderSizeString = GGS_lstring ::constructor_new (inLexique, GGS_string ("BOOTLOADER_SIZE"), GGS_location (inLexique) COMMA_HERE) ;
    var_cas_constantMap.modifier_insertKey (inLexique, var_cas_bootloaderSizeString, var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)) COMMA_SOURCE_FILE_AT_LINE (1889)) ;
  }
  {
    GGS_constantDefinitionList::cEnumerator enumerator_65261 (var_cas_inPiccoloModel.reader_mConstantDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1892)), true) ;
    const GGS_constantDefinitionList::cElement * operand_65261 = NULL ;
    while (((operand_65261 = enumerator_65261.nextObject ()))) {
      macroValidPointer (operand_65261) ;
      GGS_sint  var_cas_result ;
      const GGS_immediatExpression  temp_65340 = operand_65261->mExpression ;
      if (temp_65340.isBuilt ()) {
        typeCategoryMethod__immediatExpression__eval method = findCategoryMethod__immediatExpression__eval (temp_65340.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_65340 (HERE), var_cas_inRegisterTable, var_cas_constantMap, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1893)) ;
        }
      }
      if ((var_cas_inRegisterTable.reader_hasKey (inLexique, operand_65261->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)) COMMA_SOURCE_FILE_AT_LINE (1894))).isBuiltAndTrue ()) {
        operand_65261->mConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (operand_65261->mConstantName)).operator_concat (GGS_string ("' is already declared as ram register or special register")) COMMA_SOURCE_FILE_AT_LINE (1896)) ;
      }else{
        var_cas_constantMap.modifier_insertKey (inLexique, operand_65261->mConstantName, var_cas_result COMMA_SOURCE_FILE_AT_LINE (1897)) ;
      }
    }
  }
  if ((gOption_piccolo_5F_options_ouputListingFile.value ()).isBuiltAndTrue ()) {
    ::routine_print_constant_definition (inLexique,  var_cas_constantMap,  var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (1902)) ;
  }
  if (((var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    if ((var_cas_routineMap.reader_hasKey (inLexique, GGS_string ("main") COMMA_SOURCE_FILE_AT_LINE (1909))).isBuiltAndTrue ()) {
      GGS_bool var_cas_isNoReturn ;
      GGS_uint  var_cas_requiredBank ;
      GGS_uint  automatic_var_13 ;
      GGS_bool automatic_var_14 ;
      const GGS_routineMap  temp_66091 = var_cas_routineMap ;
      if (temp_66091.isBuilt ()) {
        temp_66091 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_HERE), var_cas_isNoReturn, var_cas_requiredBank, automatic_var_13, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (1912)) ;
      }
      if (((var_cas_isNoReturn).operator_not ()).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"noreturn\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1915)) ;
      }
      if (((var_cas_requiredBank).operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"main\" should be declared with \"requiresbank 0\" qualifier: \"noreturn main requiresbank 0\"") COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      }
    }else{
      var_cas_inPiccoloModel.reader_mEndOfProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (1920)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the program should declare the \"main\" routine") COMMA_SOURCE_FILE_AT_LINE (1921)) ;
    }
  }
  var_cas_outGeneratedInstructionList = GGS_ipic18_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_entryPoint = GGS_uint (4U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_66874 (var_cas_inBootloaderRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_66874 = NULL ;
    while (((operand_66874 = enumerator_66874.nextObject ()))) {
      macroValidPointer (operand_66874) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_66874->mRoutineName COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1929)) ;
      if (((var_cas_entryPoint).operator_isEqual (GGS_uint (8U))).isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (12U) ;
      }else if (((var_cas_entryPoint).operator_isEqual (GGS_uint (24U))).isBuiltAndTrue ()) {
        var_cas_entryPoint = GGS_uint (28U) ;
      }
    }
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1937)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_67416 (var_cas_inUserRoutineDeclarationListForUserProgramImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_67416 = NULL ;
    while (((operand_67416 = enumerator_67416.nextObject ()))) {
      macroValidPointer (operand_67416) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_67416->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1941)) ;
    }
  }
  if (((var_cas_inProgramKind).operator_isNotEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("main"), GGS_location (inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  GGS_routineDeclarationList  var_cas_tempBootloaderRoutineDeclarationList = var_cas_inBootloaderRoutineDeclarationListForBootloaderImplementation ;
  if (((var_cas_tempBootloaderRoutineDeclarationList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1950))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (4U) COMMA_HERE)) ;
    GGS_lstring  var_cas_routineName ;
    GGS_luint  automatic_var_15 ;
    GGS_luint  automatic_var_16 ;
    GGS_bool automatic_var_17 ;
    GGS_bool automatic_var_18 ;
    var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_15, automatic_var_16, automatic_var_17, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (1953)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_entryPoint = GGS_uint (12U) ;
  GGS_uint _variant_69540 = var_cas_tempBootloaderRoutineDeclarationList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1963)) ;
  GGS_bool _condition_69540 (_variant_69540.isBuilt (), true) ;
  while (_condition_69540.isBuiltAndTrue ()) {
    _condition_69540 = ((var_cas_tempBootloaderRoutineDeclarationList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1964))).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_entryPoint).operator_strictInf (GGS_uint (24U))) ;
    if (_condition_69540.isBuiltAndTrue ()) {
      if (_variant_69540.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1971)) ;
        _condition_69540 = GGS_bool (false) ;
      }else{
        _variant_69540.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_HERE)) ;
        GGS_lstring  var_cas_routineName ;
        GGS_luint  automatic_var_19 ;
        GGS_luint  automatic_var_20 ;
        GGS_bool automatic_var_21 ;
        GGS_bool automatic_var_22 ;
        var_cas_tempBootloaderRoutineDeclarationList.modifier_popFirst (inLexique, var_cas_routineName, automatic_var_19, automatic_var_20, automatic_var_21, automatic_var_22 COMMA_SOURCE_FILE_AT_LINE (1968)) ;
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), var_cas_routineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
        var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1970)) ;
      }
    }
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, GGS_uint (24U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_HERE), GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_entryPoint = GGS_uint (28U) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_70025 (var_cas_tempBootloaderRoutineDeclarationList, true) ;
    const GGS_routineDeclarationList::cElement * operand_70025 = NULL ;
    while (((operand_70025 = enumerator_70025.nextObject ()))) {
      macroValidPointer (operand_70025) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_70025->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (1982)) ;
    }
  }
  GGS_uint  var_cas_localLabelIndex = GGS_uint (0U) ;
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_low_interrupt"), GGS_location (inLexique) COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_70516 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1988)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_70516 = NULL ;
      while (((operand_70516 = enumerator_70516.nextObject ()))) {
        macroValidPointer (operand_70516) ;
        if (((operand_70516->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1989))).operator_isEqual (GGS_string ("low"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (inLexique,  operand_70516->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_70516->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1992)) ;
          if (((var_cas_continuesInSequence).operator_not ()).isBuiltAndTrue ()) {
            operand_70516->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2008)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), operand_70516->mFastReturn COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_high_interrupt"), GGS_location (inLexique) COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_71683 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2017)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_71683 = NULL ;
      while (((operand_71683 = enumerator_71683.nextObject ()))) {
        macroValidPointer (operand_71683) ;
        if (((operand_71683->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2018))).operator_isEqual (GGS_string ("high"))).isBuiltAndTrue ()) {
          GGS_bool var_cas_continuesInSequence ;
          GGS_uint  var_cas_currentBank = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
          ::routine_handleInstructionList (inLexique,  operand_71683->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  (operand_71683->mFastReturn).operator_not (),  var_cas_continuesInSequence,  GGS_routineKind::constructor_interruptRoutine (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2021)) ;
          if (((var_cas_continuesInSequence).operator_not ()).isBuiltAndTrue ()) {
            operand_71683->mEndOfInterruptLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution cannot reach the end of the interrupt routine") COMMA_SOURCE_FILE_AT_LINE (2037)) ;
          }
          var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETFIE ::constructor_new (inLexique, GGS_location (inLexique), GGS_bool (true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_72694 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (2044)), true) ;
    const GGS_routineDefinitionList::cElement * operand_72694 = NULL ;
    while (((operand_72694 = enumerator_72694.nextObject ()))) {
      macroValidPointer (operand_72694) ;
      GGS_bool var_cas_continuesInSequence ;
      GGS_uint  var_cas_currentBank = operand_72694->mRequiredBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      GGS_routineKind var_cas_routineKind ;
      if ((operand_72694->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_routineKind = GGS_routineKind::constructor_noReturnRoutine (inLexique COMMA_HERE) ;
      }else{
        var_cas_routineKind = GGS_routineKind::constructor_regularRoutine (inLexique COMMA_HERE) ;
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_72694->mRoutineName COMMA_HERE)) ;
      ::routine_handleInstructionList (inLexique,  operand_72694->mInstructionList,  var_cas_inAccessBankSplitOffset,  var_cas_routineMap,  var_cas_inRegisterTable,  var_cas_constantMap,  var_cas_localLabelIndex,  var_cas_outGeneratedInstructionList,  var_cas_generationOptimizationMessages,  var_cas_currentBank,  operand_72694->mPreservesBank,  var_cas_continuesInSequence,  var_cas_routineKind COMMA_SOURCE_FILE_AT_LINE (2054)) ;
      if (((((operand_72694->mIsNoReturn).operator_not ()).operator_and ((operand_72694->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2068))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE)))).operator_and ((var_cas_currentBank).operator_isNotEqual (operand_72694->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2068))))).isBuiltAndTrue ()) {
        operand_72694->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("execution will not set BSR to ")).operator_concat (operand_72694->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2069)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2069))) COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      }
      if (((operand_72694->mIsNoReturn).operator_and (var_cas_continuesInSequence)).isBuiltAndTrue ()) {
        operand_72694->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("execution should not reach the end of a \"noreturn\" routine") COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      }
      if (((operand_72694->mIsNoReturn).operator_not ()).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, operand_72694->mRoutineName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2076)) COMMA_HERE)) ;
      }
    }
  }
  GGS_registerExpression  var_cas_WREGregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("WREG"), GGS_location (inLexique) COMMA_HERE), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_WREG_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_23 ;
  const GGS_registerExpression  temp_74301 = var_cas_WREGregister ;
  if (temp_74301.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74301.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74301 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_WREG_IPICregisterDescription, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (2083)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSLregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSL"), GGS_location (inLexique) COMMA_HERE), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSL_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_24 ;
  const GGS_registerExpression  temp_74638 = var_cas_TOSLregister ;
  if (temp_74638.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74638.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74638 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSL_IPICregisterDescription, automatic_var_24 COMMA_SOURCE_FILE_AT_LINE (2093)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSHregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSH"), GGS_location (inLexique) COMMA_HERE), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSH_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_25 ;
  const GGS_registerExpression  temp_74975 = var_cas_TOSHregister ;
  if (temp_74975.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_74975.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_74975 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSH_IPICregisterDescription, automatic_var_25 COMMA_SOURCE_FILE_AT_LINE (2103)) ;
    }
  }
  GGS_registerExpression  var_cas_TOSUregister = GGS_registerExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSU"), GGS_location (inLexique) COMMA_HERE), GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  GGS_ipic_registerExpression var_cas_TOSU_IPICregisterDescription ;
  GGS_bitSliceTable  automatic_var_26 ;
  const GGS_registerExpression  temp_75312 = var_cas_TOSUregister ;
  if (temp_75312.isBuilt ()) {
    typeCategoryMethod__registerExpression__resolveAccess method = findCategoryMethod__registerExpression__resolveAccess (temp_75312.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, temp_75312 (HERE), var_cas_inAccessBankSplitOffset, GGS_uint (0U), var_cas_inRegisterTable, var_cas_TOSU_IPICregisterDescription, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (2113)) ;
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2121))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_4"), GGS_location (inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2130))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("_computed_goto_2"), GGS_location (inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (inLexique COMMA_SOURCE_FILE_AT_LINE (2133))).operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (inLexique COMMA_SOURCE_FILE_AT_LINE (2133)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (inLexique COMMA_HERE), var_cas_WREG_IPICregisterDescription, GGS_bool (true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_HERE), var_cas_TOSL_IPICregisterDescription, GGS_bool (false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_literalOperation ::constructor_new (inLexique, GGS_location (inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (inLexique COMMA_HERE), GGS_uint (0U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_HERE), var_cas_TOSH_IPICregisterDescription, GGS_bool (false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_FDA ::constructor_new (inLexique, GGS_location (inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (inLexique COMMA_HERE), var_cas_TOSU_IPICregisterDescription, GGS_bool (false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE)) ;
  }
  var_cas_entryPoint = var_cas_inBootloaderReservedROMsize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2168)) ;
  {
    GGS_routineDeclarationList::cEnumerator enumerator_77298 (var_cas_inUserRoutineDeclarationListForBootloaderImplementation, true) ;
    const GGS_routineDeclarationList::cElement * operand_77298 = NULL ;
    while (((operand_77298 = enumerator_77298.nextObject ()))) {
      macroValidPointer (operand_77298) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (inLexique, var_cas_entryPoint COMMA_HERE)) ;
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (inLexique, operand_77298->mRoutineName COMMA_HERE)) ;
      if ((operand_77298->mIsNoReturn).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic_JUMP ::constructor_new (inLexique, GGS_location (inLexique), operand_77298->mRoutineName, GGS_jumpInstructionKind::constructor_ipicRelative (inLexique COMMA_HERE) COMMA_HERE)) ;
      }else if (((operand_77298->mReturnedBank.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2174))).operator_isNotEqual (GGS_uint ::constructor_max (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_MOVLB ::constructor_new (inLexique, GGS_location (inLexique), operand_77298->mReturnedBank COMMA_HERE)) ;
      }
      var_cas_outGeneratedInstructionList.addAssign_operation (GGS_ipic18_instruction_RETURN ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE)) ;
      var_cas_entryPoint = var_cas_entryPoint.add_operation (inLexique, GGS_uint (4U) COMMA_SOURCE_FILE_AT_LINE (2178)) ;
    }
  }
  if ((gOption_piccolo_5F_options_ouputListingFile.value ()).isBuiltAndTrue ()) {
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (2182))) ;
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("*") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("IPIC INSTRUCTION LIST").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (2183))) ;
    var_cas_ioListFileContents.appendCString ("*\n") ;
    var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (2184))) ;
    var_cas_ioListFileContents.appendCString ("\n"
      "\n") ;
    if (((var_cas_generationOptimizationMessages.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2185))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_ioListFileContents.appendCString ("Optimizations during generation:\n") ;
      var_cas_ioListFileContents.dotAssign_operation (var_cas_generationOptimizationMessages) ;
      var_cas_ioListFileContents.appendCString ("\n") ;
    }
    var_cas_ioListFileContents.appendCString ("Generated intermediate code:\n") ;
    GGS_uint  var_cas_idx = GGS_uint (0U) ;
    GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
    {
      GGS_ipic18_instructionList::cEnumerator enumerator_78597 (var_cas_outGeneratedInstructionList, true) ;
      const GGS_ipic18_instructionList::cElement * operand_78597 = NULL ;
      while (((operand_78597 = enumerator_78597.nextObject ()))) {
        macroValidPointer (operand_78597) ;
        const GGS_ipic18_instruction  temp_78638 = operand_78597->mInstruction ;
        if (temp_78638.isBuilt ()) {
          temp_78638 (HERE)->method_setCurrentAddress (inLexique, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (2194)) ;
        }
        var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2195)).reader_stringByLeftPadding (inLexique, GGS_uint (5U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (2195))) ;
        var_cas_ioListFileContents.appendCString (": ") ;
        const GGS_ipic18_instruction  temp_78781 = operand_78597->mInstruction ;
        if (temp_78781.isBuilt ()) {
          temp_78781 (HERE)->method_displayIPICinstruction (inLexique, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (2196)) ;
        }
        var_cas_ioListFileContents.appendCString ("\n") ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2198)) ;
      }
    }
    var_cas_ioListFileContents.appendCString ("\n") ;
    var_cas_ioListFileContents.appendCString ("Minimum code size without optimization: ") ;
    var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2201))) ;
    var_cas_ioListFileContents.appendCString (" bytes.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_build_ipic18_assembly_instruction_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_pic18_checkingAndBuildIPIC (void) {
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_nobanksel__buildIPICinstructionList, gClassInfoFor__instruction_nobanksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_savebank__buildIPICinstructionList, gClassInfoFor__instruction_savebank.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_banksel__buildIPICinstructionList, gClassInfoFor__instruction_banksel.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FDA__buildIPICinstructionList, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FA__buildIPICinstructionList, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MOVFF__buildIPICinstructionList, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FBA__buildIPICinstructionList, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JSR__buildIPICinstructionList, gClassInfoFor__instruction_JSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMP__buildIPICinstructionList, gClassInfoFor__instruction_JUMP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_JUMPCC__buildIPICinstructionList, gClassInfoFor__instruction_JUMPCC.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_CLRWDT__buildIPICinstructionList, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_DAW__buildIPICinstructionList, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_NOP__buildIPICinstructionList, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_POP__buildIPICinstructionList, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_PUSH__buildIPICinstructionList, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_RESET__buildIPICinstructionList, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_SLEEP__buildIPICinstructionList, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_literalOperation__buildIPICinstructionList, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_LFSR__buildIPICinstructionList, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLRD__buildIPICinstructionList, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_TBLWT__buildIPICinstructionList, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_retlw__buildIPICinstructionList, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_MNOP__buildIPICinstructionList, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_bra__buildIPICinstructionList, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_goto__buildIPICinstructionList, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_computed_rcall__buildIPICinstructionList, gClassInfoFor__instruction_computed_rcall.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_FOREVER__buildIPICinstructionList, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_FA_SEMI_COLON__buildIPICinstructionList, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_BitTest__buildIPICinstructionList, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bcc_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bcc_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerComparisonCondition__buildIPICinstructionForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerComparisonCondition__computeInstructionCountForCondition, gClassInfoFor__registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__incDecRegisterInCondition__buildIPICinstructionForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__incDecRegisterInCondition__computeInstructionCountForCondition, gClassInfoFor__incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__registerTestCondition__buildIPICinstructionForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__registerTestCondition__computeInstructionCountForCondition, gClassInfoFor__registerTestCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__negateCondition__buildIPICinstructionForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__negateCondition__computeInstructionCountForCondition, gClassInfoFor__negateCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__andCondition__buildIPICinstructionForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__andCondition__computeInstructionCountForCondition, gClassInfoFor__andCondition.slotID ()) ;
 enterCategoryMethod__conditionExpression__buildIPICinstructionForCondition ((typeCategoryMethod__conditionExpression__buildIPICinstructionForCondition) category_method__bitTest_in_structured_if_condition__buildIPICinstructionForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__computeInstructionCountForCondition ((typeCategoryMethod__conditionExpression__computeInstructionCountForCondition) category_method__bitTest_in_structured_if_condition__computeInstructionCountForCondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_structured_if__buildIPICinstructionList, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_do_while__buildIPICinstructionList, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__buildIPICinstructionList ((typeCategoryMethod__piccolo_instruction__buildIPICinstructionList) category_method__instruction_IF_IncDec__buildIPICinstructionList, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_pic18_checkingAndBuildIPIC (prologueRoutineFor_pic18_checkingAndBuildIPIC,
                                   NULL) ;

//---------------------------------------------------------------------------*

