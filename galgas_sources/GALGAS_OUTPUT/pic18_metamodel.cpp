//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_metamodel.cpp'                         *
//             Generated by version version GALGAS_BETA_VERSION              *
//                      april 26th, 2012, at 18h9'58"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "pic18_metamodel.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_metamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

cMapElement_bootloaderReservedRAMmap::cMapElement_bootloaderReservedRAMmap (const GALGAS_lstring & inKey,
                                                                            const GALGAS_luint & in_mReservedSize
                                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mReservedSize (in_mReservedSize) {
}

//---------------------------------------------------------------------------*

bool cMapElement_bootloaderReservedRAMmap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mReservedSize.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_bootloaderReservedRAMmap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_bootloaderReservedRAMmap (mAttribute_lkey, mAttribute_mReservedSize COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_bootloaderReservedRAMmap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mReservedSize" ":" ;
  mAttribute_mReservedSize.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_bootloaderReservedRAMmap::compare (const cCollectionElement * inOperand) const {
  cMapElement_bootloaderReservedRAMmap * operand = (cMapElement_bootloaderReservedRAMmap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mReservedSize.objectCompare (operand->mAttribute_mReservedSize) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap::GALGAS_bootloaderReservedRAMmap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap::GALGAS_bootloaderReservedRAMmap (const GALGAS_bootloaderReservedRAMmap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap & GALGAS_bootloaderReservedRAMmap::operator = (const GALGAS_bootloaderReservedRAMmap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap GALGAS_bootloaderReservedRAMmap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_bootloaderReservedRAMmap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap GALGAS_bootloaderReservedRAMmap::constructor_mapWithMapToOverride (const GALGAS_bootloaderReservedRAMmap & inMapToOverride
                                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_bootloaderReservedRAMmap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap GALGAS_bootloaderReservedRAMmap::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_bootloaderReservedRAMmap result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_bootloaderReservedRAMmap::modifier_insertKey (GALGAS_lstring inKey,
                                                          GALGAS_luint inArgument0,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cMapElement_bootloaderReservedRAMmap * p = NULL ;
  macroMyNew (p, cMapElement_bootloaderReservedRAMmap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the reserved size for the '%K' bank is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_bootloaderReservedRAMmap_searchKey = "the reserved size for the '%K' bank is not declared" ;

//---------------------------------------------------------------------------*

void GALGAS_bootloaderReservedRAMmap::method_searchKey (GALGAS_lstring inKey,
                                                        GALGAS_luint & outArgument0,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) const {
  const cMapElement_bootloaderReservedRAMmap * p = (const cMapElement_bootloaderReservedRAMmap *) performSearch (inKey,
                                                                                                                   inCompiler,
                                                                                                                   kSearchErrorMessage_bootloaderReservedRAMmap_searchKey
                                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_bootloaderReservedRAMmap) ;
    outArgument0 = p->mAttribute_mReservedSize ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_bootloaderReservedRAMmap::reader_mReservedSizeForKey (const GALGAS_string & inKey,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_bootloaderReservedRAMmap * p = (const cMapElement_bootloaderReservedRAMmap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_bootloaderReservedRAMmap) ;
    result = p->mAttribute_mReservedSize ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bootloaderReservedRAMmap::modifier_setMReservedSizeForKey (GALGAS_luint inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_bootloaderReservedRAMmap * p = (cMapElement_bootloaderReservedRAMmap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_bootloaderReservedRAMmap) ;
    p->mAttribute_mReservedSize = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_bootloaderReservedRAMmap * GALGAS_bootloaderReservedRAMmap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                                  const GALGAS_string & inKey
                                                                                                                  COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_bootloaderReservedRAMmap * result = (cMapElement_bootloaderReservedRAMmap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_bootloaderReservedRAMmap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_bootloaderReservedRAMmap * GALGAS_bootloaderReservedRAMmap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                                     const GALGAS_lstring & inKey
                                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_bootloaderReservedRAMmap_searchKey COMMA_THERE) ;
  cMapElement_bootloaderReservedRAMmap * result = (cMapElement_bootloaderReservedRAMmap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_bootloaderReservedRAMmap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_bootloaderReservedRAMmap::cEnumerator_bootloaderReservedRAMmap (const GALGAS_bootloaderReservedRAMmap & inEnumeratedObject,
                                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element cEnumerator_bootloaderReservedRAMmap::current (LOCATION_ARGS) const {
  const cMapElement_bootloaderReservedRAMmap * p = (const cMapElement_bootloaderReservedRAMmap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_bootloaderReservedRAMmap) ;
  return GALGAS_bootloaderReservedRAMmap_2E_element (p->mAttribute_lkey, p->mAttribute_mReservedSize) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_bootloaderReservedRAMmap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_bootloaderReservedRAMmap::current_mReservedSize (LOCATION_ARGS) const {
  const cMapElement_bootloaderReservedRAMmap * p = (const cMapElement_bootloaderReservedRAMmap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_bootloaderReservedRAMmap) ;
  return p->mAttribute_mReservedSize ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @bootloaderReservedRAMmap type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bootloaderReservedRAMmap ("bootloaderReservedRAMmap",
                                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bootloaderReservedRAMmap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bootloaderReservedRAMmap ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bootloaderReservedRAMmap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bootloaderReservedRAMmap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap GALGAS_bootloaderReservedRAMmap::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler,
                                                                                const GALGAS_location & inErrorLocation
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_bootloaderReservedRAMmap result ;
  const GALGAS_bootloaderReservedRAMmap * p = (const GALGAS_bootloaderReservedRAMmap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bootloaderReservedRAMmap *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bootloaderReservedRAMmap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@instructionList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_instructionList : public cCollectionElement {
  public : GALGAS_instructionList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_instructionList (const GALGAS_piccolo_5F_instruction & in_mInstruction
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_instructionList::cCollectionElement_instructionList (const GALGAS_piccolo_5F_instruction & in_mInstruction
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mInstruction) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_instructionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_instructionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_instructionList (mObject.mAttribute_mInstruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_instructionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstruction" ":" ;
  mObject.mAttribute_mInstruction.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_instructionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_instructionList * operand = (cCollectionElement_instructionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_instructionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList::GALGAS_instructionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_instructionList::GALGAS_instructionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_instructionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::constructor_listWithValue (const GALGAS_piccolo_5F_instruction & inOperand0
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instructionList result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_instructionList::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                        const GALGAS_piccolo_5F_instruction & in_mInstruction
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_instructionList * p = NULL ;
  macroMyNew (p, cCollectionElement_instructionList (in_mInstruction COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::addAssign_operation (const GALGAS_piccolo_5F_instruction & inOperand0
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_instructionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::modifier_prependValue (GALGAS_piccolo_5F_instruction inOperand0
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_instructionList (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::modifier_popFirst (GALGAS_piccolo_5F_instruction & outOperand0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_instructionList * p = (cCollectionElement_instructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_instructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::modifier_popLast (GALGAS_piccolo_5F_instruction & outOperand0,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_instructionList * p = (cCollectionElement_instructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_instructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::method_first (GALGAS_piccolo_5F_instruction & outOperand0,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_instructionList * p = (cCollectionElement_instructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_instructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::method_last (GALGAS_piccolo_5F_instruction & outOperand0,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_instructionList * p = (cCollectionElement_instructionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_instructionList) ;
    outOperand0 = p->mObject.mAttribute_mInstruction ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::operator_concat (const GALGAS_instructionList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_instructionList result = GALGAS_instructionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_instructionList result = GALGAS_instructionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList::dotAssign_operation (const GALGAS_instructionList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction GALGAS_instructionList::reader_mInstructionAtIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_instructionList * p = (cCollectionElement_instructionList *) attributes.ptr () ;
  GALGAS_piccolo_5F_instruction result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_instructionList) ;
    result = p->mObject.mAttribute_mInstruction ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_instructionList::cEnumerator_instructionList (const GALGAS_instructionList & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element cEnumerator_instructionList::current (LOCATION_ARGS) const {
  const cCollectionElement_instructionList * p = (const cCollectionElement_instructionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_instructionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction cEnumerator_instructionList::current_mInstruction (LOCATION_ARGS) const {
  const cCollectionElement_instructionList * p = (const cCollectionElement_instructionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_instructionList) ;
  return p->mObject.mAttribute_mInstruction ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @instructionList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instructionList ("instructionList",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instructionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instructionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instructionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instructionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instructionList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instructionList result ;
  const GALGAS_instructionList * p = (const GALGAS_instructionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instructionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instructionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code::GALGAS_instruction_5F_FDA_5F_base_5F_code (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_ADDWF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_ADDWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_ADDWFC (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_ADDWFC ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_ANDWF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_ANDWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_COMF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_COMF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_DECF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_DECF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_DECFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_DECFSZ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_DCFSNZ (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_DCFSNZ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_INCF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_INCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_INCFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_INCFSZ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_INFSNZ (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_INFSNZ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_IORWF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_IORWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_MOVF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_MOVF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_RLCF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_RLCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_RLNCF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_RLNCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_RRCF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_RRCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_RRNCF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_RRNCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_SUBFWB (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_SUBFWB ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_SUBWF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_SUBWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_SUBWFB (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_SUBWFB ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_SWAPF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_SWAPF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::constructor_XORWF (UNUSED_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  result.mEnum = kEnum_XORWF ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_instruction_5F_FDA_5F_base_5F_code [22] = {
  "(not built)",
  "ADDWF",
  "ADDWFC",
  "ANDWF",
  "COMF",
  "DECF",
  "DECFSZ",
  "DCFSNZ",
  "INCF",
  "INCFSZ",
  "INFSNZ",
  "IORWF",
  "MOVF",
  "RLCF",
  "RLNCF",
  "RRCF",
  "RRNCF",
  "SUBFWB",
  "SUBWF",
  "SUBWFB",
  "SWAPF",
  "XORWF"
} ;

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_FDA_5F_base_5F_code::description (C_String & ioString,
                                                             const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @instruction_FDA_base_code: " << gEnumNameArrayFor_instruction_5F_FDA_5F_base_5F_code [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_instruction_5F_FDA_5F_base_5F_code::objectCompare (const GALGAS_instruction_5F_FDA_5F_base_5F_code & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      @instruction_FDA_base_code type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_FDA_5F_base_5F_code ("instruction_FDA_base_code",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_FDA_5F_base_5F_code::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FDA_5F_base_5F_code ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_FDA_5F_base_5F_code::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_FDA_5F_base_5F_code (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA_5F_base_5F_code::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler,
                                                                                                    const GALGAS_location & inErrorLocation
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  const GALGAS_instruction_5F_FDA_5F_base_5F_code * p = (const GALGAS_instruction_5F_FDA_5F_base_5F_code *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_FDA_5F_base_5F_code *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_FDA_base_code", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'getFDAinstructionBaseCode'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getFDAinstructionBaseCode (const GALGAS_instruction_5F_FDA_5F_base_5F_code constinArgument_inInstruction,
                                        GALGAS_uint & outArgument_outBaseCode,
                                        C_Compiler * /* inCompiler */
                                        COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outBaseCode.drop () ; // Release 'out' argument
  //------- @switchInstructionForGeneration
  if (constinArgument_inInstruction.isValid ()) {
    switch (constinArgument_inInstruction.enumValue ()) {
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kNotBuilt:
      break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ADDWF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 9216U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ADDWFC: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 8192U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ANDWF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 5120U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_COMF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 7168U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DECF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 1024U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DECFSZ: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 11264U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DCFSNZ: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 19456U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INCF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 10240U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INCFSZ: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 15360U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INFSNZ: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 18432U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_IORWF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 4096U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_MOVF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 20480U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RLCF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 13312U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RLNCF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 17408U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RRCF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 12288U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RRNCF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 16384U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBFWB: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 21504U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBWF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 23552U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBWFB: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 22528U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SWAPF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 14336U) ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_XORWF: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 6144U) ;
      } break ;
    }
  }
}


//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code::GALGAS_FA_5F_instruction_5F_base_5F_code (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_CLRF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CLRF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_CPFSEQ (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSEQ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_CPFSGT (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSGT ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_CPFSLT (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_CPFSLT ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_MOVWF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_MOVWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_MULWF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_MULWF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_NEGF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_NEGF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_SETF (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_SETF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::constructor_TSTFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  result.mEnum = kEnum_TSTFSZ ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_FA_5F_instruction_5F_base_5F_code [10] = {
  "(not built)",
  "CLRF",
  "CPFSEQ",
  "CPFSGT",
  "CPFSLT",
  "MOVWF",
  "MULWF",
  "NEGF",
  "SETF",
  "TSTFSZ"
} ;

//---------------------------------------------------------------------------*

void GALGAS_FA_5F_instruction_5F_base_5F_code::description (C_String & ioString,
                                                            const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @FA_instruction_base_code: " << gEnumNameArrayFor_FA_5F_instruction_5F_base_5F_code [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_FA_5F_instruction_5F_base_5F_code::objectCompare (const GALGAS_FA_5F_instruction_5F_base_5F_code & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      @FA_instruction_base_code type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_FA_5F_instruction_5F_base_5F_code ("FA_instruction_base_code",
                                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_FA_5F_instruction_5F_base_5F_code::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_FA_5F_instruction_5F_base_5F_code ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_FA_5F_instruction_5F_base_5F_code::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_FA_5F_instruction_5F_base_5F_code (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_FA_5F_instruction_5F_base_5F_code::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler,
                                                                                                  const GALGAS_location & inErrorLocation
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  const GALGAS_FA_5F_instruction_5F_base_5F_code * p = (const GALGAS_FA_5F_instruction_5F_base_5F_code *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_FA_5F_instruction_5F_base_5F_code *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "FA_instruction_base_code", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op::GALGAS_bit_5F_oriented_5F_op (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op GALGAS_bit_5F_oriented_5F_op::constructor_BCF (UNUSED_LOCATION_ARGS) {
  GALGAS_bit_5F_oriented_5F_op result ;
  result.mEnum = kEnum_BCF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op GALGAS_bit_5F_oriented_5F_op::constructor_BSF (UNUSED_LOCATION_ARGS) {
  GALGAS_bit_5F_oriented_5F_op result ;
  result.mEnum = kEnum_BSF ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op GALGAS_bit_5F_oriented_5F_op::constructor_BTG (UNUSED_LOCATION_ARGS) {
  GALGAS_bit_5F_oriented_5F_op result ;
  result.mEnum = kEnum_BTG ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_bit_5F_oriented_5F_op [4] = {
  "(not built)",
  "BCF",
  "BSF",
  "BTG"
} ;

//---------------------------------------------------------------------------*

void GALGAS_bit_5F_oriented_5F_op::description (C_String & ioString,
                                                const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @bit_oriented_op: " << gEnumNameArrayFor_bit_5F_oriented_5F_op [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bit_5F_oriented_5F_op::objectCompare (const GALGAS_bit_5F_oriented_5F_op & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           @bit_oriented_op type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bit_5F_oriented_5F_op ("bit_oriented_op",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bit_5F_oriented_5F_op::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bit_5F_oriented_5F_op ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bit_5F_oriented_5F_op::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bit_5F_oriented_5F_op (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op GALGAS_bit_5F_oriented_5F_op::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_bit_5F_oriented_5F_op result ;
  const GALGAS_bit_5F_oriented_5F_op * p = (const GALGAS_bit_5F_oriented_5F_op *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bit_5F_oriented_5F_op *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bit_oriented_op", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch::GALGAS_conditional_5F_branch (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bz (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bz ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bnz (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bnz ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bn (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bn ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bnn (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bnn ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bc (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bc ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bnc (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bnc ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bov (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bov ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::constructor_bnov (UNUSED_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  result.mEnum = kEnum_bnov ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_conditional_5F_branch [9] = {
  "(not built)",
  "bz",
  "bnz",
  "bn",
  "bnn",
  "bc",
  "bnc",
  "bov",
  "bnov"
} ;

//---------------------------------------------------------------------------*

void GALGAS_conditional_5F_branch::description (C_String & ioString,
                                                const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @conditional_branch: " << gEnumNameArrayFor_conditional_5F_branch [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_conditional_5F_branch::objectCompare (const GALGAS_conditional_5F_branch & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         @conditional_branch type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_conditional_5F_branch ("conditional_branch",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_conditional_5F_branch::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_conditional_5F_branch ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_conditional_5F_branch::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_conditional_5F_branch (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_conditional_5F_branch::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_conditional_5F_branch result ;
  const GALGAS_conditional_5F_branch * p = (const GALGAS_conditional_5F_branch *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_conditional_5F_branch *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "conditional_branch", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'getComplementaryBcc'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getComplementaryBcc (const GALGAS_conditional_5F_branch constinArgument_inConditionalBranch,
                                  GALGAS_conditional_5F_branch & outArgument_outComplementary,
                                  C_Compiler * /* inCompiler */
                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outComplementary.drop () ; // Release 'out' argument
  //------- @switchInstructionForGeneration
  if (constinArgument_inConditionalBranch.isValid ()) {
    switch (constinArgument_inConditionalBranch.enumValue ()) {
    case GALGAS_conditional_5F_branch::kNotBuilt:
      break ;
    case GALGAS_conditional_5F_branch::kEnum_bz: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bnz (SOURCE_FILE_AT_LINE (215)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnz: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bz (SOURCE_FILE_AT_LINE (216)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bn: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bnn (SOURCE_FILE_AT_LINE (217)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnn: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bn (SOURCE_FILE_AT_LINE (218)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bc: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bnc (SOURCE_FILE_AT_LINE (219)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnc: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bc (SOURCE_FILE_AT_LINE (220)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bov: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bnov (SOURCE_FILE_AT_LINE (221)) ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnov: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComplementary = GALGAS_conditional_5F_branch::constructor_bov (SOURCE_FILE_AT_LINE (222)) ;
      } break ;
    }
  }
}


//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind::GALGAS_jumpInstructionKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_jumpInstructionKind::constructor_ipicRelative (UNUSED_LOCATION_ARGS) {
  GALGAS_jumpInstructionKind result ;
  result.mEnum = kEnum_ipicRelative ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_jumpInstructionKind::constructor_ipicAbsolute (UNUSED_LOCATION_ARGS) {
  GALGAS_jumpInstructionKind result ;
  result.mEnum = kEnum_ipicAbsolute ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_jumpInstructionKind::constructor_relative (UNUSED_LOCATION_ARGS) {
  GALGAS_jumpInstructionKind result ;
  result.mEnum = kEnum_relative ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_jumpInstructionKind::constructor_absolute (UNUSED_LOCATION_ARGS) {
  GALGAS_jumpInstructionKind result ;
  result.mEnum = kEnum_absolute ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_jumpInstructionKind [5] = {
  "(not built)",
  "ipicRelative",
  "ipicAbsolute",
  "relative",
  "absolute"
} ;

//---------------------------------------------------------------------------*

void GALGAS_jumpInstructionKind::description (C_String & ioString,
                                              const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @jumpInstructionKind: " << gEnumNameArrayFor_jumpInstructionKind [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_jumpInstructionKind::objectCompare (const GALGAS_jumpInstructionKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         @jumpInstructionKind type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_jumpInstructionKind ("jumpInstructionKind",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_jumpInstructionKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_jumpInstructionKind ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_jumpInstructionKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_jumpInstructionKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_jumpInstructionKind::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_jumpInstructionKind result ;
  const GALGAS_jumpInstructionKind * p = (const GALGAS_jumpInstructionKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_jumpInstructionKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "jumpInstructionKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode::GALGAS_literal_5F_instruction_5F_opcode (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_ADDLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_ADDLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_ANDLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_ANDLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_IORLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_IORLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_MOVLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_MOVLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_MULLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_MULLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_RETLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_RETLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_SUBLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_SUBLW ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::constructor_XORLW (UNUSED_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  result.mEnum = kEnum_XORLW ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_literal_5F_instruction_5F_opcode [9] = {
  "(not built)",
  "ADDLW",
  "ANDLW",
  "IORLW",
  "MOVLW",
  "MULLW",
  "RETLW",
  "SUBLW",
  "XORLW"
} ;

//---------------------------------------------------------------------------*

void GALGAS_literal_5F_instruction_5F_opcode::description (C_String & ioString,
                                                           const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @literal_instruction_opcode: " << gEnumNameArrayFor_literal_5F_instruction_5F_opcode [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_literal_5F_instruction_5F_opcode::objectCompare (const GALGAS_literal_5F_instruction_5F_opcode & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     @literal_instruction_opcode type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_literal_5F_instruction_5F_opcode ("literal_instruction_opcode",
                                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_literal_5F_instruction_5F_opcode::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_literal_5F_instruction_5F_opcode ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_literal_5F_instruction_5F_opcode::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_literal_5F_instruction_5F_opcode (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_literal_5F_instruction_5F_opcode::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler,
                                                                                                const GALGAS_location & inErrorLocation
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  const GALGAS_literal_5F_instruction_5F_opcode * p = (const GALGAS_literal_5F_instruction_5F_opcode *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_literal_5F_instruction_5F_opcode *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "literal_instruction_opcode", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption::GALGAS_tableAccessOption (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_tableAccessOption::constructor_simpleAccess (UNUSED_LOCATION_ARGS) {
  GALGAS_tableAccessOption result ;
  result.mEnum = kEnum_simpleAccess ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_tableAccessOption::constructor_postIncrement (UNUSED_LOCATION_ARGS) {
  GALGAS_tableAccessOption result ;
  result.mEnum = kEnum_postIncrement ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_tableAccessOption::constructor_postDecrement (UNUSED_LOCATION_ARGS) {
  GALGAS_tableAccessOption result ;
  result.mEnum = kEnum_postDecrement ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_tableAccessOption::constructor_preIncrement (UNUSED_LOCATION_ARGS) {
  GALGAS_tableAccessOption result ;
  result.mEnum = kEnum_preIncrement ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_tableAccessOption [5] = {
  "(not built)",
  "simpleAccess",
  "postIncrement",
  "postDecrement",
  "preIncrement"
} ;

//---------------------------------------------------------------------------*

void GALGAS_tableAccessOption::description (C_String & ioString,
                                            const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @tableAccessOption: " << gEnumNameArrayFor_tableAccessOption [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_tableAccessOption::objectCompare (const GALGAS_tableAccessOption & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          @tableAccessOption type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_tableAccessOption ("tableAccessOption",
                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_tableAccessOption::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_tableAccessOption ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_tableAccessOption::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_tableAccessOption (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_tableAccessOption::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_tableAccessOption result ;
  const GALGAS_tableAccessOption * p = (const GALGAS_tableAccessOption *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_tableAccessOption *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "tableAccessOption", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op::GALGAS_if_5F_semi_5F_colon_5F_op (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_if_5F_semi_5F_colon_5F_op::constructor_CPFSEQ (UNUSED_LOCATION_ARGS) {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  result.mEnum = kEnum_CPFSEQ ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_if_5F_semi_5F_colon_5F_op::constructor_CPFSGT (UNUSED_LOCATION_ARGS) {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  result.mEnum = kEnum_CPFSGT ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_if_5F_semi_5F_colon_5F_op::constructor_CPFSLT (UNUSED_LOCATION_ARGS) {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  result.mEnum = kEnum_CPFSLT ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_if_5F_semi_5F_colon_5F_op::constructor_TSTFSZ (UNUSED_LOCATION_ARGS) {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  result.mEnum = kEnum_TSTFSZ ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_if_5F_semi_5F_colon_5F_op [5] = {
  "(not built)",
  "CPFSEQ",
  "CPFSGT",
  "CPFSLT",
  "TSTFSZ"
} ;

//---------------------------------------------------------------------------*

void GALGAS_if_5F_semi_5F_colon_5F_op::description (C_String & ioString,
                                                    const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @if_semi_colon_op: " << gEnumNameArrayFor_if_5F_semi_5F_colon_5F_op [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_if_5F_semi_5F_colon_5F_op::objectCompare (const GALGAS_if_5F_semi_5F_colon_5F_op & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          @if_semi_colon_op type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_if_5F_semi_5F_colon_5F_op ("if_semi_colon_op",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_if_5F_semi_5F_colon_5F_op::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_if_5F_semi_5F_colon_5F_op ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_if_5F_semi_5F_colon_5F_op::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_if_5F_semi_5F_colon_5F_op (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_if_5F_semi_5F_colon_5F_op::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler,
                                                                                  const GALGAS_location & inErrorLocation
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  const GALGAS_if_5F_semi_5F_colon_5F_op * p = (const GALGAS_if_5F_semi_5F_colon_5F_op *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_if_5F_semi_5F_colon_5F_op *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "if_semi_colon_op", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison::GALGAS_registerComparison (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_notEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_notEqual ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_equal (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_equal ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_greaterOrEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_greaterOrEqual ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_greater (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_greater ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_lowerOrEqual (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_lowerOrEqual ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::constructor_lower (UNUSED_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  result.mEnum = kEnum_lower ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_registerComparison [7] = {
  "(not built)",
  "notEqual",
  "equal",
  "greaterOrEqual",
  "greater",
  "lowerOrEqual",
  "lower"
} ;

//---------------------------------------------------------------------------*

void GALGAS_registerComparison::description (C_String & ioString,
                                             const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @registerComparison: " << gEnumNameArrayFor_registerComparison [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_registerComparison::objectCompare (const GALGAS_registerComparison & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         @registerComparison type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerComparison ("registerComparison",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerComparison::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerComparison ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerComparison::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerComparison (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparison::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_registerComparison result ;
  const GALGAS_registerComparison * p = (const GALGAS_registerComparison *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerComparison *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "registerComparison", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Routine 'getRegisterComparisonComplementary'                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getRegisterComparisonComplementary (const GALGAS_registerComparison constinArgument_inComparison,
                                                 GALGAS_registerComparison & outArgument_outComparison,
                                                 C_Compiler * /* inCompiler */
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outComparison.drop () ; // Release 'out' argument
  //------- @switchInstructionForGeneration
  if (constinArgument_inComparison.isValid ()) {
    switch (constinArgument_inComparison.enumValue ()) {
    case GALGAS_registerComparison::kNotBuilt:
      break ;
    case GALGAS_registerComparison::kEnum_notEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_equal (SOURCE_FILE_AT_LINE (496)) ;
      } break ;
    case GALGAS_registerComparison::kEnum_equal: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_notEqual (SOURCE_FILE_AT_LINE (497)) ;
      } break ;
    case GALGAS_registerComparison::kEnum_greaterOrEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_lower (SOURCE_FILE_AT_LINE (498)) ;
      } break ;
    case GALGAS_registerComparison::kEnum_greater: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_lowerOrEqual (SOURCE_FILE_AT_LINE (499)) ;
      } break ;
    case GALGAS_registerComparison::kEnum_lowerOrEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_greater (SOURCE_FILE_AT_LINE (500)) ;
      } break ;
    case GALGAS_registerComparison::kEnum_lower: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outComparison = GALGAS_registerComparison::constructor_greaterOrEqual (SOURCE_FILE_AT_LINE (501)) ;
      } break ;
    }
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//              Routine 'getRegisterComparisonInstructionCount'              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getRegisterComparisonInstructionCount (const GALGAS_registerComparison constinArgument_inComparison,
                                                    GALGAS_uint & outArgument_outInstructionCount,
                                                    C_Compiler * /* inCompiler */
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outInstructionCount.drop () ; // Release 'out' argument
  //------- @switchInstructionForGeneration
  if (constinArgument_inComparison.isValid ()) {
    switch (constinArgument_inComparison.enumValue ()) {
    case GALGAS_registerComparison::kNotBuilt:
      break ;
    case GALGAS_registerComparison::kEnum_notEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 2U) ;
      } break ;
    case GALGAS_registerComparison::kEnum_equal: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 3U) ;
      } break ;
    case GALGAS_registerComparison::kEnum_greaterOrEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 2U) ;
      } break ;
    case GALGAS_registerComparison::kEnum_greater: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 3U) ;
      } break ;
    case GALGAS_registerComparison::kEnum_lowerOrEqual: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 2U) ;
      } break ;
    case GALGAS_registerComparison::kEnum_lower: {
      //-------- @assignmentInstructionForGeneration
      outArgument_outInstructionCount = GALGAS_uint ((PMUInt32) 3U) ;
      } break ;
    }
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for element of '@partList' list                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_partList : public cCollectionElement {
  public : GALGAS_partList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_partList (const GALGAS_conditionExpression & in_mCondition,
                                        const GALGAS_instructionList & in_mInstructionList,
                                        const GALGAS_location & in_mEndOfPartLocation
                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_partList::cCollectionElement_partList (const GALGAS_conditionExpression & in_mCondition,
                                                          const GALGAS_instructionList & in_mInstructionList,
                                                          const GALGAS_location & in_mEndOfPartLocation
                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mCondition, in_mInstructionList, in_mEndOfPartLocation) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_partList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_partList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_partList (mObject.mAttribute_mCondition, mObject.mAttribute_mInstructionList, mObject.mAttribute_mEndOfPartLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_partList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCondition" ":" ;
  mObject.mAttribute_mCondition.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionList" ":" ;
  mObject.mAttribute_mInstructionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEndOfPartLocation" ":" ;
  mObject.mAttribute_mEndOfPartLocation.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_partList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_partList * operand = (cCollectionElement_partList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_partList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_partList::GALGAS_partList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_partList::GALGAS_partList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_partList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::constructor_listWithValue (const GALGAS_conditionExpression & inOperand0,
                                                            const GALGAS_instructionList & inOperand1,
                                                            const GALGAS_location & inOperand2
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_partList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_partList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_partList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                 const GALGAS_conditionExpression & in_mCondition,
                                                 const GALGAS_instructionList & in_mInstructionList,
                                                 const GALGAS_location & in_mEndOfPartLocation
                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement_partList * p = NULL ;
  macroMyNew (p, cCollectionElement_partList (in_mCondition,
                                              in_mInstructionList,
                                              in_mEndOfPartLocation COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_partList::addAssign_operation (const GALGAS_conditionExpression & inOperand0,
                                           const GALGAS_instructionList & inOperand1,
                                           const GALGAS_location & inOperand2
                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_partList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_partList::modifier_prependValue (GALGAS_conditionExpression inOperand0,
                                             GALGAS_instructionList inOperand1,
                                             GALGAS_location inOperand2
                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_partList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_partList::modifier_popFirst (GALGAS_conditionExpression & outOperand0,
                                         GALGAS_instructionList & outOperand1,
                                         GALGAS_location & outOperand2,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_partList) ;
    outOperand0 = p->mObject.mAttribute_mCondition ;
    outOperand1 = p->mObject.mAttribute_mInstructionList ;
    outOperand2 = p->mObject.mAttribute_mEndOfPartLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_partList::modifier_popLast (GALGAS_conditionExpression & outOperand0,
                                        GALGAS_instructionList & outOperand1,
                                        GALGAS_location & outOperand2,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_partList) ;
    outOperand0 = p->mObject.mAttribute_mCondition ;
    outOperand1 = p->mObject.mAttribute_mInstructionList ;
    outOperand2 = p->mObject.mAttribute_mEndOfPartLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_partList::method_first (GALGAS_conditionExpression & outOperand0,
                                    GALGAS_instructionList & outOperand1,
                                    GALGAS_location & outOperand2,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_partList) ;
    outOperand0 = p->mObject.mAttribute_mCondition ;
    outOperand1 = p->mObject.mAttribute_mInstructionList ;
    outOperand2 = p->mObject.mAttribute_mEndOfPartLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_partList::method_last (GALGAS_conditionExpression & outOperand0,
                                   GALGAS_instructionList & outOperand1,
                                   GALGAS_location & outOperand2,
                                   C_Compiler * inCompiler
                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_partList) ;
    outOperand0 = p->mObject.mAttribute_mCondition ;
    outOperand1 = p->mObject.mAttribute_mInstructionList ;
    outOperand2 = p->mObject.mAttribute_mEndOfPartLocation ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::operator_concat (const GALGAS_partList & inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_partList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::reader_subListWithRange (const GALGAS_range & inRange,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_partList result = GALGAS_partList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_partList result = GALGAS_partList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_partList::dotAssign_operation (const GALGAS_partList inOperand
                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_partList::reader_mConditionAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  GALGAS_conditionExpression result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_partList) ;
    result = p->mObject.mAttribute_mCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_partList::reader_mInstructionListAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  GALGAS_instructionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_partList) ;
    result = p->mObject.mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_partList::reader_mEndOfPartLocationAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_partList * p = (cCollectionElement_partList *) attributes.ptr () ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_partList) ;
    result = p->mObject.mAttribute_mEndOfPartLocation ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_partList::cEnumerator_partList (const GALGAS_partList & inEnumeratedObject,
                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element cEnumerator_partList::current (LOCATION_ARGS) const {
  const cCollectionElement_partList * p = (const cCollectionElement_partList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_partList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_conditionExpression cEnumerator_partList::current_mCondition (LOCATION_ARGS) const {
  const cCollectionElement_partList * p = (const cCollectionElement_partList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_partList) ;
  return p->mObject.mAttribute_mCondition ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cEnumerator_partList::current_mInstructionList (LOCATION_ARGS) const {
  const cCollectionElement_partList * p = (const cCollectionElement_partList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_partList) ;
  return p->mObject.mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location cEnumerator_partList::current_mEndOfPartLocation (LOCATION_ARGS) const {
  const cCollectionElement_partList * p = (const cCollectionElement_partList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_partList) ;
  return p->mObject.mAttribute_mEndOfPartLocation ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                              @partList type                               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_partList ("partList",
                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_partList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_partList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_partList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_partList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_partList::extractObject (const GALGAS_object & inObject,
                                                C_Compiler * inCompiler,
                                                const GALGAS_location & inErrorLocation
                                                COMMA_LOCATION_ARGS) {
  GALGAS_partList result ;
  const GALGAS_partList * p = (const GALGAS_partList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_partList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "partList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@interruptDefinitionList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_interruptDefinitionList : public cCollectionElement {
  public : GALGAS_interruptDefinitionList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_interruptDefinitionList (const GALGAS_lstring & in_mInterruptName,
                                                       const GALGAS_bool & in_mFastReturn,
                                                       const GALGAS_instructionList & in_mInstructionList,
                                                       const GALGAS_location & in_mEndOfInterruptLocation
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_interruptDefinitionList::cCollectionElement_interruptDefinitionList (const GALGAS_lstring & in_mInterruptName,
                                                                                        const GALGAS_bool & in_mFastReturn,
                                                                                        const GALGAS_instructionList & in_mInstructionList,
                                                                                        const GALGAS_location & in_mEndOfInterruptLocation
                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mInterruptName, in_mFastReturn, in_mInstructionList, in_mEndOfInterruptLocation) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_interruptDefinitionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_interruptDefinitionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_interruptDefinitionList (mObject.mAttribute_mInterruptName, mObject.mAttribute_mFastReturn, mObject.mAttribute_mInstructionList, mObject.mAttribute_mEndOfInterruptLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_interruptDefinitionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInterruptName" ":" ;
  mObject.mAttribute_mInterruptName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFastReturn" ":" ;
  mObject.mAttribute_mFastReturn.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionList" ":" ;
  mObject.mAttribute_mInstructionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEndOfInterruptLocation" ":" ;
  mObject.mAttribute_mEndOfInterruptLocation.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_interruptDefinitionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_interruptDefinitionList * operand = (cCollectionElement_interruptDefinitionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_interruptDefinitionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList::GALGAS_interruptDefinitionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList::GALGAS_interruptDefinitionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_interruptDefinitionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_bool & inOperand1,
                                                                                          const GALGAS_instructionList & inOperand2,
                                                                                          const GALGAS_location & inOperand3
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_interruptDefinitionList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_interruptDefinitionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                const GALGAS_lstring & in_mInterruptName,
                                                                const GALGAS_bool & in_mFastReturn,
                                                                const GALGAS_instructionList & in_mInstructionList,
                                                                const GALGAS_location & in_mEndOfInterruptLocation
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_interruptDefinitionList * p = NULL ;
  macroMyNew (p, cCollectionElement_interruptDefinitionList (in_mInterruptName,
                                                             in_mFastReturn,
                                                             in_mInstructionList,
                                                             in_mEndOfInterruptLocation COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_bool & inOperand1,
                                                          const GALGAS_instructionList & inOperand2,
                                                          const GALGAS_location & inOperand3
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_interruptDefinitionList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                            GALGAS_bool inOperand1,
                                                            GALGAS_instructionList inOperand2,
                                                            GALGAS_location inOperand3
                                                            COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_interruptDefinitionList (inOperand0, inOperand1, inOperand2, inOperand3 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                        GALGAS_bool & outOperand1,
                                                        GALGAS_instructionList & outOperand2,
                                                        GALGAS_location & outOperand3,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mInterruptName ;
    outOperand1 = p->mObject.mAttribute_mFastReturn ;
    outOperand2 = p->mObject.mAttribute_mInstructionList ;
    outOperand3 = p->mObject.mAttribute_mEndOfInterruptLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                       GALGAS_bool & outOperand1,
                                                       GALGAS_instructionList & outOperand2,
                                                       GALGAS_location & outOperand3,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mInterruptName ;
    outOperand1 = p->mObject.mAttribute_mFastReturn ;
    outOperand2 = p->mObject.mAttribute_mInstructionList ;
    outOperand3 = p->mObject.mAttribute_mEndOfInterruptLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::method_first (GALGAS_lstring & outOperand0,
                                                   GALGAS_bool & outOperand1,
                                                   GALGAS_instructionList & outOperand2,
                                                   GALGAS_location & outOperand3,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mInterruptName ;
    outOperand1 = p->mObject.mAttribute_mFastReturn ;
    outOperand2 = p->mObject.mAttribute_mInstructionList ;
    outOperand3 = p->mObject.mAttribute_mEndOfInterruptLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::method_last (GALGAS_lstring & outOperand0,
                                                  GALGAS_bool & outOperand1,
                                                  GALGAS_instructionList & outOperand2,
                                                  GALGAS_location & outOperand3,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mInterruptName ;
    outOperand1 = p->mObject.mAttribute_mFastReturn ;
    outOperand2 = p->mObject.mAttribute_mInstructionList ;
    outOperand3 = p->mObject.mAttribute_mEndOfInterruptLocation ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::operator_concat (const GALGAS_interruptDefinitionList & inOperand
                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_interruptDefinitionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_interruptDefinitionList result = GALGAS_interruptDefinitionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_interruptDefinitionList result = GALGAS_interruptDefinitionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList::dotAssign_operation (const GALGAS_interruptDefinitionList inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_interruptDefinitionList::reader_mInterruptNameAtIndex (const GALGAS_uint & inIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    result = p->mObject.mAttribute_mInterruptName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_interruptDefinitionList::reader_mFastReturnAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    result = p->mObject.mAttribute_mFastReturn ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_interruptDefinitionList::reader_mInstructionListAtIndex (const GALGAS_uint & inIndex,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  GALGAS_instructionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    result = p->mObject.mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_interruptDefinitionList::reader_mEndOfInterruptLocationAtIndex (const GALGAS_uint & inIndex,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_interruptDefinitionList * p = (cCollectionElement_interruptDefinitionList *) attributes.ptr () ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_interruptDefinitionList) ;
    result = p->mObject.mAttribute_mEndOfInterruptLocation ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_interruptDefinitionList::cEnumerator_interruptDefinitionList (const GALGAS_interruptDefinitionList & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element cEnumerator_interruptDefinitionList::current (LOCATION_ARGS) const {
  const cCollectionElement_interruptDefinitionList * p = (const cCollectionElement_interruptDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_interruptDefinitionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_interruptDefinitionList::current_mInterruptName (LOCATION_ARGS) const {
  const cCollectionElement_interruptDefinitionList * p = (const cCollectionElement_interruptDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_interruptDefinitionList) ;
  return p->mObject.mAttribute_mInterruptName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_interruptDefinitionList::current_mFastReturn (LOCATION_ARGS) const {
  const cCollectionElement_interruptDefinitionList * p = (const cCollectionElement_interruptDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_interruptDefinitionList) ;
  return p->mObject.mAttribute_mFastReturn ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cEnumerator_interruptDefinitionList::current_mInstructionList (LOCATION_ARGS) const {
  const cCollectionElement_interruptDefinitionList * p = (const cCollectionElement_interruptDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_interruptDefinitionList) ;
  return p->mObject.mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location cEnumerator_interruptDefinitionList::current_mEndOfInterruptLocation (LOCATION_ARGS) const {
  const cCollectionElement_interruptDefinitionList * p = (const cCollectionElement_interruptDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_interruptDefinitionList) ;
  return p->mObject.mAttribute_mEndOfInterruptLocation ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @interruptDefinitionList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_interruptDefinitionList ("interruptDefinitionList",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_interruptDefinitionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_interruptDefinitionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_interruptDefinitionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_interruptDefinitionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_interruptDefinitionList::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_interruptDefinitionList result ;
  const GALGAS_interruptDefinitionList * p = (const GALGAS_interruptDefinitionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_interruptDefinitionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "interruptDefinitionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@routineDefinitionList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_routineDefinitionList : public cCollectionElement {
  public : GALGAS_routineDefinitionList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_routineDefinitionList (const GALGAS_lstring & in_mRoutineName,
                                                     const GALGAS_luint & in_mRequiredBank,
                                                     const GALGAS_luint & in_mReturnedBank,
                                                     const GALGAS_bool & in_mPreservesBank,
                                                     const GALGAS_bool & in_mIsNoReturn,
                                                     const GALGAS_instructionList & in_mInstructionList,
                                                     const GALGAS_location & in_mEndOfRoutineLocation
                                                     COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_routineDefinitionList::cCollectionElement_routineDefinitionList (const GALGAS_lstring & in_mRoutineName,
                                                                                    const GALGAS_luint & in_mRequiredBank,
                                                                                    const GALGAS_luint & in_mReturnedBank,
                                                                                    const GALGAS_bool & in_mPreservesBank,
                                                                                    const GALGAS_bool & in_mIsNoReturn,
                                                                                    const GALGAS_instructionList & in_mInstructionList,
                                                                                    const GALGAS_location & in_mEndOfRoutineLocation
                                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mRoutineName, in_mRequiredBank, in_mReturnedBank, in_mPreservesBank, in_mIsNoReturn, in_mInstructionList, in_mEndOfRoutineLocation) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_routineDefinitionList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_routineDefinitionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_routineDefinitionList (mObject.mAttribute_mRoutineName, mObject.mAttribute_mRequiredBank, mObject.mAttribute_mReturnedBank, mObject.mAttribute_mPreservesBank, mObject.mAttribute_mIsNoReturn, mObject.mAttribute_mInstructionList, mObject.mAttribute_mEndOfRoutineLocation COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_routineDefinitionList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRoutineName" ":" ;
  mObject.mAttribute_mRoutineName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredBank" ":" ;
  mObject.mAttribute_mRequiredBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mReturnedBank" ":" ;
  mObject.mAttribute_mReturnedBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreservesBank" ":" ;
  mObject.mAttribute_mPreservesBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsNoReturn" ":" ;
  mObject.mAttribute_mIsNoReturn.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInstructionList" ":" ;
  mObject.mAttribute_mInstructionList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mEndOfRoutineLocation" ":" ;
  mObject.mAttribute_mEndOfRoutineLocation.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_routineDefinitionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_routineDefinitionList * operand = (cCollectionElement_routineDefinitionList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_routineDefinitionList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList::GALGAS_routineDefinitionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList::GALGAS_routineDefinitionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_routineDefinitionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_luint & inOperand1,
                                                                                      const GALGAS_luint & inOperand2,
                                                                                      const GALGAS_bool & inOperand3,
                                                                                      const GALGAS_bool & inOperand4,
                                                                                      const GALGAS_instructionList & inOperand5,
                                                                                      const GALGAS_location & inOperand6
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_routineDefinitionList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_routineDefinitionList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                              const GALGAS_lstring & in_mRoutineName,
                                                              const GALGAS_luint & in_mRequiredBank,
                                                              const GALGAS_luint & in_mReturnedBank,
                                                              const GALGAS_bool & in_mPreservesBank,
                                                              const GALGAS_bool & in_mIsNoReturn,
                                                              const GALGAS_instructionList & in_mInstructionList,
                                                              const GALGAS_location & in_mEndOfRoutineLocation
                                                              COMMA_LOCATION_ARGS) {
  cCollectionElement_routineDefinitionList * p = NULL ;
  macroMyNew (p, cCollectionElement_routineDefinitionList (in_mRoutineName,
                                                           in_mRequiredBank,
                                                           in_mReturnedBank,
                                                           in_mPreservesBank,
                                                           in_mIsNoReturn,
                                                           in_mInstructionList,
                                                           in_mEndOfRoutineLocation COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                        const GALGAS_luint & inOperand1,
                                                        const GALGAS_luint & inOperand2,
                                                        const GALGAS_bool & inOperand3,
                                                        const GALGAS_bool & inOperand4,
                                                        const GALGAS_instructionList & inOperand5,
                                                        const GALGAS_location & inOperand6
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_routineDefinitionList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                          GALGAS_luint inOperand1,
                                                          GALGAS_luint inOperand2,
                                                          GALGAS_bool inOperand3,
                                                          GALGAS_bool inOperand4,
                                                          GALGAS_instructionList inOperand5,
                                                          GALGAS_location inOperand6
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_routineDefinitionList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                      GALGAS_luint & outOperand1,
                                                      GALGAS_luint & outOperand2,
                                                      GALGAS_bool & outOperand3,
                                                      GALGAS_bool & outOperand4,
                                                      GALGAS_instructionList & outOperand5,
                                                      GALGAS_location & outOperand6,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
    outOperand5 = p->mObject.mAttribute_mInstructionList ;
    outOperand6 = p->mObject.mAttribute_mEndOfRoutineLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                     GALGAS_luint & outOperand1,
                                                     GALGAS_luint & outOperand2,
                                                     GALGAS_bool & outOperand3,
                                                     GALGAS_bool & outOperand4,
                                                     GALGAS_instructionList & outOperand5,
                                                     GALGAS_location & outOperand6,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
    outOperand5 = p->mObject.mAttribute_mInstructionList ;
    outOperand6 = p->mObject.mAttribute_mEndOfRoutineLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::method_first (GALGAS_lstring & outOperand0,
                                                 GALGAS_luint & outOperand1,
                                                 GALGAS_luint & outOperand2,
                                                 GALGAS_bool & outOperand3,
                                                 GALGAS_bool & outOperand4,
                                                 GALGAS_instructionList & outOperand5,
                                                 GALGAS_location & outOperand6,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
    outOperand5 = p->mObject.mAttribute_mInstructionList ;
    outOperand6 = p->mObject.mAttribute_mEndOfRoutineLocation ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::method_last (GALGAS_lstring & outOperand0,
                                                GALGAS_luint & outOperand1,
                                                GALGAS_luint & outOperand2,
                                                GALGAS_bool & outOperand3,
                                                GALGAS_bool & outOperand4,
                                                GALGAS_instructionList & outOperand5,
                                                GALGAS_location & outOperand6,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
    outOperand5.drop () ;
    outOperand6.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
    outOperand5 = p->mObject.mAttribute_mInstructionList ;
    outOperand6 = p->mObject.mAttribute_mEndOfRoutineLocation ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::operator_concat (const GALGAS_routineDefinitionList & inOperand
                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_routineDefinitionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_routineDefinitionList result = GALGAS_routineDefinitionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_routineDefinitionList result = GALGAS_routineDefinitionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList::dotAssign_operation (const GALGAS_routineDefinitionList inOperand
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_routineDefinitionList::reader_mRoutineNameAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mRoutineName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDefinitionList::reader_mRequiredBankAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mRequiredBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDefinitionList::reader_mReturnedBankAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mReturnedBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDefinitionList::reader_mPreservesBankAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mPreservesBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDefinitionList::reader_mIsNoReturnAtIndex (const GALGAS_uint & inIndex,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mIsNoReturn ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_routineDefinitionList::reader_mInstructionListAtIndex (const GALGAS_uint & inIndex,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_instructionList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_routineDefinitionList::reader_mEndOfRoutineLocationAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDefinitionList * p = (cCollectionElement_routineDefinitionList *) attributes.ptr () ;
  GALGAS_location result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDefinitionList) ;
    result = p->mObject.mAttribute_mEndOfRoutineLocation ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_routineDefinitionList::cEnumerator_routineDefinitionList (const GALGAS_routineDefinitionList & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element cEnumerator_routineDefinitionList::current (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_routineDefinitionList::current_mRoutineName (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mRoutineName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_routineDefinitionList::current_mRequiredBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mRequiredBank ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_routineDefinitionList::current_mReturnedBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mReturnedBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineDefinitionList::current_mPreservesBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mPreservesBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineDefinitionList::current_mIsNoReturn (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mIsNoReturn ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cEnumerator_routineDefinitionList::current_mInstructionList (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location cEnumerator_routineDefinitionList::current_mEndOfRoutineLocation (LOCATION_ARGS) const {
  const cCollectionElement_routineDefinitionList * p = (const cCollectionElement_routineDefinitionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDefinitionList) ;
  return p->mObject.mAttribute_mEndOfRoutineLocation ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @routineDefinitionList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineDefinitionList ("routineDefinitionList",
                                              NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineDefinitionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineDefinitionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineDefinitionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineDefinitionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_routineDefinitionList::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_routineDefinitionList result ;
  const GALGAS_routineDefinitionList * p = (const GALGAS_routineDefinitionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineDefinitionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "routineDefinitionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@routineDeclarationList' list            *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_routineDeclarationList : public cCollectionElement {
  public : GALGAS_routineDeclarationList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_routineDeclarationList (const GALGAS_lstring & in_mRoutineName,
                                                      const GALGAS_luint & in_mRequiredBank,
                                                      const GALGAS_luint & in_mReturnedBank,
                                                      const GALGAS_bool & in_mPreservesBank,
                                                      const GALGAS_bool & in_mIsNoReturn
                                                      COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_routineDeclarationList::cCollectionElement_routineDeclarationList (const GALGAS_lstring & in_mRoutineName,
                                                                                      const GALGAS_luint & in_mRequiredBank,
                                                                                      const GALGAS_luint & in_mReturnedBank,
                                                                                      const GALGAS_bool & in_mPreservesBank,
                                                                                      const GALGAS_bool & in_mIsNoReturn
                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mRoutineName, in_mRequiredBank, in_mReturnedBank, in_mPreservesBank, in_mIsNoReturn) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_routineDeclarationList::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_routineDeclarationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_routineDeclarationList (mObject.mAttribute_mRoutineName, mObject.mAttribute_mRequiredBank, mObject.mAttribute_mReturnedBank, mObject.mAttribute_mPreservesBank, mObject.mAttribute_mIsNoReturn COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_routineDeclarationList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRoutineName" ":" ;
  mObject.mAttribute_mRoutineName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRequiredBank" ":" ;
  mObject.mAttribute_mRequiredBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mReturnedBank" ":" ;
  mObject.mAttribute_mReturnedBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mPreservesBank" ":" ;
  mObject.mAttribute_mPreservesBank.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIsNoReturn" ":" ;
  mObject.mAttribute_mIsNoReturn.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_routineDeclarationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_routineDeclarationList * operand = (cCollectionElement_routineDeclarationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_routineDeclarationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList::GALGAS_routineDeclarationList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList::GALGAS_routineDeclarationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_routineDeclarationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::constructor_listWithValue (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_luint & inOperand1,
                                                                                        const GALGAS_luint & inOperand2,
                                                                                        const GALGAS_bool & inOperand3,
                                                                                        const GALGAS_bool & inOperand4
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_routineDeclarationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_routineDeclarationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                               const GALGAS_lstring & in_mRoutineName,
                                                               const GALGAS_luint & in_mRequiredBank,
                                                               const GALGAS_luint & in_mReturnedBank,
                                                               const GALGAS_bool & in_mPreservesBank,
                                                               const GALGAS_bool & in_mIsNoReturn
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement_routineDeclarationList * p = NULL ;
  macroMyNew (p, cCollectionElement_routineDeclarationList (in_mRoutineName,
                                                            in_mRequiredBank,
                                                            in_mReturnedBank,
                                                            in_mPreservesBank,
                                                            in_mIsNoReturn COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::addAssign_operation (const GALGAS_lstring & inOperand0,
                                                         const GALGAS_luint & inOperand1,
                                                         const GALGAS_luint & inOperand2,
                                                         const GALGAS_bool & inOperand3,
                                                         const GALGAS_bool & inOperand4
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_routineDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::modifier_prependValue (GALGAS_lstring inOperand0,
                                                           GALGAS_luint inOperand1,
                                                           GALGAS_luint inOperand2,
                                                           GALGAS_bool inOperand3,
                                                           GALGAS_bool inOperand4
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_routineDeclarationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::modifier_popFirst (GALGAS_lstring & outOperand0,
                                                       GALGAS_luint & outOperand1,
                                                       GALGAS_luint & outOperand2,
                                                       GALGAS_bool & outOperand3,
                                                       GALGAS_bool & outOperand4,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::modifier_popLast (GALGAS_lstring & outOperand0,
                                                      GALGAS_luint & outOperand1,
                                                      GALGAS_luint & outOperand2,
                                                      GALGAS_bool & outOperand3,
                                                      GALGAS_bool & outOperand4,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::method_first (GALGAS_lstring & outOperand0,
                                                  GALGAS_luint & outOperand1,
                                                  GALGAS_luint & outOperand2,
                                                  GALGAS_bool & outOperand3,
                                                  GALGAS_bool & outOperand4,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::method_last (GALGAS_lstring & outOperand0,
                                                 GALGAS_luint & outOperand1,
                                                 GALGAS_luint & outOperand2,
                                                 GALGAS_bool & outOperand3,
                                                 GALGAS_bool & outOperand4,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    outOperand0 = p->mObject.mAttribute_mRoutineName ;
    outOperand1 = p->mObject.mAttribute_mRequiredBank ;
    outOperand2 = p->mObject.mAttribute_mReturnedBank ;
    outOperand3 = p->mObject.mAttribute_mPreservesBank ;
    outOperand4 = p->mObject.mAttribute_mIsNoReturn ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::operator_concat (const GALGAS_routineDeclarationList & inOperand
                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_routineDeclarationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_routineDeclarationList result = GALGAS_routineDeclarationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_routineDeclarationList result = GALGAS_routineDeclarationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList::dotAssign_operation (const GALGAS_routineDeclarationList inOperand
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_routineDeclarationList::reader_mRoutineNameAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    result = p->mObject.mAttribute_mRoutineName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDeclarationList::reader_mRequiredBankAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    result = p->mObject.mAttribute_mRequiredBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDeclarationList::reader_mReturnedBankAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    result = p->mObject.mAttribute_mReturnedBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDeclarationList::reader_mPreservesBankAtIndex (const GALGAS_uint & inIndex,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    result = p->mObject.mAttribute_mPreservesBank ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDeclarationList::reader_mIsNoReturnAtIndex (const GALGAS_uint & inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_routineDeclarationList * p = (cCollectionElement_routineDeclarationList *) attributes.ptr () ;
  GALGAS_bool result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_routineDeclarationList) ;
    result = p->mObject.mAttribute_mIsNoReturn ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_routineDeclarationList::cEnumerator_routineDeclarationList (const GALGAS_routineDeclarationList & inEnumeratedObject,
                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element cEnumerator_routineDeclarationList::current (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject ;
}


//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_routineDeclarationList::current_mRoutineName (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject.mAttribute_mRoutineName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_routineDeclarationList::current_mRequiredBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject.mAttribute_mRequiredBank ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_routineDeclarationList::current_mReturnedBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject.mAttribute_mReturnedBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineDeclarationList::current_mPreservesBank (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject.mAttribute_mPreservesBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cEnumerator_routineDeclarationList::current_mIsNoReturn (LOCATION_ARGS) const {
  const cCollectionElement_routineDeclarationList * p = (const cCollectionElement_routineDeclarationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_routineDeclarationList) ;
  return p->mObject.mAttribute_mIsNoReturn ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                       @routineDeclarationList type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineDeclarationList ("routineDeclarationList",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineDeclarationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineDeclarationList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineDeclarationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineDeclarationList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList GALGAS_routineDeclarationList::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_routineDeclarationList result ;
  const GALGAS_routineDeclarationList * p = (const GALGAS_routineDeclarationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineDeclarationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "routineDeclarationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_programKind::GALGAS_programKind (void) :
mEnum (kNotBuilt) {
}

//---------------------------------------------------------------------------*

GALGAS_programKind GALGAS_programKind::constructor_regularProgram (UNUSED_LOCATION_ARGS) {
  GALGAS_programKind result ;
  result.mEnum = kEnum_regularProgram ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_programKind GALGAS_programKind::constructor_bootloaderProgram (UNUSED_LOCATION_ARGS) {
  GALGAS_programKind result ;
  result.mEnum = kEnum_bootloaderProgram ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_programKind GALGAS_programKind::constructor_userProgram (UNUSED_LOCATION_ARGS) {
  GALGAS_programKind result ;
  result.mEnum = kEnum_userProgram ;
  return result ;
}

//---------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_programKind [4] = {
  "(not built)",
  "regularProgram",
  "bootloaderProgram",
  "userProgram"
} ;

//---------------------------------------------------------------------------*

void GALGAS_programKind::description (C_String & ioString,
                                      const PMSInt32 /* inIndentation */) const {
  ioString << "<enum @programKind: " << gEnumNameArrayFor_programKind [mEnum] << ">" ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_programKind::objectCompare (const GALGAS_programKind & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                             @programKind type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_programKind ("programKind",
                                    NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_programKind::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_programKind ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_programKind::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_programKind (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_programKind GALGAS_programKind::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler,
                                                      const GALGAS_location & inErrorLocation
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_programKind result ;
  const GALGAS_programKind * p = (const GALGAS_programKind *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_programKind *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "programKind", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_conditionExpression::objectCompare (const GALGAS_conditionExpression & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression::GALGAS_conditionExpression (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression::GALGAS_conditionExpression (const cPtr_conditionExpression * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_conditionExpression) ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @conditionExpression class                *
//---------------------------------------------------------------------------*

cPtr_conditionExpression::cPtr_conditionExpression (LOCATION_ARGS) :
acPtr_class (THERE) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @conditionExpression type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_conditionExpression ("conditionExpression",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_conditionExpression::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_conditionExpression ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_conditionExpression::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_conditionExpression (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_conditionExpression::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_conditionExpression result ;
  const GALGAS_conditionExpression * p = (const GALGAS_conditionExpression *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_conditionExpression *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "conditionExpression", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_andCondition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_andCondition * p = (const cPtr_andCondition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_andCondition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mLeftExpression.objectCompare (p->mAttribute_mLeftExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRightExpression.objectCompare (p->mAttribute_mRightExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_andCondition::objectCompare (const GALGAS_andCondition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_andCondition::GALGAS_andCondition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_andCondition::GALGAS_andCondition (const cPtr_andCondition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_andCondition) ;
}

//---------------------------------------------------------------------------*

GALGAS_andCondition GALGAS_andCondition::constructor_new (const GALGAS_conditionExpression & inAttribute_mLeftExpression,
                                                          const GALGAS_conditionExpression & inAttribute_mRightExpression
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_andCondition result ;
  if (inAttribute_mLeftExpression.isValid () && inAttribute_mRightExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_andCondition (inAttribute_mLeftExpression, inAttribute_mRightExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_andCondition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_andCondition * p = (cPtr_andCondition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_andCondition) ;
    cPtr_andCondition * r = NULL ;
    macroMyNew (r, cPtr_andCondition (p->mAttribute_mLeftExpression, p->mAttribute_mRightExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_andCondition::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditionExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_andCondition * p = (const cPtr_andCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_andCondition) ;
    result = p->mAttribute_mLeftExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression cPtr_andCondition::reader_mLeftExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLeftExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_andCondition::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditionExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_andCondition * p = (const cPtr_andCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_andCondition) ;
    result = p->mAttribute_mRightExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression cPtr_andCondition::reader_mRightExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRightExpression ;
}

//---------------------------------------------------------------------------*
//                   Pointer class for @andCondition class                   *
//---------------------------------------------------------------------------*

cPtr_andCondition::cPtr_andCondition (const GALGAS_conditionExpression & in_mLeftExpression,
                                      const GALGAS_conditionExpression & in_mRightExpression
                                      COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mLeftExpression (in_mLeftExpression),
mAttribute_mRightExpression (in_mRightExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_andCondition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_andCondition ;
}

void cPtr_andCondition::description (C_String & ioString,
                                     const PMSInt32 inIndentation) const {
  ioString << "[@andCondition:" ;
  mAttribute_mLeftExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRightExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @andCondition type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_andCondition ("andCondition",
                                     & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_andCondition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_andCondition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_andCondition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_andCondition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_andCondition GALGAS_andCondition::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler,
                                                        const GALGAS_location & inErrorLocation
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_andCondition result ;
  const GALGAS_andCondition * p = (const GALGAS_andCondition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_andCondition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "andCondition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCondition.objectCompare (p->mAttribute_mCondition) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::objectCompare (const GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition (const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition) ;
}

//---------------------------------------------------------------------------*

GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::constructor_new (const GALGAS_conditional_5F_branch & inAttribute_mCondition
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition result ;
  if (inAttribute_mCondition.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition (inAttribute_mCondition COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition * p = (cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition) ;
    cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition * r = NULL ;
    macroMyNew (r, cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition (p->mAttribute_mCondition COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::reader_mCondition (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditional_5F_branch result ;
  if (NULL != mObjectPtr) {
    const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition) ;
    result = p->mAttribute_mCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition::reader_mCondition (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCondition ;
}

//---------------------------------------------------------------------------*
//          Pointer class for @bcc_in_structured_if_condition class          *
//---------------------------------------------------------------------------*

cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition::cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition (const GALGAS_conditional_5F_branch & in_mCondition
                                                                                                  COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mCondition (in_mCondition) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition ;
}

void cPtr_bcc_5F_in_5F_structured_5F_if_5F_condition::description (C_String & ioString,
                                                                   const PMSInt32 inIndentation) const {
  ioString << "[@bcc_in_structured_if_condition:" ;
  mAttribute_mCondition.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @bcc_in_structured_if_condition type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition ("bcc_in_structured_if_condition",
                                                                   & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition::extractObject (const GALGAS_object & inObject,
                                                                                                                    C_Compiler * inCompiler,
                                                                                                                    const GALGAS_location & inErrorLocation
                                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition result ;
  const GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition * p = (const GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bcc_5F_in_5F_structured_5F_if_5F_condition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bcc_in_structured_if_condition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitNumber.objectCompare (p->mAttribute_mBitNumber) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBTFSSinstruction.objectCompare (p->mAttribute_mBTFSSinstruction) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::objectCompare (const GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition (const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
}

//---------------------------------------------------------------------------*

GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::constructor_new (const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                                                                              const GALGAS_bitNumberExpression & inAttribute_mBitNumber,
                                                                                                                              const GALGAS_bool & inAttribute_mBTFSSinstruction
                                                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition result ;
  if (inAttribute_mRegisterExpression.isValid () && inAttribute_mBitNumber.isValid () && inAttribute_mBTFSSinstruction.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition (inAttribute_mRegisterExpression, inAttribute_mBitNumber, inAttribute_mBTFSSinstruction COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
    cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * r = NULL ;
    macroMyNew (r, cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition (p->mAttribute_mRegisterExpression, p->mAttribute_mBitNumber, p->mAttribute_mBTFSSinstruction COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  GALGAS_bitNumberExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
    result = p->mAttribute_mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitNumber ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mBTFSSinstruction (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition) ;
    result = p->mAttribute_mBTFSSinstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::reader_mBTFSSinstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBTFSSinstruction ;
}

//---------------------------------------------------------------------------*
//        Pointer class for @bitTest_in_structured_if_condition class        *
//---------------------------------------------------------------------------*

cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition (const GALGAS_registerExpression & in_mRegisterExpression,
                                                                                                          const GALGAS_bitNumberExpression & in_mBitNumber,
                                                                                                          const GALGAS_bool & in_mBTFSSinstruction
                                                                                                          COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mBitNumber (in_mBitNumber),
mAttribute_mBTFSSinstruction (in_mBTFSSinstruction) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition ;
}

void cPtr_bitTest_5F_in_5F_structured_5F_if_5F_condition::description (C_String & ioString,
                                                                       const PMSInt32 inIndentation) const {
  ioString << "[@bitTest_in_structured_if_condition:" ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitNumber.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBTFSSinstruction.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                 @bitTest_in_structured_if_condition type                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition ("bitTest_in_structured_if_condition",
                                                                       & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition::extractObject (const GALGAS_object & inObject,
                                                                                                                            C_Compiler * inCompiler,
                                                                                                                            const GALGAS_location & inErrorLocation
                                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition result ;
  const GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition * p = (const GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bitTest_5F_in_5F_structured_5F_if_5F_condition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bitTest_in_structured_if_condition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_incDecRegisterInCondition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_incDecRegisterInCondition * p = (const cPtr_incDecRegisterInCondition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_incDecRegisterInCondition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIncrement.objectCompare (p->mAttribute_mIncrement) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_m_5F_W_5F_isDestination.objectCompare (p->mAttribute_m_5F_W_5F_isDestination) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBranchIfZero.objectCompare (p->mAttribute_mBranchIfZero) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_incDecRegisterInCondition::objectCompare (const GALGAS_incDecRegisterInCondition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_incDecRegisterInCondition::GALGAS_incDecRegisterInCondition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_incDecRegisterInCondition::GALGAS_incDecRegisterInCondition (const cPtr_incDecRegisterInCondition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_incDecRegisterInCondition) ;
}

//---------------------------------------------------------------------------*

GALGAS_incDecRegisterInCondition GALGAS_incDecRegisterInCondition::constructor_new (const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                                    const GALGAS_bool & inAttribute_mIncrement,
                                                                                    const GALGAS_bool & inAttribute_m_5F_W_5F_isDestination,
                                                                                    const GALGAS_bool & inAttribute_mBranchIfZero
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_incDecRegisterInCondition result ;
  if (inAttribute_mRegisterExpression.isValid () && inAttribute_mIncrement.isValid () && inAttribute_m_5F_W_5F_isDestination.isValid () && inAttribute_mBranchIfZero.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_incDecRegisterInCondition (inAttribute_mRegisterExpression, inAttribute_mIncrement, inAttribute_m_5F_W_5F_isDestination, inAttribute_mBranchIfZero COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_incDecRegisterInCondition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_incDecRegisterInCondition * p = (cPtr_incDecRegisterInCondition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_incDecRegisterInCondition) ;
    cPtr_incDecRegisterInCondition * r = NULL ;
    macroMyNew (r, cPtr_incDecRegisterInCondition (p->mAttribute_mRegisterExpression, p->mAttribute_mIncrement, p->mAttribute_m_5F_W_5F_isDestination, p->mAttribute_mBranchIfZero COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_incDecRegisterInCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_incDecRegisterInCondition * p = (const cPtr_incDecRegisterInCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_incDecRegisterInCondition) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_incDecRegisterInCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecRegisterInCondition::reader_mIncrement (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_incDecRegisterInCondition * p = (const cPtr_incDecRegisterInCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_incDecRegisterInCondition) ;
    result = p->mAttribute_mIncrement ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_incDecRegisterInCondition::reader_mIncrement (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIncrement ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecRegisterInCondition::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_incDecRegisterInCondition * p = (const cPtr_incDecRegisterInCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_incDecRegisterInCondition) ;
    result = p->mAttribute_m_5F_W_5F_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_incDecRegisterInCondition::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  return mAttribute_m_5F_W_5F_isDestination ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_incDecRegisterInCondition::reader_mBranchIfZero (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_incDecRegisterInCondition * p = (const cPtr_incDecRegisterInCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_incDecRegisterInCondition) ;
    result = p->mAttribute_mBranchIfZero ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_incDecRegisterInCondition::reader_mBranchIfZero (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBranchIfZero ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @incDecRegisterInCondition class             *
//---------------------------------------------------------------------------*

cPtr_incDecRegisterInCondition::cPtr_incDecRegisterInCondition (const GALGAS_registerExpression & in_mRegisterExpression,
                                                                const GALGAS_bool & in_mIncrement,
                                                                const GALGAS_bool & in_m_5F_W_5F_isDestination,
                                                                const GALGAS_bool & in_mBranchIfZero
                                                                COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mIncrement (in_mIncrement),
mAttribute_m_5F_W_5F_isDestination (in_m_5F_W_5F_isDestination),
mAttribute_mBranchIfZero (in_mBranchIfZero) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_incDecRegisterInCondition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_incDecRegisterInCondition ;
}

void cPtr_incDecRegisterInCondition::description (C_String & ioString,
                                                  const PMSInt32 inIndentation) const {
  ioString << "[@incDecRegisterInCondition:" ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mIncrement.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_m_5F_W_5F_isDestination.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBranchIfZero.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @incDecRegisterInCondition type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_incDecRegisterInCondition ("incDecRegisterInCondition",
                                                  & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_incDecRegisterInCondition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_incDecRegisterInCondition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_incDecRegisterInCondition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_incDecRegisterInCondition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_incDecRegisterInCondition GALGAS_incDecRegisterInCondition::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler,
                                                                                  const GALGAS_location & inErrorLocation
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_incDecRegisterInCondition result ;
  const GALGAS_incDecRegisterInCondition * p = (const GALGAS_incDecRegisterInCondition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_incDecRegisterInCondition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "incDecRegisterInCondition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_negateCondition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_negateCondition * p = (const cPtr_negateCondition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_negateCondition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mCondition.objectCompare (p->mAttribute_mCondition) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_negateCondition::objectCompare (const GALGAS_negateCondition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_negateCondition::GALGAS_negateCondition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_negateCondition::GALGAS_negateCondition (const cPtr_negateCondition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_negateCondition) ;
}

//---------------------------------------------------------------------------*

GALGAS_negateCondition GALGAS_negateCondition::constructor_new (const GALGAS_conditionExpression & inAttribute_mCondition
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_negateCondition result ;
  if (inAttribute_mCondition.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_negateCondition (inAttribute_mCondition COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_negateCondition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_negateCondition * p = (cPtr_negateCondition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_negateCondition) ;
    cPtr_negateCondition * r = NULL ;
    macroMyNew (r, cPtr_negateCondition (p->mAttribute_mCondition COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_negateCondition::reader_mCondition (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditionExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_negateCondition * p = (const cPtr_negateCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_negateCondition) ;
    result = p->mAttribute_mCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression cPtr_negateCondition::reader_mCondition (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCondition ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @negateCondition class                  *
//---------------------------------------------------------------------------*

cPtr_negateCondition::cPtr_negateCondition (const GALGAS_conditionExpression & in_mCondition
                                            COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mCondition (in_mCondition) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_negateCondition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_negateCondition ;
}

void cPtr_negateCondition::description (C_String & ioString,
                                        const PMSInt32 inIndentation) const {
  ioString << "[@negateCondition:" ;
  mAttribute_mCondition.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @negateCondition type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_negateCondition ("negateCondition",
                                        & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_negateCondition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_negateCondition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_negateCondition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_negateCondition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_negateCondition GALGAS_negateCondition::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_negateCondition result ;
  const GALGAS_negateCondition * p = (const GALGAS_negateCondition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_negateCondition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "negateCondition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_registerComparisonCondition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_registerComparisonCondition * p = (const cPtr_registerComparisonCondition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_registerComparisonCondition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mComparison.objectCompare (p->mAttribute_mComparison) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_registerComparisonCondition::objectCompare (const GALGAS_registerComparisonCondition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparisonCondition::GALGAS_registerComparisonCondition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_registerComparisonCondition::GALGAS_registerComparisonCondition (const cPtr_registerComparisonCondition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_registerComparisonCondition) ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparisonCondition GALGAS_registerComparisonCondition::constructor_new (const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                                        const GALGAS_registerComparison & inAttribute_mComparison
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_registerComparisonCondition result ;
  if (inAttribute_mRegisterExpression.isValid () && inAttribute_mComparison.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_registerComparisonCondition (inAttribute_mRegisterExpression, inAttribute_mComparison COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_registerComparisonCondition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_registerComparisonCondition * p = (cPtr_registerComparisonCondition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_registerComparisonCondition) ;
    cPtr_registerComparisonCondition * r = NULL ;
    macroMyNew (r, cPtr_registerComparisonCondition (p->mAttribute_mRegisterExpression, p->mAttribute_mComparison COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_registerComparisonCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerComparisonCondition * p = (const cPtr_registerComparisonCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerComparisonCondition) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_registerComparisonCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison GALGAS_registerComparisonCondition::reader_mComparison (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerComparison result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerComparisonCondition * p = (const cPtr_registerComparisonCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerComparisonCondition) ;
    result = p->mAttribute_mComparison ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparison cPtr_registerComparisonCondition::reader_mComparison (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mComparison ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @registerComparisonCondition class            *
//---------------------------------------------------------------------------*

cPtr_registerComparisonCondition::cPtr_registerComparisonCondition (const GALGAS_registerExpression & in_mRegisterExpression,
                                                                    const GALGAS_registerComparison & in_mComparison
                                                                    COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mComparison (in_mComparison) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_registerComparisonCondition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerComparisonCondition ;
}

void cPtr_registerComparisonCondition::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@registerComparisonCondition:" ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mComparison.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @registerComparisonCondition type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerComparisonCondition ("registerComparisonCondition",
                                                    & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerComparisonCondition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerComparisonCondition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerComparisonCondition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerComparisonCondition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerComparisonCondition GALGAS_registerComparisonCondition::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_registerComparisonCondition result ;
  const GALGAS_registerComparisonCondition * p = (const GALGAS_registerComparisonCondition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerComparisonCondition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "registerComparisonCondition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_registerTestCondition::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_registerTestCondition * p = (const cPtr_registerTestCondition *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_registerTestCondition) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBranchIfZero.objectCompare (p->mAttribute_mBranchIfZero) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_registerTestCondition::objectCompare (const GALGAS_registerTestCondition & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerTestCondition::GALGAS_registerTestCondition (void) :
GALGAS_conditionExpression () {
}

//---------------------------------------------------------------------------*

GALGAS_registerTestCondition::GALGAS_registerTestCondition (const cPtr_registerTestCondition * inSourcePtr) :
GALGAS_conditionExpression (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_registerTestCondition) ;
}

//---------------------------------------------------------------------------*

GALGAS_registerTestCondition GALGAS_registerTestCondition::constructor_new (const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                            const GALGAS_bool & inAttribute_mBranchIfZero
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_registerTestCondition result ;
  if (inAttribute_mRegisterExpression.isValid () && inAttribute_mBranchIfZero.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_registerTestCondition (inAttribute_mRegisterExpression, inAttribute_mBranchIfZero COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_registerTestCondition::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_registerTestCondition * p = (cPtr_registerTestCondition *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_registerTestCondition) ;
    cPtr_registerTestCondition * r = NULL ;
    macroMyNew (r, cPtr_registerTestCondition (p->mAttribute_mRegisterExpression, p->mAttribute_mBranchIfZero COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_registerTestCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerTestCondition * p = (const cPtr_registerTestCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerTestCondition) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_registerTestCondition::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_registerTestCondition::reader_mBranchIfZero (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_registerTestCondition * p = (const cPtr_registerTestCondition *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_registerTestCondition) ;
    result = p->mAttribute_mBranchIfZero ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_registerTestCondition::reader_mBranchIfZero (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBranchIfZero ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @registerTestCondition class               *
//---------------------------------------------------------------------------*

cPtr_registerTestCondition::cPtr_registerTestCondition (const GALGAS_registerExpression & in_mRegisterExpression,
                                                        const GALGAS_bool & in_mBranchIfZero
                                                        COMMA_LOCATION_ARGS) :
cPtr_conditionExpression (THERE),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mBranchIfZero (in_mBranchIfZero) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_registerTestCondition::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerTestCondition ;
}

void cPtr_registerTestCondition::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@registerTestCondition:" ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBranchIfZero.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @registerTestCondition type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerTestCondition ("registerTestCondition",
                                              & kTypeDescriptor_GALGAS_conditionExpression) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerTestCondition::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerTestCondition ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerTestCondition::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerTestCondition (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerTestCondition GALGAS_registerTestCondition::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_registerTestCondition result ;
  const GALGAS_registerTestCondition * p = (const GALGAS_registerTestCondition *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerTestCondition *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "registerTestCondition", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_piccolo_5F_instruction::objectCompare (const GALGAS_piccolo_5F_instruction & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction::GALGAS_piccolo_5F_instruction (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction::GALGAS_piccolo_5F_instruction (const cPtr_piccolo_5F_instruction * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_piccolo_5F_instruction) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_piccolo_5F_instruction::reader_mInstructionLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_piccolo_5F_instruction * p = (const cPtr_piccolo_5F_instruction *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_piccolo_5F_instruction) ;
    result = p->mAttribute_mInstructionLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_piccolo_5F_instruction::reader_mInstructionLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionLocation ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @piccolo_instruction class                *
//---------------------------------------------------------------------------*

cPtr_piccolo_5F_instruction::cPtr_piccolo_5F_instruction (const GALGAS_location & in_mInstructionLocation
                                                          COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mInstructionLocation (in_mInstructionLocation) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @piccolo_instruction type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_piccolo_5F_instruction ("piccolo_instruction",
                                               NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_piccolo_5F_instruction::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_piccolo_5F_instruction ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_piccolo_5F_instruction::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_piccolo_5F_instruction (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction GALGAS_piccolo_5F_instruction::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_piccolo_5F_instruction result ;
  const GALGAS_piccolo_5F_instruction * p = (const GALGAS_piccolo_5F_instruction *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_piccolo_5F_instruction *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "piccolo_instruction", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_CLRWDT::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_CLRWDT * p = (const cPtr_instruction_5F_CLRWDT *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_CLRWDT) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_CLRWDT::objectCompare (const GALGAS_instruction_5F_CLRWDT & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_CLRWDT::GALGAS_instruction_5F_CLRWDT (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_CLRWDT::GALGAS_instruction_5F_CLRWDT (const cPtr_instruction_5F_CLRWDT * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_CLRWDT) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_CLRWDT GALGAS_instruction_5F_CLRWDT::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_CLRWDT result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_CLRWDT (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_CLRWDT::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_CLRWDT * p = (cPtr_instruction_5F_CLRWDT *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_CLRWDT) ;
    cPtr_instruction_5F_CLRWDT * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_CLRWDT (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_CLRWDT class                *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_CLRWDT::cPtr_instruction_5F_CLRWDT (const GALGAS_location & in_mInstructionLocation
                                                        COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_CLRWDT::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_CLRWDT ;
}

void cPtr_instruction_5F_CLRWDT::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@instruction_CLRWDT:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @instruction_CLRWDT type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_CLRWDT ("instruction_CLRWDT",
                                              & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_CLRWDT::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_CLRWDT ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_CLRWDT::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_CLRWDT (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_CLRWDT GALGAS_instruction_5F_CLRWDT::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_CLRWDT result ;
  const GALGAS_instruction_5F_CLRWDT * p = (const GALGAS_instruction_5F_CLRWDT *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_CLRWDT *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_CLRWDT", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_DAW::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_DAW * p = (const cPtr_instruction_5F_DAW *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_DAW) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_DAW::objectCompare (const GALGAS_instruction_5F_DAW & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_DAW::GALGAS_instruction_5F_DAW (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_DAW::GALGAS_instruction_5F_DAW (const cPtr_instruction_5F_DAW * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_DAW) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_DAW GALGAS_instruction_5F_DAW::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_DAW result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_DAW (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_DAW::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_DAW * p = (cPtr_instruction_5F_DAW *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_DAW) ;
    cPtr_instruction_5F_DAW * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_DAW (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_DAW class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_DAW::cPtr_instruction_5F_DAW (const GALGAS_location & in_mInstructionLocation
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_DAW::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_DAW ;
}

void cPtr_instruction_5F_DAW::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_DAW:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_DAW type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_DAW ("instruction_DAW",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_DAW::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_DAW ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_DAW::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_DAW (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_DAW GALGAS_instruction_5F_DAW::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_DAW result ;
  const GALGAS_instruction_5F_DAW * p = (const GALGAS_instruction_5F_DAW *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_DAW *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_DAW", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_FA::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_FA * p = (const cPtr_instruction_5F_FA *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_FA) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFAinstruction.objectCompare (p->mAttribute_mFAinstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_FA::objectCompare (const GALGAS_instruction_5F_FA & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FA::GALGAS_instruction_5F_FA (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FA::GALGAS_instruction_5F_FA (const cPtr_instruction_5F_FA * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_FA) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FA GALGAS_instruction_5F_FA::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                    const GALGAS_FA_5F_instruction_5F_base_5F_code & inAttribute_mFAinstruction,
                                                                    const GALGAS_registerExpression & inAttribute_mRegisterExpression
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FA result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mFAinstruction.isValid () && inAttribute_mRegisterExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_FA (inAttribute_mInstructionLocation, inAttribute_mFAinstruction, inAttribute_mRegisterExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_FA::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_FA * p = (cPtr_instruction_5F_FA *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_FA) ;
    cPtr_instruction_5F_FA * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_FA (p->mAttribute_mInstructionLocation, p->mAttribute_mFAinstruction, p->mAttribute_mRegisterExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code GALGAS_instruction_5F_FA::reader_mFAinstruction (UNUSED_LOCATION_ARGS) const {
  GALGAS_FA_5F_instruction_5F_base_5F_code result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FA * p = (const cPtr_instruction_5F_FA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FA) ;
    result = p->mAttribute_mFAinstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_FA_5F_instruction_5F_base_5F_code cPtr_instruction_5F_FA::reader_mFAinstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFAinstruction ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_FA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FA * p = (const cPtr_instruction_5F_FA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FA) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_FA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @instruction_FA class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_FA::cPtr_instruction_5F_FA (const GALGAS_location & in_mInstructionLocation,
                                                const GALGAS_FA_5F_instruction_5F_base_5F_code & in_mFAinstruction,
                                                const GALGAS_registerExpression & in_mRegisterExpression
                                                COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mFAinstruction (in_mFAinstruction),
mAttribute_mRegisterExpression (in_mRegisterExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_FA::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FA ;
}

void cPtr_instruction_5F_FA::description (C_String & ioString,
                                          const PMSInt32 inIndentation) const {
  ioString << "[@instruction_FA:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mFAinstruction.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_FA type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_FA ("instruction_FA",
                                          & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_FA::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FA ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_FA::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_FA (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FA GALGAS_instruction_5F_FA::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FA result ;
  const GALGAS_instruction_5F_FA * p = (const GALGAS_instruction_5F_FA *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_FA *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_FA", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_FBA::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_FBA * p = (const cPtr_instruction_5F_FBA *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_FBA) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitOrientedOp.objectCompare (p->mAttribute_mBitOrientedOp) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitNumber.objectCompare (p->mAttribute_mBitNumber) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_FBA::objectCompare (const GALGAS_instruction_5F_FBA & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FBA::GALGAS_instruction_5F_FBA (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FBA::GALGAS_instruction_5F_FBA (const cPtr_instruction_5F_FBA * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_FBA) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FBA GALGAS_instruction_5F_FBA::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                      const GALGAS_bit_5F_oriented_5F_op & inAttribute_mBitOrientedOp,
                                                                      const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                      const GALGAS_bitNumberExpression & inAttribute_mBitNumber
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FBA result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mBitOrientedOp.isValid () && inAttribute_mRegisterExpression.isValid () && inAttribute_mBitNumber.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_FBA (inAttribute_mInstructionLocation, inAttribute_mBitOrientedOp, inAttribute_mRegisterExpression, inAttribute_mBitNumber COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_FBA::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_FBA * p = (cPtr_instruction_5F_FBA *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_FBA) ;
    cPtr_instruction_5F_FBA * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_FBA (p->mAttribute_mInstructionLocation, p->mAttribute_mBitOrientedOp, p->mAttribute_mRegisterExpression, p->mAttribute_mBitNumber COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op GALGAS_instruction_5F_FBA::reader_mBitOrientedOp (UNUSED_LOCATION_ARGS) const {
  GALGAS_bit_5F_oriented_5F_op result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FBA * p = (const cPtr_instruction_5F_FBA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FBA) ;
    result = p->mAttribute_mBitOrientedOp ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bit_5F_oriented_5F_op cPtr_instruction_5F_FBA::reader_mBitOrientedOp (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitOrientedOp ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_FBA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FBA * p = (const cPtr_instruction_5F_FBA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FBA) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_FBA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression GALGAS_instruction_5F_FBA::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  GALGAS_bitNumberExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FBA * p = (const cPtr_instruction_5F_FBA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FBA) ;
    result = p->mAttribute_mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression cPtr_instruction_5F_FBA::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitNumber ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_FBA class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_FBA::cPtr_instruction_5F_FBA (const GALGAS_location & in_mInstructionLocation,
                                                  const GALGAS_bit_5F_oriented_5F_op & in_mBitOrientedOp,
                                                  const GALGAS_registerExpression & in_mRegisterExpression,
                                                  const GALGAS_bitNumberExpression & in_mBitNumber
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mBitOrientedOp (in_mBitOrientedOp),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mBitNumber (in_mBitNumber) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_FBA::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FBA ;
}

void cPtr_instruction_5F_FBA::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_FBA:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitOrientedOp.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitNumber.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_FBA type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_FBA ("instruction_FBA",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_FBA::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FBA ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_FBA::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_FBA (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FBA GALGAS_instruction_5F_FBA::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FBA result ;
  const GALGAS_instruction_5F_FBA * p = (const GALGAS_instruction_5F_FBA *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_FBA *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_FBA", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_FDA::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_FDA * p = (const cPtr_instruction_5F_FDA *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_FDA) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstruction_5F_FDA_5F_base_5F_code.objectCompare (p->mAttribute_mInstruction_5F_FDA_5F_base_5F_code) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_m_5F_W_5F_isDestination.objectCompare (p->mAttribute_m_5F_W_5F_isDestination) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_FDA::objectCompare (const GALGAS_instruction_5F_FDA & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA::GALGAS_instruction_5F_FDA (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA::GALGAS_instruction_5F_FDA (const cPtr_instruction_5F_FDA * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_FDA) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA GALGAS_instruction_5F_FDA::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                      const GALGAS_instruction_5F_FDA_5F_base_5F_code & inAttribute_mInstruction_5F_FDA_5F_base_5F_code,
                                                                      const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                      const GALGAS_bool & inAttribute_m_5F_W_5F_isDestination
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mInstruction_5F_FDA_5F_base_5F_code.isValid () && inAttribute_mRegisterExpression.isValid () && inAttribute_m_5F_W_5F_isDestination.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_FDA (inAttribute_mInstructionLocation, inAttribute_mInstruction_5F_FDA_5F_base_5F_code, inAttribute_mRegisterExpression, inAttribute_m_5F_W_5F_isDestination COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_FDA::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_FDA * p = (cPtr_instruction_5F_FDA *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_FDA) ;
    cPtr_instruction_5F_FDA * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_FDA (p->mAttribute_mInstructionLocation, p->mAttribute_mInstruction_5F_FDA_5F_base_5F_code, p->mAttribute_mRegisterExpression, p->mAttribute_m_5F_W_5F_isDestination COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code GALGAS_instruction_5F_FDA::reader_mInstruction_5F_FDA_5F_base_5F_code (UNUSED_LOCATION_ARGS) const {
  GALGAS_instruction_5F_FDA_5F_base_5F_code result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FDA * p = (const cPtr_instruction_5F_FDA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FDA) ;
    result = p->mAttribute_mInstruction_5F_FDA_5F_base_5F_code ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA_5F_base_5F_code cPtr_instruction_5F_FDA::reader_mInstruction_5F_FDA_5F_base_5F_code (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstruction_5F_FDA_5F_base_5F_code ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_FDA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FDA * p = (const cPtr_instruction_5F_FDA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FDA) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_FDA::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_FDA::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FDA * p = (const cPtr_instruction_5F_FDA *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FDA) ;
    result = p->mAttribute_m_5F_W_5F_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_FDA::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  return mAttribute_m_5F_W_5F_isDestination ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_FDA class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_FDA::cPtr_instruction_5F_FDA (const GALGAS_location & in_mInstructionLocation,
                                                  const GALGAS_instruction_5F_FDA_5F_base_5F_code & in_mInstruction_5F_FDA_5F_base_5F_code,
                                                  const GALGAS_registerExpression & in_mRegisterExpression,
                                                  const GALGAS_bool & in_m_5F_W_5F_isDestination
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mInstruction_5F_FDA_5F_base_5F_code (in_mInstruction_5F_FDA_5F_base_5F_code),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_m_5F_W_5F_isDestination (in_m_5F_W_5F_isDestination) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_FDA::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FDA ;
}

void cPtr_instruction_5F_FDA::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_FDA:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstruction_5F_FDA_5F_base_5F_code.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_m_5F_W_5F_isDestination.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_FDA type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_FDA ("instruction_FDA",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_FDA::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FDA ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_FDA::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_FDA (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FDA GALGAS_instruction_5F_FDA::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FDA result ;
  const GALGAS_instruction_5F_FDA * p = (const GALGAS_instruction_5F_FDA *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_FDA *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_FDA", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_FOREVER::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_FOREVER * p = (const cPtr_instruction_5F_FOREVER *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_FOREVER) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionList.objectCompare (p->mAttribute_mInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfInstructionList.objectCompare (p->mAttribute_mEndOfInstructionList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_FOREVER::objectCompare (const GALGAS_instruction_5F_FOREVER & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FOREVER::GALGAS_instruction_5F_FOREVER (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FOREVER::GALGAS_instruction_5F_FOREVER (const cPtr_instruction_5F_FOREVER * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_FOREVER) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FOREVER GALGAS_instruction_5F_FOREVER::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                              const GALGAS_instructionList & inAttribute_mInstructionList,
                                                                              const GALGAS_location & inAttribute_mEndOfInstructionList
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FOREVER result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mInstructionList.isValid () && inAttribute_mEndOfInstructionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_FOREVER (inAttribute_mInstructionLocation, inAttribute_mInstructionList, inAttribute_mEndOfInstructionList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_FOREVER::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_FOREVER * p = (cPtr_instruction_5F_FOREVER *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_FOREVER) ;
    cPtr_instruction_5F_FOREVER * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_FOREVER (p->mAttribute_mInstructionLocation, p->mAttribute_mInstructionList, p->mAttribute_mEndOfInstructionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instruction_5F_FOREVER::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FOREVER * p = (const cPtr_instruction_5F_FOREVER *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FOREVER) ;
    result = p->mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cPtr_instruction_5F_FOREVER::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_instruction_5F_FOREVER::reader_mEndOfInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_FOREVER * p = (const cPtr_instruction_5F_FOREVER *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_FOREVER) ;
    result = p->mAttribute_mEndOfInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_instruction_5F_FOREVER::reader_mEndOfInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfInstructionList ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @instruction_FOREVER class                *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_FOREVER::cPtr_instruction_5F_FOREVER (const GALGAS_location & in_mInstructionLocation,
                                                          const GALGAS_instructionList & in_mInstructionList,
                                                          const GALGAS_location & in_mEndOfInstructionList
                                                          COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mInstructionList (in_mInstructionList),
mAttribute_mEndOfInstructionList (in_mEndOfInstructionList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_FOREVER::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FOREVER ;
}

void cPtr_instruction_5F_FOREVER::description (C_String & ioString,
                                               const PMSInt32 inIndentation) const {
  ioString << "[@instruction_FOREVER:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEndOfInstructionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @instruction_FOREVER type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_FOREVER ("instruction_FOREVER",
                                               & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_FOREVER::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_FOREVER ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_FOREVER::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_FOREVER (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_FOREVER GALGAS_instruction_5F_FOREVER::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_FOREVER result ;
  const GALGAS_instruction_5F_FOREVER * p = (const GALGAS_instruction_5F_FOREVER *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_FOREVER *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_FOREVER", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::objectCompare (const GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (const cPtr_instruction_5F_IF_5F_SEMI_5F_COLON * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_IF_5F_SEMI_5F_COLON) ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::reader_mInstruction (UNUSED_LOCATION_ARGS) const {
  GALGAS_piccolo_5F_instruction result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_SEMI_5F_COLON * p = (const cPtr_instruction_5F_IF_5F_SEMI_5F_COLON *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_SEMI_5F_COLON) ;
    result = p->mAttribute_mInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction cPtr_instruction_5F_IF_5F_SEMI_5F_COLON::reader_mInstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstruction ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @instruction_IF_SEMI_COLON class             *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_IF_5F_SEMI_5F_COLON::cPtr_instruction_5F_IF_5F_SEMI_5F_COLON (const GALGAS_location & in_mInstructionLocation,
                                                                                  const GALGAS_piccolo_5F_instruction & in_mInstruction
                                                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mInstruction (in_mInstruction) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @instruction_IF_SEMI_COLON type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON ("instruction_IF_SEMI_COLON",
                                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler,
                                                                                                    const GALGAS_location & inErrorLocation
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON result ;
  const GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON * p = (const GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_IF_SEMI_COLON", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_IF_5F_BitTest::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_IF_5F_BitTest * p = (const cPtr_instruction_5F_IF_5F_BitTest *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_BitTest) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstruction.objectCompare (p->mAttribute_mInstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSkipIfSet.objectCompare (p->mAttribute_mSkipIfSet) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitNumber.objectCompare (p->mAttribute_mBitNumber) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_IF_5F_BitTest::objectCompare (const GALGAS_instruction_5F_IF_5F_BitTest & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_BitTest::GALGAS_instruction_5F_IF_5F_BitTest (void) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_BitTest::GALGAS_instruction_5F_IF_5F_BitTest (const cPtr_instruction_5F_IF_5F_BitTest * inSourcePtr) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_IF_5F_BitTest) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_BitTest GALGAS_instruction_5F_IF_5F_BitTest::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                          const GALGAS_piccolo_5F_instruction & inAttribute_mInstruction,
                                                                                          const GALGAS_bool & inAttribute_mSkipIfSet,
                                                                                          const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                                          const GALGAS_bitNumberExpression & inAttribute_mBitNumber
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_BitTest result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mInstruction.isValid () && inAttribute_mSkipIfSet.isValid () && inAttribute_mRegisterExpression.isValid () && inAttribute_mBitNumber.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_IF_5F_BitTest (inAttribute_mInstructionLocation, inAttribute_mInstruction, inAttribute_mSkipIfSet, inAttribute_mRegisterExpression, inAttribute_mBitNumber COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_IF_5F_BitTest::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_IF_5F_BitTest * p = (cPtr_instruction_5F_IF_5F_BitTest *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_IF_5F_BitTest) ;
    cPtr_instruction_5F_IF_5F_BitTest * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_IF_5F_BitTest (p->mAttribute_mInstructionLocation, p->mAttribute_mInstruction, p->mAttribute_mSkipIfSet, p->mAttribute_mRegisterExpression, p->mAttribute_mBitNumber COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_IF_5F_BitTest::reader_mSkipIfSet (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_BitTest * p = (const cPtr_instruction_5F_IF_5F_BitTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_BitTest) ;
    result = p->mAttribute_mSkipIfSet ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_IF_5F_BitTest::reader_mSkipIfSet (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSkipIfSet ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_IF_5F_BitTest::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_BitTest * p = (const cPtr_instruction_5F_IF_5F_BitTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_BitTest) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_IF_5F_BitTest::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression GALGAS_instruction_5F_IF_5F_BitTest::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  GALGAS_bitNumberExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_BitTest * p = (const cPtr_instruction_5F_IF_5F_BitTest *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_BitTest) ;
    result = p->mAttribute_mBitNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bitNumberExpression cPtr_instruction_5F_IF_5F_BitTest::reader_mBitNumber (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitNumber ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @instruction_IF_BitTest class              *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_IF_5F_BitTest::cPtr_instruction_5F_IF_5F_BitTest (const GALGAS_location & in_mInstructionLocation,
                                                                      const GALGAS_piccolo_5F_instruction & in_mInstruction,
                                                                      const GALGAS_bool & in_mSkipIfSet,
                                                                      const GALGAS_registerExpression & in_mRegisterExpression,
                                                                      const GALGAS_bitNumberExpression & in_mBitNumber
                                                                      COMMA_LOCATION_ARGS) :
cPtr_instruction_5F_IF_5F_SEMI_5F_COLON (in_mInstructionLocation, in_mInstruction COMMA_THERE),
mAttribute_mSkipIfSet (in_mSkipIfSet),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_mBitNumber (in_mBitNumber) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_IF_5F_BitTest::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_BitTest ;
}

void cPtr_instruction_5F_IF_5F_BitTest::description (C_String & ioString,
                                                     const PMSInt32 inIndentation) const {
  ioString << "[@instruction_IF_BitTest:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstruction.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSkipIfSet.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBitNumber.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @instruction_IF_BitTest type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_IF_5F_BitTest ("instruction_IF_BitTest",
                                                     & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_IF_5F_BitTest::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_BitTest ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_IF_5F_BitTest::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_IF_5F_BitTest (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_BitTest GALGAS_instruction_5F_IF_5F_BitTest::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler,
                                                                                        const GALGAS_location & inErrorLocation
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_BitTest result ;
  const GALGAS_instruction_5F_IF_5F_BitTest * p = (const GALGAS_instruction_5F_IF_5F_BitTest *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_IF_5F_BitTest *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_IF_BitTest", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * p = (const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstruction.objectCompare (p->mAttribute_mInstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOpCode.objectCompare (p->mAttribute_mOpCode) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::objectCompare (const GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (void) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * inSourcePtr) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                                  const GALGAS_piccolo_5F_instruction & inAttribute_mInstruction,
                                                                                                                  const GALGAS_if_5F_semi_5F_colon_5F_op & inAttribute_mOpCode,
                                                                                                                  const GALGAS_registerExpression & inAttribute_mRegisterExpression
                                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mInstruction.isValid () && inAttribute_mOpCode.isValid () && inAttribute_mRegisterExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (inAttribute_mInstructionLocation, inAttribute_mInstruction, inAttribute_mOpCode, inAttribute_mRegisterExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * p = (cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON) ;
    cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (p->mAttribute_mInstructionLocation, p->mAttribute_mInstruction, p->mAttribute_mOpCode, p->mAttribute_mRegisterExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::reader_mOpCode (UNUSED_LOCATION_ARGS) const {
  GALGAS_if_5F_semi_5F_colon_5F_op result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * p = (const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON) ;
    result = p->mAttribute_mOpCode ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_if_5F_semi_5F_colon_5F_op cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::reader_mOpCode (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOpCode ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * p = (const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @instruction_IF_FA_SEMI_COLON class           *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (const GALGAS_location & in_mInstructionLocation,
                                                                                              const GALGAS_piccolo_5F_instruction & in_mInstruction,
                                                                                              const GALGAS_if_5F_semi_5F_colon_5F_op & in_mOpCode,
                                                                                              const GALGAS_registerExpression & in_mRegisterExpression
                                                                                              COMMA_LOCATION_ARGS) :
cPtr_instruction_5F_IF_5F_SEMI_5F_COLON (in_mInstructionLocation, in_mInstruction COMMA_THERE),
mAttribute_mOpCode (in_mOpCode),
mAttribute_mRegisterExpression (in_mRegisterExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON ;
}

void cPtr_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::description (C_String & ioString,
                                                                 const PMSInt32 inIndentation) const {
  ioString << "[@instruction_IF_FA_SEMI_COLON:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstruction.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOpCode.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @instruction_IF_FA_SEMI_COLON type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON ("instruction_IF_FA_SEMI_COLON",
                                                                 & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON::extractObject (const GALGAS_object & inObject,
                                                                                                                C_Compiler * inCompiler,
                                                                                                                const GALGAS_location & inErrorLocation
                                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON result ;
  const GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON * p = (const GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_IF_5F_FA_5F_SEMI_5F_COLON *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_IF_FA_SEMI_COLON", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_IF_5F_IncDec::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_IF_5F_IncDec * p = (const cPtr_instruction_5F_IF_5F_IncDec *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_IncDec) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstruction.objectCompare (p->mAttribute_mInstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIncrement.objectCompare (p->mAttribute_mIncrement) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSkipIfZero.objectCompare (p->mAttribute_mSkipIfZero) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterExpression.objectCompare (p->mAttribute_mRegisterExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_m_5F_W_5F_isDestination.objectCompare (p->mAttribute_m_5F_W_5F_isDestination) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_IF_5F_IncDec::objectCompare (const GALGAS_instruction_5F_IF_5F_IncDec & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_IncDec::GALGAS_instruction_5F_IF_5F_IncDec (void) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_IncDec::GALGAS_instruction_5F_IF_5F_IncDec (const cPtr_instruction_5F_IF_5F_IncDec * inSourcePtr) :
GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_IF_5F_IncDec) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_IncDec GALGAS_instruction_5F_IF_5F_IncDec::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                        const GALGAS_piccolo_5F_instruction & inAttribute_mInstruction,
                                                                                        const GALGAS_bool & inAttribute_mIncrement,
                                                                                        const GALGAS_bool & inAttribute_mSkipIfZero,
                                                                                        const GALGAS_registerExpression & inAttribute_mRegisterExpression,
                                                                                        const GALGAS_bool & inAttribute_m_5F_W_5F_isDestination
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_IncDec result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mInstruction.isValid () && inAttribute_mIncrement.isValid () && inAttribute_mSkipIfZero.isValid () && inAttribute_mRegisterExpression.isValid () && inAttribute_m_5F_W_5F_isDestination.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_IF_5F_IncDec (inAttribute_mInstructionLocation, inAttribute_mInstruction, inAttribute_mIncrement, inAttribute_mSkipIfZero, inAttribute_mRegisterExpression, inAttribute_m_5F_W_5F_isDestination COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_IF_5F_IncDec::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_IF_5F_IncDec * p = (cPtr_instruction_5F_IF_5F_IncDec *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_IF_5F_IncDec) ;
    cPtr_instruction_5F_IF_5F_IncDec * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_IF_5F_IncDec (p->mAttribute_mInstructionLocation, p->mAttribute_mInstruction, p->mAttribute_mIncrement, p->mAttribute_mSkipIfZero, p->mAttribute_mRegisterExpression, p->mAttribute_m_5F_W_5F_isDestination COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_IF_5F_IncDec::reader_mIncrement (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_IncDec * p = (const cPtr_instruction_5F_IF_5F_IncDec *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_IncDec) ;
    result = p->mAttribute_mIncrement ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_IF_5F_IncDec::reader_mIncrement (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIncrement ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_IF_5F_IncDec::reader_mSkipIfZero (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_IncDec * p = (const cPtr_instruction_5F_IF_5F_IncDec *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_IncDec) ;
    result = p->mAttribute_mSkipIfZero ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_IF_5F_IncDec::reader_mSkipIfZero (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSkipIfZero ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_IF_5F_IncDec::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_IncDec * p = (const cPtr_instruction_5F_IF_5F_IncDec *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_IncDec) ;
    result = p->mAttribute_mRegisterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_IF_5F_IncDec::reader_mRegisterExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_IF_5F_IncDec::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_IF_5F_IncDec * p = (const cPtr_instruction_5F_IF_5F_IncDec *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_IF_5F_IncDec) ;
    result = p->mAttribute_m_5F_W_5F_isDestination ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_IF_5F_IncDec::reader_m_5F_W_5F_isDestination (UNUSED_LOCATION_ARGS) const {
  return mAttribute_m_5F_W_5F_isDestination ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @instruction_IF_IncDec class               *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_IF_5F_IncDec::cPtr_instruction_5F_IF_5F_IncDec (const GALGAS_location & in_mInstructionLocation,
                                                                    const GALGAS_piccolo_5F_instruction & in_mInstruction,
                                                                    const GALGAS_bool & in_mIncrement,
                                                                    const GALGAS_bool & in_mSkipIfZero,
                                                                    const GALGAS_registerExpression & in_mRegisterExpression,
                                                                    const GALGAS_bool & in_m_5F_W_5F_isDestination
                                                                    COMMA_LOCATION_ARGS) :
cPtr_instruction_5F_IF_5F_SEMI_5F_COLON (in_mInstructionLocation, in_mInstruction COMMA_THERE),
mAttribute_mIncrement (in_mIncrement),
mAttribute_mSkipIfZero (in_mSkipIfZero),
mAttribute_mRegisterExpression (in_mRegisterExpression),
mAttribute_m_5F_W_5F_isDestination (in_m_5F_W_5F_isDestination) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_IF_5F_IncDec::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_IncDec ;
}

void cPtr_instruction_5F_IF_5F_IncDec::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@instruction_IF_IncDec:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstruction.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mIncrement.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSkipIfZero.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegisterExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_m_5F_W_5F_isDestination.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @instruction_IF_IncDec type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_IF_5F_IncDec ("instruction_IF_IncDec",
                                                    & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_SEMI_5F_COLON) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_IF_5F_IncDec::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_IF_5F_IncDec ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_IF_5F_IncDec::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_IF_5F_IncDec (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_IF_5F_IncDec GALGAS_instruction_5F_IF_5F_IncDec::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_IF_5F_IncDec result ;
  const GALGAS_instruction_5F_IF_5F_IncDec * p = (const GALGAS_instruction_5F_IF_5F_IncDec *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_IF_5F_IncDec *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_IF_IncDec", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_JSR::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_JSR * p = (const cPtr_instruction_5F_JSR *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_JSR) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabel.objectCompare (p->mAttribute_mTargetLabel) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mKind.objectCompare (p->mAttribute_mKind) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_JSR::objectCompare (const GALGAS_instruction_5F_JSR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JSR::GALGAS_instruction_5F_JSR (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JSR::GALGAS_instruction_5F_JSR (const cPtr_instruction_5F_JSR * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_JSR) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JSR GALGAS_instruction_5F_JSR::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                      const GALGAS_lstring & inAttribute_mTargetLabel,
                                                                      const GALGAS_jumpInstructionKind & inAttribute_mKind
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JSR result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mTargetLabel.isValid () && inAttribute_mKind.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_JSR (inAttribute_mInstructionLocation, inAttribute_mTargetLabel, inAttribute_mKind COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_JSR::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_JSR * p = (cPtr_instruction_5F_JSR *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_JSR) ;
    cPtr_instruction_5F_JSR * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_JSR (p->mAttribute_mInstructionLocation, p->mAttribute_mTargetLabel, p->mAttribute_mKind COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_instruction_5F_JSR::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JSR * p = (const cPtr_instruction_5F_JSR *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JSR) ;
    result = p->mAttribute_mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_instruction_5F_JSR::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabel ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_instruction_5F_JSR::reader_mKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_jumpInstructionKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JSR * p = (const cPtr_instruction_5F_JSR *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JSR) ;
    result = p->mAttribute_mKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind cPtr_instruction_5F_JSR::reader_mKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mKind ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_JSR class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_JSR::cPtr_instruction_5F_JSR (const GALGAS_location & in_mInstructionLocation,
                                                  const GALGAS_lstring & in_mTargetLabel,
                                                  const GALGAS_jumpInstructionKind & in_mKind
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mTargetLabel (in_mTargetLabel),
mAttribute_mKind (in_mKind) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_JSR::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JSR ;
}

void cPtr_instruction_5F_JSR::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_JSR:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabel.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mKind.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_JSR type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_JSR ("instruction_JSR",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_JSR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JSR ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_JSR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_JSR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JSR GALGAS_instruction_5F_JSR::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JSR result ;
  const GALGAS_instruction_5F_JSR * p = (const GALGAS_instruction_5F_JSR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_JSR *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_JSR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_JUMP::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_JUMP * p = (const cPtr_instruction_5F_JUMP *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_JUMP) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabel.objectCompare (p->mAttribute_mTargetLabel) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mKind.objectCompare (p->mAttribute_mKind) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_JUMP::objectCompare (const GALGAS_instruction_5F_JUMP & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMP::GALGAS_instruction_5F_JUMP (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMP::GALGAS_instruction_5F_JUMP (const cPtr_instruction_5F_JUMP * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_JUMP) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMP GALGAS_instruction_5F_JUMP::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                        const GALGAS_lstring & inAttribute_mTargetLabel,
                                                                        const GALGAS_jumpInstructionKind & inAttribute_mKind
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JUMP result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mTargetLabel.isValid () && inAttribute_mKind.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_JUMP (inAttribute_mInstructionLocation, inAttribute_mTargetLabel, inAttribute_mKind COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_JUMP::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_JUMP * p = (cPtr_instruction_5F_JUMP *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_JUMP) ;
    cPtr_instruction_5F_JUMP * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_JUMP (p->mAttribute_mInstructionLocation, p->mAttribute_mTargetLabel, p->mAttribute_mKind COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_instruction_5F_JUMP::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JUMP * p = (const cPtr_instruction_5F_JUMP *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JUMP) ;
    result = p->mAttribute_mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_instruction_5F_JUMP::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabel ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind GALGAS_instruction_5F_JUMP::reader_mKind (UNUSED_LOCATION_ARGS) const {
  GALGAS_jumpInstructionKind result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JUMP * p = (const cPtr_instruction_5F_JUMP *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JUMP) ;
    result = p->mAttribute_mKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_jumpInstructionKind cPtr_instruction_5F_JUMP::reader_mKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mKind ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_JUMP class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_JUMP::cPtr_instruction_5F_JUMP (const GALGAS_location & in_mInstructionLocation,
                                                    const GALGAS_lstring & in_mTargetLabel,
                                                    const GALGAS_jumpInstructionKind & in_mKind
                                                    COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mTargetLabel (in_mTargetLabel),
mAttribute_mKind (in_mKind) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_JUMP::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JUMP ;
}

void cPtr_instruction_5F_JUMP::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@instruction_JUMP:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabel.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mKind.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_JUMP type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_JUMP ("instruction_JUMP",
                                            & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_JUMP::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JUMP ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_JUMP::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_JUMP (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMP GALGAS_instruction_5F_JUMP::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JUMP result ;
  const GALGAS_instruction_5F_JUMP * p = (const GALGAS_instruction_5F_JUMP *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_JUMP *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_JUMP", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_JUMPCC::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_JUMPCC * p = (const cPtr_instruction_5F_JUMPCC *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_JUMPCC) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabel.objectCompare (p->mAttribute_mTargetLabel) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mConditionalBranch.objectCompare (p->mAttribute_mConditionalBranch) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIsBcc.objectCompare (p->mAttribute_mIsBcc) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_JUMPCC::objectCompare (const GALGAS_instruction_5F_JUMPCC & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMPCC::GALGAS_instruction_5F_JUMPCC (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMPCC::GALGAS_instruction_5F_JUMPCC (const cPtr_instruction_5F_JUMPCC * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_JUMPCC) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMPCC GALGAS_instruction_5F_JUMPCC::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                            const GALGAS_lstring & inAttribute_mTargetLabel,
                                                                            const GALGAS_conditional_5F_branch & inAttribute_mConditionalBranch,
                                                                            const GALGAS_bool & inAttribute_mIsBcc
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JUMPCC result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mTargetLabel.isValid () && inAttribute_mConditionalBranch.isValid () && inAttribute_mIsBcc.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_JUMPCC (inAttribute_mInstructionLocation, inAttribute_mTargetLabel, inAttribute_mConditionalBranch, inAttribute_mIsBcc COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_JUMPCC::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_JUMPCC * p = (cPtr_instruction_5F_JUMPCC *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_JUMPCC) ;
    cPtr_instruction_5F_JUMPCC * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_JUMPCC (p->mAttribute_mInstructionLocation, p->mAttribute_mTargetLabel, p->mAttribute_mConditionalBranch, p->mAttribute_mIsBcc COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_instruction_5F_JUMPCC::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JUMPCC * p = (const cPtr_instruction_5F_JUMPCC *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JUMPCC) ;
    result = p->mAttribute_mTargetLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cPtr_instruction_5F_JUMPCC::reader_mTargetLabel (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabel ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch GALGAS_instruction_5F_JUMPCC::reader_mConditionalBranch (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditional_5F_branch result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JUMPCC * p = (const cPtr_instruction_5F_JUMPCC *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JUMPCC) ;
    result = p->mAttribute_mConditionalBranch ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditional_5F_branch cPtr_instruction_5F_JUMPCC::reader_mConditionalBranch (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mConditionalBranch ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_JUMPCC::reader_mIsBcc (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_JUMPCC * p = (const cPtr_instruction_5F_JUMPCC *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_JUMPCC) ;
    result = p->mAttribute_mIsBcc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_JUMPCC::reader_mIsBcc (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsBcc ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_JUMPCC class                *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_JUMPCC::cPtr_instruction_5F_JUMPCC (const GALGAS_location & in_mInstructionLocation,
                                                        const GALGAS_lstring & in_mTargetLabel,
                                                        const GALGAS_conditional_5F_branch & in_mConditionalBranch,
                                                        const GALGAS_bool & in_mIsBcc
                                                        COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mTargetLabel (in_mTargetLabel),
mAttribute_mConditionalBranch (in_mConditionalBranch),
mAttribute_mIsBcc (in_mIsBcc) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_JUMPCC::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JUMPCC ;
}

void cPtr_instruction_5F_JUMPCC::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@instruction_JUMPCC:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabel.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mConditionalBranch.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mIsBcc.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @instruction_JUMPCC type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_JUMPCC ("instruction_JUMPCC",
                                              & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_JUMPCC::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_JUMPCC ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_JUMPCC::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_JUMPCC (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_JUMPCC GALGAS_instruction_5F_JUMPCC::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_JUMPCC result ;
  const GALGAS_instruction_5F_JUMPCC * p = (const GALGAS_instruction_5F_JUMPCC *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_JUMPCC *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_JUMPCC", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_LFSR::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_LFSR * p = (const cPtr_instruction_5F_LFSR *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_LFSR) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFSRindex.objectCompare (p->mAttribute_mFSRindex) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mImmediatExpression.objectCompare (p->mAttribute_mImmediatExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_LFSR::objectCompare (const GALGAS_instruction_5F_LFSR & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_LFSR::GALGAS_instruction_5F_LFSR (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_LFSR::GALGAS_instruction_5F_LFSR (const cPtr_instruction_5F_LFSR * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_LFSR) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_LFSR GALGAS_instruction_5F_LFSR::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                        const GALGAS_luint & inAttribute_mFSRindex,
                                                                        const GALGAS_immediatExpression & inAttribute_mImmediatExpression
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_LFSR result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mFSRindex.isValid () && inAttribute_mImmediatExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_LFSR (inAttribute_mInstructionLocation, inAttribute_mFSRindex, inAttribute_mImmediatExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_LFSR::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_LFSR * p = (cPtr_instruction_5F_LFSR *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_LFSR) ;
    cPtr_instruction_5F_LFSR * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_LFSR (p->mAttribute_mInstructionLocation, p->mAttribute_mFSRindex, p->mAttribute_mImmediatExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_instruction_5F_LFSR::reader_mFSRindex (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_LFSR * p = (const cPtr_instruction_5F_LFSR *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_LFSR) ;
    result = p->mAttribute_mFSRindex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cPtr_instruction_5F_LFSR::reader_mFSRindex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFSRindex ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_LFSR::reader_mImmediatExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_LFSR * p = (const cPtr_instruction_5F_LFSR *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_LFSR) ;
    result = p->mAttribute_mImmediatExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_LFSR::reader_mImmediatExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mImmediatExpression ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_LFSR class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_LFSR::cPtr_instruction_5F_LFSR (const GALGAS_location & in_mInstructionLocation,
                                                    const GALGAS_luint & in_mFSRindex,
                                                    const GALGAS_immediatExpression & in_mImmediatExpression
                                                    COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mFSRindex (in_mFSRindex),
mAttribute_mImmediatExpression (in_mImmediatExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_LFSR::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_LFSR ;
}

void cPtr_instruction_5F_LFSR::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@instruction_LFSR:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mFSRindex.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mImmediatExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_LFSR type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_LFSR ("instruction_LFSR",
                                            & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_LFSR::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_LFSR ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_LFSR::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_LFSR (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_LFSR GALGAS_instruction_5F_LFSR::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_LFSR result ;
  const GALGAS_instruction_5F_LFSR * p = (const GALGAS_instruction_5F_LFSR *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_LFSR *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_LFSR", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_MNOP::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_MNOP * p = (const cPtr_instruction_5F_MNOP *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_MNOP) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOccurrenceFactor.objectCompare (p->mAttribute_mOccurrenceFactor) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_MNOP::objectCompare (const GALGAS_instruction_5F_MNOP & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MNOP::GALGAS_instruction_5F_MNOP (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MNOP::GALGAS_instruction_5F_MNOP (const cPtr_instruction_5F_MNOP * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_MNOP) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MNOP GALGAS_instruction_5F_MNOP::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                        const GALGAS_luint & inAttribute_mOccurrenceFactor
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_MNOP result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mOccurrenceFactor.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_MNOP (inAttribute_mInstructionLocation, inAttribute_mOccurrenceFactor COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_MNOP::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_MNOP * p = (cPtr_instruction_5F_MNOP *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_MNOP) ;
    cPtr_instruction_5F_MNOP * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_MNOP (p->mAttribute_mInstructionLocation, p->mAttribute_mOccurrenceFactor COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_instruction_5F_MNOP::reader_mOccurrenceFactor (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_MNOP * p = (const cPtr_instruction_5F_MNOP *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_MNOP) ;
    result = p->mAttribute_mOccurrenceFactor ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cPtr_instruction_5F_MNOP::reader_mOccurrenceFactor (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOccurrenceFactor ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_MNOP class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_MNOP::cPtr_instruction_5F_MNOP (const GALGAS_location & in_mInstructionLocation,
                                                    const GALGAS_luint & in_mOccurrenceFactor
                                                    COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mOccurrenceFactor (in_mOccurrenceFactor) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_MNOP::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_MNOP ;
}

void cPtr_instruction_5F_MNOP::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@instruction_MNOP:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOccurrenceFactor.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_MNOP type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_MNOP ("instruction_MNOP",
                                            & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_MNOP::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_MNOP ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_MNOP::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_MNOP (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MNOP GALGAS_instruction_5F_MNOP::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_MNOP result ;
  const GALGAS_instruction_5F_MNOP * p = (const GALGAS_instruction_5F_MNOP *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_MNOP *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_MNOP", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_MOVFF::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_MOVFF * p = (const cPtr_instruction_5F_MOVFF *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_MOVFF) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSourceRegisterName.objectCompare (p->mAttribute_mSourceRegisterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDestinationRegisterName.objectCompare (p->mAttribute_mDestinationRegisterName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_MOVFF::objectCompare (const GALGAS_instruction_5F_MOVFF & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MOVFF::GALGAS_instruction_5F_MOVFF (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MOVFF::GALGAS_instruction_5F_MOVFF (const cPtr_instruction_5F_MOVFF * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_MOVFF) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MOVFF GALGAS_instruction_5F_MOVFF::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                          const GALGAS_registerExpression & inAttribute_mSourceRegisterName,
                                                                          const GALGAS_registerExpression & inAttribute_mDestinationRegisterName
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_MOVFF result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mSourceRegisterName.isValid () && inAttribute_mDestinationRegisterName.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_MOVFF (inAttribute_mInstructionLocation, inAttribute_mSourceRegisterName, inAttribute_mDestinationRegisterName COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_MOVFF::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_MOVFF * p = (cPtr_instruction_5F_MOVFF *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_MOVFF) ;
    cPtr_instruction_5F_MOVFF * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_MOVFF (p->mAttribute_mInstructionLocation, p->mAttribute_mSourceRegisterName, p->mAttribute_mDestinationRegisterName COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_MOVFF::reader_mSourceRegisterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_MOVFF * p = (const cPtr_instruction_5F_MOVFF *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_MOVFF) ;
    result = p->mAttribute_mSourceRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_MOVFF::reader_mSourceRegisterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSourceRegisterName ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_MOVFF::reader_mDestinationRegisterName (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_MOVFF * p = (const cPtr_instruction_5F_MOVFF *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_MOVFF) ;
    result = p->mAttribute_mDestinationRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_MOVFF::reader_mDestinationRegisterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDestinationRegisterName ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_MOVFF class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_MOVFF::cPtr_instruction_5F_MOVFF (const GALGAS_location & in_mInstructionLocation,
                                                      const GALGAS_registerExpression & in_mSourceRegisterName,
                                                      const GALGAS_registerExpression & in_mDestinationRegisterName
                                                      COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mSourceRegisterName (in_mSourceRegisterName),
mAttribute_mDestinationRegisterName (in_mDestinationRegisterName) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_MOVFF::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_MOVFF ;
}

void cPtr_instruction_5F_MOVFF::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@instruction_MOVFF:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSourceRegisterName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mDestinationRegisterName.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_MOVFF type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_MOVFF ("instruction_MOVFF",
                                             & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_MOVFF::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_MOVFF ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_MOVFF::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_MOVFF (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_MOVFF GALGAS_instruction_5F_MOVFF::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_MOVFF result ;
  const GALGAS_instruction_5F_MOVFF * p = (const GALGAS_instruction_5F_MOVFF *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_MOVFF *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_MOVFF", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_NOP::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_NOP * p = (const cPtr_instruction_5F_NOP *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_NOP) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_NOP::objectCompare (const GALGAS_instruction_5F_NOP & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_NOP::GALGAS_instruction_5F_NOP (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_NOP::GALGAS_instruction_5F_NOP (const cPtr_instruction_5F_NOP * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_NOP) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_NOP GALGAS_instruction_5F_NOP::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_NOP result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_NOP (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_NOP::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_NOP * p = (cPtr_instruction_5F_NOP *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_NOP) ;
    cPtr_instruction_5F_NOP * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_NOP (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_NOP class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_NOP::cPtr_instruction_5F_NOP (const GALGAS_location & in_mInstructionLocation
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_NOP::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_NOP ;
}

void cPtr_instruction_5F_NOP::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_NOP:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_NOP type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_NOP ("instruction_NOP",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_NOP::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_NOP ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_NOP::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_NOP (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_NOP GALGAS_instruction_5F_NOP::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_NOP result ;
  const GALGAS_instruction_5F_NOP * p = (const GALGAS_instruction_5F_NOP *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_NOP *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_NOP", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_POP::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_POP * p = (const cPtr_instruction_5F_POP *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_POP) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_POP::objectCompare (const GALGAS_instruction_5F_POP & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_POP::GALGAS_instruction_5F_POP (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_POP::GALGAS_instruction_5F_POP (const cPtr_instruction_5F_POP * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_POP) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_POP GALGAS_instruction_5F_POP::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_POP result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_POP (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_POP::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_POP * p = (cPtr_instruction_5F_POP *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_POP) ;
    cPtr_instruction_5F_POP * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_POP (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_POP class                  *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_POP::cPtr_instruction_5F_POP (const GALGAS_location & in_mInstructionLocation
                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_POP::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_POP ;
}

void cPtr_instruction_5F_POP::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@instruction_POP:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @instruction_POP type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_POP ("instruction_POP",
                                           & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_POP::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_POP ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_POP::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_POP (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_POP GALGAS_instruction_5F_POP::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_POP result ;
  const GALGAS_instruction_5F_POP * p = (const GALGAS_instruction_5F_POP *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_POP *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_POP", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_PUSH::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_PUSH * p = (const cPtr_instruction_5F_PUSH *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_PUSH) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_PUSH::objectCompare (const GALGAS_instruction_5F_PUSH & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_PUSH::GALGAS_instruction_5F_PUSH (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_PUSH::GALGAS_instruction_5F_PUSH (const cPtr_instruction_5F_PUSH * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_PUSH) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_PUSH GALGAS_instruction_5F_PUSH::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_PUSH result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_PUSH (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_PUSH::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_PUSH * p = (cPtr_instruction_5F_PUSH *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_PUSH) ;
    cPtr_instruction_5F_PUSH * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_PUSH (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @instruction_PUSH class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_PUSH::cPtr_instruction_5F_PUSH (const GALGAS_location & in_mInstructionLocation
                                                    COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_PUSH::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_PUSH ;
}

void cPtr_instruction_5F_PUSH::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@instruction_PUSH:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_PUSH type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_PUSH ("instruction_PUSH",
                                            & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_PUSH::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_PUSH ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_PUSH::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_PUSH (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_PUSH GALGAS_instruction_5F_PUSH::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_PUSH result ;
  const GALGAS_instruction_5F_PUSH * p = (const GALGAS_instruction_5F_PUSH *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_PUSH *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_PUSH", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_RESET::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_RESET * p = (const cPtr_instruction_5F_RESET *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_RESET) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_RESET::objectCompare (const GALGAS_instruction_5F_RESET & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_RESET::GALGAS_instruction_5F_RESET (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_RESET::GALGAS_instruction_5F_RESET (const cPtr_instruction_5F_RESET * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_RESET) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_RESET GALGAS_instruction_5F_RESET::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_RESET result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_RESET (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_RESET::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_RESET * p = (cPtr_instruction_5F_RESET *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_RESET) ;
    cPtr_instruction_5F_RESET * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_RESET (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_RESET class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_RESET::cPtr_instruction_5F_RESET (const GALGAS_location & in_mInstructionLocation
                                                      COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_RESET::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_RESET ;
}

void cPtr_instruction_5F_RESET::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@instruction_RESET:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_RESET type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_RESET ("instruction_RESET",
                                             & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_RESET::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_RESET ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_RESET::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_RESET (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_RESET GALGAS_instruction_5F_RESET::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_RESET result ;
  const GALGAS_instruction_5F_RESET * p = (const GALGAS_instruction_5F_RESET *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_RESET *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_RESET", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_SLEEP::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_SLEEP * p = (const cPtr_instruction_5F_SLEEP *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_SLEEP) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_SLEEP::objectCompare (const GALGAS_instruction_5F_SLEEP & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_SLEEP::GALGAS_instruction_5F_SLEEP (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_SLEEP::GALGAS_instruction_5F_SLEEP (const cPtr_instruction_5F_SLEEP * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_SLEEP) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_SLEEP GALGAS_instruction_5F_SLEEP::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_SLEEP result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_SLEEP (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_SLEEP::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_SLEEP * p = (cPtr_instruction_5F_SLEEP *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_SLEEP) ;
    cPtr_instruction_5F_SLEEP * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_SLEEP (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_SLEEP class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_SLEEP::cPtr_instruction_5F_SLEEP (const GALGAS_location & in_mInstructionLocation
                                                      COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_SLEEP::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_SLEEP ;
}

void cPtr_instruction_5F_SLEEP::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@instruction_SLEEP:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_SLEEP type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_SLEEP ("instruction_SLEEP",
                                             & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_SLEEP::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_SLEEP ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_SLEEP::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_SLEEP (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_SLEEP GALGAS_instruction_5F_SLEEP::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_SLEEP result ;
  const GALGAS_instruction_5F_SLEEP * p = (const GALGAS_instruction_5F_SLEEP *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_SLEEP *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_SLEEP", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_TBLRD::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_TBLRD * p = (const cPtr_instruction_5F_TBLRD *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_TBLRD) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOption.objectCompare (p->mAttribute_mOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_TBLRD::objectCompare (const GALGAS_instruction_5F_TBLRD & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLRD::GALGAS_instruction_5F_TBLRD (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLRD::GALGAS_instruction_5F_TBLRD (const cPtr_instruction_5F_TBLRD * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_TBLRD) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLRD GALGAS_instruction_5F_TBLRD::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                          const GALGAS_tableAccessOption & inAttribute_mOption
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_TBLRD result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_TBLRD (inAttribute_mInstructionLocation, inAttribute_mOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_TBLRD::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_TBLRD * p = (cPtr_instruction_5F_TBLRD *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_TBLRD) ;
    cPtr_instruction_5F_TBLRD * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_TBLRD (p->mAttribute_mInstructionLocation, p->mAttribute_mOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_instruction_5F_TBLRD::reader_mOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_tableAccessOption result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_TBLRD * p = (const cPtr_instruction_5F_TBLRD *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_TBLRD) ;
    result = p->mAttribute_mOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption cPtr_instruction_5F_TBLRD::reader_mOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOption ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_TBLRD class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_TBLRD::cPtr_instruction_5F_TBLRD (const GALGAS_location & in_mInstructionLocation,
                                                      const GALGAS_tableAccessOption & in_mOption
                                                      COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mOption (in_mOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_TBLRD::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_TBLRD ;
}

void cPtr_instruction_5F_TBLRD::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@instruction_TBLRD:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_TBLRD type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_TBLRD ("instruction_TBLRD",
                                             & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_TBLRD::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_TBLRD ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_TBLRD::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_TBLRD (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLRD GALGAS_instruction_5F_TBLRD::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_TBLRD result ;
  const GALGAS_instruction_5F_TBLRD * p = (const GALGAS_instruction_5F_TBLRD *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_TBLRD *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_TBLRD", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_TBLWT::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_TBLWT * p = (const cPtr_instruction_5F_TBLWT *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_TBLWT) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOption.objectCompare (p->mAttribute_mOption) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_TBLWT::objectCompare (const GALGAS_instruction_5F_TBLWT & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLWT::GALGAS_instruction_5F_TBLWT (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLWT::GALGAS_instruction_5F_TBLWT (const cPtr_instruction_5F_TBLWT * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_TBLWT) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLWT GALGAS_instruction_5F_TBLWT::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                          const GALGAS_tableAccessOption & inAttribute_mOption
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_TBLWT result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mOption.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_TBLWT (inAttribute_mInstructionLocation, inAttribute_mOption COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_TBLWT::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_TBLWT * p = (cPtr_instruction_5F_TBLWT *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_TBLWT) ;
    cPtr_instruction_5F_TBLWT * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_TBLWT (p->mAttribute_mInstructionLocation, p->mAttribute_mOption COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption GALGAS_instruction_5F_TBLWT::reader_mOption (UNUSED_LOCATION_ARGS) const {
  GALGAS_tableAccessOption result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_TBLWT * p = (const cPtr_instruction_5F_TBLWT *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_TBLWT) ;
    result = p->mAttribute_mOption ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_tableAccessOption cPtr_instruction_5F_TBLWT::reader_mOption (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mOption ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @instruction_TBLWT class                 *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_TBLWT::cPtr_instruction_5F_TBLWT (const GALGAS_location & in_mInstructionLocation,
                                                      const GALGAS_tableAccessOption & in_mOption
                                                      COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mOption (in_mOption) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_TBLWT::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_TBLWT ;
}

void cPtr_instruction_5F_TBLWT::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@instruction_TBLWT:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mOption.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @instruction_TBLWT type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_TBLWT ("instruction_TBLWT",
                                             & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_TBLWT::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_TBLWT ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_TBLWT::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_TBLWT (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_TBLWT GALGAS_instruction_5F_TBLWT::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_TBLWT result ;
  const GALGAS_instruction_5F_TBLWT * p = (const GALGAS_instruction_5F_TBLWT *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_TBLWT *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_TBLWT", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_banksel::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_banksel * p = (const cPtr_instruction_5F_banksel *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_banksel) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBankIndex.objectCompare (p->mAttribute_mBankIndex) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_banksel::objectCompare (const GALGAS_instruction_5F_banksel & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_banksel::GALGAS_instruction_5F_banksel (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_banksel::GALGAS_instruction_5F_banksel (const cPtr_instruction_5F_banksel * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_banksel) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_banksel GALGAS_instruction_5F_banksel::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                              const GALGAS_luint & inAttribute_mBankIndex
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_banksel result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mBankIndex.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_banksel (inAttribute_mInstructionLocation, inAttribute_mBankIndex COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_banksel::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_banksel * p = (cPtr_instruction_5F_banksel *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_banksel) ;
    cPtr_instruction_5F_banksel * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_banksel (p->mAttribute_mInstructionLocation, p->mAttribute_mBankIndex COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_instruction_5F_banksel::reader_mBankIndex (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_banksel * p = (const cPtr_instruction_5F_banksel *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_banksel) ;
    result = p->mAttribute_mBankIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cPtr_instruction_5F_banksel::reader_mBankIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBankIndex ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @instruction_banksel class                *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_banksel::cPtr_instruction_5F_banksel (const GALGAS_location & in_mInstructionLocation,
                                                          const GALGAS_luint & in_mBankIndex
                                                          COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mBankIndex (in_mBankIndex) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_banksel::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_banksel ;
}

void cPtr_instruction_5F_banksel::description (C_String & ioString,
                                               const PMSInt32 inIndentation) const {
  ioString << "[@instruction_banksel:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mBankIndex.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @instruction_banksel type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_banksel ("instruction_banksel",
                                               & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_banksel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_banksel ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_banksel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_banksel (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_banksel GALGAS_instruction_5F_banksel::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_banksel result ;
  const GALGAS_instruction_5F_banksel * p = (const GALGAS_instruction_5F_banksel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_banksel *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_banksel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_computed_5F_bra::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_computed_5F_bra * p = (const cPtr_instruction_5F_computed_5F_bra *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_bra) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSizeExpression.objectCompare (p->mAttribute_mSizeExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabels.objectCompare (p->mAttribute_mTargetLabels) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mUsesRelativeCall.objectCompare (p->mAttribute_mUsesRelativeCall) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_computed_5F_bra::objectCompare (const GALGAS_instruction_5F_computed_5F_bra & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_bra::GALGAS_instruction_5F_computed_5F_bra (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_bra::GALGAS_instruction_5F_computed_5F_bra (const cPtr_instruction_5F_computed_5F_bra * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_computed_5F_bra) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_bra GALGAS_instruction_5F_computed_5F_bra::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                              const GALGAS_immediatExpression & inAttribute_mSizeExpression,
                                                                                              const GALGAS_lstringlist & inAttribute_mTargetLabels,
                                                                                              const GALGAS_bool & inAttribute_mUsesRelativeCall
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_bra result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mSizeExpression.isValid () && inAttribute_mTargetLabels.isValid () && inAttribute_mUsesRelativeCall.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_computed_5F_bra (inAttribute_mInstructionLocation, inAttribute_mSizeExpression, inAttribute_mTargetLabels, inAttribute_mUsesRelativeCall COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_computed_5F_bra::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_computed_5F_bra * p = (cPtr_instruction_5F_computed_5F_bra *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_computed_5F_bra) ;
    cPtr_instruction_5F_computed_5F_bra * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_computed_5F_bra (p->mAttribute_mInstructionLocation, p->mAttribute_mSizeExpression, p->mAttribute_mTargetLabels, p->mAttribute_mUsesRelativeCall COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_computed_5F_bra::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_bra * p = (const cPtr_instruction_5F_computed_5F_bra *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_bra) ;
    result = p->mAttribute_mSizeExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_computed_5F_bra::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSizeExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_instruction_5F_computed_5F_bra::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_bra * p = (const cPtr_instruction_5F_computed_5F_bra *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_bra) ;
    result = p->mAttribute_mTargetLabels ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_instruction_5F_computed_5F_bra::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabels ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_computed_5F_bra::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_bra * p = (const cPtr_instruction_5F_computed_5F_bra *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_bra) ;
    result = p->mAttribute_mUsesRelativeCall ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_computed_5F_bra::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUsesRelativeCall ;
}

//---------------------------------------------------------------------------*
//             Pointer class for @instruction_computed_bra class             *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_computed_5F_bra::cPtr_instruction_5F_computed_5F_bra (const GALGAS_location & in_mInstructionLocation,
                                                                          const GALGAS_immediatExpression & in_mSizeExpression,
                                                                          const GALGAS_lstringlist & in_mTargetLabels,
                                                                          const GALGAS_bool & in_mUsesRelativeCall
                                                                          COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mSizeExpression (in_mSizeExpression),
mAttribute_mTargetLabels (in_mTargetLabels),
mAttribute_mUsesRelativeCall (in_mUsesRelativeCall) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_computed_5F_bra::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_bra ;
}

void cPtr_instruction_5F_computed_5F_bra::description (C_String & ioString,
                                                       const PMSInt32 inIndentation) const {
  ioString << "[@instruction_computed_bra:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSizeExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabels.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mUsesRelativeCall.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @instruction_computed_bra type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_computed_5F_bra ("instruction_computed_bra",
                                                       & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_computed_5F_bra::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_bra ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_computed_5F_bra::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_computed_5F_bra (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_bra GALGAS_instruction_5F_computed_5F_bra::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler,
                                                                                            const GALGAS_location & inErrorLocation
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_bra result ;
  const GALGAS_instruction_5F_computed_5F_bra * p = (const GALGAS_instruction_5F_computed_5F_bra *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_computed_5F_bra *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_computed_bra", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_computed_5F_goto::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_computed_5F_goto * p = (const cPtr_instruction_5F_computed_5F_goto *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_goto) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSizeExpression.objectCompare (p->mAttribute_mSizeExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabels.objectCompare (p->mAttribute_mTargetLabels) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mUsesRelativeCall.objectCompare (p->mAttribute_mUsesRelativeCall) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_computed_5F_goto::objectCompare (const GALGAS_instruction_5F_computed_5F_goto & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_goto::GALGAS_instruction_5F_computed_5F_goto (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_goto::GALGAS_instruction_5F_computed_5F_goto (const cPtr_instruction_5F_computed_5F_goto * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_computed_5F_goto) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_goto GALGAS_instruction_5F_computed_5F_goto::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                const GALGAS_immediatExpression & inAttribute_mSizeExpression,
                                                                                                const GALGAS_lstringlist & inAttribute_mTargetLabels,
                                                                                                const GALGAS_bool & inAttribute_mUsesRelativeCall
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_goto result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mSizeExpression.isValid () && inAttribute_mTargetLabels.isValid () && inAttribute_mUsesRelativeCall.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_computed_5F_goto (inAttribute_mInstructionLocation, inAttribute_mSizeExpression, inAttribute_mTargetLabels, inAttribute_mUsesRelativeCall COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_computed_5F_goto::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_computed_5F_goto * p = (cPtr_instruction_5F_computed_5F_goto *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_computed_5F_goto) ;
    cPtr_instruction_5F_computed_5F_goto * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_computed_5F_goto (p->mAttribute_mInstructionLocation, p->mAttribute_mSizeExpression, p->mAttribute_mTargetLabels, p->mAttribute_mUsesRelativeCall COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_computed_5F_goto::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_goto * p = (const cPtr_instruction_5F_computed_5F_goto *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_goto) ;
    result = p->mAttribute_mSizeExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_computed_5F_goto::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSizeExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_instruction_5F_computed_5F_goto::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_goto * p = (const cPtr_instruction_5F_computed_5F_goto *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_goto) ;
    result = p->mAttribute_mTargetLabels ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_instruction_5F_computed_5F_goto::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabels ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_computed_5F_goto::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_goto * p = (const cPtr_instruction_5F_computed_5F_goto *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_goto) ;
    result = p->mAttribute_mUsesRelativeCall ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_computed_5F_goto::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUsesRelativeCall ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @instruction_computed_goto class             *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_computed_5F_goto::cPtr_instruction_5F_computed_5F_goto (const GALGAS_location & in_mInstructionLocation,
                                                                            const GALGAS_immediatExpression & in_mSizeExpression,
                                                                            const GALGAS_lstringlist & in_mTargetLabels,
                                                                            const GALGAS_bool & in_mUsesRelativeCall
                                                                            COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mSizeExpression (in_mSizeExpression),
mAttribute_mTargetLabels (in_mTargetLabels),
mAttribute_mUsesRelativeCall (in_mUsesRelativeCall) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_computed_5F_goto::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_goto ;
}

void cPtr_instruction_5F_computed_5F_goto::description (C_String & ioString,
                                                        const PMSInt32 inIndentation) const {
  ioString << "[@instruction_computed_goto:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSizeExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabels.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mUsesRelativeCall.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @instruction_computed_goto type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_computed_5F_goto ("instruction_computed_goto",
                                                        & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_computed_5F_goto::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_goto ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_computed_5F_goto::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_computed_5F_goto (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_goto GALGAS_instruction_5F_computed_5F_goto::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler,
                                                                                              const GALGAS_location & inErrorLocation
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_goto result ;
  const GALGAS_instruction_5F_computed_5F_goto * p = (const GALGAS_instruction_5F_computed_5F_goto *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_computed_5F_goto *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_computed_goto", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_computed_5F_rcall::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_computed_5F_rcall * p = (const cPtr_instruction_5F_computed_5F_rcall *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_rcall) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSizeExpression.objectCompare (p->mAttribute_mSizeExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTargetLabels.objectCompare (p->mAttribute_mTargetLabels) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mUsesRelativeCall.objectCompare (p->mAttribute_mUsesRelativeCall) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_computed_5F_rcall::objectCompare (const GALGAS_instruction_5F_computed_5F_rcall & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_rcall::GALGAS_instruction_5F_computed_5F_rcall (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_rcall::GALGAS_instruction_5F_computed_5F_rcall (const cPtr_instruction_5F_computed_5F_rcall * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_computed_5F_rcall) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_rcall GALGAS_instruction_5F_computed_5F_rcall::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                  const GALGAS_immediatExpression & inAttribute_mSizeExpression,
                                                                                                  const GALGAS_lstringlist & inAttribute_mTargetLabels,
                                                                                                  const GALGAS_bool & inAttribute_mUsesRelativeCall
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_rcall result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mSizeExpression.isValid () && inAttribute_mTargetLabels.isValid () && inAttribute_mUsesRelativeCall.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_computed_5F_rcall (inAttribute_mInstructionLocation, inAttribute_mSizeExpression, inAttribute_mTargetLabels, inAttribute_mUsesRelativeCall COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_computed_5F_rcall::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_computed_5F_rcall * p = (cPtr_instruction_5F_computed_5F_rcall *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_computed_5F_rcall) ;
    cPtr_instruction_5F_computed_5F_rcall * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_computed_5F_rcall (p->mAttribute_mInstructionLocation, p->mAttribute_mSizeExpression, p->mAttribute_mTargetLabels, p->mAttribute_mUsesRelativeCall COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_computed_5F_rcall::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_rcall * p = (const cPtr_instruction_5F_computed_5F_rcall *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_rcall) ;
    result = p->mAttribute_mSizeExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_computed_5F_rcall::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSizeExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_instruction_5F_computed_5F_rcall::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_rcall * p = (const cPtr_instruction_5F_computed_5F_rcall *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_rcall) ;
    result = p->mAttribute_mTargetLabels ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist cPtr_instruction_5F_computed_5F_rcall::reader_mTargetLabels (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mTargetLabels ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_computed_5F_rcall::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_rcall * p = (const cPtr_instruction_5F_computed_5F_rcall *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_rcall) ;
    result = p->mAttribute_mUsesRelativeCall ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_computed_5F_rcall::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUsesRelativeCall ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @instruction_computed_rcall class            *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_computed_5F_rcall::cPtr_instruction_5F_computed_5F_rcall (const GALGAS_location & in_mInstructionLocation,
                                                                              const GALGAS_immediatExpression & in_mSizeExpression,
                                                                              const GALGAS_lstringlist & in_mTargetLabels,
                                                                              const GALGAS_bool & in_mUsesRelativeCall
                                                                              COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mSizeExpression (in_mSizeExpression),
mAttribute_mTargetLabels (in_mTargetLabels),
mAttribute_mUsesRelativeCall (in_mUsesRelativeCall) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_computed_5F_rcall::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_rcall ;
}

void cPtr_instruction_5F_computed_5F_rcall::description (C_String & ioString,
                                                         const PMSInt32 inIndentation) const {
  ioString << "[@instruction_computed_rcall:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSizeExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mTargetLabels.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mUsesRelativeCall.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @instruction_computed_rcall type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_computed_5F_rcall ("instruction_computed_rcall",
                                                         & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_computed_5F_rcall::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_rcall ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_computed_5F_rcall::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_computed_5F_rcall (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_rcall GALGAS_instruction_5F_computed_5F_rcall::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler,
                                                                                                const GALGAS_location & inErrorLocation
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_rcall result ;
  const GALGAS_instruction_5F_computed_5F_rcall * p = (const GALGAS_instruction_5F_computed_5F_rcall *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_computed_5F_rcall *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_computed_rcall", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_computed_5F_retlw::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_computed_5F_retlw * p = (const cPtr_instruction_5F_computed_5F_retlw *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_retlw) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSizeExpression.objectCompare (p->mAttribute_mSizeExpression) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mImmediateExpressionList.objectCompare (p->mAttribute_mImmediateExpressionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mUsesRelativeCall.objectCompare (p->mAttribute_mUsesRelativeCall) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_computed_5F_retlw::objectCompare (const GALGAS_instruction_5F_computed_5F_retlw & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_retlw::GALGAS_instruction_5F_computed_5F_retlw (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_retlw::GALGAS_instruction_5F_computed_5F_retlw (const cPtr_instruction_5F_computed_5F_retlw * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_computed_5F_retlw) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_retlw GALGAS_instruction_5F_computed_5F_retlw::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                  const GALGAS_immediatExpression & inAttribute_mSizeExpression,
                                                                                                  const GALGAS_immediatExpressionList & inAttribute_mImmediateExpressionList,
                                                                                                  const GALGAS_bool & inAttribute_mUsesRelativeCall
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_retlw result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mSizeExpression.isValid () && inAttribute_mImmediateExpressionList.isValid () && inAttribute_mUsesRelativeCall.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_computed_5F_retlw (inAttribute_mInstructionLocation, inAttribute_mSizeExpression, inAttribute_mImmediateExpressionList, inAttribute_mUsesRelativeCall COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_computed_5F_retlw::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_computed_5F_retlw * p = (cPtr_instruction_5F_computed_5F_retlw *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_computed_5F_retlw) ;
    cPtr_instruction_5F_computed_5F_retlw * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_computed_5F_retlw (p->mAttribute_mInstructionLocation, p->mAttribute_mSizeExpression, p->mAttribute_mImmediateExpressionList, p->mAttribute_mUsesRelativeCall COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_computed_5F_retlw::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_retlw * p = (const cPtr_instruction_5F_computed_5F_retlw *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_retlw) ;
    result = p->mAttribute_mSizeExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_computed_5F_retlw::reader_mSizeExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSizeExpression ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList GALGAS_instruction_5F_computed_5F_retlw::reader_mImmediateExpressionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpressionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_retlw * p = (const cPtr_instruction_5F_computed_5F_retlw *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_retlw) ;
    result = p->mAttribute_mImmediateExpressionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpressionList cPtr_instruction_5F_computed_5F_retlw::reader_mImmediateExpressionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mImmediateExpressionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_instruction_5F_computed_5F_retlw::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_computed_5F_retlw * p = (const cPtr_instruction_5F_computed_5F_retlw *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_computed_5F_retlw) ;
    result = p->mAttribute_mUsesRelativeCall ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool cPtr_instruction_5F_computed_5F_retlw::reader_mUsesRelativeCall (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUsesRelativeCall ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @instruction_computed_retlw class            *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_computed_5F_retlw::cPtr_instruction_5F_computed_5F_retlw (const GALGAS_location & in_mInstructionLocation,
                                                                              const GALGAS_immediatExpression & in_mSizeExpression,
                                                                              const GALGAS_immediatExpressionList & in_mImmediateExpressionList,
                                                                              const GALGAS_bool & in_mUsesRelativeCall
                                                                              COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mSizeExpression (in_mSizeExpression),
mAttribute_mImmediateExpressionList (in_mImmediateExpressionList),
mAttribute_mUsesRelativeCall (in_mUsesRelativeCall) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_computed_5F_retlw::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_retlw ;
}

void cPtr_instruction_5F_computed_5F_retlw::description (C_String & ioString,
                                                         const PMSInt32 inIndentation) const {
  ioString << "[@instruction_computed_retlw:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSizeExpression.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mImmediateExpressionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mUsesRelativeCall.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @instruction_computed_retlw type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_computed_5F_retlw ("instruction_computed_retlw",
                                                         & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_computed_5F_retlw::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_computed_5F_retlw ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_computed_5F_retlw::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_computed_5F_retlw (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_computed_5F_retlw GALGAS_instruction_5F_computed_5F_retlw::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler,
                                                                                                const GALGAS_location & inErrorLocation
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_computed_5F_retlw result ;
  const GALGAS_instruction_5F_computed_5F_retlw * p = (const GALGAS_instruction_5F_computed_5F_retlw *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_computed_5F_retlw *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_computed_retlw", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_do_5F_while::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_do_5F_while * p = (const cPtr_instruction_5F_do_5F_while *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_do_5F_while) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRepeatedInstructionList.objectCompare (p->mAttribute_mRepeatedInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfRepeatedInstructionList.objectCompare (p->mAttribute_mEndOfRepeatedInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mWhilePartList.objectCompare (p->mAttribute_mWhilePartList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_do_5F_while::objectCompare (const GALGAS_instruction_5F_do_5F_while & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_do_5F_while::GALGAS_instruction_5F_do_5F_while (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_do_5F_while::GALGAS_instruction_5F_do_5F_while (const cPtr_instruction_5F_do_5F_while * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_do_5F_while) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_do_5F_while GALGAS_instruction_5F_do_5F_while::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                      const GALGAS_instructionList & inAttribute_mRepeatedInstructionList,
                                                                                      const GALGAS_location & inAttribute_mEndOfRepeatedInstructionList,
                                                                                      const GALGAS_partList & inAttribute_mWhilePartList
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_do_5F_while result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mRepeatedInstructionList.isValid () && inAttribute_mEndOfRepeatedInstructionList.isValid () && inAttribute_mWhilePartList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_do_5F_while (inAttribute_mInstructionLocation, inAttribute_mRepeatedInstructionList, inAttribute_mEndOfRepeatedInstructionList, inAttribute_mWhilePartList COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_do_5F_while::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_do_5F_while * p = (cPtr_instruction_5F_do_5F_while *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_do_5F_while) ;
    cPtr_instruction_5F_do_5F_while * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_do_5F_while (p->mAttribute_mInstructionLocation, p->mAttribute_mRepeatedInstructionList, p->mAttribute_mEndOfRepeatedInstructionList, p->mAttribute_mWhilePartList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instruction_5F_do_5F_while::reader_mRepeatedInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_do_5F_while * p = (const cPtr_instruction_5F_do_5F_while *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_do_5F_while) ;
    result = p->mAttribute_mRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cPtr_instruction_5F_do_5F_while::reader_mRepeatedInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRepeatedInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_instruction_5F_do_5F_while::reader_mEndOfRepeatedInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_do_5F_while * p = (const cPtr_instruction_5F_do_5F_while *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_do_5F_while) ;
    result = p->mAttribute_mEndOfRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_instruction_5F_do_5F_while::reader_mEndOfRepeatedInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfRepeatedInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_partList GALGAS_instruction_5F_do_5F_while::reader_mWhilePartList (UNUSED_LOCATION_ARGS) const {
  GALGAS_partList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_do_5F_while * p = (const cPtr_instruction_5F_do_5F_while *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_do_5F_while) ;
    result = p->mAttribute_mWhilePartList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList cPtr_instruction_5F_do_5F_while::reader_mWhilePartList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mWhilePartList ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @instruction_do_while class               *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_do_5F_while::cPtr_instruction_5F_do_5F_while (const GALGAS_location & in_mInstructionLocation,
                                                                  const GALGAS_instructionList & in_mRepeatedInstructionList,
                                                                  const GALGAS_location & in_mEndOfRepeatedInstructionList,
                                                                  const GALGAS_partList & in_mWhilePartList
                                                                  COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mRepeatedInstructionList (in_mRepeatedInstructionList),
mAttribute_mEndOfRepeatedInstructionList (in_mEndOfRepeatedInstructionList),
mAttribute_mWhilePartList (in_mWhilePartList) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_do_5F_while::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_do_5F_while ;
}

void cPtr_instruction_5F_do_5F_while::description (C_String & ioString,
                                                   const PMSInt32 inIndentation) const {
  ioString << "[@instruction_do_while:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRepeatedInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEndOfRepeatedInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mWhilePartList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @instruction_do_while type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_do_5F_while ("instruction_do_while",
                                                   & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_do_5F_while::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_do_5F_while ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_do_5F_while::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_do_5F_while (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_do_5F_while GALGAS_instruction_5F_do_5F_while::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler,
                                                                                    const GALGAS_location & inErrorLocation
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_do_5F_while result ;
  const GALGAS_instruction_5F_do_5F_while * p = (const GALGAS_instruction_5F_do_5F_while *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_do_5F_while *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_do_while", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_literalOperation::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_literalOperation * p = (const cPtr_instruction_5F_literalOperation *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_literalOperation) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mLiteralInstruction.objectCompare (p->mAttribute_mLiteralInstruction) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mImmediatExpression.objectCompare (p->mAttribute_mImmediatExpression) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_literalOperation::objectCompare (const GALGAS_instruction_5F_literalOperation & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_literalOperation::GALGAS_instruction_5F_literalOperation (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_literalOperation::GALGAS_instruction_5F_literalOperation (const cPtr_instruction_5F_literalOperation * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_literalOperation) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_literalOperation GALGAS_instruction_5F_literalOperation::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                const GALGAS_literal_5F_instruction_5F_opcode & inAttribute_mLiteralInstruction,
                                                                                                const GALGAS_immediatExpression & inAttribute_mImmediatExpression
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_literalOperation result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mLiteralInstruction.isValid () && inAttribute_mImmediatExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_literalOperation (inAttribute_mInstructionLocation, inAttribute_mLiteralInstruction, inAttribute_mImmediatExpression COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_literalOperation::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_literalOperation * p = (cPtr_instruction_5F_literalOperation *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_literalOperation) ;
    cPtr_instruction_5F_literalOperation * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_literalOperation (p->mAttribute_mInstructionLocation, p->mAttribute_mLiteralInstruction, p->mAttribute_mImmediatExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode GALGAS_instruction_5F_literalOperation::reader_mLiteralInstruction (UNUSED_LOCATION_ARGS) const {
  GALGAS_literal_5F_instruction_5F_opcode result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_literalOperation * p = (const cPtr_instruction_5F_literalOperation *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_literalOperation) ;
    result = p->mAttribute_mLiteralInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_literal_5F_instruction_5F_opcode cPtr_instruction_5F_literalOperation::reader_mLiteralInstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLiteralInstruction ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression GALGAS_instruction_5F_literalOperation::reader_mImmediatExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_immediatExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_literalOperation * p = (const cPtr_instruction_5F_literalOperation *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_literalOperation) ;
    result = p->mAttribute_mImmediatExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_immediatExpression cPtr_instruction_5F_literalOperation::reader_mImmediatExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mImmediatExpression ;
}

//---------------------------------------------------------------------------*
//           Pointer class for @instruction_literalOperation class           *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_literalOperation::cPtr_instruction_5F_literalOperation (const GALGAS_location & in_mInstructionLocation,
                                                                            const GALGAS_literal_5F_instruction_5F_opcode & in_mLiteralInstruction,
                                                                            const GALGAS_immediatExpression & in_mImmediatExpression
                                                                            COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mLiteralInstruction (in_mLiteralInstruction),
mAttribute_mImmediatExpression (in_mImmediatExpression) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_literalOperation::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_literalOperation ;
}

void cPtr_instruction_5F_literalOperation::description (C_String & ioString,
                                                        const PMSInt32 inIndentation) const {
  ioString << "[@instruction_literalOperation:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mLiteralInstruction.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mImmediatExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @instruction_literalOperation type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_literalOperation ("instruction_literalOperation",
                                                        & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_literalOperation::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_literalOperation ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_literalOperation::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_literalOperation (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_literalOperation GALGAS_instruction_5F_literalOperation::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler,
                                                                                              const GALGAS_location & inErrorLocation
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_literalOperation result ;
  const GALGAS_instruction_5F_literalOperation * p = (const GALGAS_instruction_5F_literalOperation *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_literalOperation *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_literalOperation", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_nobanksel::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_nobanksel * p = (const cPtr_instruction_5F_nobanksel *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_nobanksel) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_nobanksel::objectCompare (const GALGAS_instruction_5F_nobanksel & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_nobanksel::GALGAS_instruction_5F_nobanksel (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_nobanksel::GALGAS_instruction_5F_nobanksel (const cPtr_instruction_5F_nobanksel * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_nobanksel) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_nobanksel GALGAS_instruction_5F_nobanksel::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_nobanksel result ;
  if (inAttribute_mInstructionLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_nobanksel (inAttribute_mInstructionLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_nobanksel::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_nobanksel * p = (cPtr_instruction_5F_nobanksel *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_nobanksel) ;
    cPtr_instruction_5F_nobanksel * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_nobanksel (p->mAttribute_mInstructionLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//              Pointer class for @instruction_nobanksel class               *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_nobanksel::cPtr_instruction_5F_nobanksel (const GALGAS_location & in_mInstructionLocation
                                                              COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_nobanksel::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_nobanksel ;
}

void cPtr_instruction_5F_nobanksel::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@instruction_nobanksel:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @instruction_nobanksel type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_nobanksel ("instruction_nobanksel",
                                                 & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_nobanksel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_nobanksel ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_nobanksel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_nobanksel (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_nobanksel GALGAS_instruction_5F_nobanksel::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler,
                                                                                const GALGAS_location & inErrorLocation
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_nobanksel result ;
  const GALGAS_instruction_5F_nobanksel * p = (const GALGAS_instruction_5F_nobanksel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_nobanksel *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_nobanksel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_savebank::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_savebank * p = (const cPtr_instruction_5F_savebank *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_savebank) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegister.objectCompare (p->mAttribute_mRegister) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionList.objectCompare (p->mAttribute_mInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfSaveBankInstruction.objectCompare (p->mAttribute_mEndOfSaveBankInstruction) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_savebank::objectCompare (const GALGAS_instruction_5F_savebank & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_savebank::GALGAS_instruction_5F_savebank (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_savebank::GALGAS_instruction_5F_savebank (const cPtr_instruction_5F_savebank * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_savebank) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_savebank GALGAS_instruction_5F_savebank::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                const GALGAS_registerExpression & inAttribute_mRegister,
                                                                                const GALGAS_instructionList & inAttribute_mInstructionList,
                                                                                const GALGAS_location & inAttribute_mEndOfSaveBankInstruction
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_savebank result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mRegister.isValid () && inAttribute_mInstructionList.isValid () && inAttribute_mEndOfSaveBankInstruction.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_savebank (inAttribute_mInstructionLocation, inAttribute_mRegister, inAttribute_mInstructionList, inAttribute_mEndOfSaveBankInstruction COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_savebank::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_savebank * p = (cPtr_instruction_5F_savebank *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_savebank) ;
    cPtr_instruction_5F_savebank * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_savebank (p->mAttribute_mInstructionLocation, p->mAttribute_mRegister, p->mAttribute_mInstructionList, p->mAttribute_mEndOfSaveBankInstruction COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression GALGAS_instruction_5F_savebank::reader_mRegister (UNUSED_LOCATION_ARGS) const {
  GALGAS_registerExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_savebank * p = (const cPtr_instruction_5F_savebank *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_savebank) ;
    result = p->mAttribute_mRegister ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_registerExpression cPtr_instruction_5F_savebank::reader_mRegister (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegister ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instruction_5F_savebank::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_savebank * p = (const cPtr_instruction_5F_savebank *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_savebank) ;
    result = p->mAttribute_mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cPtr_instruction_5F_savebank::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_instruction_5F_savebank::reader_mEndOfSaveBankInstruction (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_savebank * p = (const cPtr_instruction_5F_savebank *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_savebank) ;
    result = p->mAttribute_mEndOfSaveBankInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_instruction_5F_savebank::reader_mEndOfSaveBankInstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfSaveBankInstruction ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @instruction_savebank class               *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_savebank::cPtr_instruction_5F_savebank (const GALGAS_location & in_mInstructionLocation,
                                                            const GALGAS_registerExpression & in_mRegister,
                                                            const GALGAS_instructionList & in_mInstructionList,
                                                            const GALGAS_location & in_mEndOfSaveBankInstruction
                                                            COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mRegister (in_mRegister),
mAttribute_mInstructionList (in_mInstructionList),
mAttribute_mEndOfSaveBankInstruction (in_mEndOfSaveBankInstruction) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_savebank::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_savebank ;
}

void cPtr_instruction_5F_savebank::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "[@instruction_savebank:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mRegister.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEndOfSaveBankInstruction.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @instruction_savebank type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_savebank ("instruction_savebank",
                                                & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_savebank::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_savebank ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_savebank::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_savebank (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_savebank GALGAS_instruction_5F_savebank::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_savebank result ;
  const GALGAS_instruction_5F_savebank * p = (const GALGAS_instruction_5F_savebank *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_savebank *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_savebank", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_instruction_5F_structured_5F_if::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_instruction_5F_structured_5F_if * p = (const cPtr_instruction_5F_structured_5F_if *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_instruction_5F_structured_5F_if) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInstructionLocation.objectCompare (p->mAttribute_mInstructionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIfCondition.objectCompare (p->mAttribute_mIfCondition) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mThenInstructionList.objectCompare (p->mAttribute_mThenInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mElseInstructionList.objectCompare (p->mAttribute_mElseInstructionList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mEndOfElsePartLocation.objectCompare (p->mAttribute_mEndOfElsePartLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_instruction_5F_structured_5F_if::objectCompare (const GALGAS_instruction_5F_structured_5F_if & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_structured_5F_if::GALGAS_instruction_5F_structured_5F_if (void) :
GALGAS_piccolo_5F_instruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_structured_5F_if::GALGAS_instruction_5F_structured_5F_if (const cPtr_instruction_5F_structured_5F_if * inSourcePtr) :
GALGAS_piccolo_5F_instruction (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_instruction_5F_structured_5F_if) ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_structured_5F_if GALGAS_instruction_5F_structured_5F_if::constructor_new (const GALGAS_location & inAttribute_mInstructionLocation,
                                                                                                const GALGAS_conditionExpression & inAttribute_mIfCondition,
                                                                                                const GALGAS_instructionList & inAttribute_mThenInstructionList,
                                                                                                const GALGAS_instructionList & inAttribute_mElseInstructionList,
                                                                                                const GALGAS_location & inAttribute_mEndOfElsePartLocation
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_structured_5F_if result ;
  if (inAttribute_mInstructionLocation.isValid () && inAttribute_mIfCondition.isValid () && inAttribute_mThenInstructionList.isValid () && inAttribute_mElseInstructionList.isValid () && inAttribute_mEndOfElsePartLocation.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_instruction_5F_structured_5F_if (inAttribute_mInstructionLocation, inAttribute_mIfCondition, inAttribute_mThenInstructionList, inAttribute_mElseInstructionList, inAttribute_mEndOfElsePartLocation COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_instruction_5F_structured_5F_if::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_instruction_5F_structured_5F_if * p = (cPtr_instruction_5F_structured_5F_if *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_instruction_5F_structured_5F_if) ;
    cPtr_instruction_5F_structured_5F_if * r = NULL ;
    macroMyNew (r, cPtr_instruction_5F_structured_5F_if (p->mAttribute_mInstructionLocation, p->mAttribute_mIfCondition, p->mAttribute_mThenInstructionList, p->mAttribute_mElseInstructionList, p->mAttribute_mEndOfElsePartLocation COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_instruction_5F_structured_5F_if::reader_mIfCondition (UNUSED_LOCATION_ARGS) const {
  GALGAS_conditionExpression result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_structured_5F_if * p = (const cPtr_instruction_5F_structured_5F_if *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_structured_5F_if) ;
    result = p->mAttribute_mIfCondition ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression cPtr_instruction_5F_structured_5F_if::reader_mIfCondition (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIfCondition ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instruction_5F_structured_5F_if::reader_mThenInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_structured_5F_if * p = (const cPtr_instruction_5F_structured_5F_if *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_structured_5F_if) ;
    result = p->mAttribute_mThenInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cPtr_instruction_5F_structured_5F_if::reader_mThenInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mThenInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_instruction_5F_structured_5F_if::reader_mElseInstructionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_instructionList result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_structured_5F_if * p = (const cPtr_instruction_5F_structured_5F_if *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_structured_5F_if) ;
    result = p->mAttribute_mElseInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList cPtr_instruction_5F_structured_5F_if::reader_mElseInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mElseInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_instruction_5F_structured_5F_if::reader_mEndOfElsePartLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_instruction_5F_structured_5F_if * p = (const cPtr_instruction_5F_structured_5F_if *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_instruction_5F_structured_5F_if) ;
    result = p->mAttribute_mEndOfElsePartLocation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location cPtr_instruction_5F_structured_5F_if::reader_mEndOfElsePartLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfElsePartLocation ;
}

//---------------------------------------------------------------------------*
//            Pointer class for @instruction_structured_if class             *
//---------------------------------------------------------------------------*

cPtr_instruction_5F_structured_5F_if::cPtr_instruction_5F_structured_5F_if (const GALGAS_location & in_mInstructionLocation,
                                                                            const GALGAS_conditionExpression & in_mIfCondition,
                                                                            const GALGAS_instructionList & in_mThenInstructionList,
                                                                            const GALGAS_instructionList & in_mElseInstructionList,
                                                                            const GALGAS_location & in_mEndOfElsePartLocation
                                                                            COMMA_LOCATION_ARGS) :
cPtr_piccolo_5F_instruction (in_mInstructionLocation COMMA_THERE),
mAttribute_mIfCondition (in_mIfCondition),
mAttribute_mThenInstructionList (in_mThenInstructionList),
mAttribute_mElseInstructionList (in_mElseInstructionList),
mAttribute_mEndOfElsePartLocation (in_mEndOfElsePartLocation) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_instruction_5F_structured_5F_if::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_structured_5F_if ;
}

void cPtr_instruction_5F_structured_5F_if::description (C_String & ioString,
                                                        const PMSInt32 inIndentation) const {
  ioString << "[@instruction_structured_if:" ;
  mAttribute_mInstructionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mIfCondition.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mThenInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mElseInstructionList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEndOfElsePartLocation.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                      @instruction_structured_if type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instruction_5F_structured_5F_if ("instruction_structured_if",
                                                        & kTypeDescriptor_GALGAS_piccolo_5F_instruction) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instruction_5F_structured_5F_if::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instruction_5F_structured_5F_if ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instruction_5F_structured_5F_if::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instruction_5F_structured_5F_if (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instruction_5F_structured_5F_if GALGAS_instruction_5F_structured_5F_if::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler,
                                                                                              const GALGAS_location & inErrorLocation
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_instruction_5F_structured_5F_if result ;
  const GALGAS_instruction_5F_structured_5F_if * p = (const GALGAS_instruction_5F_structured_5F_if *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instruction_5F_structured_5F_if *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instruction_structured_if", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category Reader '@instruction_FDA_base_code mnemonic'           *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_instruction_5F_FDA_5F_base_5F_code & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_instruction_5F_FDA_5F_base_5F_code temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kNotBuilt:
      break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ADDWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("ADDWF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ADDWFC: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("ADDWFC") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_ANDWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("ANDWF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_COMF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("COMF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DECF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("DECF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DECFSZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("DECFSZ") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_DCFSNZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("DCFSNZ") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("INCF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INCFSZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("INCFSZ") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_INFSNZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("INFSNZ") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_IORWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("IORWF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_MOVF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("MOVF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RLCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("RLCF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RLNCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("RLNCF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RRCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("RRCF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_RRNCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("RRNCF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBFWB: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SUBFWB") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SUBWF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SUBWFB: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SUBWFB") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_SWAPF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SWAPF") ;
      } break ;
    case GALGAS_instruction_5F_FDA_5F_base_5F_code::kEnum_XORWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("XORWF") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//           Category Reader '@FA_instruction_base_code mnemonic'            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_FA_5F_instruction_5F_base_5F_code & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_FA_5F_instruction_5F_base_5F_code temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kNotBuilt:
      break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_CLRF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CLRF") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_CPFSEQ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSEQ") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_CPFSGT: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSGT") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_CPFSLT: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSLT") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_MOVWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("MOVWF") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_MULWF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("MULWF") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_NEGF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NEGF") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_SETF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SETF") ;
      } break ;
    case GALGAS_FA_5F_instruction_5F_base_5F_code::kEnum_TSTFSZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("TSTFSZ") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                Category Reader '@bit_oriented_op mnemonic'                *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_bit_5F_oriented_5F_op & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_bit_5F_oriented_5F_op temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_bit_5F_oriented_5F_op::kNotBuilt:
      break ;
    case GALGAS_bit_5F_oriented_5F_op::kEnum_BCF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BCF") ;
      } break ;
    case GALGAS_bit_5F_oriented_5F_op::kEnum_BSF: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BSF") ;
      } break ;
    case GALGAS_bit_5F_oriented_5F_op::kEnum_BTG: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BTG") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//              Category Reader '@conditional_branch mnemonic'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_conditional_5F_branch & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_conditional_5F_branch temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_conditional_5F_branch::kNotBuilt:
      break ;
    case GALGAS_conditional_5F_branch::kEnum_bz: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BZ") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnz: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BNZ") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bn: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BN") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnn: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BNN") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bc: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BC") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnc: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BNC") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bov: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BOV") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnov: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("BNOV") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//              Category Reader '@conditional_branch condition'              *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_condition (const GALGAS_conditional_5F_branch & inObject,
                                        C_Compiler * /* inCompiler */
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_conditional_5F_branch temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_conditional_5F_branch::kNotBuilt:
      break ;
    case GALGAS_conditional_5F_branch::kEnum_bz: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("Z") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnz: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NZ") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bn: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("N") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnn: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NN") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bc: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("C") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnc: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NC") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bov: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("OV") ;
      } break ;
    case GALGAS_conditional_5F_branch::kEnum_bnov: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NOV") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//          Category Reader '@literal_instruction_opcode mnemonic'           *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_literal_5F_instruction_5F_opcode & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_literal_5F_instruction_5F_opcode temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_literal_5F_instruction_5F_opcode::kNotBuilt:
      break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_ADDLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("ADDLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_ANDLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("ANDLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_IORLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("IORLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_MOVLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("MOVLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_MULLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("MULLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_RETLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("RETLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_SUBLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SUBLW") ;
      } break ;
    case GALGAS_literal_5F_instruction_5F_opcode::kEnum_XORLW: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("XORLW") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//               Category Reader '@tableAccessOption mnemonic'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_tableAccessOption & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_tableAccessOption temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_tableAccessOption::kNotBuilt:
      break ;
    case GALGAS_tableAccessOption::kEnum_simpleAccess: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("*") ;
      } break ;
    case GALGAS_tableAccessOption::kEnum_postIncrement: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("*+") ;
      } break ;
    case GALGAS_tableAccessOption::kEnum_postDecrement: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("*-") ;
      } break ;
    case GALGAS_tableAccessOption::kEnum_preIncrement: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("+*") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//               Category Reader '@if_semi_colon_op mnemonic'                *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_if_5F_semi_5F_colon_5F_op & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_if_5F_semi_5F_colon_5F_op temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_if_5F_semi_5F_colon_5F_op::kNotBuilt:
      break ;
    case GALGAS_if_5F_semi_5F_colon_5F_op::kEnum_CPFSEQ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSEQ") ;
      } break ;
    case GALGAS_if_5F_semi_5F_colon_5F_op::kEnum_CPFSGT: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSGT") ;
      } break ;
    case GALGAS_if_5F_semi_5F_colon_5F_op::kEnum_CPFSLT: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("CPFSLT") ;
      } break ;
    case GALGAS_if_5F_semi_5F_colon_5F_op::kEnum_TSTFSZ: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("TSTFSZ") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_IF_BitTest getBaseCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_instruction_5F_IF_5F_BitTest_getBaseCode> gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_getBaseCode (const PMSInt32 inClassIndex,
                                      categoryMethodSignature_instruction_5F_IF_5F_BitTest_getBaseCode inMethod) {
  gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void callCategoryMethod_getBaseCode (const cPtr_instruction_5F_IF_5F_BitTest * inObject,
                                     GALGAS_uint & out_outBaseCode,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) {
  out_outBaseCode.drop () ;
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_instruction_5F_IF_5F_BitTest) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_instruction_5F_IF_5F_BitTest_getBaseCode f = NULL ;
    if (classIndex < gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode.count ()) {
      f = gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode.count ()) {
           f = gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, out_outBaseCode, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*

static void categoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode (const cPtr_instruction_5F_IF_5F_BitTest * inObject,
                                                                     GALGAS_uint & outArgument_outBaseCode,
                                                                     C_Compiler * /* inCompiler */
                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_instruction_5F_IF_5F_BitTest * object = inObject ;
  macroValidSharedObject (object, const cPtr_instruction_5F_IF_5F_BitTest) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = object->mAttribute_mSkipIfSet.boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @assignmentInstructionForGeneration
    outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 40960U) ;
  }else if (kBoolFalse == test_0) {
    //-------- @assignmentInstructionForGeneration
    outArgument_outBaseCode = GALGAS_uint ((PMUInt32) 45056U) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode (void) {
  enterCategoryMethod_getBaseCode (kTypeDescriptor_GALGAS_instruction_5F_IF_5F_BitTest.mSlotID,
                                   categoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode (void) {
  gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getBaseCode.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_instruction_5F_IF_5F_BitTest_getBaseCode (defineCategoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode,
                                                                     freeCategoryMethod_instruction_5F_IF_5F_BitTest_getBaseCode) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_IF_BitTest getMnemonic'           *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_instruction_5F_IF_5F_BitTest_getMnemonic> gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_getMnemonic (const PMSInt32 inClassIndex,
                                      categoryMethodSignature_instruction_5F_IF_5F_BitTest_getMnemonic inMethod) {
  gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void callCategoryMethod_getMnemonic (const cPtr_instruction_5F_IF_5F_BitTest * inObject,
                                     GALGAS_string & out_outMnemonic,
                                     C_Compiler * inCompiler
                                     COMMA_LOCATION_ARGS) {
  out_outMnemonic.drop () ;
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_instruction_5F_IF_5F_BitTest) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_instruction_5F_IF_5F_BitTest_getMnemonic f = NULL ;
    if (classIndex < gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic.count ()) {
      f = gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic.count ()) {
           f = gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, out_outMnemonic, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*

static void categoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic (const cPtr_instruction_5F_IF_5F_BitTest * inObject,
                                                                     GALGAS_string & outArgument_outMnemonic,
                                                                     C_Compiler * /* inCompiler */
                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_instruction_5F_IF_5F_BitTest * object = inObject ;
  macroValidSharedObject (object, const cPtr_instruction_5F_IF_5F_BitTest) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = object->mAttribute_mSkipIfSet.boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @assignmentInstructionForGeneration
    outArgument_outMnemonic = GALGAS_string ("BTFSS") ;
  }else if (kBoolFalse == test_0) {
    //-------- @assignmentInstructionForGeneration
    outArgument_outMnemonic = GALGAS_string ("BTFSC") ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic (void) {
  enterCategoryMethod_getMnemonic (kTypeDescriptor_GALGAS_instruction_5F_IF_5F_BitTest.mSlotID,
                                   categoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic (void) {
  gCategoryMethodTable_instruction_5F_IF_5F_BitTest_getMnemonic.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_instruction_5F_IF_5F_BitTest_getMnemonic (defineCategoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic,
                                                                     freeCategoryMethod_instruction_5F_IF_5F_BitTest_getMnemonic) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Category Reader '@registerComparison mnemonic'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_mnemonic (const GALGAS_registerComparison & inObject,
                                       C_Compiler * /* inCompiler */
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_registerComparison temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_registerComparison::kNotBuilt:
      break ;
    case GALGAS_registerComparison::kEnum_notEqual: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("!=") ;
      } break ;
    case GALGAS_registerComparison::kEnum_equal: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("==") ;
      } break ;
    case GALGAS_registerComparison::kEnum_greaterOrEqual: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (">=") ;
      } break ;
    case GALGAS_registerComparison::kEnum_greater: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (">") ;
      } break ;
    case GALGAS_registerComparison::kEnum_lowerOrEqual: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("<=") ;
      } break ;
    case GALGAS_registerComparison::kEnum_lower: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("<") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*

GALGAS_piccoloModel::GALGAS_piccoloModel (void) :
mAttribute_mProgramName (),
mAttribute_mProgramKind (),
mAttribute_mDeviceNameOrBootLoaderReference (),
mAttribute_mConfigDefinitionList (),
mAttribute_mAcceptDefaultConfiguration (),
mAttribute_mRamDefinitionList (),
mAttribute_mInterruptDefinitionList (),
mAttribute_mConstantDefinitionList (),
mAttribute_mRoutineDefinitionList (),
mAttribute_mNeedsComputedGoto_32_ (),
mAttribute_mNeedsComputedGoto_34_ (),
mAttribute_mEndOfProgram () {
}

//---------------------------------------------------------------------------*

GALGAS_piccoloModel::~ GALGAS_piccoloModel (void) {
}

//---------------------------------------------------------------------------*

GALGAS_piccoloModel::GALGAS_piccoloModel (const GALGAS_lstring & inOperand0,
                                          const GALGAS_programKind & inOperand1,
                                          const GALGAS_lstring & inOperand2,
                                          const GALGAS_configDefinitionList & inOperand3,
                                          const GALGAS_bool & inOperand4,
                                          const GALGAS_ramDefinitionList & inOperand5,
                                          const GALGAS_interruptDefinitionList & inOperand6,
                                          const GALGAS_constantDefinitionList & inOperand7,
                                          const GALGAS_routineDefinitionList & inOperand8,
                                          const GALGAS_bool & inOperand9,
                                          const GALGAS_bool & inOperand10,
                                          const GALGAS_location & inOperand11) :
mAttribute_mProgramName (inOperand0),
mAttribute_mProgramKind (inOperand1),
mAttribute_mDeviceNameOrBootLoaderReference (inOperand2),
mAttribute_mConfigDefinitionList (inOperand3),
mAttribute_mAcceptDefaultConfiguration (inOperand4),
mAttribute_mRamDefinitionList (inOperand5),
mAttribute_mInterruptDefinitionList (inOperand6),
mAttribute_mConstantDefinitionList (inOperand7),
mAttribute_mRoutineDefinitionList (inOperand8),
mAttribute_mNeedsComputedGoto_32_ (inOperand9),
mAttribute_mNeedsComputedGoto_34_ (inOperand10),
mAttribute_mEndOfProgram (inOperand11) {
}

//---------------------------------------------------------------------------*

GALGAS_piccoloModel GALGAS_piccoloModel::constructor_new (const GALGAS_lstring & inOperand0,
                                                          const GALGAS_programKind & inOperand1,
                                                          const GALGAS_lstring & inOperand2,
                                                          const GALGAS_configDefinitionList & inOperand3,
                                                          const GALGAS_bool & inOperand4,
                                                          const GALGAS_ramDefinitionList & inOperand5,
                                                          const GALGAS_interruptDefinitionList & inOperand6,
                                                          const GALGAS_constantDefinitionList & inOperand7,
                                                          const GALGAS_routineDefinitionList & inOperand8,
                                                          const GALGAS_bool & inOperand9,
                                                          const GALGAS_bool & inOperand10,
                                                          const GALGAS_location & inOperand11 
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_piccoloModel result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid () && inOperand8.isValid () && inOperand9.isValid () && inOperand10.isValid () && inOperand11.isValid ()) {
    result = GALGAS_piccoloModel (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7, inOperand8, inOperand9, inOperand10, inOperand11) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_piccoloModel::objectCompare (const GALGAS_piccoloModel & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mProgramName.objectCompare (inOperand.mAttribute_mProgramName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mProgramKind.objectCompare (inOperand.mAttribute_mProgramKind) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDeviceNameOrBootLoaderReference.objectCompare (inOperand.mAttribute_mDeviceNameOrBootLoaderReference) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mConfigDefinitionList.objectCompare (inOperand.mAttribute_mConfigDefinitionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAcceptDefaultConfiguration.objectCompare (inOperand.mAttribute_mAcceptDefaultConfiguration) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRamDefinitionList.objectCompare (inOperand.mAttribute_mRamDefinitionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInterruptDefinitionList.objectCompare (inOperand.mAttribute_mInterruptDefinitionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mConstantDefinitionList.objectCompare (inOperand.mAttribute_mConstantDefinitionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRoutineDefinitionList.objectCompare (inOperand.mAttribute_mRoutineDefinitionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mNeedsComputedGoto_32_.objectCompare (inOperand.mAttribute_mNeedsComputedGoto_32_) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mNeedsComputedGoto_34_.objectCompare (inOperand.mAttribute_mNeedsComputedGoto_34_) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEndOfProgram.objectCompare (inOperand.mAttribute_mEndOfProgram) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_piccoloModel::isValid (void) const {
  return mAttribute_mProgramName.isValid () && mAttribute_mProgramKind.isValid () && mAttribute_mDeviceNameOrBootLoaderReference.isValid () && mAttribute_mConfigDefinitionList.isValid () && mAttribute_mAcceptDefaultConfiguration.isValid () && mAttribute_mRamDefinitionList.isValid () && mAttribute_mInterruptDefinitionList.isValid () && mAttribute_mConstantDefinitionList.isValid () && mAttribute_mRoutineDefinitionList.isValid () && mAttribute_mNeedsComputedGoto_32_.isValid () && mAttribute_mNeedsComputedGoto_34_.isValid () && mAttribute_mEndOfProgram.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_piccoloModel::drop (void) {
  mAttribute_mProgramName.drop () ;
  mAttribute_mProgramKind.drop () ;
  mAttribute_mDeviceNameOrBootLoaderReference.drop () ;
  mAttribute_mConfigDefinitionList.drop () ;
  mAttribute_mAcceptDefaultConfiguration.drop () ;
  mAttribute_mRamDefinitionList.drop () ;
  mAttribute_mInterruptDefinitionList.drop () ;
  mAttribute_mConstantDefinitionList.drop () ;
  mAttribute_mRoutineDefinitionList.drop () ;
  mAttribute_mNeedsComputedGoto_32_.drop () ;
  mAttribute_mNeedsComputedGoto_34_.drop () ;
  mAttribute_mEndOfProgram.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_piccoloModel::description (C_String & ioString,
                                       const PMSInt32 inIndentation) const {
  ioString << "<struct @piccoloModel:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mProgramName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mProgramKind.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDeviceNameOrBootLoaderReference.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mConfigDefinitionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAcceptDefaultConfiguration.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRamDefinitionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInterruptDefinitionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mConstantDefinitionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRoutineDefinitionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mNeedsComputedGoto_32_.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mNeedsComputedGoto_34_.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEndOfProgram.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_piccoloModel::reader_mProgramName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mProgramName ;
}

//---------------------------------------------------------------------------*

GALGAS_programKind GALGAS_piccoloModel::reader_mProgramKind (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mProgramKind ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_piccoloModel::reader_mDeviceNameOrBootLoaderReference (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeviceNameOrBootLoaderReference ;
}

//---------------------------------------------------------------------------*

GALGAS_configDefinitionList GALGAS_piccoloModel::reader_mConfigDefinitionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mConfigDefinitionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_piccoloModel::reader_mAcceptDefaultConfiguration (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAcceptDefaultConfiguration ;
}

//---------------------------------------------------------------------------*

GALGAS_ramDefinitionList GALGAS_piccoloModel::reader_mRamDefinitionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRamDefinitionList ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList GALGAS_piccoloModel::reader_mInterruptDefinitionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInterruptDefinitionList ;
}

//---------------------------------------------------------------------------*

GALGAS_constantDefinitionList GALGAS_piccoloModel::reader_mConstantDefinitionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mConstantDefinitionList ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList GALGAS_piccoloModel::reader_mRoutineDefinitionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRoutineDefinitionList ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_piccoloModel::reader_mNeedsComputedGoto_32_ (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNeedsComputedGoto_32_ ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_piccoloModel::reader_mNeedsComputedGoto_34_ (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNeedsComputedGoto_34_ ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_piccoloModel::reader_mEndOfProgram (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfProgram ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @piccoloModel type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_piccoloModel ("piccoloModel",
                                     NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_piccoloModel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_piccoloModel ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_piccoloModel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_piccoloModel (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_piccoloModel GALGAS_piccoloModel::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler,
                                                        const GALGAS_location & inErrorLocation
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_piccoloModel result ;
  const GALGAS_piccoloModel * p = (const GALGAS_piccoloModel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_piccoloModel *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "piccoloModel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element::GALGAS_bootloaderReservedRAMmap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mReservedSize () {
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element::~ GALGAS_bootloaderReservedRAMmap_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element::GALGAS_bootloaderReservedRAMmap_2E_element (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_luint & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mReservedSize (inOperand1) {
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element GALGAS_bootloaderReservedRAMmap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                        const GALGAS_luint & inOperand1 
                                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bootloaderReservedRAMmap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_bootloaderReservedRAMmap_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_bootloaderReservedRAMmap_2E_element::objectCompare (const GALGAS_bootloaderReservedRAMmap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mReservedSize.objectCompare (inOperand.mAttribute_mReservedSize) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_bootloaderReservedRAMmap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mReservedSize.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bootloaderReservedRAMmap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mReservedSize.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_bootloaderReservedRAMmap_2E_element::description (C_String & ioString,
                                                              const PMSInt32 inIndentation) const {
  ioString << "<struct @bootloaderReservedRAMmap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mReservedSize.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_bootloaderReservedRAMmap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_bootloaderReservedRAMmap_2E_element::reader_mReservedSize (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mReservedSize ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                  @bootloaderReservedRAMmap.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_bootloaderReservedRAMmap_2E_element ("bootloaderReservedRAMmap.element",
                                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_bootloaderReservedRAMmap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_bootloaderReservedRAMmap_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_bootloaderReservedRAMmap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_bootloaderReservedRAMmap_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bootloaderReservedRAMmap_2E_element GALGAS_bootloaderReservedRAMmap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                      C_Compiler * inCompiler,
                                                                                                      const GALGAS_location & inErrorLocation
                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_bootloaderReservedRAMmap_2E_element result ;
  const GALGAS_bootloaderReservedRAMmap_2E_element * p = (const GALGAS_bootloaderReservedRAMmap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_bootloaderReservedRAMmap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "bootloaderReservedRAMmap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element::GALGAS_instructionList_2E_element (void) :
mAttribute_mInstruction () {
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element::~ GALGAS_instructionList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element::GALGAS_instructionList_2E_element (const GALGAS_piccolo_5F_instruction & inOperand0) :
mAttribute_mInstruction (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element GALGAS_instructionList_2E_element::constructor_new (const GALGAS_piccolo_5F_instruction & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_instructionList_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_instructionList_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_instructionList_2E_element::objectCompare (const GALGAS_instructionList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mInstruction.objectCompare (inOperand.mAttribute_mInstruction) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_instructionList_2E_element::isValid (void) const {
  return mAttribute_mInstruction.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList_2E_element::drop (void) {
  mAttribute_mInstruction.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_instructionList_2E_element::description (C_String & ioString,
                                                     const PMSInt32 inIndentation) const {
  ioString << "<struct @instructionList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mInstruction.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_piccolo_5F_instruction GALGAS_instructionList_2E_element::reader_mInstruction (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstruction ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @instructionList.element type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_instructionList_2E_element ("instructionList.element",
                                                   NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_instructionList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_instructionList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_instructionList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_instructionList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList_2E_element GALGAS_instructionList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler,
                                                                                    const GALGAS_location & inErrorLocation
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_instructionList_2E_element result ;
  const GALGAS_instructionList_2E_element * p = (const GALGAS_instructionList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_instructionList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "instructionList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element::GALGAS_partList_2E_element (void) :
mAttribute_mCondition (),
mAttribute_mInstructionList (),
mAttribute_mEndOfPartLocation () {
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element::~ GALGAS_partList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element::GALGAS_partList_2E_element (const GALGAS_conditionExpression & inOperand0,
                                                        const GALGAS_instructionList & inOperand1,
                                                        const GALGAS_location & inOperand2) :
mAttribute_mCondition (inOperand0),
mAttribute_mInstructionList (inOperand1),
mAttribute_mEndOfPartLocation (inOperand2) {
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element GALGAS_partList_2E_element::constructor_new (const GALGAS_conditionExpression & inOperand0,
                                                                        const GALGAS_instructionList & inOperand1,
                                                                        const GALGAS_location & inOperand2 
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_partList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_partList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_partList_2E_element::objectCompare (const GALGAS_partList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mCondition.objectCompare (inOperand.mAttribute_mCondition) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInstructionList.objectCompare (inOperand.mAttribute_mInstructionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEndOfPartLocation.objectCompare (inOperand.mAttribute_mEndOfPartLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_partList_2E_element::isValid (void) const {
  return mAttribute_mCondition.isValid () && mAttribute_mInstructionList.isValid () && mAttribute_mEndOfPartLocation.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_partList_2E_element::drop (void) {
  mAttribute_mCondition.drop () ;
  mAttribute_mInstructionList.drop () ;
  mAttribute_mEndOfPartLocation.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_partList_2E_element::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "<struct @partList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mCondition.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInstructionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEndOfPartLocation.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_conditionExpression GALGAS_partList_2E_element::reader_mCondition (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCondition ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_partList_2E_element::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_partList_2E_element::reader_mEndOfPartLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfPartLocation ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @partList.element type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_partList_2E_element ("partList.element",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_partList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_partList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_partList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_partList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_partList_2E_element GALGAS_partList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_partList_2E_element result ;
  const GALGAS_partList_2E_element * p = (const GALGAS_partList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_partList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "partList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element::GALGAS_interruptDefinitionList_2E_element (void) :
mAttribute_mInterruptName (),
mAttribute_mFastReturn (),
mAttribute_mInstructionList (),
mAttribute_mEndOfInterruptLocation () {
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element::~ GALGAS_interruptDefinitionList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element::GALGAS_interruptDefinitionList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_bool & inOperand1,
                                                                                      const GALGAS_instructionList & inOperand2,
                                                                                      const GALGAS_location & inOperand3) :
mAttribute_mInterruptName (inOperand0),
mAttribute_mFastReturn (inOperand1),
mAttribute_mInstructionList (inOperand2),
mAttribute_mEndOfInterruptLocation (inOperand3) {
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element GALGAS_interruptDefinitionList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                      const GALGAS_bool & inOperand1,
                                                                                                      const GALGAS_instructionList & inOperand2,
                                                                                                      const GALGAS_location & inOperand3 
                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_interruptDefinitionList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result = GALGAS_interruptDefinitionList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_interruptDefinitionList_2E_element::objectCompare (const GALGAS_interruptDefinitionList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mInterruptName.objectCompare (inOperand.mAttribute_mInterruptName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFastReturn.objectCompare (inOperand.mAttribute_mFastReturn) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInstructionList.objectCompare (inOperand.mAttribute_mInstructionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEndOfInterruptLocation.objectCompare (inOperand.mAttribute_mEndOfInterruptLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_interruptDefinitionList_2E_element::isValid (void) const {
  return mAttribute_mInterruptName.isValid () && mAttribute_mFastReturn.isValid () && mAttribute_mInstructionList.isValid () && mAttribute_mEndOfInterruptLocation.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList_2E_element::drop (void) {
  mAttribute_mInterruptName.drop () ;
  mAttribute_mFastReturn.drop () ;
  mAttribute_mInstructionList.drop () ;
  mAttribute_mEndOfInterruptLocation.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_interruptDefinitionList_2E_element::description (C_String & ioString,
                                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @interruptDefinitionList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mInterruptName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFastReturn.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInstructionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEndOfInterruptLocation.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_interruptDefinitionList_2E_element::reader_mInterruptName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInterruptName ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_interruptDefinitionList_2E_element::reader_mFastReturn (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFastReturn ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_interruptDefinitionList_2E_element::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_interruptDefinitionList_2E_element::reader_mEndOfInterruptLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfInterruptLocation ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @interruptDefinitionList.element type                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_interruptDefinitionList_2E_element ("interruptDefinitionList.element",
                                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_interruptDefinitionList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_interruptDefinitionList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_interruptDefinitionList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_interruptDefinitionList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_interruptDefinitionList_2E_element GALGAS_interruptDefinitionList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                    C_Compiler * inCompiler,
                                                                                                    const GALGAS_location & inErrorLocation
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_interruptDefinitionList_2E_element result ;
  const GALGAS_interruptDefinitionList_2E_element * p = (const GALGAS_interruptDefinitionList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_interruptDefinitionList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "interruptDefinitionList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element::GALGAS_routineDefinitionList_2E_element (void) :
mAttribute_mRoutineName (),
mAttribute_mRequiredBank (),
mAttribute_mReturnedBank (),
mAttribute_mPreservesBank (),
mAttribute_mIsNoReturn (),
mAttribute_mInstructionList (),
mAttribute_mEndOfRoutineLocation () {
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element::~ GALGAS_routineDefinitionList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element::GALGAS_routineDefinitionList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_luint & inOperand1,
                                                                                  const GALGAS_luint & inOperand2,
                                                                                  const GALGAS_bool & inOperand3,
                                                                                  const GALGAS_bool & inOperand4,
                                                                                  const GALGAS_instructionList & inOperand5,
                                                                                  const GALGAS_location & inOperand6) :
mAttribute_mRoutineName (inOperand0),
mAttribute_mRequiredBank (inOperand1),
mAttribute_mReturnedBank (inOperand2),
mAttribute_mPreservesBank (inOperand3),
mAttribute_mIsNoReturn (inOperand4),
mAttribute_mInstructionList (inOperand5),
mAttribute_mEndOfRoutineLocation (inOperand6) {
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element GALGAS_routineDefinitionList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                  const GALGAS_luint & inOperand1,
                                                                                                  const GALGAS_luint & inOperand2,
                                                                                                  const GALGAS_bool & inOperand3,
                                                                                                  const GALGAS_bool & inOperand4,
                                                                                                  const GALGAS_instructionList & inOperand5,
                                                                                                  const GALGAS_location & inOperand6 
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_routineDefinitionList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_routineDefinitionList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_routineDefinitionList_2E_element::objectCompare (const GALGAS_routineDefinitionList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mRoutineName.objectCompare (inOperand.mAttribute_mRoutineName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredBank.objectCompare (inOperand.mAttribute_mRequiredBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mReturnedBank.objectCompare (inOperand.mAttribute_mReturnedBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPreservesBank.objectCompare (inOperand.mAttribute_mPreservesBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsNoReturn.objectCompare (inOperand.mAttribute_mIsNoReturn) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInstructionList.objectCompare (inOperand.mAttribute_mInstructionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEndOfRoutineLocation.objectCompare (inOperand.mAttribute_mEndOfRoutineLocation) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_routineDefinitionList_2E_element::isValid (void) const {
  return mAttribute_mRoutineName.isValid () && mAttribute_mRequiredBank.isValid () && mAttribute_mReturnedBank.isValid () && mAttribute_mPreservesBank.isValid () && mAttribute_mIsNoReturn.isValid () && mAttribute_mInstructionList.isValid () && mAttribute_mEndOfRoutineLocation.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList_2E_element::drop (void) {
  mAttribute_mRoutineName.drop () ;
  mAttribute_mRequiredBank.drop () ;
  mAttribute_mReturnedBank.drop () ;
  mAttribute_mPreservesBank.drop () ;
  mAttribute_mIsNoReturn.drop () ;
  mAttribute_mInstructionList.drop () ;
  mAttribute_mEndOfRoutineLocation.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDefinitionList_2E_element::description (C_String & ioString,
                                                           const PMSInt32 inIndentation) const {
  ioString << "<struct @routineDefinitionList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mRoutineName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mReturnedBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPreservesBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsNoReturn.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInstructionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEndOfRoutineLocation.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_routineDefinitionList_2E_element::reader_mRoutineName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRoutineName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDefinitionList_2E_element::reader_mRequiredBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredBank ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDefinitionList_2E_element::reader_mReturnedBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mReturnedBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDefinitionList_2E_element::reader_mPreservesBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreservesBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDefinitionList_2E_element::reader_mIsNoReturn (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsNoReturn ;
}

//---------------------------------------------------------------------------*

GALGAS_instructionList GALGAS_routineDefinitionList_2E_element::reader_mInstructionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInstructionList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_routineDefinitionList_2E_element::reader_mEndOfRoutineLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfRoutineLocation ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @routineDefinitionList.element type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineDefinitionList_2E_element ("routineDefinitionList.element",
                                                         NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineDefinitionList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineDefinitionList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineDefinitionList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineDefinitionList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDefinitionList_2E_element GALGAS_routineDefinitionList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler,
                                                                                                const GALGAS_location & inErrorLocation
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_routineDefinitionList_2E_element result ;
  const GALGAS_routineDefinitionList_2E_element * p = (const GALGAS_routineDefinitionList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineDefinitionList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "routineDefinitionList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element::GALGAS_routineDeclarationList_2E_element (void) :
mAttribute_mRoutineName (),
mAttribute_mRequiredBank (),
mAttribute_mReturnedBank (),
mAttribute_mPreservesBank (),
mAttribute_mIsNoReturn () {
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element::~ GALGAS_routineDeclarationList_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element::GALGAS_routineDeclarationList_2E_element (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_luint & inOperand1,
                                                                                    const GALGAS_luint & inOperand2,
                                                                                    const GALGAS_bool & inOperand3,
                                                                                    const GALGAS_bool & inOperand4) :
mAttribute_mRoutineName (inOperand0),
mAttribute_mRequiredBank (inOperand1),
mAttribute_mReturnedBank (inOperand2),
mAttribute_mPreservesBank (inOperand3),
mAttribute_mIsNoReturn (inOperand4) {
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element GALGAS_routineDeclarationList_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                    const GALGAS_luint & inOperand1,
                                                                                                    const GALGAS_luint & inOperand2,
                                                                                                    const GALGAS_bool & inOperand3,
                                                                                                    const GALGAS_bool & inOperand4 
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_routineDeclarationList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_routineDeclarationList_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_routineDeclarationList_2E_element::objectCompare (const GALGAS_routineDeclarationList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mRoutineName.objectCompare (inOperand.mAttribute_mRoutineName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRequiredBank.objectCompare (inOperand.mAttribute_mRequiredBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mReturnedBank.objectCompare (inOperand.mAttribute_mReturnedBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPreservesBank.objectCompare (inOperand.mAttribute_mPreservesBank) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIsNoReturn.objectCompare (inOperand.mAttribute_mIsNoReturn) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_routineDeclarationList_2E_element::isValid (void) const {
  return mAttribute_mRoutineName.isValid () && mAttribute_mRequiredBank.isValid () && mAttribute_mReturnedBank.isValid () && mAttribute_mPreservesBank.isValid () && mAttribute_mIsNoReturn.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList_2E_element::drop (void) {
  mAttribute_mRoutineName.drop () ;
  mAttribute_mRequiredBank.drop () ;
  mAttribute_mReturnedBank.drop () ;
  mAttribute_mPreservesBank.drop () ;
  mAttribute_mIsNoReturn.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_routineDeclarationList_2E_element::description (C_String & ioString,
                                                            const PMSInt32 inIndentation) const {
  ioString << "<struct @routineDeclarationList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mRoutineName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRequiredBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mReturnedBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPreservesBank.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIsNoReturn.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_routineDeclarationList_2E_element::reader_mRoutineName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRoutineName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDeclarationList_2E_element::reader_mRequiredBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRequiredBank ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_routineDeclarationList_2E_element::reader_mReturnedBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mReturnedBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDeclarationList_2E_element::reader_mPreservesBank (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPreservesBank ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_routineDeclarationList_2E_element::reader_mIsNoReturn (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIsNoReturn ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                   @routineDeclarationList.element type                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_routineDeclarationList_2E_element ("routineDeclarationList.element",
                                                          NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_routineDeclarationList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_routineDeclarationList_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_routineDeclarationList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_routineDeclarationList_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_routineDeclarationList_2E_element GALGAS_routineDeclarationList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler,
                                                                                                  const GALGAS_location & inErrorLocation
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_routineDeclarationList_2E_element result ;
  const GALGAS_routineDeclarationList_2E_element * p = (const GALGAS_routineDeclarationList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_routineDeclarationList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "routineDeclarationList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


