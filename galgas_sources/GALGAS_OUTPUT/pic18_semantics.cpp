//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 19th, 2010, at 16h38'2"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "pic18_build_listing_of_generated_code"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_build_listing_of_generated_code (C_Compiler & inLexique,
                                const GGS_ipic18_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_ioListFileContents
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_build_listing_of_generated_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (22)) ;
  GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_1201 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_1201 = NULL ;
    while (((operand_1201 = enumerator_1201.nextObject ()))) {
      macroValidPointer (operand_1201) ;
      { typeCategoryMethod__ipic18_instruction__enterLabelAtAddress method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (operand_1201->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_1201->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (25)) ;
        }
      }
    }
  }
  var_cas_ioListFileContents.appendCString ("*******************************************************************************\n") ;
  var_cas_ioListFileContents.appendCString ("*                              GENERATED CODE                                 *\n") ;
  var_cas_ioListFileContents.appendCString ("*******************************************************************************\n"
    "\n") ;
  var_cas_ioListFileContents.appendCString (" Line  Address  Code      Assembly\n") ;
  GGS_uint  var_cas_bccLabelIndex = GGS_uint (0U) ;
  var_cas_currentAddress = GGS_uint (0U) ;
  {
      GGS_uint var_cas_idx (true, 0) ;
    GGS_ipic18_instructionList::cEnumerator enumerator_1770 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_1770 = NULL ;
    while (((operand_1770 = enumerator_1770.nextObject ()))) {
      macroValidPointer (operand_1770) ;
      GGS_stringlist  var_cas_lineList = GGS_stringlist ::constructor_emptyList () ;
      { typeCategoryMethod__ipic18_instruction__buildAssemblyCode method = findCategoryMethod__ipic18_instruction__buildAssemblyCode (operand_1770->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_1770->mInstruction (HERE), var_cas_lineList, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (35)) ;
        }
      }
      GGS_emittedCodeList  var_cas_code = GGS_emittedCodeList ::constructor_emptyList () ;
      { typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (operand_1770->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_1770->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_code COMMA_SOURCE_FILE_AT_LINE (37)) ;
        }
      }
      GGS_uint _variant_2137 = var_cas_lineList.reader_length () ;
      GGS_bool _condition_2137 (_variant_2137.isBuilt (), true) ;
      while (_condition_2137.isBuiltAndTrue ()) {
        _condition_2137 = (var_cas_lineList.reader_length ()).operator_strictSup (var_cas_code.reader_length ()) ;
        if (_condition_2137.isBuiltAndTrue ()) {
          if (_variant_2137.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (41)) ;
            _condition_2137 = GGS_bool (false) ;
          }else{
            _variant_2137.decrement_operation (inLexique COMMA_HERE) ;
            var_cas_code.addAssign_operation (GGS_uintlist ::constructor_emptyList ()) ;
          }
        }
      }
      const GGS_bool cond_2354 = (var_cas_lineList.reader_length ()).operator_isNotEqual (var_cas_code.reader_length ()) ;
      if (cond_2354.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("internal error for listing line ")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" : "))).operator_concat (var_cas_lineList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)))).operator_concat (GGS_string (" != "))).operator_concat (var_cas_code.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (45)) ;
      }
      {
        GGS_stringlist::cEnumerator enumerator_2380 (var_cas_lineList, true) ;
        const GGS_stringlist::cElement * operand_2380 = NULL ;
        GGS_emittedCodeList::cEnumerator enumerator_2386 (var_cas_code, true) ;
        const GGS_emittedCodeList::cElement * operand_2386 = NULL ;
        while (((operand_2380 = enumerator_2380.nextObject ()))
            && ((operand_2386 = enumerator_2386.nextObject ()))) {
          macroValidPointer (operand_2380) ;
          macroValidPointer (operand_2386) ;
          GGS_string var_cas_codeString = GGS_string ("") ;
          {
            GGS_uintlist::cEnumerator enumerator_2442 (operand_2386->mCode, true) ;
            const GGS_uintlist::cElement * operand_2442 = NULL ;
            while (((operand_2442 = enumerator_2442.nextObject ()))) {
              macroValidPointer (operand_2442) ;
              var_cas_codeString.dotAssign_operation (operand_2442->mValue.reader_xString (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_stringByLeftPadding (GGS_uint (4U), GGS_char (TO_UNICODE ('0')))) ;
              var_cas_codeString.appendCString (" ") ;
            }
          }
          var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_stringByLeftPadding (GGS_uint (5U), GGS_char (TO_UNICODE (' ')))) ;
          var_cas_ioListFileContents.appendCString ("  ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_xString (inLexique COMMA_SOURCE_FILE_AT_LINE (52)).reader_stringByLeftPadding (GGS_uint (6U), GGS_char (TO_UNICODE ('0')))) ;
          var_cas_ioListFileContents.appendCString (" : ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_codeString.reader_stringByRightPadding (GGS_uint (10U), GGS_char (TO_UNICODE (' ')))) ;
          var_cas_ioListFileContents.dotAssign_operation (operand_2380->mValue) ;
          var_cas_ioListFileContents.appendCString ("\n") ;
          var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, operand_2386->mCode.reader_length ().multiply_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) ;
        }
      }
      var_cas_idx.mValue ++ ;
    }
  }
  var_cas_ioListFileContents.appendCString ("\n"
    "*******************************************************************************\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_build_listing_of_generated_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "pic18_analyze"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_analyze (C_Compiler & inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_3962 = (var_cas_sourceFileBaseName).operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (70)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
  if (cond_3962.isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (71)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the program name ('")).operator_concat (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (71)))).operator_concat (GGS_string ("') should be identical to the file base name '"))).operator_concat (var_cas_sourceFileBaseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  GGS_string var_cas_listFileContents = GGS_string ("") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  GGS_ramBankTable  var_cas_ramBank ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForUserProgramImplementation ;
  GGS_luint  var_cas_bootloaderReservedROMsize ;
  GGS_registerTable  var_cas_registerTable ;
  switch (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (86)).enumValue ()) {
  case GGS_programKind::enum_regularProgram:
    {
    ::routine_parseDeviceDefinition (inLexique,  var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (88)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (88)) ;
    switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).enumValue ()) {
    case GGS_processorType::enum_pic18_60:
      {
      var_cas_accessBankSplitOffset = GGS_uint (96U) ;
      }
      break ;
    case GGS_processorType::enum_pic18_80:
      {
      var_cas_accessBankSplitOffset = GGS_uint (128U) ;
      }
      break ;
    case GGS_processorType::enum_midrange:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::enum_baseline:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (93)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (94)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::kNotBuilt:
      break ;
    }
    var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
    var_cas_bootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
    var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderReservedROMsize = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (102)) ;
    }
    break ;
  case GGS_programKind::enum_bootloaderProgram:
    {
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_piccolo_5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (106)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_userRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (106)) ;
    }
    {
      GGS_ramBankTable::cEnumerator enumerator_6696 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_6696 = NULL ;
      while (((operand_6696 = enumerator_6696.nextObject ()))) {
        macroValidPointer (operand_6696) ;
        var_cas_ramBank.modifier_setMFirstFreeAddressForKey (inLexique, operand_6696->mInfo.mFirstAddress, operand_6696->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (117)) ;
      }
    }
    }
    break ;
  case GGS_programKind::enum_userProgram:
    {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_piccolo_5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (120)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_userRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (120)) ;
    }
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    }
    break ;
  case GGS_programKind::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_highInterruptIsFast = GGS_bool (false) ;
  GGS_bool var_cas_hasLowInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_lowInterruptIsFast = GGS_bool (false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_7696 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (138)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_7696 = NULL ;
    while (((operand_7696 = enumerator_7696.nextObject ()))) {
      macroValidPointer (operand_7696) ;
      const GGS_bool cond_7914 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (139))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (139))) ;
      if (cond_7914.isBuiltAndTrue ()) {
        operand_7696->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("interrupt routine is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (141)) ;
      }
      const GGS_bool cond_8176 = (operand_7696->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142))).operator_isEqual (GGS_string ("high")) ;
      if (cond_8176.isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_7696->mFastReturn ;
        const GGS_bool cond_8128 = var_cas_hasHighInterrupt ;
        if (cond_8128.isBuiltAndTrue ()) {
          operand_7696->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (146)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true) ;
      }else if (cond_8176.isBuiltAndFalse ()) {
        const GGS_bool cond_8420 = (operand_7696->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148))).operator_isEqual (GGS_string ("low")) ;
        if (cond_8420.isBuiltAndTrue ()) {
          var_cas_lowInterruptIsFast = operand_7696->mFastReturn ;
          const GGS_bool cond_8374 = var_cas_hasLowInterrupt ;
          if (cond_8374.isBuiltAndTrue ()) {
            operand_7696->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (152)) ;
          }
          var_cas_hasLowInterrupt = GGS_bool (true) ;
        }else if (cond_8420.isBuiltAndFalse ()) {
          operand_7696->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (156)) ;
        }
      }
      const GGS_bool cond_8675 = (var_cas_highInterruptIsFast).operator_and (var_cas_lowInterruptIsFast) ;
      if (cond_8675.isBuiltAndTrue ()) {
        operand_7696->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  const GGS_bool cond_9111 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (163))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (163))) ;
  if (cond_9111.isBuiltAndTrue ()) {
    {
      GGS_configDefinitionList::cEnumerator enumerator_8883 (var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), true) ;
      const GGS_configDefinitionList::cElement * operand_8883 = NULL ;
      while (((operand_8883 = enumerator_8883.nextObject ()))) {
        macroValidPointer (operand_8883) ;
        operand_8883->mDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("configuration is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (166)) ;
      }
    }
    var_cas_actualConfigurationMap = GGS_actualConfigurationMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (167)) ;
  }else if (cond_9111.isBuiltAndFalse ()) {
    ::routine_buildConfig (inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (170)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (171)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (inLexique COMMA_SOURCE_FILE_AT_LINE (172)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (169)) ;
  }
  ::routine_analyze_ram_sections (inLexique,  GGS_string ("DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (180)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (182)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (178)) ;
  const GGS_bool cond_10696 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (187))).operator_isEqual (GGS_programKind::constructor_bootloaderProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
  if (cond_10696.isBuiltAndTrue ()) {
    {
      GGS_ramBankTable::cEnumerator enumerator_9800 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_9800 = NULL ;
      while (((operand_9800 = enumerator_9800.nextObject ()))) {
        macroValidPointer (operand_9800) ;
        const GGS_bool cond_10393 = var_cas_bootloaderReservedRAMmap.reader_hasKey (operand_9800->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
        if (cond_10393.isBuiltAndTrue ()) {
          GGS_luint  var_cas_bootloaderReservedSize ;
          if (var_cas_bootloaderReservedRAMmap.isBuilt ()) {
            var_cas_bootloaderReservedRAMmap (HERE)->method_searchKey (inLexique, operand_9800->mKey, var_cas_bootloaderReservedSize COMMA_SOURCE_FILE_AT_LINE (191)) ;
          }
          const GGS_bool cond_10376 = (operand_9800->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_9800->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (192))).operator_strictSup (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
          if (cond_10376.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("for '")).operator_concat (operand_9800->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_9800->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_9800->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (194)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves "))).operator_concat (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196)))).operator_concat (GGS_string (" byte(s)")) COMMA_SOURCE_FILE_AT_LINE (198)) ;
          }
        }else if (cond_10393.isBuiltAndFalse ()) {
          const GGS_bool cond_10667 = (operand_9800->mInfo.mFirstFreeAddress).operator_strictSup (operand_9800->mInfo.mFirstAddress) ;
          if (cond_10667.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '")).operator_concat (operand_9800->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_9800->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_9800->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (201)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves no space")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
          }
        }
      }
    }
  }
  GGS_ipic18_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_ipic18_assembly_instruction_list (inLexique,  var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (209)),  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (210)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (210)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (210)),  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,  var_cas_userRoutineDeclarationListForBootloaderImplementation,  var_cas_bootloaderReservedROMsize,  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,  var_cas_userRoutineDeclarationListForUserProgramImplementation,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (208)) ;
  const GGS_bool cond_11682 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (225))).operator_isEqual (GGS_uint (0U))).operator_and (gOption_piccolo_5F_options_performOptimizations.reader_value ()) ;
  if (cond_11682.isBuiltAndTrue ()) {
    ::routine_performOptimizations (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (226)) ;
  }
  const GGS_bool cond_11913 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (229))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_11913.isBuiltAndTrue ()) {
    ::routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (230)) ;
  }
  const GGS_bool cond_14432 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_14432.isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_ipic18_binary_code (inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (238)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (238)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (236)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (243)) ;
    GGS_string var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_bool automatic_var_12422_0 ;
    if (var_cas_contents.isBuilt ()) {
      var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_12422_0 COMMA_SOURCE_FILE_AT_LINE (245)) ;
    }
    const GGS_bool cond_13003 = gOption_piccolo_5F_options_output_5F_C_5F_Array.reader_value () ;
    if (cond_13003.isBuiltAndTrue ()) {
      const GGS_string var_cas_baseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
      if (var_cas_baseName.isBuilt ()) {
        ::routine_get_C_ArrayImplementation (inLexique,  var_cas_baseName,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (248)) ;
      }
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".c")) ;
      GGS_bool automatic_var_12792_0 ;
      if (var_cas_contents.isBuilt ()) {
        var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_12792_0 COMMA_SOURCE_FILE_AT_LINE (250)) ;
      }
      if (var_cas_baseName.isBuilt ()) {
        ::routine_get_C_ArrayHeader (inLexique,  var_cas_baseName,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (251)) ;
      }
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".h")) ;
      GGS_bool automatic_var_12993_0 ;
      if (var_cas_contents.isBuilt ()) {
        var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_12993_0 COMMA_SOURCE_FILE_AT_LINE (253)) ;
      }
    }
    const GGS_bool cond_13838 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
    if (cond_13838.isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage = ((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string (" bytes;")) ;
      var_cas_verboseMessage.appendCString (" used: ") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258))) ;
      var_cas_verboseMessage.appendCString (" bytes (") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (259)).divide_operation (inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (259)) COMMA_SOURCE_FILE_AT_LINE (259)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
      var_cas_verboseMessage.appendCString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_13394 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_13394 = NULL ;
        while (((operand_13394 = enumerator_13394.nextObject ()))) {
          macroValidPointer (operand_13394) ;
          GGS_uint  var_cas_bankSize = operand_13394->mInfo.mLastAddressPlusOne.substract_operation (inLexique, operand_13394->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (261)) ;
          GGS_uint  var_cas_usedSize = operand_13394->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_13394->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (262)) ;
          var_cas_verboseMessage.appendCString ("  RAM bank '") ;
          var_cas_verboseMessage.dotAssign_operation (operand_13394->mKey) ;
          var_cas_verboseMessage.appendCString ("': ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_bankSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (264))) ;
          var_cas_verboseMessage.appendCString (" bytes, used ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (265))) ;
          var_cas_verboseMessage.appendCString (" bytes (") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (266)).divide_operation (inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
          var_cas_verboseMessage.appendCString ("%).\n") ;
        }
      }
      inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (268)) ;
    }
    const GGS_bool cond_14420 = gOption_piccolo_5F_options_generateAssembly.reader_value () ;
    if (cond_14420.isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_pic18_build_assembly_code (inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (275)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (273)) ;
      GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
      GGS_bool automatic_var_14410_0 ;
      if (var_cas_assemblyCode.isBuilt ()) {
        var_cas_assemblyCode (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_asmDestinationFile, automatic_var_14410_0 COMMA_SOURCE_FILE_AT_LINE (282)) ;
      }
    }
  }else if (cond_14432.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (286)) ;
    GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (288)) ;
  }
  const GGS_bool cond_15222 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_15222.isBuiltAndTrue ()) {
    const GGS_bool cond_15055 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_15055.isBuiltAndTrue ()) {
      ::routine_pic18_build_listing_of_generated_code (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (293)) ;
    }
    GGS_string var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".list")) ;
    GGS_bool automatic_var_15214_0 ;
    if (var_cas_listFileContents.isBuilt ()) {
      var_cas_listFileContents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_listFile, automatic_var_15214_0 COMMA_SOURCE_FILE_AT_LINE (299)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

