//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     december 31th, 2008, at 16h56'2"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "pic18_analyze"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (25)) ;
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  GGS_ramBankTable  var_cas_ramBank ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationList ;
  GGS_registerTable  var_cas_registerTable ;
  switch (var_cas_inPiccoloModel.reader_mProgramKind (_inLexique COMMA_SOURCE_FILE_AT_LINE (34)).enumValue ()) {
  case GGS_programKind::enum_regularProgram:
    {
    ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (36)) ;
    switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (37)).enumValue ()) {
    case GGS_processorType::enum_pic18_60:
      {
      var_cas_accessBankSplitOffset = GGS_uint (true, 96U) ;
      }
      break ;
    case GGS_processorType::enum_pic18_80:
      {
      var_cas_accessBankSplitOffset = GGS_uint (true, 128U) ;
      }
      break ;
    case GGS_processorType::enum_midrange:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (_inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (41)) ;
      var_cas_accessBankSplitOffset._drop () ;
      }
      break ;
    case GGS_processorType::enum_baseline:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (42)) ;
      var_cas_accessBankSplitOffset._drop () ;
      }
      break ;
    case GGS_processorType::kNotBuilt:
      break ;
    }
    var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
    var_cas_bootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
    var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (45)) ;
    var_cas_bootloaderRoutineDeclarationList = GGS_routineDeclarationList ::constructor_emptyList () ;
    }
    break ;
  case GGS_programKind::enum_bootloaderProgram:
    {
    piccolo_grammar::_performSourceFileParsing_importBootloaderSpecification (_inLexique,
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (_inLexique COMMA_SOURCE_FILE_AT_LINE (48)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationList
                                    COMMA_SOURCE_FILE_AT_LINE (48)) ;
    {
      GGS_ramBankTable::cEnumerator enumerator_3188 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_3188 = NULL ;
      while (((operand_3188 = enumerator_3188.nextObject ()))) {
        macroValidPointer (operand_3188) ;
        var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, operand_3188->mInfo.mFirstAddress, operand_3188->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)) ;
      }
    }
    }
    break ;
  case GGS_programKind::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_highInterruptIsFast ;
  var_cas_highInterruptIsFast = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_lowInterruptIsFast ;
  var_cas_lowInterruptIsFast = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_3507 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_3507 = NULL ;
    while (((operand_3507 = enumerator_3507.nextObject ()))) {
      macroValidPointer (operand_3507) ;
      if (((operand_3507->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_3507->mFastReturn ;
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_3507->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (71)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_3507->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (73)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        var_cas_lowInterruptIsFast = operand_3507->mFastReturn ;
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_3507->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (77)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_3507->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (81)) ;
      }
      if (((var_cas_highInterruptIsFast)._operator_and (var_cas_lowInterruptIsFast)).isBuiltAndTrue ()) {
        operand_3507->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (84)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (_inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (88)) ;
  ::routine_analyze_ram_sections (_inLexique,  GGS_string (true, "DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (96)) ;
  if (((var_cas_inPiccoloModel.reader_mProgramKind (_inLexique COMMA_SOURCE_FILE_AT_LINE (105)))._operator_isEqual (GGS_programKind::constructor_bootloaderProgram (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    {
      GGS_ramBankTable::cEnumerator enumerator_5094 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_5094 = NULL ;
      while (((operand_5094 = enumerator_5094.nextObject ()))) {
        macroValidPointer (operand_5094) ;
        if ((var_cas_bootloaderReservedRAMmap.reader_hasKey (_inLexique, operand_5094->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (107))).isBuiltAndTrue ()) {
          GGS_luint  var_cas_bootloaderReservedSize ;
          const GGS_bootloaderReservedRAMmap  _temp_5243 = var_cas_bootloaderReservedRAMmap ;
          if (_temp_5243._isBuilt ()) {
            _temp_5243 (HERE)->method_searchKey (_inLexique, operand_5094->mKey, var_cas_bootloaderReservedSize COMMA_SOURCE_FILE_AT_LINE (109)) ;
          }
          if (((operand_5094->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_5094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (110)))._operator_strictSup (var_cas_bootloaderReservedSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (110)))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "for '"))._operator_concat (operand_5094->mKey))._operator_concat (GGS_string (true, "' RAM bank, the bootloader implementation declares ")))._operator_concat (operand_5094->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_5094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (112)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))))._operator_concat (GGS_string (true, " byte(s), althought the bootloader specification reserves ")))._operator_concat (var_cas_bootloaderReservedSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (114)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))))._operator_concat (GGS_string (true, " byte(s)")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }else if (((operand_5094->mInfo.mFirstFreeAddress)._operator_strictSup (operand_5094->mInfo.mFirstAddress)).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "for '"))._operator_concat (operand_5094->mKey))._operator_concat (GGS_string (true, "' RAM bank, the bootloader implementation declares ")))._operator_concat (operand_5094->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_5094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (119)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119))))._operator_concat (GGS_string (true, " byte(s), althought the bootloader specification reserves no space")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
        }
      }
    }
  }
  GGS_ipic18_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_ipic18_assembly_instruction_list (_inLexique,  var_cas_bootloaderRoutineDeclarationList,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (126)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (137))))).isBuiltAndTrue ()) {
    ::routine_performOptimizations (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    ::routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (145)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (146)))._operator_concat (GGS_string (true, ".list")) ;
    GGS_bool automatic_var_0 ;
    const GGS_string _temp_7089 = var_cas_listFileContents ;
    if (_temp_7089._isBuilt ()) {
      _temp_7089 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (147)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_ipic18_binary_code (_inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (155)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (153)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (160)) ;
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)))._operator_concat (GGS_string (true, ".hex")) ;
    GGS_bool automatic_var_1 ;
    const GGS_string _temp_7602 = var_cas_contents ;
    if (_temp_7602._isBuilt ()) {
      _temp_7602 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_hexDestinationFile, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (162)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (164)))).isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage ;
      var_cas_verboseMessage = ((GGS_string (true, "  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (165))))._operator_concat (GGS_string (true, " bytes;")) ;
      var_cas_verboseMessage.writeString (" used: ") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (166))) ;
      var_cas_verboseMessage.writeString (" bytes (") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (167))._divide_operation (_inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)) COMMA_SOURCE_FILE_AT_LINE (167)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
      var_cas_verboseMessage.writeString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_8008 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_8008 = NULL ;
        while (((operand_8008 = enumerator_8008.nextObject ()))) {
          macroValidPointer (operand_8008) ;
          GGS_uint  var_cas_bankSize ;
          var_cas_bankSize = operand_8008->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, operand_8008->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (169)) ;
          GGS_uint  var_cas_usedSize ;
          var_cas_usedSize = operand_8008->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_8008->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (170)) ;
          var_cas_verboseMessage.writeString ("  RAM bank '") ;
          var_cas_verboseMessage._dotAssign_operation (operand_8008->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (171))) ;
          var_cas_verboseMessage.writeString ("': ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_bankSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (172))) ;
          var_cas_verboseMessage.writeString (" bytes, used ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (173))) ;
          var_cas_verboseMessage.writeString (" bytes (") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (174))._divide_operation (_inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (174)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (174))) ;
          var_cas_verboseMessage.writeString ("%).\n") ;
        }
      }
      _inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (179)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_pic18_build_assembly_code (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (183)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (181)) ;
      GGS_string var_cas_asmDestinationFile ;
      var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)))._operator_concat (GGS_string (true, ".asm")) ;
      GGS_bool automatic_var_2 ;
      const GGS_string _temp_9002 = var_cas_assemblyCode ;
      if (_temp_9002._isBuilt ()) {
        _temp_9002 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_asmDestinationFile, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }
  }else{
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (193)))._operator_concat (GGS_string (true, ".hex")) ;
    GGS_string::class_method_deleteFileIfExists (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (194)) ;
    GGS_string var_cas_asmDestinationFile ;
    var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)))._operator_concat (GGS_string (true, ".asm")) ;
    GGS_string::class_method_deleteFileIfExists (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (196)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

