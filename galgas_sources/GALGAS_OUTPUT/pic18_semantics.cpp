//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 23th, 2010, at 16h3'25"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "pic18_build_listing_of_generated_code"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_build_listing_of_generated_code (C_Compiler & inLexique,
                                const GGS_ipic18_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_ioListFileContents
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_build_listing_of_generated_code at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_ipic18_symbolTable  var_cas_symbolTable = GGS_ipic18_symbolTable ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (30)) ;
  GGS_uint  var_cas_currentAddress = GGS_uint (0U) ;
  {
    GGS_ipic18_instructionList::cEnumerator enumerator_1495 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_1495 = NULL ;
    while (((operand_1495 = enumerator_1495.nextObject ()))) {
      macroValidPointer (operand_1495) ;
      { typeCategoryMethod__ipic18_instruction__enterLabelAtAddress method = findCategoryMethod__ipic18_instruction__enterLabelAtAddress (operand_1495->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_1495->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
        }
      }
    }
  }
  var_cas_ioListFileContents.appendCString ("*******************************************************************************\n") ;
  var_cas_ioListFileContents.appendCString ("*                              GENERATED CODE                                 *\n") ;
  var_cas_ioListFileContents.appendCString ("*******************************************************************************\n"
    "\n") ;
  var_cas_ioListFileContents.appendCString (" Line  Address  Code      Assembly\n") ;
  GGS_uint  var_cas_bccLabelIndex = GGS_uint (0U) ;
  var_cas_currentAddress = GGS_uint (0U) ;
  {
      GGS_uint var_cas_idx (true, 0) ;
    GGS_ipic18_instructionList::cEnumerator enumerator_2064 (var_cas_inInstructionList, true) ;
    const GGS_ipic18_instructionList::cElement * operand_2064 = NULL ;
    while (((operand_2064 = enumerator_2064.nextObject ()))) {
      macroValidPointer (operand_2064) ;
      GGS_stringlist  var_cas_lineList = GGS_stringlist ::constructor_emptyList () ;
      { typeCategoryMethod__ipic18_instruction__buildAssemblyCode method = findCategoryMethod__ipic18_instruction__buildAssemblyCode (operand_2064->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_2064->mInstruction (HERE), var_cas_lineList, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (43)) ;
        }
      }
      GGS_emittedCodeList  var_cas_code = GGS_emittedCodeList ::constructor_emptyList () ;
      { typeCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress method = findCategoryMethod__ipic18_instruction__generateBinaryCodeAtAddress (operand_2064->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_2064->mInstruction (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_code COMMA_SOURCE_FILE_AT_LINE (45)) ;
        }
      }
      GGS_uint _variant_2431 = var_cas_lineList.reader_length () ;
      GGS_bool _condition_2431 (_variant_2431.isBuilt (), true) ;
      while (_condition_2431.isBuiltAndTrue ()) {
        _condition_2431 = (var_cas_lineList.reader_length ()).operator_strictSup (var_cas_code.reader_length ()) ;
        if (_condition_2431.isBuiltAndTrue ()) {
          if (_variant_2431.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (49)) ;
            _condition_2431 = GGS_bool (false) ;
          }else{
            _variant_2431.decrement_operation (inLexique COMMA_HERE) ;
            var_cas_code.addAssign_operation (GGS_uintlist ::constructor_emptyList ()) ;
          }
        }
      }
      const GGS_bool cond_2648 = (var_cas_lineList.reader_length ()).operator_isNotEqual (var_cas_code.reader_length ()) ;
      if (cond_2648.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("internal error for listing line ")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (" : "))).operator_concat (var_cas_lineList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (52)))).operator_concat (GGS_string (" != "))).operator_concat (var_cas_code.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
      }
      {
        GGS_stringlist::cEnumerator enumerator_2674 (var_cas_lineList, true) ;
        const GGS_stringlist::cElement * operand_2674 = NULL ;
        GGS_emittedCodeList::cEnumerator enumerator_2680 (var_cas_code, true) ;
        const GGS_emittedCodeList::cElement * operand_2680 = NULL ;
        while (((operand_2674 = enumerator_2674.nextObject ()))
            && ((operand_2680 = enumerator_2680.nextObject ()))) {
          macroValidPointer (operand_2674) ;
          macroValidPointer (operand_2680) ;
          GGS_string var_cas_codeString = GGS_string ("") ;
          {
            GGS_uintlist::cEnumerator enumerator_2736 (operand_2680->mCode, true) ;
            const GGS_uintlist::cElement * operand_2736 = NULL ;
            while (((operand_2736 = enumerator_2736.nextObject ()))) {
              macroValidPointer (operand_2736) ;
              var_cas_codeString.dotAssign_operation (operand_2736->mValue.reader_xString (inLexique COMMA_SOURCE_FILE_AT_LINE (57)).reader_stringByLeftPadding (GGS_uint (4U), GGS_char (TO_UNICODE ('0')))) ;
              var_cas_codeString.appendCString (" ") ;
            }
          }
          var_cas_ioListFileContents.dotAssign_operation (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59)).reader_stringByLeftPadding (GGS_uint (5U), GGS_char (TO_UNICODE (' ')))) ;
          var_cas_ioListFileContents.appendCString ("  ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_currentAddress.reader_xString (inLexique COMMA_SOURCE_FILE_AT_LINE (60)).reader_stringByLeftPadding (GGS_uint (6U), GGS_char (TO_UNICODE ('0')))) ;
          var_cas_ioListFileContents.appendCString (" : ") ;
          var_cas_ioListFileContents.dotAssign_operation (var_cas_codeString.reader_stringByRightPadding (GGS_uint (10U), GGS_char (TO_UNICODE (' ')))) ;
          var_cas_ioListFileContents.dotAssign_operation (operand_2674->mValue) ;
          var_cas_ioListFileContents.appendCString ("\n") ;
          var_cas_currentAddress = var_cas_currentAddress.add_operation (inLexique, operand_2680->mCode.reader_length ().multiply_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (63)) ;
        }
      }
      var_cas_idx.mValue ++ ;
    }
  }
  var_cas_ioListFileContents.appendCString ("\n"
    "*******************************************************************************\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_build_listing_of_generated_code\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "pic18_analyze"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_analyze (C_Compiler & inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_4256 = (var_cas_sourceFileBaseName).operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78))) ;
  if (cond_4256.isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the program name ('")).operator_concat (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (79)))).operator_concat (GGS_string ("') should be identical to the file base name '"))).operator_concat (var_cas_sourceFileBaseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (81)) ;
  }
  GGS_string var_cas_listFileContents = GGS_string ("") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  GGS_ramBankTable  var_cas_ramBank ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForUserProgramImplementation ;
  GGS_luint  var_cas_bootloaderReservedROMsize ;
  GGS_registerTable  var_cas_registerTable ;
  switch (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (94)).enumValue ()) {
  case GGS_programKind::enum_regularProgram:
    {
    ::routine_parseDeviceDefinition (inLexique,  var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (96)) ;
    switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).enumValue ()) {
    case GGS_processorType::enum_pic18_60:
      {
      var_cas_accessBankSplitOffset = GGS_uint (96U) ;
      }
      break ;
    case GGS_processorType::enum_pic18_80:
      {
      var_cas_accessBankSplitOffset = GGS_uint (128U) ;
      }
      break ;
    case GGS_processorType::enum_midrange:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (100)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (101)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::enum_baseline:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (102)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::kNotBuilt:
      break ;
    }
    var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    var_cas_bootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
    var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (105)) ;
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderReservedROMsize = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (110)) ;
    }
    break ;
  case GGS_programKind::enum_bootloaderProgram:
    {
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_piccolo_5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (114)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_userRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (114)) ;
    }
    {
      GGS_ramBankTable::cEnumerator enumerator_6990 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_6990 = NULL ;
      while (((operand_6990 = enumerator_6990.nextObject ()))) {
        macroValidPointer (operand_6990) ;
        var_cas_ramBank.modifier_setMFirstFreeAddressForKey (inLexique, operand_6990->mInfo.mFirstAddress, operand_6990->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) COMMA_SOURCE_FILE_AT_LINE (125)) ;
      }
    }
    }
    break ;
  case GGS_programKind::enum_userProgram:
    {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_piccolo_5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (128)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_userRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    }
    break ;
  case GGS_programKind::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_highInterruptIsFast = GGS_bool (false) ;
  GGS_bool var_cas_hasLowInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_lowInterruptIsFast = GGS_bool (false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_7990 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (146)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_7990 = NULL ;
    while (((operand_7990 = enumerator_7990.nextObject ()))) {
      macroValidPointer (operand_7990) ;
      const GGS_bool cond_8208 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (147))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (147))) ;
      if (cond_8208.isBuiltAndTrue ()) {
        operand_7990->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("interrupt routine is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (149)) ;
      }
      const GGS_bool cond_8470 = (operand_7990->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150))).operator_isEqual (GGS_string ("high")) ;
      if (cond_8470.isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_7990->mFastReturn ;
        const GGS_bool cond_8422 = var_cas_hasHighInterrupt ;
        if (cond_8422.isBuiltAndTrue ()) {
          operand_7990->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (154)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true) ;
      }else if (cond_8470.isBuiltAndFalse ()) {
        const GGS_bool cond_8714 = (operand_7990->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("low")) ;
        if (cond_8714.isBuiltAndTrue ()) {
          var_cas_lowInterruptIsFast = operand_7990->mFastReturn ;
          const GGS_bool cond_8668 = var_cas_hasLowInterrupt ;
          if (cond_8668.isBuiltAndTrue ()) {
            operand_7990->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (160)) ;
          }
          var_cas_hasLowInterrupt = GGS_bool (true) ;
        }else if (cond_8714.isBuiltAndFalse ()) {
          operand_7990->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (164)) ;
        }
      }
      const GGS_bool cond_8969 = (var_cas_highInterruptIsFast).operator_and (var_cas_lowInterruptIsFast) ;
      if (cond_8969.isBuiltAndTrue ()) {
        operand_7990->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (167)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  const GGS_bool cond_9405 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (171))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (171))) ;
  if (cond_9405.isBuiltAndTrue ()) {
    {
      GGS_configDefinitionList::cEnumerator enumerator_9177 (var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (172)), true) ;
      const GGS_configDefinitionList::cElement * operand_9177 = NULL ;
      while (((operand_9177 = enumerator_9177.nextObject ()))) {
        macroValidPointer (operand_9177) ;
        operand_9177->mDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("configuration is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }
    }
    var_cas_actualConfigurationMap = GGS_actualConfigurationMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  }else if (cond_9405.isBuiltAndFalse ()) {
    ::routine_buildConfig (inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (178)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (179)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (inLexique COMMA_SOURCE_FILE_AT_LINE (180)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (177)) ;
  }
  ::routine_analyze_ram_sections (inLexique,  GGS_string ("DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (188)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (190)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (186)) ;
  const GGS_bool cond_10990 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (195))).operator_isEqual (GGS_programKind::constructor_bootloaderProgram (inLexique COMMA_SOURCE_FILE_AT_LINE (195))) ;
  if (cond_10990.isBuiltAndTrue ()) {
    {
      GGS_ramBankTable::cEnumerator enumerator_10094 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_10094 = NULL ;
      while (((operand_10094 = enumerator_10094.nextObject ()))) {
        macroValidPointer (operand_10094) ;
        const GGS_bool cond_10687 = var_cas_bootloaderReservedRAMmap.reader_hasKey (operand_10094->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (197))) ;
        if (cond_10687.isBuiltAndTrue ()) {
          GGS_luint  var_cas_bootloaderReservedSize ;
          if (var_cas_bootloaderReservedRAMmap.isBuilt ()) {
            var_cas_bootloaderReservedRAMmap (HERE)->method_searchKey (inLexique, operand_10094->mKey, var_cas_bootloaderReservedSize COMMA_SOURCE_FILE_AT_LINE (199)) ;
          }
          const GGS_bool cond_10670 = (operand_10094->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_10094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (200))).operator_strictSup (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (200))) ;
          if (cond_10670.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("for '")).operator_concat (operand_10094->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_10094->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_10094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (202)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves "))).operator_concat (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204)))).operator_concat (GGS_string (" byte(s)")) COMMA_SOURCE_FILE_AT_LINE (206)) ;
          }
        }else if (cond_10687.isBuiltAndFalse ()) {
          const GGS_bool cond_10961 = (operand_10094->mInfo.mFirstFreeAddress).operator_strictSup (operand_10094->mInfo.mFirstAddress) ;
          if (cond_10961.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '")).operator_concat (operand_10094->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_10094->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_10094->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (209)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (209)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves no space")) COMMA_SOURCE_FILE_AT_LINE (211)) ;
          }
        }
      }
    }
  }
  GGS_ipic18_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_ipic18_assembly_instruction_list (inLexique,  var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (217)),  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (218)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (218)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (218)),  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,  var_cas_userRoutineDeclarationListForBootloaderImplementation,  var_cas_bootloaderReservedROMsize,  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,  var_cas_userRoutineDeclarationListForUserProgramImplementation,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (216)) ;
  const GGS_bool cond_11976 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).operator_isEqual (GGS_uint (0U))).operator_and (gOption_piccolo_5F_options_performOptimizations.reader_value ()) ;
  if (cond_11976.isBuiltAndTrue ()) {
    ::routine_performOptimizations (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (234)) ;
  }
  const GGS_bool cond_12207 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (237))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_12207.isBuiltAndTrue ()) {
    ::routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (238)) ;
  }
  const GGS_bool cond_14726 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (241))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_14726.isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_ipic18_binary_code (inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (246)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (246)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (244)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (251)) ;
    GGS_string var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_bool automatic_var_12716_0 ;
    if (var_cas_contents.isBuilt ()) {
      var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_12716_0 COMMA_SOURCE_FILE_AT_LINE (253)) ;
    }
    const GGS_bool cond_13297 = gOption_piccolo_5F_options_output_5F_C_5F_Array.reader_value () ;
    if (cond_13297.isBuiltAndTrue ()) {
      const GGS_string var_cas_baseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
      if (var_cas_baseName.isBuilt ()) {
        ::routine_get_C_ArrayImplementation (inLexique,  var_cas_baseName,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (256)) ;
      }
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".c")) ;
      GGS_bool automatic_var_13086_0 ;
      if (var_cas_contents.isBuilt ()) {
        var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_13086_0 COMMA_SOURCE_FILE_AT_LINE (258)) ;
      }
      if (var_cas_baseName.isBuilt ()) {
        ::routine_get_C_ArrayHeader (inLexique,  var_cas_baseName,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (259)) ;
      }
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".h")) ;
      GGS_bool automatic_var_13287_0 ;
      if (var_cas_contents.isBuilt ()) {
        var_cas_contents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_destinationFile, automatic_var_13287_0 COMMA_SOURCE_FILE_AT_LINE (261)) ;
      }
    }
    const GGS_bool cond_14132 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
    if (cond_14132.isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage = ((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (265)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (265)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string (" bytes;")) ;
      var_cas_verboseMessage.appendCString (" used: ") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
      var_cas_verboseMessage.appendCString (" bytes (") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (267)).divide_operation (inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) COMMA_SOURCE_FILE_AT_LINE (267)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267))) ;
      var_cas_verboseMessage.appendCString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_13688 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_13688 = NULL ;
        while (((operand_13688 = enumerator_13688.nextObject ()))) {
          macroValidPointer (operand_13688) ;
          GGS_uint  var_cas_bankSize = operand_13688->mInfo.mLastAddressPlusOne.substract_operation (inLexique, operand_13688->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (269)) ;
          GGS_uint  var_cas_usedSize = operand_13688->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_13688->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (270)) ;
          var_cas_verboseMessage.appendCString ("  RAM bank '") ;
          var_cas_verboseMessage.dotAssign_operation (operand_13688->mKey) ;
          var_cas_verboseMessage.appendCString ("': ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_bankSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
          var_cas_verboseMessage.appendCString (" bytes, used ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273))) ;
          var_cas_verboseMessage.appendCString (" bytes (") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (274)).divide_operation (inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))) ;
          var_cas_verboseMessage.appendCString ("%).\n") ;
        }
      }
      inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (276)) ;
    }
    const GGS_bool cond_14714 = gOption_piccolo_5F_options_generateAssembly.reader_value () ;
    if (cond_14714.isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_pic18_build_assembly_code (inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (282)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (283)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (281)) ;
      GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
      GGS_bool automatic_var_14704_0 ;
      if (var_cas_assemblyCode.isBuilt ()) {
        var_cas_assemblyCode (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_asmDestinationFile, automatic_var_14704_0 COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
    }
  }else if (cond_14726.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (294)) ;
    GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  const GGS_bool cond_15516 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_15516.isBuiltAndTrue ()) {
    const GGS_bool cond_15349 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (300))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_15349.isBuiltAndTrue ()) {
      ::routine_pic18_build_listing_of_generated_code (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
    GGS_string var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".list")) ;
    GGS_bool automatic_var_15508_0 ;
    if (var_cas_listFileContents.isBuilt ()) {
      var_cas_listFileContents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_listFile, automatic_var_15508_0 COMMA_SOURCE_FILE_AT_LINE (307)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

