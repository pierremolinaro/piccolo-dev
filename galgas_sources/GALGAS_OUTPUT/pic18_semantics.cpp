//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     december 11th, 2008, at 12h3'16"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "pic18_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "pic18_analyze"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (18)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (19)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (19)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (20)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (20))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (26)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (26)) ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (28)).enumValue ()) {
  case GGS_processorType::enum_pic18_60:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 96U) ;
    }
    break ;
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 128U) ;
    }
    break ;
  case GGS_processorType::enum_midrange:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (32)) ;
    var_cas_accessBankSplitOffset._drop () ;
    }
    break ;
  case GGS_processorType::enum_baseline:
    {
    var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (33)) ;
    var_cas_accessBankSplitOffset._drop () ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_highInterruptIsFast ;
  var_cas_highInterruptIsFast = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_lowInterruptIsFast ;
  var_cas_lowInterruptIsFast = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_2245 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_2245 = NULL ;
    while (((operand_2245 = enumerator_2245.nextObject ()))) {
      macroValidPointer (operand_2245) ;
      if (((operand_2245->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (40)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_2245->mFastReturn ;
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_2245->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (44)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_2245->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        var_cas_lowInterruptIsFast = operand_2245->mFastReturn ;
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_2245->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (50)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_2245->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (54)) ;
      }
      if (((var_cas_highInterruptIsFast)._operator_and (var_cas_lowInterruptIsFast)).isBuiltAndTrue ()) {
        operand_2245->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (57)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (_inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (61)) ;
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_registerTable  var_cas_registerTable ;
  ::routine_analyze_ram_sections (_inLexique,  var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_ipic18_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_ipic18_assembly_instruction_list (_inLexique,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (80)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (90))))).isBuiltAndTrue ()) {
    ::routine_performOptimizations (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (91)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    ::routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (95)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListingFile" COMMA_SOURCE_FILE_AT_LINE (98)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)))._operator_concat (GGS_string (true, ".list")) ;
    GGS_bool automatic_var_0 ;
    const GGS_string _temp_4719 = var_cas_listFileContents ;
    if (_temp_4719._isBuilt ()) {
      _temp_4719 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (100)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_ipic18_binary_code (_inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (106)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (113)) ;
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (114)))._operator_concat (GGS_string (true, ".hex")) ;
    GGS_bool automatic_var_1 ;
    const GGS_string _temp_5232 = var_cas_contents ;
    if (_temp_5232._isBuilt ()) {
      _temp_5232 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_hexDestinationFile, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (115)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (117)))).isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage ;
      var_cas_verboseMessage = ((GGS_string (true, "  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (118))))._operator_concat (GGS_string (true, " bytes;")) ;
      var_cas_verboseMessage.writeString (" used: ") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119))) ;
      var_cas_verboseMessage.writeString (" bytes (") ;
      var_cas_verboseMessage._dotAssign_operation (var_cas_usedROMsize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (120))._divide_operation (_inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (120)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (120)) COMMA_SOURCE_FILE_AT_LINE (120)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (120))) ;
      var_cas_verboseMessage.writeString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5638 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_5638 = NULL ;
        while (((operand_5638 = enumerator_5638.nextObject ()))) {
          macroValidPointer (operand_5638) ;
          GGS_uint  var_cas_bankSize ;
          var_cas_bankSize = operand_5638->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, operand_5638->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (122)) ;
          GGS_uint  var_cas_usedSize ;
          var_cas_usedSize = operand_5638->mInfo.mFirstFreeAddress._substract_operation (_inLexique, operand_5638->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (123)) ;
          var_cas_verboseMessage.writeString ("  RAM bank '") ;
          var_cas_verboseMessage._dotAssign_operation (operand_5638->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (124))) ;
          var_cas_verboseMessage.writeString ("': ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_bankSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (125))) ;
          var_cas_verboseMessage.writeString (" bytes, used ") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (126))) ;
          var_cas_verboseMessage.writeString (" bytes (") ;
          var_cas_verboseMessage._dotAssign_operation (var_cas_usedSize._multiply_operation (_inLexique, GGS_uint (true, 100U) COMMA_SOURCE_FILE_AT_LINE (127))._divide_operation (_inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (127)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
          var_cas_verboseMessage.writeString ("%).\n") ;
        }
      }
      _inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (129)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (132)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_pic18_build_assembly_code (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (136)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (134)) ;
      GGS_string var_cas_asmDestinationFile ;
      var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_concat (GGS_string (true, ".asm")) ;
      GGS_bool automatic_var_2 ;
      const GGS_string _temp_6632 = var_cas_assemblyCode ;
      if (_temp_6632._isBuilt ()) {
        _temp_6632 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_asmDestinationFile, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (143)) ;
      }
    }
  }else{
    GGS_string var_cas_hexDestinationFile ;
    var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (146)))._operator_concat (GGS_string (true, ".hex")) ;
    if ((var_cas_hexDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (147))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (148)) ;
    }
    GGS_string var_cas_asmDestinationFile ;
    var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (150)))._operator_concat (GGS_string (true, ".asm")) ;
    if ((var_cas_asmDestinationFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (151))).isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (_inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (152)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

