//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                        Generated by version 2.5.0                         *
//                      october 6th, 2013, at 19h5'29"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "pic18_semantics.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "piccolo_options.h"
#include "pic18_grammar.h"
#include "piccoloDevice_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

cMapElement_declaredRoutineMap::cMapElement_declaredRoutineMap (const GALGAS_lstring & inKey
                                                                COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//---------------------------------------------------------------------------*

bool cMapElement_declaredRoutineMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_declaredRoutineMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredRoutineMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_declaredRoutineMap::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredRoutineMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredRoutineMap * operand = (cMapElement_declaredRoutineMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap::GALGAS_declaredRoutineMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap::GALGAS_declaredRoutineMap (const GALGAS_declaredRoutineMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap & GALGAS_declaredRoutineMap::operator = (const GALGAS_declaredRoutineMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::constructor_mapWithMapToOverride (const GALGAS_declaredRoutineMap & inMapToOverride
                                                                                       COMMA_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  GALGAS_declaredRoutineMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::modifier_insertKey (GALGAS_lstring inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_declaredRoutineMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredRoutineMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' routine is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_declaredRoutineMap_searchKey = "the '%K' routine is not declared" ;

//---------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap::method_searchKey (GALGAS_lstring inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) performSearch (inKey,
                                                                                                       inCompiler,
                                                                                                       kSearchErrorMessage_declaredRoutineMap_searchKey
                                                                                                       COMMA_THERE) ;
  if (NULL == p) {
  }else{
    macroValidSharedObject (p, const cMapElement_declaredRoutineMap) ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_declaredRoutineMap * GALGAS_declaredRoutineMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                      const GALGAS_string & inKey
                                                                                                      COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredRoutineMap * result = (cMapElement_declaredRoutineMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_declaredRoutineMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_declaredRoutineMap * GALGAS_declaredRoutineMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                         const GALGAS_lstring & inKey
                                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_declaredRoutineMap_searchKey COMMA_THERE) ;
  cMapElement_declaredRoutineMap * result = (cMapElement_declaredRoutineMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_declaredRoutineMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_declaredRoutineMap::cEnumerator_declaredRoutineMap (const GALGAS_declaredRoutineMap & inEnumeratedObject,
                                                                const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element cEnumerator_declaredRoutineMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredRoutineMap * p = (const cMapElement_declaredRoutineMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_declaredRoutineMap) ;
  return GALGAS_declaredRoutineMap_2E_element (p->mAttribute_lkey) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredRoutineMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @declaredRoutineMap type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredRoutineMap ("declaredRoutineMap",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredRoutineMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredRoutineMap ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredRoutineMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredRoutineMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap GALGAS_declaredRoutineMap::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap result ;
  const GALGAS_declaredRoutineMap * p = (const GALGAS_declaredRoutineMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredRoutineMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredRoutineMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'pic18_analyze'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic_31__38__5F_analyze (const GALGAS_piccoloModel constinArgument_inPiccoloModel,
                                     const GALGAS_string constinArgument_inSourceFileName,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_sourceFileBaseName = constinArgument_inSourceFileName.reader_lastPathComponent (SOURCE_FILE_AT_LINE (24)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (24)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_sourceFileBaseName.objectCompare (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (25)).reader_string (SOURCE_FILE_AT_LINE (25)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (26)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the program name ('").operator_concat (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (26)).reader_string (SOURCE_FILE_AT_LINE (26)) COMMA_SOURCE_FILE_AT_LINE (26)).operator_concat (GALGAS_string ("') should be identical to the file base name '") COMMA_SOURCE_FILE_AT_LINE (27)).operator_concat (var_sourceFileBaseName COMMA_SOURCE_FILE_AT_LINE (27)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (27)) COMMA_SOURCE_FILE_AT_LINE (26)) ;
  }
  GALGAS_string var_listFileContents = GALGAS_string::makeEmptyString () ;
  GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
  GALGAS_uint var_accessBankSplitOffset ;
  GALGAS_ramBankTable var_ramBank ;
  GALGAS_bootloaderReservedRAMmap var_bootloaderReservedRAMmap ;
  GALGAS_routineDeclarationList var_bootloaderRoutineDeclarationListForBootloaderImplementation ;
  GALGAS_routineDeclarationList var_userRoutineDeclarationListForBootloaderImplementation ;
  GALGAS_routineDeclarationList var_bootloaderRoutineDeclarationListForUserProgramImplementation ;
  GALGAS_routineDeclarationList var_userRoutineDeclarationListForUserProgramImplementation ;
  GALGAS_luint var_bootloaderReservedROMsize ;
  GALGAS_registerTable var_registerTable ;
  GALGAS_string var_piccoloDeviceName ;
  if (constinArgument_inPiccoloModel.mAttribute_mProgramKind.isValid ()) {
    switch (constinArgument_inPiccoloModel.mAttribute_mProgramKind.enumValue ()) {
    case GALGAS_programKind::kNotBuilt:
      break ;
    case GALGAS_programKind::kEnum_regularProgram: {
      var_piccoloDeviceName = constinArgument_inPiccoloModel.mAttribute_mDeviceNameOrBootLoaderReference.mAttribute_string ;
      {
      routine_parseDeviceDefinition (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (45)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (45)) ;
      }
      if (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (46)).isValid ()) {
        switch (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (46)).enumValue ()) {
        case GALGAS_processorType::kNotBuilt:
          break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__36__30_: {
          var_accessBankSplitOffset = GALGAS_uint ((PMUInt32) 96U) ;
          } break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__38__30_: {
          var_accessBankSplitOffset = GALGAS_uint ((PMUInt32) 128U) ;
          } break ;
        case GALGAS_processorType::kEnum_midrange: {
          GALGAS_location location_2 (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (49)).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (49)) ;
          var_accessBankSplitOffset.drop () ; // Release error dropped variable
          } break ;
        case GALGAS_processorType::kEnum_baseline: {
          GALGAS_location location_3 (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (50)).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_3, GALGAS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (50)) ;
          var_accessBankSplitOffset.drop () ; // Release error dropped variable
          } break ;
        }
      }
      var_ramBank = var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (52)) ;
      var_bootloaderReservedRAMmap = GALGAS_bootloaderReservedRAMmap::constructor_emptyMap (SOURCE_FILE_AT_LINE (53)) ;
      var_registerTable = var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (54)) ;
      var_bootloaderRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (55)) ;
      var_userRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (56)) ;
      var_bootloaderRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (57)) ;
      var_userRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (58)) ;
      var_bootloaderReservedROMsize = GALGAS_luint::constructor_new (GALGAS_uint ((PMUInt32) 0U), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (59)) ;
      } break ;
    case GALGAS_programKind::kEnum_bootloaderProgram: {
      var_bootloaderRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (61)) ;
      var_userRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (62)) ;
      {
      cGrammar_pic_31__38__5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inCompiler, constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (63)), var_piccoloDeviceModel, var_piccoloDeviceName, var_accessBankSplitOffset, var_ramBank, var_registerTable, var_bootloaderReservedRAMmap, var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForBootloaderImplementation, var_bootloaderReservedROMsize COMMA_SOURCE_FILE_AT_LINE (63)) ;
      }
      cEnumerator_ramBankTable enumerator_4297 (var_ramBank, kEnumeration_up) ;
      while (enumerator_4297.hasCurrentObject ()) {
        {
        var_ramBank.modifier_setMFirstFreeAddressForKey (enumerator_4297.current_mFirstAddress (HERE), enumerator_4297.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (75)), inCompiler COMMA_SOURCE_FILE_AT_LINE (75)) ;
        }
        enumerator_4297.gotoNextObject () ;
      }
      } break ;
    case GALGAS_programKind::kEnum_userProgram: {
      {
      cGrammar_pic_31__38__5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inCompiler, constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (78)), var_piccoloDeviceModel, var_piccoloDeviceName, var_accessBankSplitOffset, var_ramBank, var_registerTable, var_bootloaderReservedRAMmap, var_bootloaderRoutineDeclarationListForUserProgramImplementation, var_userRoutineDeclarationListForUserProgramImplementation, var_bootloaderReservedROMsize COMMA_SOURCE_FILE_AT_LINE (78)) ;
      }
      var_bootloaderRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (89)) ;
      var_userRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (90)) ;
      } break ;
    }
  }
  GALGAS_stringset var_usedRoutineSet = function_computeUsedRoutines (constinArgument_inPiccoloModel.mAttribute_mInterruptDefinitionList, constinArgument_inPiccoloModel.mAttribute_mRoutineDefinitionList, var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForUserProgramImplementation, inCompiler COMMA_SOURCE_FILE_AT_LINE (93)) ;
  GALGAS_declaredRoutineMap var_declaredRoutineMap = GALGAS_declaredRoutineMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (99)) ;
  cEnumerator_routineDefinitionList enumerator_5555 (constinArgument_inPiccoloModel.mAttribute_mRoutineDefinitionList, kEnumeration_up) ;
  while (enumerator_5555.hasCurrentObject ()) {
    {
    var_declaredRoutineMap.modifier_insertKey (enumerator_5555.current_mRoutineName (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (101)) ;
    }
    enumerator_5555.gotoNextObject () ;
  }
  GALGAS_stringset var_unusedDeclarationUnicity = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (104)) ;
  cEnumerator_lstringlist enumerator_5777 (constinArgument_inPiccoloModel.mAttribute_mUnusedRoutineList, kEnumeration_up) ;
  while (enumerator_5777.hasCurrentObject ()) {
    const enumGalgasBool test_4 = var_declaredRoutineMap.reader_hasKey (enumerator_5777.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (106)).operator_not (SOURCE_FILE_AT_LINE (106)).boolEnum () ;
    if (kBoolTrue == test_4) {
      GALGAS_location location_5 (enumerator_5777.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_5, GALGAS_string ("the '").operator_concat (enumerator_5777.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (107)).operator_concat (GALGAS_string ("' routine is not declared") COMMA_SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (107)) ;
    }else if (kBoolFalse == test_4) {
      const enumGalgasBool test_6 = var_unusedDeclarationUnicity.reader_hasKey (enumerator_5777.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (108)).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_5777.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_7, GALGAS_string ("the '").operator_concat (enumerator_5777.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (109)) COMMA_SOURCE_FILE_AT_LINE (109)).operator_concat (GALGAS_string ("' routine is already declared as unused") COMMA_SOURCE_FILE_AT_LINE (109)) COMMA_SOURCE_FILE_AT_LINE (109)) ;
      }else if (kBoolFalse == test_6) {
        const enumGalgasBool test_8 = var_usedRoutineSet.reader_hasKey (enumerator_5777.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (110)).boolEnum () ;
        if (kBoolTrue == test_8) {
          GALGAS_location location_9 (enumerator_5777.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticWarning (location_9, GALGAS_string ("the '").operator_concat (enumerator_5777.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (111)) COMMA_SOURCE_FILE_AT_LINE (111)).operator_concat (GALGAS_string ("' routine is declared as unused, but is used") COMMA_SOURCE_FILE_AT_LINE (111)) COMMA_SOURCE_FILE_AT_LINE (111)) ;
        }
      }
    }
    var_unusedDeclarationUnicity.addAssign_operation (enumerator_5777.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (113)) ;
    enumerator_5777.gotoNextObject () ;
  }
  cEnumerator_declaredRoutineMap enumerator_6315 (var_declaredRoutineMap, kEnumeration_up) ;
  while (enumerator_6315.hasCurrentObject ()) {
    const enumGalgasBool test_10 = var_usedRoutineSet.reader_hasKey (enumerator_6315.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (116)).operator_not (SOURCE_FILE_AT_LINE (116)).operator_and (var_unusedDeclarationUnicity.reader_hasKey (enumerator_6315.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (116)).operator_not (SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)).boolEnum () ;
    if (kBoolTrue == test_10) {
      GALGAS_location location_11 (enumerator_6315.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_11, GALGAS_string ("the '").operator_concat (enumerator_6315.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (117)).operator_concat (GALGAS_string ("' routine is unused") COMMA_SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
    enumerator_6315.gotoNextObject () ;
  }
  cEnumerator_checkpicList enumerator_6625 (constinArgument_inPiccoloModel.mAttribute_mCheckpicList, kEnumeration_up) ;
  while (enumerator_6625.hasCurrentObject ()) {
    GALGAS_bool var_found = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_6681 (enumerator_6625.current_mValueList (HERE), kEnumeration_up) ;
    bool bool_12 = var_found.operator_not (SOURCE_FILE_AT_LINE (123)).isValidAndTrue () ;
    if (enumerator_6681.hasCurrentObject () && bool_12) {
      while (enumerator_6681.hasCurrentObject () && bool_12) {
        var_found = GALGAS_bool (kIsEqual, enumerator_6681.current_mValue (HERE).mAttribute_string.objectCompare (var_piccoloDeviceName)) ;
        enumerator_6681.gotoNextObject () ;
        if (enumerator_6681.hasCurrentObject ()) {
          bool_12 = var_found.operator_not (SOURCE_FILE_AT_LINE (123)).isValidAndTrue () ;
        }
      }
    }
    const enumGalgasBool test_13 = var_found.operator_not (SOURCE_FILE_AT_LINE (126)).boolEnum () ;
    if (kBoolTrue == test_13) {
      inCompiler->emitSemanticError (enumerator_6625.current_mErrorLocation (HERE), GALGAS_string ("this code is not available for '").operator_concat (var_piccoloDeviceName COMMA_SOURCE_FILE_AT_LINE (127)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (127)) COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }
    enumerator_6625.gotoNextObject () ;
  }
  GALGAS_bool var_hasHighInterrupt = GALGAS_bool (false) ;
  GALGAS_bool var_highInterruptIsFast = GALGAS_bool (false) ;
  GALGAS_bool var_hasLowInterrupt = GALGAS_bool (false) ;
  GALGAS_bool var_lowInterruptIsFast = GALGAS_bool (false) ;
  cEnumerator_interruptDefinitionList enumerator_7156 (constinArgument_inPiccoloModel.mAttribute_mInterruptDefinitionList, kEnumeration_up) ;
  while (enumerator_7156.hasCurrentObject ()) {
    const enumGalgasBool test_14 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (136)).objectCompare (GALGAS_programKind::constructor_userProgram (SOURCE_FILE_AT_LINE (136)))).boolEnum () ;
    if (kBoolTrue == test_14) {
      GALGAS_location location_15 (enumerator_7156.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_15, GALGAS_string ("interrupt routine is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (137)) ;
    }
    const enumGalgasBool test_16 = GALGAS_bool (kIsEqual, enumerator_7156.current_mInterruptName (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).objectCompare (GALGAS_string ("high"))).boolEnum () ;
    if (kBoolTrue == test_16) {
      var_highInterruptIsFast = enumerator_7156.current_mFastReturn (HERE) ;
      const enumGalgasBool test_17 = var_hasHighInterrupt.boolEnum () ;
      if (kBoolTrue == test_17) {
        GALGAS_location location_18 (enumerator_7156.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_18, GALGAS_string ("Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (142)) ;
      }
      var_hasHighInterrupt = GALGAS_bool (true) ;
    }else if (kBoolFalse == test_16) {
      const enumGalgasBool test_19 = GALGAS_bool (kIsEqual, enumerator_7156.current_mInterruptName (HERE).reader_string (SOURCE_FILE_AT_LINE (145)).objectCompare (GALGAS_string ("low"))).boolEnum () ;
      if (kBoolTrue == test_19) {
        var_lowInterruptIsFast = enumerator_7156.current_mFastReturn (HERE) ;
        const enumGalgasBool test_20 = var_hasLowInterrupt.boolEnum () ;
        if (kBoolTrue == test_20) {
          GALGAS_location location_21 (enumerator_7156.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_21, GALGAS_string ("Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (148)) ;
        }
        var_hasLowInterrupt = GALGAS_bool (true) ;
      }else if (kBoolFalse == test_19) {
        GALGAS_location location_22 (enumerator_7156.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_22, GALGAS_string ("An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (152)) ;
      }
    }
    const enumGalgasBool test_23 = var_highInterruptIsFast.operator_and (var_lowInterruptIsFast COMMA_SOURCE_FILE_AT_LINE (154)).boolEnum () ;
    if (kBoolTrue == test_23) {
      GALGAS_location location_24 (enumerator_7156.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_24, GALGAS_string ("either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }
    enumerator_7156.gotoNextObject () ;
  }
  GALGAS_actualConfigurationMap var_actualConfigurationMap ;
  const enumGalgasBool test_25 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (160)).objectCompare (GALGAS_programKind::constructor_userProgram (SOURCE_FILE_AT_LINE (160)))).boolEnum () ;
  if (kBoolTrue == test_25) {
    cEnumerator_configDefinitionList enumerator_8340 (constinArgument_inPiccoloModel.reader_mConfigDefinitionList (SOURCE_FILE_AT_LINE (161)), kEnumeration_up) ;
    while (enumerator_8340.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_8340.current_mDefinitionLocation (HERE), GALGAS_string ("configuration is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (162)) ;
      enumerator_8340.gotoNextObject () ;
    }
    var_actualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (164)) ;
  }else if (kBoolFalse == test_25) {
    {
    routine_buildConfig (var_piccoloDeviceModel.reader_mConfigRegisterMap (SOURCE_FILE_AT_LINE (167)), constinArgument_inPiccoloModel.reader_mConfigDefinitionList (SOURCE_FILE_AT_LINE (168)), var_listFileContents, var_actualConfigurationMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (166)) ;
    }
  }
  GALGAS_declaredByteMap var_declaredByteMap ;
  {
  routine_analyze_5F_ram_5F_sections (GALGAS_string ("DECLARED VARIABLES"), constinArgument_inPiccoloModel.reader_mRamDefinitionList (SOURCE_FILE_AT_LINE (176)), var_ramBank, var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (178)), var_listFileContents, var_registerTable, var_declaredByteMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (174)) ;
  }
  const enumGalgasBool test_26 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (184)).objectCompare (GALGAS_programKind::constructor_bootloaderProgram (SOURCE_FILE_AT_LINE (184)))).boolEnum () ;
  if (kBoolTrue == test_26) {
    cEnumerator_ramBankTable enumerator_9207 (var_ramBank, kEnumeration_up) ;
    while (enumerator_9207.hasCurrentObject ()) {
      const enumGalgasBool test_27 = var_bootloaderReservedRAMmap.reader_hasKey (enumerator_9207.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186)).boolEnum () ;
      if (kBoolTrue == test_27) {
        GALGAS_luint var_bootloaderReservedSize ;
        var_bootloaderReservedRAMmap.method_searchKey (enumerator_9207.current_lkey (HERE), var_bootloaderReservedSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (188)) ;
        const enumGalgasBool test_28 = GALGAS_bool (kIsStrictSup, enumerator_9207.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9207.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (189)).objectCompare (var_bootloaderReservedSize.reader_uint (SOURCE_FILE_AT_LINE (189)))).boolEnum () ;
        if (kBoolTrue == test_28) {
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("for '").operator_concat (enumerator_9207.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (190)) COMMA_SOURCE_FILE_AT_LINE (190)).operator_concat (GALGAS_string ("' RAM bank, the bootloader implementation declares ") COMMA_SOURCE_FILE_AT_LINE (190)).operator_concat (enumerator_9207.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9207.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (191)).reader_string (SOURCE_FILE_AT_LINE (191)) COMMA_SOURCE_FILE_AT_LINE (191)).operator_concat (GALGAS_string (" byte(s), althought the bootloader specification reserves ") COMMA_SOURCE_FILE_AT_LINE (192)).operator_concat (var_bootloaderReservedSize.reader_uint (SOURCE_FILE_AT_LINE (193)).reader_string (SOURCE_FILE_AT_LINE (193)) COMMA_SOURCE_FILE_AT_LINE (193)).operator_concat (GALGAS_string (" byte(s)") COMMA_SOURCE_FILE_AT_LINE (194)) COMMA_SOURCE_FILE_AT_LINE (190)) ;
        }
      }else if (kBoolFalse == test_27) {
        const enumGalgasBool test_29 = GALGAS_bool (kIsStrictSup, enumerator_9207.current_mFirstFreeAddress (HERE).objectCompare (enumerator_9207.current_mFirstAddress (HERE))).boolEnum () ;
        if (kBoolTrue == test_29) {
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("for '").operator_concat (enumerator_9207.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)).operator_concat (GALGAS_string ("' RAM bank, the bootloader implementation declares ") COMMA_SOURCE_FILE_AT_LINE (197)).operator_concat (enumerator_9207.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9207.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (198)).reader_string (SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)).operator_concat (GALGAS_string (" byte(s), althought the bootloader specification reserves no space") COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (197)) ;
        }
      }
      enumerator_9207.gotoNextObject () ;
    }
  }
  GALGAS_uint var_RAMsize = GALGAS_uint ((PMUInt32) 0U) ;
  cEnumerator_ramBankTable enumerator_10200 (var_ramBank, kEnumeration_up) ;
  while (enumerator_10200.hasCurrentObject ()) {
    const enumGalgasBool test_30 = GALGAS_bool (kIsStrictSup, enumerator_10200.current_mLastAddressPlusOne (HERE).objectCompare (var_RAMsize)).boolEnum () ;
    if (kBoolTrue == test_30) {
      var_RAMsize = enumerator_10200.current_mLastAddressPlusOne (HERE) ;
    }
    enumerator_10200.gotoNextObject () ;
  }
  {
  routine_build_5F_ipic_31__38__5F_block_5F_representation_5F_list (constinArgument_inSourceFileName, var_piccoloDeviceModel, var_RAMsize.reader_sint (inCompiler COMMA_SOURCE_FILE_AT_LINE (214)), var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForBootloaderImplementation, var_bootloaderReservedROMsize, var_bootloaderRoutineDeclarationListForUserProgramImplementation, var_userRoutineDeclarationListForUserProgramImplementation, var_accessBankSplitOffset, var_registerTable, var_declaredByteMap, constinArgument_inPiccoloModel, var_ramBank, var_hasHighInterrupt, var_hasLowInterrupt, var_piccoloDeviceModel.reader_mDeviceName (SOURCE_FILE_AT_LINE (227)).reader_string (SOURCE_FILE_AT_LINE (227)), var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (228)), var_actualConfigurationMap, var_listFileContents, inCompiler COMMA_SOURCE_FILE_AT_LINE (211)) ;
  }
  const enumGalgasBool test_31 = GALGAS_bool (gOption_piccolo_5F_options_ouputListingFile.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_31) {
    var_listFileContents.dotAssign_operation (GALGAS_string ("*******************************************************************************\n") COMMA_SOURCE_FILE_AT_LINE (234)) ;
    GALGAS_string var_listFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (235)).operator_concat (GALGAS_string (".list") COMMA_SOURCE_FILE_AT_LINE (235)) ;
    GALGAS_bool joker_11475_0 ; // Joker input parameter
    var_listFileContents.method_writeToFileWhenDifferentContents (var_listFile, joker_11475_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (236)) ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element::GALGAS_declaredRoutineMap_2E_element (void) :
mAttribute_lkey () {
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element::~ GALGAS_declaredRoutineMap_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element::GALGAS_declaredRoutineMap_2E_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element GALGAS_declaredRoutineMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_declaredRoutineMap_2E_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element GALGAS_declaredRoutineMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_declaredRoutineMap_2E_element (inOperand0) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_declaredRoutineMap_2E_element::objectCompare (const GALGAS_declaredRoutineMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_declaredRoutineMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_declaredRoutineMap_2E_element::description (C_String & ioString,
                                                        const PMSInt32 inIndentation) const {
  ioString << "<struct @declaredRoutineMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_declaredRoutineMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                     @declaredRoutineMap.element type                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredRoutineMap_2E_element ("declaredRoutineMap.element",
                                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredRoutineMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredRoutineMap_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredRoutineMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredRoutineMap_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_declaredRoutineMap_2E_element GALGAS_declaredRoutineMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_declaredRoutineMap_2E_element result ;
  const GALGAS_declaredRoutineMap_2E_element * p = (const GALGAS_declaredRoutineMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredRoutineMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredRoutineMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


