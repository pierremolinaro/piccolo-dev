//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     january 24th, 2010, at 10h7'50"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "pic18_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "pic18_analyze"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic18_analyze (C_Compiler & inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_pic18_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_1508 = (var_cas_sourceFileBaseName).operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (22))) ;
  if (cond_1508.isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the program name ('")).operator_concat (var_cas_inPiccoloModel.reader_mProgramName (inLexique COMMA_SOURCE_FILE_AT_LINE (23)))).operator_concat (GGS_string ("') should be identical to the file base name '"))).operator_concat (var_cas_sourceFileBaseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (25)) ;
  }
  GGS_string var_cas_listFileContents = GGS_string ("") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  GGS_ramBankTable  var_cas_ramBank ;
  GGS_bootloaderReservedRAMmap  var_cas_bootloaderReservedRAMmap ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForBootloaderImplementation ;
  GGS_routineDeclarationList  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation ;
  GGS_routineDeclarationList  var_cas_userRoutineDeclarationListForUserProgramImplementation ;
  GGS_luint  var_cas_bootloaderReservedROMsize ;
  GGS_registerTable  var_cas_registerTable ;
  switch (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (38)).enumValue ()) {
  case GGS_programKind::enum_regularProgram:
    {
    ::routine_parseDeviceDefinition (inLexique,  var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (40)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (40)) ;
    switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (41)).enumValue ()) {
    case GGS_processorType::enum_pic18_60:
      {
      var_cas_accessBankSplitOffset = GGS_uint (96U) ;
      }
      break ;
    case GGS_processorType::enum_pic18_80:
      {
      var_cas_accessBankSplitOffset = GGS_uint (128U) ;
      }
      break ;
    case GGS_processorType::enum_midrange:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (45)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::enum_baseline:
      {
      var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (45)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (46)) ;
      var_cas_accessBankSplitOffset.drop () ;
      }
      break ;
    case GGS_processorType::kNotBuilt:
      break ;
    }
    var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
    var_cas_bootloaderReservedRAMmap = GGS_bootloaderReservedRAMmap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_bootloaderReservedROMsize = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
    }
    break ;
  case GGS_programKind::enum_bootloaderProgram:
    {
    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForUserProgramImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      piccolo_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (58)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_userRoutineDeclarationListForBootloaderImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (58)) ;
    }
    {
      GGS_ramBankTable::cEnumerator enumerator_4244 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_4244 = NULL ;
      while (((operand_4244 = enumerator_4244.nextObject ()))) {
        macroValidPointer (operand_4244) ;
        var_cas_ramBank.modifier_setMFirstFreeAddressForKey (inLexique, operand_4244->mInfo.mFirstAddress, operand_4244->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) COMMA_SOURCE_FILE_AT_LINE (69)) ;
      }
    }
    }
    break ;
  case GGS_programKind::enum_userProgram:
    {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      piccolo_grammar::_performSourceFileParsing_importBootloaderSpecification (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (inLexique COMMA_SOURCE_FILE_AT_LINE (72)),
                                    var_cas_piccoloDeviceModel,
                                    var_cas_accessBankSplitOffset,
                                    var_cas_ramBank,
                                    var_cas_registerTable,
                                    var_cas_bootloaderReservedRAMmap,
                                    var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_userRoutineDeclarationListForUserProgramImplementation,
                                    var_cas_bootloaderReservedROMsize
                                    COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    var_cas_userRoutineDeclarationListForBootloaderImplementation = GGS_routineDeclarationList ::constructor_emptyList () ;
    }
    break ;
  case GGS_programKind::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_highInterruptIsFast = GGS_bool (false) ;
  GGS_bool var_cas_hasLowInterrupt = GGS_bool (false) ;
  GGS_bool var_cas_lowInterruptIsFast = GGS_bool (false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_5243 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (90)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_5243 = NULL ;
    while (((operand_5243 = enumerator_5243.nextObject ()))) {
      macroValidPointer (operand_5243) ;
      const GGS_bool cond_5461 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (91))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_HERE)) ;
      if (cond_5461.isBuiltAndTrue ()) {
        operand_5243->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("interrupt routine is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
      const GGS_bool cond_5723 = (operand_5243->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_isEqual (GGS_string ("high")) ;
      if (cond_5723.isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_5243->mFastReturn ;
        const GGS_bool cond_5675 = var_cas_hasHighInterrupt ;
        if (cond_5675.isBuiltAndTrue ()) {
          operand_5243->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (98)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true) ;
      }else if (cond_5723.isBuiltAndFalse ()) {
        const GGS_bool cond_5967 = (operand_5243->mInterruptName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100))).operator_isEqual (GGS_string ("low")) ;
        if (cond_5967.isBuiltAndTrue ()) {
          var_cas_lowInterruptIsFast = operand_5243->mFastReturn ;
          const GGS_bool cond_5921 = var_cas_hasLowInterrupt ;
          if (cond_5921.isBuiltAndTrue ()) {
            operand_5243->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (104)) ;
          }
          var_cas_hasLowInterrupt = GGS_bool (true) ;
        }else if (cond_5967.isBuiltAndFalse ()) {
          operand_5243->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (108)) ;
        }
      }
      const GGS_bool cond_6222 = (var_cas_highInterruptIsFast).operator_and (var_cas_lowInterruptIsFast) ;
      if (cond_6222.isBuiltAndTrue ()) {
        operand_5243->mInterruptName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (111)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  const GGS_bool cond_6658 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (115))).operator_isEqual (GGS_programKind::constructor_userProgram (inLexique COMMA_HERE)) ;
  if (cond_6658.isBuiltAndTrue ()) {
    {
      GGS_configDefinitionList::cEnumerator enumerator_6430 (var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
      const GGS_configDefinitionList::cElement * operand_6430 = NULL ;
      while (((operand_6430 = enumerator_6430.nextObject ()))) {
        macroValidPointer (operand_6430) ;
        operand_6430->mDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("configuration is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (118)) ;
      }
    }
    var_cas_actualConfigurationMap = GGS_actualConfigurationMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  }else if (cond_6658.isBuiltAndFalse ()) {
    ::routine_buildConfig (inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (122)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (123)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (inLexique COMMA_SOURCE_FILE_AT_LINE (124)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (121)) ;
  }
  ::routine_analyze_ram_sections (inLexique,  GGS_string ("DECLARED VARIABLES"),  var_cas_inPiccoloModel.reader_mRamDefinitionList (inLexique COMMA_SOURCE_FILE_AT_LINE (132)),  var_cas_ramBank,  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (134)),  var_cas_listFileContents,  var_cas_registerTable COMMA_SOURCE_FILE_AT_LINE (130)) ;
  const GGS_bool cond_8239 = (var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (139))).operator_isEqual (GGS_programKind::constructor_bootloaderProgram (inLexique COMMA_HERE)) ;
  if (cond_8239.isBuiltAndTrue ()) {
    {
      GGS_ramBankTable::cEnumerator enumerator_7347 (var_cas_ramBank, true) ;
      const GGS_ramBankTable::cElement * operand_7347 = NULL ;
      while (((operand_7347 = enumerator_7347.nextObject ()))) {
        macroValidPointer (operand_7347) ;
        const GGS_bool cond_7937 = var_cas_bootloaderReservedRAMmap.reader_hasKey (operand_7347->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))) ;
        if (cond_7937.isBuiltAndTrue ()) {
          GGS_luint  var_cas_bootloaderReservedSize ;
          const GGS_bootloaderReservedRAMmap  temp_7496 = var_cas_bootloaderReservedRAMmap ;
          if (temp_7496.isBuilt ()) {
            temp_7496 (HERE)->method_searchKey (inLexique, operand_7347->mKey, var_cas_bootloaderReservedSize COMMA_SOURCE_FILE_AT_LINE (143)) ;
          }
          const GGS_bool cond_7920 = (operand_7347->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_7347->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (144))).operator_strictSup (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (144))) ;
          if (cond_7920.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("for '")).operator_concat (operand_7347->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_7347->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_7347->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (146)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves "))).operator_concat (var_cas_bootloaderReservedSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (148)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148)))).operator_concat (GGS_string (" byte(s)")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
          }
        }else if (cond_7937.isBuiltAndFalse ()) {
          const GGS_bool cond_8210 = (operand_7347->mInfo.mFirstFreeAddress).operator_strictSup (operand_7347->mInfo.mFirstAddress) ;
          if (cond_8210.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '")).operator_concat (operand_7347->mKey)).operator_concat (GGS_string ("' RAM bank, the bootloader implementation declares "))).operator_concat (operand_7347->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_7347->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (153)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)))).operator_concat (GGS_string (" byte(s), althought the bootloader specification reserves no space")) COMMA_SOURCE_FILE_AT_LINE (155)) ;
          }
        }
      }
    }
  }
  GGS_ipic18_instructionList  var_cas_generatedInstructionList ;
  ::routine_build_ipic18_assembly_instruction_list (inLexique,  var_cas_inPiccoloModel.reader_mProgramKind (inLexique COMMA_SOURCE_FILE_AT_LINE (161)),  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (162)),  var_cas_bootloaderRoutineDeclarationListForBootloaderImplementation,  var_cas_userRoutineDeclarationListForBootloaderImplementation,  var_cas_bootloaderReservedROMsize,  var_cas_bootloaderRoutineDeclarationListForUserProgramImplementation,  var_cas_userRoutineDeclarationListForUserProgramImplementation,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (160)) ;
  const GGS_bool cond_9225 = ((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).operator_and (gOption_piccolo_5F_options_performOptimizations.reader_value ()) ;
  if (cond_9225.isBuiltAndTrue ()) {
    ::routine_performOptimizations (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (178)) ;
  }
  const GGS_bool cond_9456 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_9456.isBuiltAndTrue ()) {
    ::routine_ipic18_convertRelativeBranchsToAbsoluteWhenNeeded (inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (182)) ;
  }
  const GGS_bool cond_9731 = gOption_piccolo_5F_options_ouputListingFile.reader_value () ;
  if (cond_9731.isBuiltAndTrue ()) {
    GGS_string var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".list")) ;
    GGS_bool automatic_var_9723_0 ;
    const GGS_string temp_9709 = var_cas_listFileContents ;
    if (temp_9709.isBuilt ()) {
      temp_9709 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_listFile, automatic_var_9723_0 COMMA_SOURCE_FILE_AT_LINE (187)) ;
    }
  }
  const GGS_bool cond_11680 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_11680.isBuiltAndTrue ()) {
    GGS_uint  var_cas_usedROMsize ;
    ::routine_build_ipic18_binary_code (inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (195)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (195)),  var_cas_actualConfigurationMap,  var_cas_usedROMsize COMMA_SOURCE_FILE_AT_LINE (193)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (200)) ;
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_bool automatic_var_10246_0 ;
    const GGS_string temp_10222 = var_cas_contents ;
    if (temp_10222.isBuilt ()) {
      temp_10222 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_hexDestinationFile, automatic_var_10246_0 COMMA_SOURCE_FILE_AT_LINE (202)) ;
    }
    const GGS_bool cond_11086 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
    if (cond_11086.isBuiltAndTrue ()) {
      GGS_string var_cas_verboseMessage = ((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (205)))).operator_concat (GGS_string (" bytes;")) ;
      var_cas_verboseMessage.appendCString (" used: ") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
      var_cas_verboseMessage.appendCString (" bytes (") ;
      var_cas_verboseMessage.dotAssign_operation (var_cas_usedROMsize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (207)).divide_operation (inLexique, var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) COMMA_SOURCE_FILE_AT_LINE (207)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) ;
      var_cas_verboseMessage.appendCString ("%).\n") ;
      {
        GGS_ramBankTable::cEnumerator enumerator_10634 (var_cas_ramBank, true) ;
        const GGS_ramBankTable::cElement * operand_10634 = NULL ;
        while (((operand_10634 = enumerator_10634.nextObject ()))) {
          macroValidPointer (operand_10634) ;
          GGS_uint  var_cas_bankSize = operand_10634->mInfo.mLastAddressPlusOne.substract_operation (inLexique, operand_10634->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (209)) ;
          GGS_uint  var_cas_usedSize = operand_10634->mInfo.mFirstFreeAddress.substract_operation (inLexique, operand_10634->mInfo.mFirstAddress COMMA_SOURCE_FILE_AT_LINE (210)) ;
          var_cas_verboseMessage.appendCString ("  RAM bank '") ;
          var_cas_verboseMessage.dotAssign_operation (operand_10634->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))) ;
          var_cas_verboseMessage.appendCString ("': ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_bankSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (212))) ;
          var_cas_verboseMessage.appendCString (" bytes, used ") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (213))) ;
          var_cas_verboseMessage.appendCString (" bytes (") ;
          var_cas_verboseMessage.dotAssign_operation (var_cas_usedSize.multiply_operation (inLexique, GGS_uint (100U) COMMA_SOURCE_FILE_AT_LINE (214)).divide_operation (inLexique, var_cas_bankSize COMMA_SOURCE_FILE_AT_LINE (214)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
          var_cas_verboseMessage.appendCString ("%).\n") ;
        }
      }
      inLexique.printMessage (var_cas_verboseMessage COMMA_SOURCE_FILE_AT_LINE (216)) ;
    }
    const GGS_bool cond_11668 = gOption_piccolo_5F_options_generateAssembly.reader_value () ;
    if (cond_11668.isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_pic18_build_assembly_code (inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (inLexique COMMA_SOURCE_FILE_AT_LINE (222)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (223)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (221)) ;
      GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
      GGS_bool automatic_var_11658_0 ;
      const GGS_string temp_11634 = var_cas_assemblyCode ;
      if (temp_11634.isBuilt ()) {
        temp_11634 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_asmDestinationFile, automatic_var_11658_0 COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }
    }
  }else if (cond_11680.isBuiltAndFalse ()) {
    GGS_string var_cas_hexDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".hex")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_hexDestinationFile COMMA_SOURCE_FILE_AT_LINE (234)) ;
    GGS_string var_cas_asmDestinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension ()).operator_concat (GGS_string (".asm")) ;
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_asmDestinationFile COMMA_SOURCE_FILE_AT_LINE (236)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_pic18_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*

