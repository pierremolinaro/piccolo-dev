//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'pic18_semantics.cpp'                         *
//                        Generated by version 2.5.0                         *
//                     october 11th, 2013, at 19h45'30"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "pic18_semantics.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "piccolo_options.h"
#include "pic18_grammar.h"
#include "piccoloDevice_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "pic18_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'pic18_analyze'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_pic_31__38__5F_analyze (const GALGAS_piccoloModel constinArgument_inPiccoloModel,
                                     const GALGAS_string constinArgument_inSourceFileName,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_sourceFileBaseName = constinArgument_inSourceFileName.reader_lastPathComponent (SOURCE_FILE_AT_LINE (18)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (18)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_sourceFileBaseName.objectCompare (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (19)).reader_string (SOURCE_FILE_AT_LINE (19)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (20)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the program name ('").operator_concat (constinArgument_inPiccoloModel.reader_mProgramName (SOURCE_FILE_AT_LINE (20)).reader_string (SOURCE_FILE_AT_LINE (20)) COMMA_SOURCE_FILE_AT_LINE (20)).operator_concat (GALGAS_string ("') should be identical to the file base name '") COMMA_SOURCE_FILE_AT_LINE (21)).operator_concat (var_sourceFileBaseName COMMA_SOURCE_FILE_AT_LINE (21)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (21)) COMMA_SOURCE_FILE_AT_LINE (20)) ;
  }
  GALGAS_string var_listFileContents = GALGAS_string::makeEmptyString () ;
  GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
  GALGAS_uint var_accessBankSplitOffset ;
  GALGAS_ramBankTable var_ramBank ;
  GALGAS_bootloaderReservedRAMmap var_bootloaderReservedRAMmap ;
  GALGAS_routineDeclarationList var_bootloaderRoutineDeclarationListForBootloaderImplementation ;
  GALGAS_routineDeclarationList var_userRoutineDeclarationListForBootloaderImplementation ;
  GALGAS_routineDeclarationList var_bootloaderRoutineDeclarationListForUserProgramImplementation ;
  GALGAS_routineDeclarationList var_userRoutineDeclarationListForUserProgramImplementation ;
  GALGAS_luint var_bootloaderReservedROMsize ;
  GALGAS_registerTable var_registerTable ;
  GALGAS_string var_piccoloDeviceName ;
  if (constinArgument_inPiccoloModel.mAttribute_mProgramKind.isValid ()) {
    switch (constinArgument_inPiccoloModel.mAttribute_mProgramKind.enumValue ()) {
    case GALGAS_programKind::kNotBuilt:
      break ;
    case GALGAS_programKind::kEnum_regularProgram: {
      var_piccoloDeviceName = constinArgument_inPiccoloModel.mAttribute_mDeviceNameOrBootLoaderReference.mAttribute_string ;
      {
      routine_parseDeviceDefinition (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (39)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (39)) ;
      }
      if (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (40)).isValid ()) {
        switch (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (40)).enumValue ()) {
        case GALGAS_processorType::kNotBuilt:
          break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__36__30_: {
          var_accessBankSplitOffset = GALGAS_uint ((PMUInt32) 96U) ;
          } break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__38__30_: {
          var_accessBankSplitOffset = GALGAS_uint ((PMUInt32) 128U) ;
          } break ;
        case GALGAS_processorType::kEnum_midrange: {
          GALGAS_location location_2 (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (43)).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("a midrange device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (43)) ;
          var_accessBankSplitOffset.drop () ; // Release error dropped variable
          } break ;
        case GALGAS_processorType::kEnum_baseline: {
          GALGAS_location location_3 (constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (44)).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_3, GALGAS_string ("a baseline device is not accepted here") COMMA_SOURCE_FILE_AT_LINE (44)) ;
          var_accessBankSplitOffset.drop () ; // Release error dropped variable
          } break ;
        }
      }
      var_ramBank = var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (46)) ;
      var_bootloaderReservedRAMmap = GALGAS_bootloaderReservedRAMmap::constructor_emptyMap (SOURCE_FILE_AT_LINE (47)) ;
      var_registerTable = var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (48)) ;
      var_bootloaderRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (49)) ;
      var_userRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (50)) ;
      var_bootloaderRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (51)) ;
      var_userRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (52)) ;
      var_bootloaderReservedROMsize = GALGAS_luint::constructor_new (GALGAS_uint ((PMUInt32) 0U), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (53)) ;
      } break ;
    case GALGAS_programKind::kEnum_bootloaderProgram: {
      var_bootloaderRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (55)) ;
      var_userRoutineDeclarationListForUserProgramImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (56)) ;
      {
      cGrammar_pic_31__38__5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inCompiler, constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (57)), var_piccoloDeviceModel, var_piccoloDeviceName, var_accessBankSplitOffset, var_ramBank, var_registerTable, var_bootloaderReservedRAMmap, var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForBootloaderImplementation, var_bootloaderReservedROMsize COMMA_SOURCE_FILE_AT_LINE (57)) ;
      }
      cEnumerator_ramBankTable enumerator_4089 (var_ramBank, kEnumeration_up) ;
      while (enumerator_4089.hasCurrentObject ()) {
        {
        var_ramBank.modifier_setMFirstFreeAddressForKey (enumerator_4089.current_mFirstAddress (HERE), enumerator_4089.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (69)), inCompiler COMMA_SOURCE_FILE_AT_LINE (69)) ;
        }
        enumerator_4089.gotoNextObject () ;
      }
      } break ;
    case GALGAS_programKind::kEnum_userProgram: {
      {
      cGrammar_pic_31__38__5F_grammar::_performSourceFileParsing_importBootloaderSpecification (inCompiler, constinArgument_inPiccoloModel.reader_mDeviceNameOrBootLoaderReference (SOURCE_FILE_AT_LINE (72)), var_piccoloDeviceModel, var_piccoloDeviceName, var_accessBankSplitOffset, var_ramBank, var_registerTable, var_bootloaderReservedRAMmap, var_bootloaderRoutineDeclarationListForUserProgramImplementation, var_userRoutineDeclarationListForUserProgramImplementation, var_bootloaderReservedROMsize COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
      var_bootloaderRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (83)) ;
      var_userRoutineDeclarationListForBootloaderImplementation = GALGAS_routineDeclarationList::constructor_emptyList (SOURCE_FILE_AT_LINE (84)) ;
      } break ;
    }
  }
  GALGAS_stringset var_usedRoutineSet = function_pic_31__38__5F_computeUsedRoutines (constinArgument_inPiccoloModel.mAttribute_mInterruptDefinitionList, constinArgument_inPiccoloModel.mAttribute_mRoutineDefinitionList, var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForUserProgramImplementation, inCompiler COMMA_SOURCE_FILE_AT_LINE (87)) ;
  GALGAS_declaredRoutineMap var_declaredRoutineMap = GALGAS_declaredRoutineMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (93)) ;
  cEnumerator_pic_31__38_RoutineDefinitionList enumerator_5353 (constinArgument_inPiccoloModel.mAttribute_mRoutineDefinitionList, kEnumeration_up) ;
  while (enumerator_5353.hasCurrentObject ()) {
    {
    var_declaredRoutineMap.modifier_insertKey (enumerator_5353.current_mRoutineName (HERE), enumerator_5353.current_mRequiredBank (HERE), enumerator_5353.current_mReturnedBank (HERE), enumerator_5353.current_mPreservesBank (HERE), enumerator_5353.current_mIsNoReturn (HERE), enumerator_5353.current_mInstructionList (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
    enumerator_5353.gotoNextObject () ;
  }
  GALGAS_stringset var_unusedDeclarationUnicity = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (105)) ;
  cEnumerator_lstringlist enumerator_5693 (constinArgument_inPiccoloModel.mAttribute_mUnusedRoutineList, kEnumeration_up) ;
  while (enumerator_5693.hasCurrentObject ()) {
    const enumGalgasBool test_4 = var_declaredRoutineMap.reader_hasKey (enumerator_5693.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (107)).operator_not (SOURCE_FILE_AT_LINE (107)).boolEnum () ;
    if (kBoolTrue == test_4) {
      GALGAS_location location_5 (enumerator_5693.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_5, GALGAS_string ("the '").operator_concat (enumerator_5693.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)).operator_concat (GALGAS_string ("' routine is not declared") COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)) ;
    }else if (kBoolFalse == test_4) {
      const enumGalgasBool test_6 = var_unusedDeclarationUnicity.reader_hasKey (enumerator_5693.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (109)).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_5693.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_7, GALGAS_string ("the '").operator_concat (enumerator_5693.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)).operator_concat (GALGAS_string ("' routine is already declared as unused") COMMA_SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)) ;
      }else if (kBoolFalse == test_6) {
        const enumGalgasBool test_8 = var_usedRoutineSet.reader_hasKey (enumerator_5693.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (111)).boolEnum () ;
        if (kBoolTrue == test_8) {
          GALGAS_location location_9 (enumerator_5693.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticWarning (location_9, GALGAS_string ("the '").operator_concat (enumerator_5693.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)).operator_concat (GALGAS_string ("' routine is declared as unused, but is used") COMMA_SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
        }
      }
    }
    var_unusedDeclarationUnicity.addAssign_operation (enumerator_5693.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (114)) ;
    enumerator_5693.gotoNextObject () ;
  }
  cEnumerator_declaredRoutineMap enumerator_6231 (var_declaredRoutineMap, kEnumeration_up) ;
  while (enumerator_6231.hasCurrentObject ()) {
    const enumGalgasBool test_10 = var_usedRoutineSet.reader_hasKey (enumerator_6231.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (117)).operator_not (SOURCE_FILE_AT_LINE (117)).operator_and (var_unusedDeclarationUnicity.reader_hasKey (enumerator_6231.current_lkey (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (117)).operator_not (SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (117)).boolEnum () ;
    if (kBoolTrue == test_10) {
      GALGAS_location location_11 (enumerator_6231.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_11, GALGAS_string ("the '").operator_concat (enumerator_6231.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)).operator_concat (GALGAS_string ("' routine is unused") COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)) ;
    }
    enumerator_6231.gotoNextObject () ;
  }
  GALGAS_stringset var_inlinedRoutineSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (122)) ;
  cEnumerator_lstringlist enumerator_6577 (constinArgument_inPiccoloModel.mAttribute_mInlinedRoutineList, kEnumeration_up) ;
  while (enumerator_6577.hasCurrentObject ()) {
    const enumGalgasBool test_12 = var_declaredRoutineMap.reader_hasKey (enumerator_6577.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (124)).operator_not (SOURCE_FILE_AT_LINE (124)).boolEnum () ;
    if (kBoolTrue == test_12) {
      GALGAS_location location_13 (enumerator_6577.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_13, GALGAS_string ("the '").operator_concat (enumerator_6577.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (125)) COMMA_SOURCE_FILE_AT_LINE (125)).operator_concat (GALGAS_string ("' routine is not declared") COMMA_SOURCE_FILE_AT_LINE (125)) COMMA_SOURCE_FILE_AT_LINE (125)) ;
    }else if (kBoolFalse == test_12) {
      const enumGalgasBool test_14 = var_usedRoutineSet.reader_hasKey (enumerator_6577.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (126)).operator_not (SOURCE_FILE_AT_LINE (126)).boolEnum () ;
      if (kBoolTrue == test_14) {
        GALGAS_location location_15 (enumerator_6577.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_15, GALGAS_string ("useless declaration, the '").operator_concat (enumerator_6577.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (127)) COMMA_SOURCE_FILE_AT_LINE (127)).operator_concat (GALGAS_string ("' routine is unused") COMMA_SOURCE_FILE_AT_LINE (127)) COMMA_SOURCE_FILE_AT_LINE (127)) ;
      }else if (kBoolFalse == test_14) {
        var_inlinedRoutineSet.addAssign_operation (enumerator_6577.current_mValue (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (129)) ;
      }
    }
    enumerator_6577.gotoNextObject () ;
  }
  GALGAS_pic_31__38_InterruptDefinitionList var_interruptDefinitionList = constinArgument_inPiccoloModel.mAttribute_mInterruptDefinitionList ;
  GALGAS_pic_31__38_RoutineDefinitionList var_routineDefinitionList = constinArgument_inPiccoloModel.mAttribute_mRoutineDefinitionList ;
  {
  routine_pic_31__38_PerformRoutineInline (var_inlinedRoutineSet, var_declaredRoutineMap, var_interruptDefinitionList, var_routineDefinitionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
  cEnumerator_checkpicList enumerator_7378 (constinArgument_inPiccoloModel.mAttribute_mCheckpicList, kEnumeration_up) ;
  while (enumerator_7378.hasCurrentObject ()) {
    GALGAS_bool var_found = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_7434 (enumerator_7378.current_mValueList (HERE), kEnumeration_up) ;
    bool bool_16 = var_found.operator_not (SOURCE_FILE_AT_LINE (143)).isValidAndTrue () ;
    if (enumerator_7434.hasCurrentObject () && bool_16) {
      while (enumerator_7434.hasCurrentObject () && bool_16) {
        var_found = GALGAS_bool (kIsEqual, enumerator_7434.current_mValue (HERE).mAttribute_string.objectCompare (var_piccoloDeviceName)) ;
        enumerator_7434.gotoNextObject () ;
        if (enumerator_7434.hasCurrentObject ()) {
          bool_16 = var_found.operator_not (SOURCE_FILE_AT_LINE (143)).isValidAndTrue () ;
        }
      }
    }
    const enumGalgasBool test_17 = var_found.operator_not (SOURCE_FILE_AT_LINE (146)).boolEnum () ;
    if (kBoolTrue == test_17) {
      inCompiler->emitSemanticError (enumerator_7378.current_mErrorLocation (HERE), GALGAS_string ("this code is not available for '").operator_concat (var_piccoloDeviceName COMMA_SOURCE_FILE_AT_LINE (147)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (147)) COMMA_SOURCE_FILE_AT_LINE (147)) ;
    }
    enumerator_7378.gotoNextObject () ;
  }
  GALGAS_bool var_hasHighInterrupt = GALGAS_bool (false) ;
  GALGAS_bool var_highInterruptIsFast = GALGAS_bool (false) ;
  GALGAS_bool var_hasLowInterrupt = GALGAS_bool (false) ;
  GALGAS_bool var_lowInterruptIsFast = GALGAS_bool (false) ;
  cEnumerator_pic_31__38_InterruptDefinitionList enumerator_7892 (var_interruptDefinitionList, kEnumeration_up) ;
  while (enumerator_7892.hasCurrentObject ()) {
    const enumGalgasBool test_18 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (156)).objectCompare (GALGAS_programKind::constructor_userProgram (SOURCE_FILE_AT_LINE (156)))).boolEnum () ;
    if (kBoolTrue == test_18) {
      GALGAS_location location_19 (enumerator_7892.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_19, GALGAS_string ("interrupt routine is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }
    const enumGalgasBool test_20 = GALGAS_bool (kIsEqual, enumerator_7892.current_mInterruptName (HERE).reader_string (SOURCE_FILE_AT_LINE (159)).objectCompare (GALGAS_string ("high"))).boolEnum () ;
    if (kBoolTrue == test_20) {
      var_highInterruptIsFast = enumerator_7892.current_mFastReturn (HERE) ;
      const enumGalgasBool test_21 = var_hasHighInterrupt.boolEnum () ;
      if (kBoolTrue == test_21) {
        GALGAS_location location_22 (enumerator_7892.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_22, GALGAS_string ("Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (162)) ;
      }
      var_hasHighInterrupt = GALGAS_bool (true) ;
    }else if (kBoolFalse == test_20) {
      const enumGalgasBool test_23 = GALGAS_bool (kIsEqual, enumerator_7892.current_mInterruptName (HERE).reader_string (SOURCE_FILE_AT_LINE (165)).objectCompare (GALGAS_string ("low"))).boolEnum () ;
      if (kBoolTrue == test_23) {
        var_lowInterruptIsFast = enumerator_7892.current_mFastReturn (HERE) ;
        const enumGalgasBool test_24 = var_hasLowInterrupt.boolEnum () ;
        if (kBoolTrue == test_24) {
          GALGAS_location location_25 (enumerator_7892.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_25, GALGAS_string ("Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (168)) ;
        }
        var_hasLowInterrupt = GALGAS_bool (true) ;
      }else if (kBoolFalse == test_23) {
        GALGAS_location location_26 (enumerator_7892.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_26, GALGAS_string ("An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (172)) ;
      }
    }
    const enumGalgasBool test_27 = var_highInterruptIsFast.operator_and (var_lowInterruptIsFast COMMA_SOURCE_FILE_AT_LINE (174)).boolEnum () ;
    if (kBoolTrue == test_27) {
      GALGAS_location location_28 (enumerator_7892.current_mInterruptName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_28, GALGAS_string ("either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (175)) ;
    }
    enumerator_7892.gotoNextObject () ;
  }
  GALGAS_actualConfigurationMap var_actualConfigurationMap ;
  const enumGalgasBool test_29 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (180)).objectCompare (GALGAS_programKind::constructor_userProgram (SOURCE_FILE_AT_LINE (180)))).boolEnum () ;
  if (kBoolTrue == test_29) {
    cEnumerator_configDefinitionList enumerator_9076 (constinArgument_inPiccoloModel.reader_mConfigDefinitionList (SOURCE_FILE_AT_LINE (181)), kEnumeration_up) ;
    while (enumerator_9076.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_9076.current_mDefinitionLocation (HERE), GALGAS_string ("configuration is not allowed for a bootloader user program") COMMA_SOURCE_FILE_AT_LINE (182)) ;
      enumerator_9076.gotoNextObject () ;
    }
    var_actualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (184)) ;
  }else if (kBoolFalse == test_29) {
    {
    routine_buildConfig (var_piccoloDeviceModel.reader_mConfigRegisterMap (SOURCE_FILE_AT_LINE (187)), constinArgument_inPiccoloModel.reader_mConfigDefinitionList (SOURCE_FILE_AT_LINE (188)), var_listFileContents, var_actualConfigurationMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (186)) ;
    }
  }
  GALGAS_declaredByteMap var_declaredByteMap ;
  {
  routine_analyze_5F_ram_5F_sections (GALGAS_string ("DECLARED VARIABLES"), constinArgument_inPiccoloModel.reader_mRamDefinitionList (SOURCE_FILE_AT_LINE (196)), var_ramBank, var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (198)), var_listFileContents, var_registerTable, var_declaredByteMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }
  const enumGalgasBool test_30 = GALGAS_bool (kIsEqual, constinArgument_inPiccoloModel.reader_mProgramKind (SOURCE_FILE_AT_LINE (204)).objectCompare (GALGAS_programKind::constructor_bootloaderProgram (SOURCE_FILE_AT_LINE (204)))).boolEnum () ;
  if (kBoolTrue == test_30) {
    cEnumerator_ramBankTable enumerator_9943 (var_ramBank, kEnumeration_up) ;
    while (enumerator_9943.hasCurrentObject ()) {
      const enumGalgasBool test_31 = var_bootloaderReservedRAMmap.reader_hasKey (enumerator_9943.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (206)) COMMA_SOURCE_FILE_AT_LINE (206)).boolEnum () ;
      if (kBoolTrue == test_31) {
        GALGAS_luint var_bootloaderReservedSize ;
        var_bootloaderReservedRAMmap.method_searchKey (enumerator_9943.current_lkey (HERE), var_bootloaderReservedSize, inCompiler COMMA_SOURCE_FILE_AT_LINE (208)) ;
        const enumGalgasBool test_32 = GALGAS_bool (kIsStrictSup, enumerator_9943.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9943.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (209)).objectCompare (var_bootloaderReservedSize.reader_uint (SOURCE_FILE_AT_LINE (209)))).boolEnum () ;
        if (kBoolTrue == test_32) {
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("for '").operator_concat (enumerator_9943.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (210)) COMMA_SOURCE_FILE_AT_LINE (210)).operator_concat (GALGAS_string ("' RAM bank, the bootloader implementation declares ") COMMA_SOURCE_FILE_AT_LINE (210)).operator_concat (enumerator_9943.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9943.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (211)).reader_string (SOURCE_FILE_AT_LINE (211)) COMMA_SOURCE_FILE_AT_LINE (211)).operator_concat (GALGAS_string (" byte(s), althought the bootloader specification reserves ") COMMA_SOURCE_FILE_AT_LINE (212)).operator_concat (var_bootloaderReservedSize.reader_uint (SOURCE_FILE_AT_LINE (213)).reader_string (SOURCE_FILE_AT_LINE (213)) COMMA_SOURCE_FILE_AT_LINE (213)).operator_concat (GALGAS_string (" byte(s)") COMMA_SOURCE_FILE_AT_LINE (214)) COMMA_SOURCE_FILE_AT_LINE (210)) ;
        }
      }else if (kBoolFalse == test_31) {
        const enumGalgasBool test_33 = GALGAS_bool (kIsStrictSup, enumerator_9943.current_mFirstFreeAddress (HERE).objectCompare (enumerator_9943.current_mFirstAddress (HERE))).boolEnum () ;
        if (kBoolTrue == test_33) {
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("for '").operator_concat (enumerator_9943.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)).operator_concat (GALGAS_string ("' RAM bank, the bootloader implementation declares ") COMMA_SOURCE_FILE_AT_LINE (217)).operator_concat (enumerator_9943.current_mFirstFreeAddress (HERE).substract_operation (enumerator_9943.current_mFirstAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (218)).reader_string (SOURCE_FILE_AT_LINE (218)) COMMA_SOURCE_FILE_AT_LINE (218)).operator_concat (GALGAS_string (" byte(s), althought the bootloader specification reserves no space") COMMA_SOURCE_FILE_AT_LINE (219)) COMMA_SOURCE_FILE_AT_LINE (217)) ;
        }
      }
      enumerator_9943.gotoNextObject () ;
    }
  }
  GALGAS_uint var_RAMsize = GALGAS_uint ((PMUInt32) 0U) ;
  cEnumerator_ramBankTable enumerator_10936 (var_ramBank, kEnumeration_up) ;
  while (enumerator_10936.hasCurrentObject ()) {
    const enumGalgasBool test_34 = GALGAS_bool (kIsStrictSup, enumerator_10936.current_mLastAddressPlusOne (HERE).objectCompare (var_RAMsize)).boolEnum () ;
    if (kBoolTrue == test_34) {
      var_RAMsize = enumerator_10936.current_mLastAddressPlusOne (HERE) ;
    }
    enumerator_10936.gotoNextObject () ;
  }
  {
  routine_build_5F_ipic_31__38__5F_block_5F_representation_5F_list (constinArgument_inSourceFileName, var_piccoloDeviceModel.mAttribute_mRomSize.mAttribute_uint.reader_sint_36__34_ (SOURCE_FILE_AT_LINE (233)), var_RAMsize.reader_sint_36__34_ (SOURCE_FILE_AT_LINE (234)), var_bootloaderRoutineDeclarationListForBootloaderImplementation, var_userRoutineDeclarationListForBootloaderImplementation, var_bootloaderReservedROMsize, var_bootloaderRoutineDeclarationListForUserProgramImplementation, var_userRoutineDeclarationListForUserProgramImplementation, var_accessBankSplitOffset, var_registerTable, var_declaredByteMap, var_routineDefinitionList, constinArgument_inPiccoloModel.mAttribute_mProgramKind, constinArgument_inPiccoloModel.mAttribute_mConstantDefinitionList, constinArgument_inPiccoloModel.mAttribute_mDataList, var_interruptDefinitionList, constinArgument_inPiccoloModel.mAttribute_mUnusedRegisterList, var_ramBank, var_hasHighInterrupt, var_hasLowInterrupt, var_piccoloDeviceModel.mAttribute_mDeviceName.mAttribute_string, var_piccoloDeviceModel.mAttribute_mRegisterTable, var_actualConfigurationMap, constinArgument_inPiccoloModel.mAttribute_mEndOfProgram, var_listFileContents, inCompiler COMMA_SOURCE_FILE_AT_LINE (231)) ;
  }
  const enumGalgasBool test_35 = GALGAS_bool (gOption_piccolo_5F_options_ouputListingFile.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_35) {
    var_listFileContents.dotAssign_operation (GALGAS_string ("*******************************************************************************\n") COMMA_SOURCE_FILE_AT_LINE (260)) ;
    GALGAS_string var_listFile = constinArgument_inSourceFileName.reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (261)).operator_concat (GALGAS_string (".list") COMMA_SOURCE_FILE_AT_LINE (261)) ;
    GALGAS_bool joker_12457_0 ; // Joker input parameter
    var_listFileContents.method_writeToFileWhenDifferentContents (var_listFile, joker_12457_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (262)) ;
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


