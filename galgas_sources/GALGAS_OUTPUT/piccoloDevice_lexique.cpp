//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'piccoloDevice_lexique.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 24th, 2009, at 11h58'4"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "piccoloDevice_lexique.h"

#include "strings/unicode_character_cpp.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_piccoloDevice_lexique::cTokenFor_piccoloDevice_lexique (void) :
mLexicalAttribute_identifierString (),
mLexicalAttribute_uint32value (),
mLexicalAttribute_charValue (),
mLexicalAttribute_tokenString () {
}

//---------------------------------------------------------------------------*

piccoloDevice_lexique::
piccoloDevice_lexique (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

piccoloDevice_lexique::
piccoloDevice_lexique (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gLexicalMessage_0 [] = {
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gLexicalMessage_1 [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gLexicalMessage_2 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 3
static const utf32 gLexicalMessage_3 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 4
static const utf32 gLexicalMessage_4 [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('I'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('>'),
  TO_UNICODE (' '),
  TO_UNICODE ('2'),
  TO_UNICODE ('5'),
  TO_UNICODE ('5'),
  TO_UNICODE (0)
} ;
//--- Message 5
static const utf32 gLexicalMessage_5 [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\"'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_identifier [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$controller$' :
static const utf32 gSyntaxErrorMessage_controller [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$processor$' :
static const utf32 gSyntaxErrorMessage_processor [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$romsize$' :
static const utf32 gSyntaxErrorMessage_romsize [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$eepromsize$' :
static const utf32 gSyntaxErrorMessage_eepromsize [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bank$' :
static const utf32 gSyntaxErrorMessage_bank [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$unusedregister$' :
static const utf32 gSyntaxErrorMessage_unusedregister [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mirrorat$' :
static const utf32 gSyntaxErrorMessage_mirrorat [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ram$' :
static const utf32 gSyntaxErrorMessage_ram [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$register$' :
static const utf32 gSyntaxErrorMessage_register [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$at$' :
static const utf32 gSyntaxErrorMessage_at [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$to$' :
static const utf32 gSyntaxErrorMessage_to [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$configuration$' :
static const utf32 gSyntaxErrorMessage_configuration [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$width$' :
static const utf32 gSyntaxErrorMessage_width [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$description$' :
static const utf32 gSyntaxErrorMessage_description [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mask$' :
static const utf32 gSyntaxErrorMessage_mask [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$illegal$' :
static const utf32 gSyntaxErrorMessage_illegal [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$message$' :
static const utf32 gSyntaxErrorMessage_message [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$setting$' :
static const utf32 gSyntaxErrorMessage_setting [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$integer$' :
static const utf32 gSyntaxErrorMessage_integer [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<$' :
static const utf32 gSyntaxErrorMessage__3C_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$>$' :
static const utf32 gSyntaxErrorMessage__3E_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage__2D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$/$' :
static const utf32 gSyntaxErrorMessage__2F_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('/'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D_ [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$string$' :
static const utf32 gSyntaxErrorMessage_string [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\"'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_comment [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void piccoloDevice_lexique::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [34] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_controller,
       gSyntaxErrorMessage_processor,
       gSyntaxErrorMessage_romsize,
       gSyntaxErrorMessage_eepromsize,
       gSyntaxErrorMessage_bank,
       gSyntaxErrorMessage_unusedregister,
       gSyntaxErrorMessage_mirrorat,
       gSyntaxErrorMessage_ram,
       gSyntaxErrorMessage_register,
       gSyntaxErrorMessage_at,
       gSyntaxErrorMessage_to,
       gSyntaxErrorMessage_configuration,
       gSyntaxErrorMessage_width,
       gSyntaxErrorMessage_description,
       gSyntaxErrorMessage_mask,
       gSyntaxErrorMessage_illegal,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_setting,
       gSyntaxErrorMessage_integer,
       gSyntaxErrorMessage__3C_,
       gSyntaxErrorMessage__3E_,
       gSyntaxErrorMessage__2C_,
       gSyntaxErrorMessage__2D_,
       gSyntaxErrorMessage__2F_,
       gSyntaxErrorMessage__3B_,
       gSyntaxErrorMessage__3A_,
       gSyntaxErrorMessage__5B_,
       gSyntaxErrorMessage__5D_,
       gSyntaxErrorMessage__7B_,
       gSyntaxErrorMessage__7D_,
       gSyntaxErrorMessage_string,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'controlKeyWordList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_controlKeyWordList = 18 ;

static const utf32 kEntry_0_forTable_controlKeyWordList [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_controlKeyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_controlKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_controlKeyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_controlKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_controlKeyWordList [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_controlKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_controlKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_controlKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_controlKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_controlKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_controlKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_controlKeyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_controlKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_controlKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_controlKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_controlKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_controlKeyWordList [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_controlKeyWordList [ktable_size_controlKeyWordList] = {
  {kEntry_0_forTable_controlKeyWordList, 2, piccoloDevice_lexique::piccoloDevice_lexique_1_at},
  {kEntry_1_forTable_controlKeyWordList, 2, piccoloDevice_lexique::piccoloDevice_lexique_1_to},
  {kEntry_2_forTable_controlKeyWordList, 3, piccoloDevice_lexique::piccoloDevice_lexique_1_ram},
  {kEntry_3_forTable_controlKeyWordList, 4, piccoloDevice_lexique::piccoloDevice_lexique_1_bank},
  {kEntry_4_forTable_controlKeyWordList, 4, piccoloDevice_lexique::piccoloDevice_lexique_1_mask},
  {kEntry_5_forTable_controlKeyWordList, 5, piccoloDevice_lexique::piccoloDevice_lexique_1_width},
  {kEntry_6_forTable_controlKeyWordList, 7, piccoloDevice_lexique::piccoloDevice_lexique_1_illegal},
  {kEntry_7_forTable_controlKeyWordList, 7, piccoloDevice_lexique::piccoloDevice_lexique_1_message},
  {kEntry_8_forTable_controlKeyWordList, 7, piccoloDevice_lexique::piccoloDevice_lexique_1_romsize},
  {kEntry_9_forTable_controlKeyWordList, 7, piccoloDevice_lexique::piccoloDevice_lexique_1_setting},
  {kEntry_10_forTable_controlKeyWordList, 8, piccoloDevice_lexique::piccoloDevice_lexique_1_mirrorat},
  {kEntry_11_forTable_controlKeyWordList, 8, piccoloDevice_lexique::piccoloDevice_lexique_1_register},
  {kEntry_12_forTable_controlKeyWordList, 9, piccoloDevice_lexique::piccoloDevice_lexique_1_processor},
  {kEntry_13_forTable_controlKeyWordList, 10, piccoloDevice_lexique::piccoloDevice_lexique_1_controller},
  {kEntry_14_forTable_controlKeyWordList, 10, piccoloDevice_lexique::piccoloDevice_lexique_1_eepromsize},
  {kEntry_15_forTable_controlKeyWordList, 11, piccoloDevice_lexique::piccoloDevice_lexique_1_description},
  {kEntry_16_forTable_controlKeyWordList, 13, piccoloDevice_lexique::piccoloDevice_lexique_1_configuration},
  {kEntry_17_forTable_controlKeyWordList, 14, piccoloDevice_lexique::piccoloDevice_lexique_1_unusedregister}
} ;

sint16 piccoloDevice_lexique::search_into_controlKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_controlKeyWordList, ktable_size_controlKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_delimitorsList = 11 ;

static const utf32 kEntry_0_forTable_delimitorsList [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_delimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_delimitorsList [] = {
  TO_UNICODE ('/'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_delimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_delimitorsList [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_delimitorsList [] = {
  TO_UNICODE ('<'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_delimitorsList [] = {
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_delimitorsList [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_delimitorsList [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_delimitorsList [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_delimitorsList [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_delimitorsList [ktable_size_delimitorsList] = {
  {kEntry_0_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__2C_},
  {kEntry_1_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__2D_},
  {kEntry_2_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__2F_},
  {kEntry_3_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__3A_},
  {kEntry_4_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__3B_},
  {kEntry_5_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__3C_},
  {kEntry_6_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__3E_},
  {kEntry_7_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__5B_},
  {kEntry_8_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__5D_},
  {kEntry_9_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__7B_},
  {kEntry_10_forTable_delimitorsList, 1, piccoloDevice_lexique::piccoloDevice_lexique_1__7D_}
} ;

sint16 piccoloDevice_lexique::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_delimitorsList, ktable_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String piccoloDevice_lexique::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s << "$$" ;
  }else{
    switch (ptr->mTokenCode) {
    case  piccoloDevice_lexique_1_:
      s << "$$" ;
      break ;
    case  piccoloDevice_lexique_1_identifier:
      s << "$"
        << "identifier"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->mLexicalAttribute_tokenString) ;
      break;
    case  piccoloDevice_lexique_1_controller:
      s << "$"
        << "controller"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_processor:
      s << "$"
        << "processor"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_romsize:
      s << "$"
        << "romsize"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_eepromsize:
      s << "$"
        << "eepromsize"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_bank:
      s << "$"
        << "bank"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_unusedregister:
      s << "$"
        << "unusedregister"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_mirrorat:
      s << "$"
        << "mirrorat"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_ram:
      s << "$"
        << "ram"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_register:
      s << "$"
        << "register"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_at:
      s << "$"
        << "at"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_to:
      s << "$"
        << "to"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_configuration:
      s << "$"
        << "configuration"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_width:
      s << "$"
        << "width"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_description:
      s << "$"
        << "description"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_mask:
      s << "$"
        << "mask"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_illegal:
      s << "$"
        << "illegal"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_message:
      s << "$"
        << "message"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_setting:
      s << "$"
        << "setting"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_integer:
      s << "$"
        << "integer"
        << "$" ;
      s << " " ;
      s.appendUnsigned (ptr->mLexicalAttribute_uint32value) ;
      break;
    case  piccoloDevice_lexique_1__3C_:
      s << "$"
        << "<"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__3E_:
      s << "$"
        << ">"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__2C_:
      s << "$"
        << ","
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__2D_:
      s << "$"
        << "-"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__2F_:
      s << "$"
        << "/"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__3B_:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__3A_:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__5B_:
      s << "$"
        << "["
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__5D_:
      s << "$"
        << "]"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__7B_:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1__7D_:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  piccoloDevice_lexique_1_string:
      s << "$"
        << "string"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->mLexicalAttribute_tokenString) ;
      break;
    case  piccoloDevice_lexique_1_comment:
      s << "$"
        << "comment"
        << "$" ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '-'
static const utf32 kUnicodeString__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '/'
static const utf32 kUnicodeString__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '0x'
static const utf32 kUnicodeString__30_x [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '<'
static const utf32 kUnicodeString__3C_ [] = {
  TO_UNICODE ('<'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '>'
static const utf32 kUnicodeString__3E_ [] = {
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '['
static const utf32 kUnicodeString__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ']'
static const utf32 kUnicodeString__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '{'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '}'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool piccoloDevice_lexique::
parseLexicalToken (void) {
  cTokenFor_piccoloDevice_lexique token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.mLexicalAttribute_identifierString.setLengthToZero () ;
    token.mLexicalAttribute_uint32value = 0 ;
    token.mLexicalAttribute_charValue = TO_UNICODE ('\0') ;
    token.mLexicalAttribute_tokenString.setLengthToZero () ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_identifierString, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = search_into_controlKeyWordList (token.mLexicalAttribute_identifierString) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = piccoloDevice_lexique_1_identifier ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__30_x, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = piccoloDevice_lexique_1_integer ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_1, gLexicalMessage_2) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_1, gLexicalMessage_2) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = piccoloDevice_lexique_1_integer ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3C_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3E_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3E_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2C_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2F_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2F_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3A_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__5B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__5D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__7B_ ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__7D_ ;
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
            if (testForInputUTF32Char (TO_UNICODE ('f'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\f')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('n'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\n')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('r'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\r')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('t'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\t')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('v'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\v')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\\')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('0'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\0')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\"')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\''))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\'')) ;
            }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              do {
                ::scanner_routine_enterHexDigitIntoASCIIcharacter (*this, token.mLexicalAttribute_charValue, previousChar (), gLexicalMessage_4, gLexicalMessage_2) ;
                if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
                }else{
                  mLoop = false ;
                }
              }while (mLoop) ;
              mLoop = true ;
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, token.mLexicalAttribute_charValue) ;
            }else{
              lexicalError (gLexicalMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = piccoloDevice_lexique_1_string ;
          enterToken (token) ;
        }else{
          lexicalError (gLexicalMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = piccoloDevice_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 piccoloDevice_lexique::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_piccoloDevice_lexique token ;
  mLoop = true ;
  token.mTokenCode = -1 ;
  while (token.mTokenCode < 0) {
    token.mLexicalAttribute_identifierString.setLengthToZero () ;
    token.mLexicalAttribute_uint32value = 0 ;
    token.mLexicalAttribute_charValue = TO_UNICODE ('\0') ;
    token.mLexicalAttribute_tokenString.setLengthToZero () ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_identifierString, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = search_into_controlKeyWordList (token.mLexicalAttribute_identifierString) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = piccoloDevice_lexique_1_identifier ;
        }
      }else if (testForInputUTF32String (kUnicodeString__30_x, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_routine_enterHexDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_0, gLexicalMessage_2) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = piccoloDevice_lexique_1_integer ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_1, gLexicalMessage_2) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.mLexicalAttribute_uint32value, gLexicalMessage_1, gLexicalMessage_2) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = piccoloDevice_lexique_1_integer ;
      }else if (testForInputUTF32String (kUnicodeString__3C_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3C_ ;
      }else if (testForInputUTF32String (kUnicodeString__3E_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3E_ ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2C_ ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2D_ ;
      }else if (testForInputUTF32String (kUnicodeString__2F_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__2F_ ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3B_ ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__3A_ ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__5B_ ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__5D_ ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__7B_ ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = piccoloDevice_lexique_1__7D_ ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
            if (testForInputUTF32Char (TO_UNICODE ('f'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\f')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('n'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\n')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('r'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\r')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('t'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\t')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('v'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\v')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\\')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('0'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\0')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\"')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\''))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, TO_UNICODE ('\'')) ;
            }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              do {
                ::scanner_routine_enterHexDigitIntoASCIIcharacter (*this, token.mLexicalAttribute_charValue, previousChar (), gLexicalMessage_4, gLexicalMessage_2) ;
                if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
                }else{
                  mLoop = false ;
                }
              }while (mLoop) ;
              mLoop = true ;
              ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, token.mLexicalAttribute_charValue) ;
            }else{
              lexicalError (gLexicalMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.mLexicalAttribute_tokenString, previousChar ()) ;
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = piccoloDevice_lexique_1_string ;
        }else{
          lexicalError (gLexicalMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            mLoop = false ;
          }
        }while (mLoop) ;
        mLoop = true ;
        token.mTokenCode = piccoloDevice_lexique_1_comment ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = piccoloDevice_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 piccoloDevice_lexique::getStylesCount (void) {
  return 7 ;
}

//---------------------------------------------------------------------------*

const char * piccoloDevice_lexique::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [8] = {"Default style", "Keywords:", "Instructions:", "Delimiters:", "Integer Constants:", "String Constants:", "Comments:", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * piccoloDevice_lexique::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [8] = {"", "keywordStyle", "instructionStyle", "delimitersStyle", "integerStyle", "stringStyle", "commentStyle", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 piccoloDevice_lexique::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [34] = {0,
    0 /* piccoloDevice_lexique_1_identifier */,
    1 /* piccoloDevice_lexique_1_controller */,
    1 /* piccoloDevice_lexique_1_processor */,
    1 /* piccoloDevice_lexique_1_romsize */,
    1 /* piccoloDevice_lexique_1_eepromsize */,
    1 /* piccoloDevice_lexique_1_bank */,
    1 /* piccoloDevice_lexique_1_unusedregister */,
    1 /* piccoloDevice_lexique_1_mirrorat */,
    1 /* piccoloDevice_lexique_1_ram */,
    1 /* piccoloDevice_lexique_1_register */,
    1 /* piccoloDevice_lexique_1_at */,
    1 /* piccoloDevice_lexique_1_to */,
    1 /* piccoloDevice_lexique_1_configuration */,
    1 /* piccoloDevice_lexique_1_width */,
    1 /* piccoloDevice_lexique_1_description */,
    1 /* piccoloDevice_lexique_1_mask */,
    1 /* piccoloDevice_lexique_1_illegal */,
    1 /* piccoloDevice_lexique_1_message */,
    1 /* piccoloDevice_lexique_1_setting */,
    4 /* piccoloDevice_lexique_1_integer */,
    3 /* piccoloDevice_lexique_1__3C_ */,
    3 /* piccoloDevice_lexique_1__3E_ */,
    3 /* piccoloDevice_lexique_1__2C_ */,
    3 /* piccoloDevice_lexique_1__2D_ */,
    3 /* piccoloDevice_lexique_1__2F_ */,
    3 /* piccoloDevice_lexique_1__3B_ */,
    3 /* piccoloDevice_lexique_1__3A_ */,
    3 /* piccoloDevice_lexique_1__5B_ */,
    3 /* piccoloDevice_lexique_1__5D_ */,
    3 /* piccoloDevice_lexique_1__7B_ */,
    3 /* piccoloDevice_lexique_1__7D_ */,
    5 /* piccoloDevice_lexique_1_string */,
    6 /* piccoloDevice_lexique_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void piccoloDevice_lexique::enterToken (const cTokenFor_piccoloDevice_lexique & inToken) {
  cTokenFor_piccoloDevice_lexique * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_piccoloDevice_lexique ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mFirstLocation = mTokenFirstLocation ;
  ptr->mLastLocation  = mTokenLastLocation ;
  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  ptr->mLexicalAttribute_identifierString = inToken.mLexicalAttribute_identifierString ;
  ptr->mLexicalAttribute_uint32value = inToken.mLexicalAttribute_uint32value ;
  ptr->mLexicalAttribute_charValue = inToken.mLexicalAttribute_charValue ;
  ptr->mLexicalAttribute_tokenString = inToken.mLexicalAttribute_tokenString ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------*

void piccoloDevice_lexique::
assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_identifierString) ;
}

//---------------------------------------------------------------------------*

C_String piccoloDevice_lexique::
attributeValue_identifierString (void) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_identifierString ;
}

//---------------------------------------------------------------------------*

void piccoloDevice_lexique::
assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, ptr->mLexicalAttribute_uint32value) ;
}

//---------------------------------------------------------------------------*

uint32 piccoloDevice_lexique::
attributeValue_uint32value (void) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_uint32value ;
}

//---------------------------------------------------------------------------*

void piccoloDevice_lexique::
assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, ptr->mLexicalAttribute_charValue) ;
}

//---------------------------------------------------------------------------*

utf32 piccoloDevice_lexique::
attributeValue_charValue (void) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_charValue ;
}

//---------------------------------------------------------------------------*

void piccoloDevice_lexique::
assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->mLexicalAttribute_tokenString) ;
}

//---------------------------------------------------------------------------*

C_String piccoloDevice_lexique::
attributeValue_tokenString (void) const {
  cTokenFor_piccoloDevice_lexique * ptr = (cTokenFor_piccoloDevice_lexique *) mCurrentTokenPtr ;
  return ptr->mLexicalAttribute_tokenString ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

