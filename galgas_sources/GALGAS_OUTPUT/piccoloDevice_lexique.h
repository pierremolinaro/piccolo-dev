//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'piccoloDevice_lexique.h'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 21th, 2009, at 21h4'58"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


#ifndef piccoloDevice_lexique_0_DEFINED
#define piccoloDevice_lexique_0_DEFINED

//---------------------------------------------------------------------------*

#include "galgas/GGS_lstring.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_lbool.h"
#include "galgas/C_Lexique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    R O U T I N E S                         *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    F U N C T I O N S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                       T O K E N    C L A S S                              *
//                                                                           *
//---------------------------------------------------------------------------*

class cTokenFor_piccoloDevice_lexique : public cToken {
  public : utf32 mLexicalAttribute_charValue ;
  public : C_String mLexicalAttribute_identifierString ;
  public : C_String mLexicalAttribute_tokenString ;
  public : PMUInt32 mLexicalAttribute_uint32value ;

  public : cTokenFor_piccoloDevice_lexique (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     S C A N N E R    C L A S S                            *
//                                                                           *
//---------------------------------------------------------------------------*

class piccoloDevice_lexique : public C_Lexique {
//--- Constructors
  public : piccoloDevice_lexique (C_Compiler * inCallerCompiler,
                       const C_String & inDependencyFileExtension,
                       const C_String & inDependencyFilePath,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public : piccoloDevice_lexique (C_Compiler * inCallerCompiler,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceString,
                       const C_String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~piccoloDevice_lexique (void) {}
  #endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


//--- Terminal symbols enumeration
  public : enum {piccoloDevice_lexique_1_,
  piccoloDevice_lexique_1_identifier,
  piccoloDevice_lexique_1_integer,
  piccoloDevice_lexique_1_string,
  piccoloDevice_lexique_1_comment,
  piccoloDevice_lexique_1_controller,
  piccoloDevice_lexique_1_processor,
  piccoloDevice_lexique_1_romsize,
  piccoloDevice_lexique_1_eepromsize,
  piccoloDevice_lexique_1_bank,
  piccoloDevice_lexique_1_unusedregister,
  piccoloDevice_lexique_1_mirrorat,
  piccoloDevice_lexique_1_ram,
  piccoloDevice_lexique_1_register,
  piccoloDevice_lexique_1_at,
  piccoloDevice_lexique_1_to,
  piccoloDevice_lexique_1_configuration,
  piccoloDevice_lexique_1_width,
  piccoloDevice_lexique_1_description,
  piccoloDevice_lexique_1_mask,
  piccoloDevice_lexique_1_illegal,
  piccoloDevice_lexique_1_message,
  piccoloDevice_lexique_1_setting,
  piccoloDevice_lexique_1__3C_,
  piccoloDevice_lexique_1__3E_,
  piccoloDevice_lexique_1__2C_,
  piccoloDevice_lexique_1__2D_,
  piccoloDevice_lexique_1__2F_,
  piccoloDevice_lexique_1__3B_,
  piccoloDevice_lexique_1__3A_,
  piccoloDevice_lexique_1__5B_,
  piccoloDevice_lexique_1__5D_,
  piccoloDevice_lexique_1__7B_,
  piccoloDevice_lexique_1__7D_} ;

//--- Key words table 'controlKeyWordList'
  public : static PMSInt16 search_into_controlKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'delimitorsList'
  public : static PMSInt16 search_into_delimitorsList (const C_String & inSearchedString) ;
  

//--- Assign from attribute
  public : void assignFromAttribute_charValue (GGS_lchar & outValue) const ;
  public : void assignFromAttribute_identifierString (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_tokenString (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_uint32value (GGS_luint & outValue) const ;


//--- Attribute access
  public : utf32 attributeValue_charValue (void) const ;
  public : C_String attributeValue_identifierString (void) const ;
  public : C_String attributeValue_tokenString (void) const ;
  public : PMUInt32 attributeValue_uint32value (void) const ;


//--- Parse lexical token
  protected : virtual bool parseLexicalToken (void) ;

//--- Append terminal message
  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,
                                                              C_String & messageErreur) ;

//--- Get terminal count
  public : virtual PMSInt16 terminalVocabularyCount (void) const { return 33 ; }

//--- Get Token String
  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;

//--- Enter Token
  protected : void enterToken (const cTokenFor_piccoloDevice_lexique & inToken) ;
} ;

//---------------------------------------------------------------------------*

#endif
