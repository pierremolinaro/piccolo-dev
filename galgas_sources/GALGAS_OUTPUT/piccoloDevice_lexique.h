//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'piccoloDevice_lexique.h'                       *
//                        Generated by version 2.5.4                         *
//                     january 30th, 2014, at 17h15'7"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


#ifndef piccoloDevice_5F_lexique_CLASS_DEFINED
#define piccoloDevice_5F_lexique_CLASS_DEFINED

//-----------------------------------------------------------------------------*

#include "galgas2/C_Lexique.h"
#include "galgas2/predefined-types.h"

//-----------------------------------------------------------------------------*
//                                                                             *
//                    E X T E R N    R O U T I N E S                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//-----------------------------------------------------------------------------*
//                                                                             *
//                    E X T E R N    F U N C T I O N S                       *
//                                                                             *
//-----------------------------------------------------------------------------*

//-----------------------------------------------------------------------------*
//                                                                             *
//                       T O K E N    C L A S S                              *
//                                                                             *
//-----------------------------------------------------------------------------*

class cTokenFor_piccoloDevice_5F_lexique : public cToken {
  public : utf32 mLexicalAttribute_charValue ;
  public : C_String mLexicalAttribute_identifierString ;
  public : C_String mLexicalAttribute_tokenString ;
  public : PMUInt32 mLexicalAttribute_uint_33__32_value ;

  public : cTokenFor_piccoloDevice_5F_lexique (void) ;
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                     S C A N N E R    C L A S S                            *
//                                                                             *
//-----------------------------------------------------------------------------*

class C_Lexique_piccoloDevice_5F_lexique : public C_Lexique {
//--- Constructors
  public : C_Lexique_piccoloDevice_5F_lexique (C_Compiler * inCallerCompiler,
                       const C_String & inDependencyFileExtension,
                       const C_String & inDependencyFilePath,
                       const C_String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public : C_Lexique_piccoloDevice_5F_lexique (C_Compiler * inCallerCompiler,
                       const C_String & inSourceString,
                       const C_String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Instrospection
  public : static GALGAS_stringlist symbols (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_SharedObject::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~ C_Lexique_piccoloDevice_5F_lexique (void) {}
  #endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


//--- Terminal symbols enumeration
  public : enum {kToken_,
   kToken_identifier,
   kToken_integer,
   kToken_string,
   kToken_comment,
   kToken_controller,
   kToken_processor,
   kToken_romsize,
   kToken_eepromsize,
   kToken_bank,
   kToken_unusedregister,
   kToken_mirrorat,
   kToken_ram,
   kToken_register,
   kToken_at,
   kToken_to,
   kToken_configuration,
   kToken_width,
   kToken_description,
   kToken_mask,
   kToken_illegal,
   kToken_message,
   kToken_setting,
   kToken__3C_,
   kToken__3E_,
   kToken__2C_,
   kToken__2D_,
   kToken__2F_,
   kToken__3B_,
   kToken__3A_,
   kToken__5B_,
   kToken__5D_,
   kToken__7B_,
   kToken__7D_} ;

//--- Key words table 'controlKeyWordList'
  public : static PMSInt16 search_into_controlKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'delimitorsList'
  public : static PMSInt16 search_into_delimitorsList (const C_String & inSearchedString) ;
  

//--- Assign from attribute
  public : GALGAS_lchar synthetizedAttribute_charValue (void) const ;
  public : GALGAS_lstring synthetizedAttribute_identifierString (void) const ;
  public : GALGAS_lstring synthetizedAttribute_tokenString (void) const ;
  public : GALGAS_luint synthetizedAttribute_uint_33__32_value (void) const ;


//--- Attribute access
  public : utf32 attributeValue_charValue (void) const ;
  public : C_String attributeValue_identifierString (void) const ;
  public : C_String attributeValue_tokenString (void) const ;
  public : PMUInt32 attributeValue_uint_33__32_value (void) const ;


//--- Indexing keys

//--- Indexing directory
  protected : virtual C_String indexingDirectory (void) const ;

//--- Parse lexical token
  protected : virtual bool parseLexicalToken (void) ;

//--- Append terminal message
  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,
                                                              C_String & messageErreur) ;

//--- Get terminal count
  public : virtual PMSInt16 terminalVocabularyCount (void) const { return 33 ; }

//--- Get Token String
  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;

//--- Enter Token
  protected : void enterToken (const cTokenFor_piccoloDevice_5F_lexique & inToken) ;
} ;

//-----------------------------------------------------------------------------*

#endif
