//-----------------------------------------------------------------------------*
//                                                                             *
//                     File 'piccoloDevice_semantics.cpp'                      *
//                         Generated by version 2.5.8                          *
//                        may 19th, 2014, at 19h44'40"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "piccoloDevice_semantics.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*


//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccoloDevice_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*

cMapElement_declaredByteMap::cMapElement_declaredByteMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_declaredByteMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_declaredByteMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredByteMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_declaredByteMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredByteMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredByteMap * operand = (cMapElement_declaredByteMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap::GALGAS_declaredByteMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap::GALGAS_declaredByteMap (const GALGAS_declaredByteMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap & GALGAS_declaredByteMap::operator = (const GALGAS_declaredByteMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::constructor_mapWithMapToOverride (const GALGAS_declaredByteMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_declaredByteMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_declaredByteMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_declaredByteMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredByteMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' byte is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_declaredByteMap_searchKey = "the '%K' byte is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_declaredByteMap::method_searchKey (GALGAS_lstring inKey,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  const cMapElement_declaredByteMap * p = (const cMapElement_declaredByteMap *) performSearch (inKey,
                                                                                                 inCompiler,
                                                                                                 kSearchErrorMessage_declaredByteMap_searchKey
                                                                                                 COMMA_THERE) ;
  if (NULL == p) {
  }else{
    macroValidSharedObject (p, const cMapElement_declaredByteMap) ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_declaredByteMap * GALGAS_declaredByteMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                const GALGAS_string & inKey
                                                                                                COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredByteMap * result = (cMapElement_declaredByteMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_declaredByteMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_declaredByteMap * GALGAS_declaredByteMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                   const GALGAS_lstring & inKey
                                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_declaredByteMap_searchKey COMMA_THERE) ;
  cMapElement_declaredByteMap * result = (cMapElement_declaredByteMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_declaredByteMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_declaredByteMap::cEnumerator_declaredByteMap (const GALGAS_declaredByteMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element cEnumerator_declaredByteMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredByteMap * p = (const cMapElement_declaredByteMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_declaredByteMap) ;
  return GALGAS_declaredByteMap_2E_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredByteMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @declaredByteMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredByteMap ("declaredByteMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredByteMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredByteMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredByteMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredByteMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap GALGAS_declaredByteMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_declaredByteMap result ;
  const GALGAS_declaredByteMap * p = (const GALGAS_declaredByteMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredByteMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredByteMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_registerTable::cMapElement_registerTable (const GALGAS_lstring & inKey,
                                                      const GALGAS_uintlist & in_mRegisterAddressList,
                                                      const GALGAS_uint & in_mSize,
                                                      const GALGAS_bitSliceTable & in_mBitSliceTable,
                                                      const GALGAS_string & in_mBitDefinitionString
                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterAddressList (in_mRegisterAddressList),
mAttribute_mSize (in_mSize),
mAttribute_mBitSliceTable (in_mBitSliceTable),
mAttribute_mBitDefinitionString (in_mBitDefinitionString) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_registerTable::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddressList.isValid () && mAttribute_mSize.isValid () && mAttribute_mBitSliceTable.isValid () && mAttribute_mBitDefinitionString.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_registerTable::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_registerTable (mAttribute_lkey, mAttribute_mRegisterAddressList, mAttribute_mSize, mAttribute_mBitSliceTable, mAttribute_mBitDefinitionString COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_registerTable::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddressList" ":" ;
  mAttribute_mRegisterAddressList.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSize" ":" ;
  mAttribute_mSize.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitSliceTable" ":" ;
  mAttribute_mBitSliceTable.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mBitDefinitionString" ":" ;
  mAttribute_mBitDefinitionString.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_registerTable::compare (const cCollectionElement * inOperand) const {
  cMapElement_registerTable * operand = (cMapElement_registerTable *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddressList.objectCompare (operand->mAttribute_mRegisterAddressList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mSize.objectCompare (operand->mAttribute_mSize) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitSliceTable.objectCompare (operand->mAttribute_mBitSliceTable) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBitDefinitionString.objectCompare (operand->mAttribute_mBitDefinitionString) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable::GALGAS_registerTable (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable::GALGAS_registerTable (const GALGAS_registerTable & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable & GALGAS_registerTable::operator = (const GALGAS_registerTable & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_registerTable result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::constructor_mapWithMapToOverride (const GALGAS_registerTable & inMapToOverride
                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_registerTable result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::reader_overriddenMap (C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_registerTable result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_insertKey (GALGAS_lstring inKey,
                                               GALGAS_uintlist inArgument0,
                                               GALGAS_uint inArgument1,
                                               GALGAS_bitSliceTable inArgument2,
                                               GALGAS_string inArgument3,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  cMapElement_registerTable * p = NULL ;
  macroMyNew (p, cMapElement_registerTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' register is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_registerTable_searchKey = "the '%K' register is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_registerTable::method_searchKey (GALGAS_lstring inKey,
                                             GALGAS_uintlist & outArgument0,
                                             GALGAS_uint & outArgument1,
                                             GALGAS_bitSliceTable & outArgument2,
                                             GALGAS_string & outArgument3,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) performSearch (inKey,
                                                                                             inCompiler,
                                                                                             kSearchErrorMessage_registerTable_searchKey
                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_registerTable) ;
    outArgument0 = p->mAttribute_mRegisterAddressList ;
    outArgument1 = p->mAttribute_mSize ;
    outArgument2 = p->mAttribute_mBitSliceTable ;
    outArgument3 = p->mAttribute_mBitDefinitionString ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_registerTable::reader_mRegisterAddressListForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_registerTable) ;
    result = p->mAttribute_mRegisterAddressList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_registerTable::reader_mSizeForKey (const GALGAS_string & inKey,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_registerTable) ;
    result = p->mAttribute_mSize ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_registerTable::reader_mBitSliceTableForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_bitSliceTable result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_registerTable) ;
    result = p->mAttribute_mBitSliceTable ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_registerTable::reader_mBitDefinitionStringForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_registerTable) ;
    result = p->mAttribute_mBitDefinitionString ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMRegisterAddressListForKey (GALGAS_uintlist inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mRegisterAddressList = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMSizeForKey (GALGAS_uint inAttributeValue,
                                                    GALGAS_string inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mSize = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMBitSliceTableForKey (GALGAS_bitSliceTable inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mBitSliceTable = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable::modifier_setMBitDefinitionStringForKey (GALGAS_string inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * p = (cMapElement_registerTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_registerTable) ;
    p->mAttribute_mBitDefinitionString = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_registerTable * GALGAS_registerTable::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                            const GALGAS_string & inKey
                                                                                            COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_registerTable * result = (cMapElement_registerTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_registerTable) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_registerTable * GALGAS_registerTable::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                               const GALGAS_lstring & inKey
                                                                                               COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_registerTable_searchKey COMMA_THERE) ;
  cMapElement_registerTable * result = (cMapElement_registerTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_registerTable) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_registerTable::cEnumerator_registerTable (const GALGAS_registerTable & inEnumeratedObject,
                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element cEnumerator_registerTable::current (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_registerTable) ;
  return GALGAS_registerTable_2E_element (p->mAttribute_lkey, p->mAttribute_mRegisterAddressList, p->mAttribute_mSize, p->mAttribute_mBitSliceTable, p->mAttribute_mBitDefinitionString) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_registerTable::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_registerTable::current_mRegisterAddressList (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_registerTable) ;
  return p->mAttribute_mRegisterAddressList ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_registerTable::current_mSize (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_registerTable) ;
  return p->mAttribute_mSize ;
}

//-----------------------------------------------------------------------------*

GALGAS_bitSliceTable cEnumerator_registerTable::current_mBitSliceTable (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_registerTable) ;
  return p->mAttribute_mBitSliceTable ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_registerTable::current_mBitDefinitionString (LOCATION_ARGS) const {
  const cMapElement_registerTable * p = (const cMapElement_registerTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_registerTable) ;
  return p->mAttribute_mBitDefinitionString ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                             @registerTable type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerTable ("registerTable",
                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerTable::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerTable ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerTable::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerTable (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_registerTable::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_registerTable result ;
  const GALGAS_registerTable * p = (const GALGAS_registerTable *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerTable *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerTable", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_ramBankTable::cMapElement_ramBankTable (const GALGAS_lstring & inKey,
                                                    const GALGAS_uint & in_mFirstAddress,
                                                    const GALGAS_uint & in_mFirstFreeAddress,
                                                    const GALGAS_uint & in_mLastAddressPlusOne,
                                                    const GALGAS_uintlist & in_mMirrorOffsetList
                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mFirstAddress (in_mFirstAddress),
mAttribute_mFirstFreeAddress (in_mFirstFreeAddress),
mAttribute_mLastAddressPlusOne (in_mLastAddressPlusOne),
mAttribute_mMirrorOffsetList (in_mMirrorOffsetList) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_ramBankTable::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mFirstAddress.isValid () && mAttribute_mFirstFreeAddress.isValid () && mAttribute_mLastAddressPlusOne.isValid () && mAttribute_mMirrorOffsetList.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_ramBankTable::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_ramBankTable (mAttribute_lkey, mAttribute_mFirstAddress, mAttribute_mFirstFreeAddress, mAttribute_mLastAddressPlusOne, mAttribute_mMirrorOffsetList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_ramBankTable::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFirstAddress" ":" ;
  mAttribute_mFirstAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFirstFreeAddress" ":" ;
  mAttribute_mFirstFreeAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLastAddressPlusOne" ":" ;
  mAttribute_mLastAddressPlusOne.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMirrorOffsetList" ":" ;
  mAttribute_mMirrorOffsetList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_ramBankTable::compare (const cCollectionElement * inOperand) const {
  cMapElement_ramBankTable * operand = (cMapElement_ramBankTable *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mFirstAddress.objectCompare (operand->mAttribute_mFirstAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFirstFreeAddress.objectCompare (operand->mAttribute_mFirstFreeAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mLastAddressPlusOne.objectCompare (operand->mAttribute_mLastAddressPlusOne) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMirrorOffsetList.objectCompare (operand->mAttribute_mMirrorOffsetList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable::GALGAS_ramBankTable (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable::GALGAS_ramBankTable (const GALGAS_ramBankTable & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable & GALGAS_ramBankTable::operator = (const GALGAS_ramBankTable & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::constructor_mapWithMapToOverride (const GALGAS_ramBankTable & inMapToOverride
                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::reader_overriddenMap (C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_ramBankTable result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_insertKey (GALGAS_lstring inKey,
                                              GALGAS_uint inArgument0,
                                              GALGAS_uint inArgument1,
                                              GALGAS_uint inArgument2,
                                              GALGAS_uintlist inArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  cMapElement_ramBankTable * p = NULL ;
  macroMyNew (p, cMapElement_ramBankTable (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' bank ram is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_ramBankTable_searchKey = "the '%K' bank ram is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::method_searchKey (GALGAS_lstring inKey,
                                            GALGAS_uint & outArgument0,
                                            GALGAS_uint & outArgument1,
                                            GALGAS_uint & outArgument2,
                                            GALGAS_uintlist & outArgument3,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) performSearch (inKey,
                                                                                           inCompiler,
                                                                                           kSearchErrorMessage_ramBankTable_searchKey
                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_ramBankTable) ;
    outArgument0 = p->mAttribute_mFirstAddress ;
    outArgument1 = p->mAttribute_mFirstFreeAddress ;
    outArgument2 = p->mAttribute_mLastAddressPlusOne ;
    outArgument3 = p->mAttribute_mMirrorOffsetList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mFirstAddressForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_ramBankTable) ;
    result = p->mAttribute_mFirstAddress ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mFirstFreeAddressForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_ramBankTable) ;
    result = p->mAttribute_mFirstFreeAddress ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable::reader_mLastAddressPlusOneForKey (const GALGAS_string & inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_ramBankTable) ;
    result = p->mAttribute_mLastAddressPlusOne ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_ramBankTable::reader_mMirrorOffsetListForKey (const GALGAS_string & inKey,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) attributes ;
  GALGAS_uintlist result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_ramBankTable) ;
    result = p->mAttribute_mMirrorOffsetList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMFirstAddressForKey (GALGAS_uint inAttributeValue,
                                                           GALGAS_string inKey,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mFirstAddress = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMFirstFreeAddressForKey (GALGAS_uint inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mFirstFreeAddress = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMLastAddressPlusOneForKey (GALGAS_uint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mLastAddressPlusOne = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable::modifier_setMMirrorOffsetListForKey (GALGAS_uintlist inAttributeValue,
                                                               GALGAS_string inKey,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * p = (cMapElement_ramBankTable *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_ramBankTable) ;
    p->mAttribute_mMirrorOffsetList = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_ramBankTable * GALGAS_ramBankTable::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & inKey
                                                                                          COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_ramBankTable * result = (cMapElement_ramBankTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_ramBankTable) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_ramBankTable * GALGAS_ramBankTable::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                             const GALGAS_lstring & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_ramBankTable_searchKey COMMA_THERE) ;
  cMapElement_ramBankTable * result = (cMapElement_ramBankTable *) p ;
  macroNullOrValidSharedObject (result, cMapElement_ramBankTable) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_ramBankTable::cEnumerator_ramBankTable (const GALGAS_ramBankTable & inEnumeratedObject,
                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element cEnumerator_ramBankTable::current (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_ramBankTable) ;
  return GALGAS_ramBankTable_2E_element (p->mAttribute_lkey, p->mAttribute_mFirstAddress, p->mAttribute_mFirstFreeAddress, p->mAttribute_mLastAddressPlusOne, p->mAttribute_mMirrorOffsetList) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_ramBankTable::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mFirstAddress (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_ramBankTable) ;
  return p->mAttribute_mFirstAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mFirstFreeAddress (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_ramBankTable) ;
  return p->mAttribute_mFirstFreeAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_ramBankTable::current_mLastAddressPlusOne (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_ramBankTable) ;
  return p->mAttribute_mLastAddressPlusOne ;
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist cEnumerator_ramBankTable::current_mMirrorOffsetList (LOCATION_ARGS) const {
  const cMapElement_ramBankTable * p = (const cMapElement_ramBankTable *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_ramBankTable) ;
  return p->mAttribute_mMirrorOffsetList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                             @ramBankTable type                              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ramBankTable ("ramBankTable",
                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ramBankTable::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ramBankTable ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ramBankTable::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ramBankTable (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_ramBankTable::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_ramBankTable result ;
  const GALGAS_ramBankTable * p = (const GALGAS_ramBankTable *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ramBankTable *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ramBankTable", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType::GALGAS_processorType (void) :
mEnum (kNotBuilt) {
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_pic_31__38__5F__36__30_ (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_pic_31__38__5F__36__30_ ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_pic_31__38__5F__38__30_ (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_pic_31__38__5F__38__30_ ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_midrange (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_midrange ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::constructor_baseline (UNUSED_LOCATION_ARGS) {
  GALGAS_processorType result ;
  result.mEnum = kEnum_baseline ;
  return result ;
}

//-----------------------------------------------------------------------------*

static const char * gEnumNameArrayFor_processorType [5] = {
  "(not built)",
  "pic18_60",
  "pic18_80",
  "midrange",
  "baseline"
} ;

//-----------------------------------------------------------------------------*

void GALGAS_processorType::description (C_String & ioString,
                                        const int32_t /* inIndentation */) const {
  ioString << "<enum @processorType: " << gEnumNameArrayFor_processorType [mEnum] << ">" ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_processorType::objectCompare (const GALGAS_processorType & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = kOperandEqual ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                             @processorType type                             *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_processorType ("processorType",
                                      NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_processorType::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_processorType ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_processorType::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_processorType (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_processorType::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_processorType result ;
  const GALGAS_processorType * p = (const GALGAS_processorType *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_processorType *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("processorType", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//               Class for element of '@illegalMaskList' list                *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_illegalMaskList : public cCollectionElement {
  public : GALGAS_illegalMaskList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_illegalMaskList (const GALGAS_luint & in_mIllegalValue,
                                               const GALGAS_luint & in_mIllegalMask,
                                               const GALGAS_lstring & in_mDescription
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_illegalMaskList::cCollectionElement_illegalMaskList (const GALGAS_luint & in_mIllegalValue,
                                                                        const GALGAS_luint & in_mIllegalMask,
                                                                        const GALGAS_lstring & in_mDescription
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mIllegalValue, in_mIllegalMask, in_mDescription) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_illegalMaskList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_illegalMaskList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_illegalMaskList (mObject.mAttribute_mIllegalValue, mObject.mAttribute_mIllegalMask, mObject.mAttribute_mDescription COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_illegalMaskList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalValue" ":" ;
  mObject.mAttribute_mIllegalValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalMask" ":" ;
  mObject.mAttribute_mIllegalMask.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mObject.mAttribute_mDescription.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_illegalMaskList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_illegalMaskList * operand = (cCollectionElement_illegalMaskList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_illegalMaskList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList::GALGAS_illegalMaskList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList::GALGAS_illegalMaskList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::constructor_listWithValue (const GALGAS_luint & inOperand0,
                                                                          const GALGAS_luint & inOperand1,
                                                                          const GALGAS_lstring & inOperand2
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_illegalMaskList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                        const GALGAS_luint & in_mIllegalValue,
                                                        const GALGAS_luint & in_mIllegalMask,
                                                        const GALGAS_lstring & in_mDescription
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_illegalMaskList * p = NULL ;
  macroMyNew (p, cCollectionElement_illegalMaskList (in_mIllegalValue,
                                                     in_mIllegalMask,
                                                     in_mDescription COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::addAssign_operation (const GALGAS_luint & inOperand0,
                                                  const GALGAS_luint & inOperand1,
                                                  const GALGAS_lstring & inOperand2
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_illegalMaskList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_insertAtIndex (const GALGAS_luint inOperand0,
                                                     const GALGAS_luint inOperand1,
                                                     const GALGAS_lstring inOperand2,
                                                     const GALGAS_uint inInsertionIndex,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_illegalMaskList (inOperand0, inOperand1, inOperand2 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_removeAtIndex (GALGAS_luint & outOperand0,
                                                     GALGAS_luint & outOperand1,
                                                     GALGAS_lstring & outOperand2,
                                                     const GALGAS_uint inRemoveIndex,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
      outOperand0 = p->mObject.mAttribute_mIllegalValue ;
      outOperand1 = p->mObject.mAttribute_mIllegalMask ;
      outOperand2 = p->mObject.mAttribute_mDescription ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_popFirst (GALGAS_luint & outOperand0,
                                                GALGAS_luint & outOperand1,
                                                GALGAS_lstring & outOperand2,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::modifier_popLast (GALGAS_luint & outOperand0,
                                               GALGAS_luint & outOperand1,
                                               GALGAS_lstring & outOperand2,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::method_first (GALGAS_luint & outOperand0,
                                           GALGAS_luint & outOperand1,
                                           GALGAS_lstring & outOperand2,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::method_last (GALGAS_luint & outOperand0,
                                          GALGAS_luint & outOperand1,
                                          GALGAS_lstring & outOperand2,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    outOperand0 = p->mObject.mAttribute_mIllegalValue ;
    outOperand1 = p->mObject.mAttribute_mIllegalMask ;
    outOperand2 = p->mObject.mAttribute_mDescription ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::operator_concat (const GALGAS_illegalMaskList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result = GALGAS_illegalMaskList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_illegalMaskList result = GALGAS_illegalMaskList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList::dotAssign_operation (const GALGAS_illegalMaskList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList::reader_mIllegalValueAtIndex (const GALGAS_uint & inIndex,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mIllegalValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList::reader_mIllegalMaskAtIndex (const GALGAS_uint & inIndex,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mIllegalMask ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_illegalMaskList::reader_mDescriptionAtIndex (const GALGAS_uint & inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_illegalMaskList * p = (cCollectionElement_illegalMaskList *) attributes.ptr () ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_illegalMaskList) ;
    result = p->mObject.mAttribute_mDescription ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_illegalMaskList::cEnumerator_illegalMaskList (const GALGAS_illegalMaskList & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element cEnumerator_illegalMaskList::current (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_illegalMaskList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_illegalMaskList::current_mIllegalValue (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mIllegalValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_illegalMaskList::current_mIllegalMask (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mIllegalMask ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_illegalMaskList::current_mDescription (LOCATION_ARGS) const {
  const cCollectionElement_illegalMaskList * p = (const cCollectionElement_illegalMaskList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_illegalMaskList) ;
  return p->mObject.mAttribute_mDescription ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                            @illegalMaskList type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_illegalMaskList ("illegalMaskList",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_illegalMaskList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_illegalMaskList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_illegalMaskList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_illegalMaskList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_illegalMaskList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_illegalMaskList result ;
  const GALGAS_illegalMaskList * p = (const GALGAS_illegalMaskList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_illegalMaskList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("illegalMaskList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_fieldSettingMap::cMapElement_fieldSettingMap (const GALGAS_lstring & inKey,
                                                          const GALGAS_uint & in_mValue,
                                                          const GALGAS_uint & in_mMask
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mValue (in_mValue),
mAttribute_mMask (in_mMask) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_fieldSettingMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValue.isValid () && mAttribute_mMask.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_fieldSettingMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_fieldSettingMap (mAttribute_lkey, mAttribute_mValue, mAttribute_mMask COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_fieldSettingMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mValue" ":" ;
  mAttribute_mValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMask" ":" ;
  mAttribute_mMask.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_fieldSettingMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_fieldSettingMap * operand = (cMapElement_fieldSettingMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mValue.objectCompare (operand->mAttribute_mValue) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMask.objectCompare (operand->mAttribute_mMask) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap::GALGAS_fieldSettingMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap::GALGAS_fieldSettingMap (const GALGAS_fieldSettingMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap & GALGAS_fieldSettingMap::operator = (const GALGAS_fieldSettingMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_fieldSettingMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_fieldSettingMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_fieldSettingMap::constructor_mapWithMapToOverride (const GALGAS_fieldSettingMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_fieldSettingMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_fieldSettingMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_fieldSettingMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 GALGAS_uint inArgument0,
                                                 GALGAS_uint inArgument1,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_fieldSettingMap * p = NULL ;
  macroMyNew (p, cMapElement_fieldSettingMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register setting is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_fieldSettingMap_searchKey = "the '%K' configuration register setting is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap::method_searchKey (GALGAS_lstring inKey,
                                               GALGAS_uint & outArgument0,
                                               GALGAS_uint & outArgument1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) performSearch (inKey,
                                                                                                 inCompiler,
                                                                                                 kSearchErrorMessage_fieldSettingMap_searchKey
                                                                                                 COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
    outArgument0 = p->mAttribute_mValue ;
    outArgument1 = p->mAttribute_mMask ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_fieldSettingMap::reader_mValueForKey (const GALGAS_string & inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
    result = p->mAttribute_mValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_fieldSettingMap::reader_mMaskForKey (const GALGAS_string & inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
    result = p->mAttribute_mMask ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap::modifier_setMValueForKey (GALGAS_uint inAttributeValue,
                                                       GALGAS_string inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_fieldSettingMap * p = (cMapElement_fieldSettingMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_fieldSettingMap) ;
    p->mAttribute_mValue = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap::modifier_setMMaskForKey (GALGAS_uint inAttributeValue,
                                                      GALGAS_string inKey,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_fieldSettingMap * p = (cMapElement_fieldSettingMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_fieldSettingMap) ;
    p->mAttribute_mMask = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_fieldSettingMap * GALGAS_fieldSettingMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                const GALGAS_string & inKey
                                                                                                COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_fieldSettingMap * result = (cMapElement_fieldSettingMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_fieldSettingMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_fieldSettingMap * GALGAS_fieldSettingMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                   const GALGAS_lstring & inKey
                                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_fieldSettingMap_searchKey COMMA_THERE) ;
  cMapElement_fieldSettingMap * result = (cMapElement_fieldSettingMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_fieldSettingMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_fieldSettingMap::cEnumerator_fieldSettingMap (const GALGAS_fieldSettingMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element cEnumerator_fieldSettingMap::current (LOCATION_ARGS) const {
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
  return GALGAS_fieldSettingMap_2E_element (p->mAttribute_lkey, p->mAttribute_mValue, p->mAttribute_mMask) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_fieldSettingMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_fieldSettingMap::current_mValue (LOCATION_ARGS) const {
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
  return p->mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_fieldSettingMap::current_mMask (LOCATION_ARGS) const {
  const cMapElement_fieldSettingMap * p = (const cMapElement_fieldSettingMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_fieldSettingMap) ;
  return p->mAttribute_mMask ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @fieldSettingMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_fieldSettingMap ("fieldSettingMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_fieldSettingMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fieldSettingMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_fieldSettingMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_fieldSettingMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_fieldSettingMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_fieldSettingMap result ;
  const GALGAS_fieldSettingMap * p = (const GALGAS_fieldSettingMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_fieldSettingMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("fieldSettingMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMaskMap::cMapElement_configRegisterMaskMap (const GALGAS_lstring & inKey,
                                                                      const GALGAS_luint & in_mMaskValue,
                                                                      const GALGAS_lstring & in_mDescription,
                                                                      const GALGAS_fieldSettingMap & in_mFieldSettingMap
                                                                      COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mMaskValue (in_mMaskValue),
mAttribute_mDescription (in_mDescription),
mAttribute_mFieldSettingMap (in_mFieldSettingMap) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_configRegisterMaskMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_configRegisterMaskMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configRegisterMaskMap (mAttribute_lkey, mAttribute_mMaskValue, mAttribute_mDescription, mAttribute_mFieldSettingMap COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_configRegisterMaskMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaskValue" ":" ;
  mAttribute_mMaskValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mAttribute_mDescription.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldSettingMap" ":" ;
  mAttribute_mFieldSettingMap.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_configRegisterMaskMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configRegisterMaskMap * operand = (cMapElement_configRegisterMaskMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mMaskValue.objectCompare (operand->mAttribute_mMaskValue) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDescription.objectCompare (operand->mAttribute_mDescription) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFieldSettingMap.objectCompare (operand->mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap::GALGAS_configRegisterMaskMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap::GALGAS_configRegisterMaskMap (const GALGAS_configRegisterMaskMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap & GALGAS_configRegisterMaskMap::operator = (const GALGAS_configRegisterMaskMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::constructor_mapWithMapToOverride (const GALGAS_configRegisterMaskMap & inMapToOverride
                                                                                             COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  GALGAS_configRegisterMaskMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_insertKey (GALGAS_lstring inKey,
                                                       GALGAS_luint inArgument0,
                                                       GALGAS_lstring inArgument1,
                                                       GALGAS_fieldSettingMap inArgument2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMaskMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMaskMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register mask is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_configRegisterMaskMap_searchKey = "the '%K' configuration register mask is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::method_searchKey (GALGAS_lstring inKey,
                                                     GALGAS_luint & outArgument0,
                                                     GALGAS_lstring & outArgument1,
                                                     GALGAS_fieldSettingMap & outArgument2,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) performSearch (inKey,
                                                                                                             inCompiler,
                                                                                                             kSearchErrorMessage_configRegisterMaskMap_searchKey
                                                                                                             COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
    outArgument0 = p->mAttribute_mMaskValue ;
    outArgument1 = p->mAttribute_mDescription ;
    outArgument2 = p->mAttribute_mFieldSettingMap ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMaskMap::reader_mMaskValueForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mMaskValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configRegisterMaskMap::reader_mDescriptionForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mDescription ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configRegisterMaskMap::reader_mFieldSettingMapForKey (const GALGAS_string & inKey,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) attributes ;
  GALGAS_fieldSettingMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
    result = p->mAttribute_mFieldSettingMap ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMMaskValueForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mMaskValue = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMDescriptionForKey (GALGAS_lstring inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mDescription = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap::modifier_setMFieldSettingMapForKey (GALGAS_fieldSettingMap inAttributeValue,
                                                                       GALGAS_string inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * p = (cMapElement_configRegisterMaskMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMaskMap) ;
    p->mAttribute_mFieldSettingMap = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMaskMap * GALGAS_configRegisterMaskMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                            const GALGAS_string & inKey
                                                                                                            COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * result = (cMapElement_configRegisterMaskMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMaskMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMaskMap * GALGAS_configRegisterMaskMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                               const GALGAS_lstring & inKey
                                                                                                               COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_configRegisterMaskMap_searchKey COMMA_THERE) ;
  cMapElement_configRegisterMaskMap * result = (cMapElement_configRegisterMaskMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMaskMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_configRegisterMaskMap::cEnumerator_configRegisterMaskMap (const GALGAS_configRegisterMaskMap & inEnumeratedObject,
                                                                      const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element cEnumerator_configRegisterMaskMap::current (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
  return GALGAS_configRegisterMaskMap_2E_element (p->mAttribute_lkey, p->mAttribute_mMaskValue, p->mAttribute_mDescription, p->mAttribute_mFieldSettingMap) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMaskMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMaskMap::current_mMaskValue (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mMaskValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMaskMap::current_mDescription (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mDescription ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap cEnumerator_configRegisterMaskMap::current_mFieldSettingMap (LOCATION_ARGS) const {
  const cMapElement_configRegisterMaskMap * p = (const cMapElement_configRegisterMaskMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMaskMap) ;
  return p->mAttribute_mFieldSettingMap ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @configRegisterMaskMap type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMaskMap ("configRegisterMaskMap",
                                              NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMaskMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMaskMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMaskMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMaskMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMaskMap::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap result ;
  const GALGAS_configRegisterMaskMap * p = (const GALGAS_configRegisterMaskMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMaskMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMaskMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMap::cMapElement_configRegisterMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_luint & in_mRegisterAddress,
                                                              const GALGAS_luint & in_mRegisterWidth,
                                                              const GALGAS_configRegisterMaskMap & in_mConfigRegisterMaskMap,
                                                              const GALGAS_illegalMaskList & in_mIllegalMaskList
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterAddress (in_mRegisterAddress),
mAttribute_mRegisterWidth (in_mRegisterWidth),
mAttribute_mConfigRegisterMaskMap (in_mConfigRegisterMaskMap),
mAttribute_mIllegalMaskList (in_mIllegalMaskList) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_configRegisterMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddress.isValid () && mAttribute_mRegisterWidth.isValid () && mAttribute_mConfigRegisterMaskMap.isValid () && mAttribute_mIllegalMaskList.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_configRegisterMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configRegisterMap (mAttribute_lkey, mAttribute_mRegisterAddress, mAttribute_mRegisterWidth, mAttribute_mConfigRegisterMaskMap, mAttribute_mIllegalMaskList COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_configRegisterMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterAddress" ":" ;
  mAttribute_mRegisterAddress.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterWidth" ":" ;
  mAttribute_mRegisterWidth.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mConfigRegisterMaskMap" ":" ;
  mAttribute_mConfigRegisterMaskMap.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIllegalMaskList" ":" ;
  mAttribute_mIllegalMaskList.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_configRegisterMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configRegisterMap * operand = (cMapElement_configRegisterMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterAddress.objectCompare (operand->mAttribute_mRegisterAddress) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterWidth.objectCompare (operand->mAttribute_mRegisterWidth) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mConfigRegisterMaskMap.objectCompare (operand->mAttribute_mConfigRegisterMaskMap) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mIllegalMaskList.objectCompare (operand->mAttribute_mIllegalMaskList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap::GALGAS_configRegisterMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap::GALGAS_configRegisterMap (const GALGAS_configRegisterMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap & GALGAS_configRegisterMap::operator = (const GALGAS_configRegisterMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::constructor_mapWithMapToOverride (const GALGAS_configRegisterMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_configRegisterMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_luint inArgument0,
                                                   GALGAS_luint inArgument1,
                                                   GALGAS_configRegisterMaskMap inArgument2,
                                                   GALGAS_illegalMaskList inArgument3,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_configRegisterMap * p = NULL ;
  macroMyNew (p, cMapElement_configRegisterMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration register is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_configRegisterMap_searchKey = "the '%K' configuration register is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_luint & outArgument0,
                                                 GALGAS_luint & outArgument1,
                                                 GALGAS_configRegisterMaskMap & outArgument2,
                                                 GALGAS_illegalMaskList & outArgument3,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_configRegisterMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
    outArgument0 = p->mAttribute_mRegisterAddress ;
    outArgument1 = p->mAttribute_mRegisterWidth ;
    outArgument2 = p->mAttribute_mConfigRegisterMaskMap ;
    outArgument3 = p->mAttribute_mIllegalMaskList ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap::reader_mRegisterAddressForKey (const GALGAS_string & inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
    result = p->mAttribute_mRegisterAddress ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap::reader_mRegisterWidthForKey (const GALGAS_string & inKey,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
    result = p->mAttribute_mRegisterWidth ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMap::reader_mConfigRegisterMaskMapForKey (const GALGAS_string & inKey,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_configRegisterMaskMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
    result = p->mAttribute_mConfigRegisterMaskMap ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_configRegisterMap::reader_mIllegalMaskListForKey (const GALGAS_string & inKey,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) attributes ;
  GALGAS_illegalMaskList result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
    result = p->mAttribute_mIllegalMaskList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMRegisterAddressForKey (GALGAS_luint inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mRegisterAddress = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMRegisterWidthForKey (GALGAS_luint inAttributeValue,
                                                                 GALGAS_string inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mRegisterWidth = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMConfigRegisterMaskMapForKey (GALGAS_configRegisterMaskMap inAttributeValue,
                                                                         GALGAS_string inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mConfigRegisterMaskMap = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap::modifier_setMIllegalMaskListForKey (GALGAS_illegalMaskList inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * p = (cMapElement_configRegisterMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configRegisterMap) ;
    p->mAttribute_mIllegalMaskList = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMap * GALGAS_configRegisterMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                    const GALGAS_string & inKey
                                                                                                    COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configRegisterMap * result = (cMapElement_configRegisterMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_configRegisterMap * GALGAS_configRegisterMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                       const GALGAS_lstring & inKey
                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_configRegisterMap_searchKey COMMA_THERE) ;
  cMapElement_configRegisterMap * result = (cMapElement_configRegisterMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configRegisterMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_configRegisterMap::cEnumerator_configRegisterMap (const GALGAS_configRegisterMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element cEnumerator_configRegisterMap::current (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
  return GALGAS_configRegisterMap_2E_element (p->mAttribute_lkey, p->mAttribute_mRegisterAddress, p->mAttribute_mRegisterWidth, p->mAttribute_mConfigRegisterMaskMap, p->mAttribute_mIllegalMaskList) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configRegisterMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMap::current_mRegisterAddress (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
  return p->mAttribute_mRegisterAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configRegisterMap::current_mRegisterWidth (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
  return p->mAttribute_mRegisterWidth ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap cEnumerator_configRegisterMap::current_mConfigRegisterMaskMap (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
  return p->mAttribute_mConfigRegisterMaskMap ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList cEnumerator_configRegisterMap::current_mIllegalMaskList (LOCATION_ARGS) const {
  const cMapElement_configRegisterMap * p = (const cMapElement_configRegisterMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configRegisterMap) ;
  return p->mAttribute_mIllegalMaskList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @configRegisterMap type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMap ("configRegisterMap",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_configRegisterMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMap result ;
  const GALGAS_configRegisterMap * p = (const GALGAS_configRegisterMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel::GALGAS_piccoloDeviceModel (void) :
mAttribute_mDeviceName (),
mAttribute_mProcessorType (),
mAttribute_mRomSize (),
mAttribute_mBankCount (),
mAttribute_mRegisterTable (),
mAttribute_mRamBankTable (),
mAttribute_mEepromSize (),
mAttribute_mEepromAddress (),
mAttribute_mConfigRegisterMap (),
mAttribute_mSharedBankName () {
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel::~ GALGAS_piccoloDeviceModel (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel::GALGAS_piccoloDeviceModel (const GALGAS_lstring & inOperand0,
                                                      const GALGAS_processorType & inOperand1,
                                                      const GALGAS_luint & inOperand2,
                                                      const GALGAS_luint & inOperand3,
                                                      const GALGAS_registerTable & inOperand4,
                                                      const GALGAS_ramBankTable & inOperand5,
                                                      const GALGAS_uint & inOperand6,
                                                      const GALGAS_uint & inOperand7,
                                                      const GALGAS_configRegisterMap & inOperand8,
                                                      const GALGAS_string & inOperand9) :
mAttribute_mDeviceName (inOperand0),
mAttribute_mProcessorType (inOperand1),
mAttribute_mRomSize (inOperand2),
mAttribute_mBankCount (inOperand3),
mAttribute_mRegisterTable (inOperand4),
mAttribute_mRamBankTable (inOperand5),
mAttribute_mEepromSize (inOperand6),
mAttribute_mEepromAddress (inOperand7),
mAttribute_mConfigRegisterMap (inOperand8),
mAttribute_mSharedBankName (inOperand9) {
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel GALGAS_piccoloDeviceModel::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_piccoloDeviceModel (GALGAS_lstring::constructor_default (HERE),
                                    GALGAS_processorType::constructor_pic_31__38__5F__36__30_ (HERE),
                                    GALGAS_luint::constructor_default (HERE),
                                    GALGAS_luint::constructor_default (HERE),
                                    GALGAS_registerTable::constructor_emptyMap (HERE),
                                    GALGAS_ramBankTable::constructor_emptyMap (HERE),
                                    GALGAS_uint::constructor_default (HERE),
                                    GALGAS_uint::constructor_default (HERE),
                                    GALGAS_configRegisterMap::constructor_emptyMap (HERE),
                                    GALGAS_string::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel GALGAS_piccoloDeviceModel::constructor_new (const GALGAS_lstring & inOperand0,
                                                                      const GALGAS_processorType & inOperand1,
                                                                      const GALGAS_luint & inOperand2,
                                                                      const GALGAS_luint & inOperand3,
                                                                      const GALGAS_registerTable & inOperand4,
                                                                      const GALGAS_ramBankTable & inOperand5,
                                                                      const GALGAS_uint & inOperand6,
                                                                      const GALGAS_uint & inOperand7,
                                                                      const GALGAS_configRegisterMap & inOperand8,
                                                                      const GALGAS_string & inOperand9 
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_piccoloDeviceModel result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid () && inOperand8.isValid () && inOperand9.isValid ()) {
    result = GALGAS_piccoloDeviceModel (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7, inOperand8, inOperand9) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_piccoloDeviceModel::objectCompare (const GALGAS_piccoloDeviceModel & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mDeviceName.objectCompare (inOperand.mAttribute_mDeviceName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mProcessorType.objectCompare (inOperand.mAttribute_mProcessorType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRomSize.objectCompare (inOperand.mAttribute_mRomSize) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBankCount.objectCompare (inOperand.mAttribute_mBankCount) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterTable.objectCompare (inOperand.mAttribute_mRegisterTable) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRamBankTable.objectCompare (inOperand.mAttribute_mRamBankTable) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEepromSize.objectCompare (inOperand.mAttribute_mEepromSize) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEepromAddress.objectCompare (inOperand.mAttribute_mEepromAddress) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mConfigRegisterMap.objectCompare (inOperand.mAttribute_mConfigRegisterMap) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSharedBankName.objectCompare (inOperand.mAttribute_mSharedBankName) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_piccoloDeviceModel::isValid (void) const {
  return mAttribute_mDeviceName.isValid () && mAttribute_mProcessorType.isValid () && mAttribute_mRomSize.isValid () && mAttribute_mBankCount.isValid () && mAttribute_mRegisterTable.isValid () && mAttribute_mRamBankTable.isValid () && mAttribute_mEepromSize.isValid () && mAttribute_mEepromAddress.isValid () && mAttribute_mConfigRegisterMap.isValid () && mAttribute_mSharedBankName.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_piccoloDeviceModel::drop (void) {
  mAttribute_mDeviceName.drop () ;
  mAttribute_mProcessorType.drop () ;
  mAttribute_mRomSize.drop () ;
  mAttribute_mBankCount.drop () ;
  mAttribute_mRegisterTable.drop () ;
  mAttribute_mRamBankTable.drop () ;
  mAttribute_mEepromSize.drop () ;
  mAttribute_mEepromAddress.drop () ;
  mAttribute_mConfigRegisterMap.drop () ;
  mAttribute_mSharedBankName.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_piccoloDeviceModel::description (C_String & ioString,
                                             const int32_t inIndentation) const {
  ioString << "<struct @piccoloDeviceModel:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mDeviceName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mProcessorType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRomSize.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBankCount.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterTable.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRamBankTable.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEepromSize.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEepromAddress.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mConfigRegisterMap.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSharedBankName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_piccoloDeviceModel::reader_mDeviceName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDeviceName ;
}

//-----------------------------------------------------------------------------*

GALGAS_processorType GALGAS_piccoloDeviceModel::reader_mProcessorType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mProcessorType ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_piccoloDeviceModel::reader_mRomSize (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRomSize ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_piccoloDeviceModel::reader_mBankCount (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBankCount ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable GALGAS_piccoloDeviceModel::reader_mRegisterTable (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterTable ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable GALGAS_piccoloDeviceModel::reader_mRamBankTable (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRamBankTable ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_piccoloDeviceModel::reader_mEepromSize (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEepromSize ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_piccoloDeviceModel::reader_mEepromAddress (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEepromAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap GALGAS_piccoloDeviceModel::reader_mConfigRegisterMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mConfigRegisterMap ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_piccoloDeviceModel::reader_mSharedBankName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSharedBankName ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                          @piccoloDeviceModel type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_piccoloDeviceModel ("piccoloDeviceModel",
                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_piccoloDeviceModel::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_piccoloDeviceModel ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_piccoloDeviceModel::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_piccoloDeviceModel (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_piccoloDeviceModel GALGAS_piccoloDeviceModel::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_piccoloDeviceModel result ;
  const GALGAS_piccoloDeviceModel * p = (const GALGAS_piccoloDeviceModel *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_piccoloDeviceModel *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("piccoloDeviceModel", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element::GALGAS_declaredByteMap_2E_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element::~ GALGAS_declaredByteMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element::GALGAS_declaredByteMap_2E_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element GALGAS_declaredByteMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_declaredByteMap_2E_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element GALGAS_declaredByteMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_declaredByteMap_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_declaredByteMap_2E_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_declaredByteMap_2E_element::objectCompare (const GALGAS_declaredByteMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_declaredByteMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredByteMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredByteMap_2E_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @declaredByteMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_declaredByteMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @declaredByteMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredByteMap_2E_element ("declaredByteMap.element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredByteMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredByteMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredByteMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredByteMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredByteMap_2E_element GALGAS_declaredByteMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_declaredByteMap_2E_element result ;
  const GALGAS_declaredByteMap_2E_element * p = (const GALGAS_declaredByteMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredByteMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredByteMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element::GALGAS_registerTable_2E_element (void) :
mAttribute_lkey (),
mAttribute_mRegisterAddressList (),
mAttribute_mSize (),
mAttribute_mBitSliceTable (),
mAttribute_mBitDefinitionString () {
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element::~ GALGAS_registerTable_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element::GALGAS_registerTable_2E_element (const GALGAS_lstring & inOperand0,
                                                                  const GALGAS_uintlist & inOperand1,
                                                                  const GALGAS_uint & inOperand2,
                                                                  const GALGAS_bitSliceTable & inOperand3,
                                                                  const GALGAS_string & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mRegisterAddressList (inOperand1),
mAttribute_mSize (inOperand2),
mAttribute_mBitSliceTable (inOperand3),
mAttribute_mBitDefinitionString (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element GALGAS_registerTable_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_registerTable_2E_element (GALGAS_lstring::constructor_default (HERE),
                                          GALGAS_uintlist::constructor_emptyList (HERE),
                                          GALGAS_uint::constructor_default (HERE),
                                          GALGAS_bitSliceTable::constructor_emptyMap (HERE),
                                          GALGAS_string::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element GALGAS_registerTable_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_uintlist & inOperand1,
                                                                                  const GALGAS_uint & inOperand2,
                                                                                  const GALGAS_bitSliceTable & inOperand3,
                                                                                  const GALGAS_string & inOperand4 
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_registerTable_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_registerTable_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_registerTable_2E_element::objectCompare (const GALGAS_registerTable_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterAddressList.objectCompare (inOperand.mAttribute_mRegisterAddressList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSize.objectCompare (inOperand.mAttribute_mSize) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBitSliceTable.objectCompare (inOperand.mAttribute_mBitSliceTable) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBitDefinitionString.objectCompare (inOperand.mAttribute_mBitDefinitionString) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_registerTable_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddressList.isValid () && mAttribute_mSize.isValid () && mAttribute_mBitSliceTable.isValid () && mAttribute_mBitDefinitionString.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mRegisterAddressList.drop () ;
  mAttribute_mSize.drop () ;
  mAttribute_mBitSliceTable.drop () ;
  mAttribute_mBitDefinitionString.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_registerTable_2E_element::description (C_String & ioString,
                                                   const int32_t inIndentation) const {
  ioString << "<struct @registerTable.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterAddressList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSize.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBitSliceTable.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBitDefinitionString.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_registerTable_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_registerTable_2E_element::reader_mRegisterAddressList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterAddressList ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_registerTable_2E_element::reader_mSize (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSize ;
}

//-----------------------------------------------------------------------------*

GALGAS_bitSliceTable GALGAS_registerTable_2E_element::reader_mBitSliceTable (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitSliceTable ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_registerTable_2E_element::reader_mBitDefinitionString (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBitDefinitionString ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @registerTable.element type                         *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_registerTable_2E_element ("registerTable.element",
                                                 NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_registerTable_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_registerTable_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_registerTable_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_registerTable_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_registerTable_2E_element GALGAS_registerTable_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_registerTable_2E_element result ;
  const GALGAS_registerTable_2E_element * p = (const GALGAS_registerTable_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_registerTable_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("registerTable.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element::GALGAS_ramBankTable_2E_element (void) :
mAttribute_lkey (),
mAttribute_mFirstAddress (),
mAttribute_mFirstFreeAddress (),
mAttribute_mLastAddressPlusOne (),
mAttribute_mMirrorOffsetList () {
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element::~ GALGAS_ramBankTable_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element::GALGAS_ramBankTable_2E_element (const GALGAS_lstring & inOperand0,
                                                                const GALGAS_uint & inOperand1,
                                                                const GALGAS_uint & inOperand2,
                                                                const GALGAS_uint & inOperand3,
                                                                const GALGAS_uintlist & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mFirstAddress (inOperand1),
mAttribute_mFirstFreeAddress (inOperand2),
mAttribute_mLastAddressPlusOne (inOperand3),
mAttribute_mMirrorOffsetList (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element GALGAS_ramBankTable_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_ramBankTable_2E_element (GALGAS_lstring::constructor_default (HERE),
                                         GALGAS_uint::constructor_default (HERE),
                                         GALGAS_uint::constructor_default (HERE),
                                         GALGAS_uint::constructor_default (HERE),
                                         GALGAS_uintlist::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element GALGAS_ramBankTable_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                const GALGAS_uint & inOperand1,
                                                                                const GALGAS_uint & inOperand2,
                                                                                const GALGAS_uint & inOperand3,
                                                                                const GALGAS_uintlist & inOperand4 
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_ramBankTable_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_ramBankTable_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_ramBankTable_2E_element::objectCompare (const GALGAS_ramBankTable_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFirstAddress.objectCompare (inOperand.mAttribute_mFirstAddress) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFirstFreeAddress.objectCompare (inOperand.mAttribute_mFirstFreeAddress) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLastAddressPlusOne.objectCompare (inOperand.mAttribute_mLastAddressPlusOne) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mMirrorOffsetList.objectCompare (inOperand.mAttribute_mMirrorOffsetList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_ramBankTable_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mFirstAddress.isValid () && mAttribute_mFirstFreeAddress.isValid () && mAttribute_mLastAddressPlusOne.isValid () && mAttribute_mMirrorOffsetList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mFirstAddress.drop () ;
  mAttribute_mFirstFreeAddress.drop () ;
  mAttribute_mLastAddressPlusOne.drop () ;
  mAttribute_mMirrorOffsetList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_ramBankTable_2E_element::description (C_String & ioString,
                                                  const int32_t inIndentation) const {
  ioString << "<struct @ramBankTable.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFirstAddress.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFirstFreeAddress.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLastAddressPlusOne.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mMirrorOffsetList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_ramBankTable_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable_2E_element::reader_mFirstAddress (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFirstAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable_2E_element::reader_mFirstFreeAddress (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFirstFreeAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_ramBankTable_2E_element::reader_mLastAddressPlusOne (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLastAddressPlusOne ;
}

//-----------------------------------------------------------------------------*

GALGAS_uintlist GALGAS_ramBankTable_2E_element::reader_mMirrorOffsetList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMirrorOffsetList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                         @ramBankTable.element type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ramBankTable_2E_element ("ramBankTable.element",
                                                NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ramBankTable_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ramBankTable_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ramBankTable_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ramBankTable_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_ramBankTable_2E_element GALGAS_ramBankTable_2E_element::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_ramBankTable_2E_element result ;
  const GALGAS_ramBankTable_2E_element * p = (const GALGAS_ramBankTable_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ramBankTable_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("ramBankTable.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element::GALGAS_illegalMaskList_2E_element (void) :
mAttribute_mIllegalValue (),
mAttribute_mIllegalMask (),
mAttribute_mDescription () {
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element::~ GALGAS_illegalMaskList_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element::GALGAS_illegalMaskList_2E_element (const GALGAS_luint & inOperand0,
                                                                      const GALGAS_luint & inOperand1,
                                                                      const GALGAS_lstring & inOperand2) :
mAttribute_mIllegalValue (inOperand0),
mAttribute_mIllegalMask (inOperand1),
mAttribute_mDescription (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element GALGAS_illegalMaskList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_illegalMaskList_2E_element (GALGAS_luint::constructor_default (HERE),
                                            GALGAS_luint::constructor_default (HERE),
                                            GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element GALGAS_illegalMaskList_2E_element::constructor_new (const GALGAS_luint & inOperand0,
                                                                                      const GALGAS_luint & inOperand1,
                                                                                      const GALGAS_lstring & inOperand2 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_illegalMaskList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_illegalMaskList_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_illegalMaskList_2E_element::objectCompare (const GALGAS_illegalMaskList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mIllegalValue.objectCompare (inOperand.mAttribute_mIllegalValue) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIllegalMask.objectCompare (inOperand.mAttribute_mIllegalMask) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDescription.objectCompare (inOperand.mAttribute_mDescription) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_illegalMaskList_2E_element::isValid (void) const {
  return mAttribute_mIllegalValue.isValid () && mAttribute_mIllegalMask.isValid () && mAttribute_mDescription.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList_2E_element::drop (void) {
  mAttribute_mIllegalValue.drop () ;
  mAttribute_mIllegalMask.drop () ;
  mAttribute_mDescription.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_illegalMaskList_2E_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @illegalMaskList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mIllegalValue.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIllegalMask.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDescription.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList_2E_element::reader_mIllegalValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIllegalValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_illegalMaskList_2E_element::reader_mIllegalMask (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIllegalMask ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_illegalMaskList_2E_element::reader_mDescription (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDescription ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @illegalMaskList.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_illegalMaskList_2E_element ("illegalMaskList.element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_illegalMaskList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_illegalMaskList_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_illegalMaskList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_illegalMaskList_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList_2E_element GALGAS_illegalMaskList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_illegalMaskList_2E_element result ;
  const GALGAS_illegalMaskList_2E_element * p = (const GALGAS_illegalMaskList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_illegalMaskList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("illegalMaskList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element::GALGAS_fieldSettingMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mValue (),
mAttribute_mMask () {
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element::~ GALGAS_fieldSettingMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element::GALGAS_fieldSettingMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                      const GALGAS_uint & inOperand1,
                                                                      const GALGAS_uint & inOperand2) :
mAttribute_lkey (inOperand0),
mAttribute_mValue (inOperand1),
mAttribute_mMask (inOperand2) {
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element GALGAS_fieldSettingMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_fieldSettingMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                            GALGAS_uint::constructor_default (HERE),
                                            GALGAS_uint::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element GALGAS_fieldSettingMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                      const GALGAS_uint & inOperand1,
                                                                                      const GALGAS_uint & inOperand2 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_fieldSettingMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_fieldSettingMap_2E_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_fieldSettingMap_2E_element::objectCompare (const GALGAS_fieldSettingMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mValue.objectCompare (inOperand.mAttribute_mValue) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mMask.objectCompare (inOperand.mAttribute_mMask) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_fieldSettingMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mValue.isValid () && mAttribute_mMask.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mValue.drop () ;
  mAttribute_mMask.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_fieldSettingMap_2E_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @fieldSettingMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mValue.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mMask.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_fieldSettingMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_fieldSettingMap_2E_element::reader_mValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_fieldSettingMap_2E_element::reader_mMask (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMask ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @fieldSettingMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_fieldSettingMap_2E_element ("fieldSettingMap.element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_fieldSettingMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_fieldSettingMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_fieldSettingMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_fieldSettingMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap_2E_element GALGAS_fieldSettingMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_fieldSettingMap_2E_element result ;
  const GALGAS_fieldSettingMap_2E_element * p = (const GALGAS_fieldSettingMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_fieldSettingMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("fieldSettingMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element::GALGAS_configRegisterMaskMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mMaskValue (),
mAttribute_mDescription (),
mAttribute_mFieldSettingMap () {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element::~ GALGAS_configRegisterMaskMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element::GALGAS_configRegisterMaskMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                                  const GALGAS_luint & inOperand1,
                                                                                  const GALGAS_lstring & inOperand2,
                                                                                  const GALGAS_fieldSettingMap & inOperand3) :
mAttribute_lkey (inOperand0),
mAttribute_mMaskValue (inOperand1),
mAttribute_mDescription (inOperand2),
mAttribute_mFieldSettingMap (inOperand3) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element GALGAS_configRegisterMaskMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_configRegisterMaskMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_luint::constructor_default (HERE),
                                                  GALGAS_lstring::constructor_default (HERE),
                                                  GALGAS_fieldSettingMap::constructor_emptyMap (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element GALGAS_configRegisterMaskMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                  const GALGAS_luint & inOperand1,
                                                                                                  const GALGAS_lstring & inOperand2,
                                                                                                  const GALGAS_fieldSettingMap & inOperand3 
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid ()) {
    result = GALGAS_configRegisterMaskMap_2E_element (inOperand0, inOperand1, inOperand2, inOperand3) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_configRegisterMaskMap_2E_element::objectCompare (const GALGAS_configRegisterMaskMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mMaskValue.objectCompare (inOperand.mAttribute_mMaskValue) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDescription.objectCompare (inOperand.mAttribute_mDescription) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldSettingMap.objectCompare (inOperand.mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_configRegisterMaskMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mMaskValue.drop () ;
  mAttribute_mDescription.drop () ;
  mAttribute_mFieldSettingMap.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMaskMap_2E_element::description (C_String & ioString,
                                                           const int32_t inIndentation) const {
  ioString << "<struct @configRegisterMaskMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mMaskValue.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDescription.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldSettingMap.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configRegisterMaskMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMaskMap_2E_element::reader_mMaskValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMaskValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configRegisterMaskMap_2E_element::reader_mDescription (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDescription ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configRegisterMaskMap_2E_element::reader_mFieldSettingMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldSettingMap ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @configRegisterMaskMap.element type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMaskMap_2E_element ("configRegisterMaskMap.element",
                                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMaskMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMaskMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMaskMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMaskMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap_2E_element GALGAS_configRegisterMaskMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                C_Compiler * inCompiler
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMaskMap_2E_element result ;
  const GALGAS_configRegisterMaskMap_2E_element * p = (const GALGAS_configRegisterMaskMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMaskMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMaskMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element::GALGAS_configRegisterMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mRegisterAddress (),
mAttribute_mRegisterWidth (),
mAttribute_mConfigRegisterMaskMap (),
mAttribute_mIllegalMaskList () {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element::~ GALGAS_configRegisterMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element::GALGAS_configRegisterMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_luint & inOperand1,
                                                                          const GALGAS_luint & inOperand2,
                                                                          const GALGAS_configRegisterMaskMap & inOperand3,
                                                                          const GALGAS_illegalMaskList & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mRegisterAddress (inOperand1),
mAttribute_mRegisterWidth (inOperand2),
mAttribute_mConfigRegisterMaskMap (inOperand3),
mAttribute_mIllegalMaskList (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element GALGAS_configRegisterMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_configRegisterMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                              GALGAS_luint::constructor_default (HERE),
                                              GALGAS_luint::constructor_default (HERE),
                                              GALGAS_configRegisterMaskMap::constructor_emptyMap (HERE),
                                              GALGAS_illegalMaskList::constructor_emptyList (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element GALGAS_configRegisterMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_luint & inOperand1,
                                                                                          const GALGAS_luint & inOperand2,
                                                                                          const GALGAS_configRegisterMaskMap & inOperand3,
                                                                                          const GALGAS_illegalMaskList & inOperand4 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_configRegisterMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_configRegisterMap_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_configRegisterMap_2E_element::objectCompare (const GALGAS_configRegisterMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterAddress.objectCompare (inOperand.mAttribute_mRegisterAddress) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterWidth.objectCompare (inOperand.mAttribute_mRegisterWidth) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mConfigRegisterMaskMap.objectCompare (inOperand.mAttribute_mConfigRegisterMaskMap) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIllegalMaskList.objectCompare (inOperand.mAttribute_mIllegalMaskList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_configRegisterMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterAddress.isValid () && mAttribute_mRegisterWidth.isValid () && mAttribute_mConfigRegisterMaskMap.isValid () && mAttribute_mIllegalMaskList.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mRegisterAddress.drop () ;
  mAttribute_mRegisterWidth.drop () ;
  mAttribute_mConfigRegisterMaskMap.drop () ;
  mAttribute_mIllegalMaskList.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configRegisterMap_2E_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @configRegisterMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterAddress.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterWidth.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mConfigRegisterMaskMap.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIllegalMaskList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configRegisterMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap_2E_element::reader_mRegisterAddress (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterAddress ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configRegisterMap_2E_element::reader_mRegisterWidth (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterWidth ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMaskMap GALGAS_configRegisterMap_2E_element::reader_mConfigRegisterMaskMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mConfigRegisterMaskMap ;
}

//-----------------------------------------------------------------------------*

GALGAS_illegalMaskList GALGAS_configRegisterMap_2E_element::reader_mIllegalMaskList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIllegalMaskList ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @configRegisterMap.element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configRegisterMap_2E_element ("configRegisterMap.element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configRegisterMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configRegisterMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configRegisterMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configRegisterMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configRegisterMap_2E_element GALGAS_configRegisterMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_configRegisterMap_2E_element result ;
  const GALGAS_configRegisterMap_2E_element * p = (const GALGAS_configRegisterMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configRegisterMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configRegisterMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


