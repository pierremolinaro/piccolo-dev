//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'piccoloDevice_semantics.h'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 31th, 2008, at 12h37'20"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccoloDevice_semantics_DEFINED
#define piccoloDevice_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "bitSlice.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerTable ;
class GGS_ramBankTable ;
class GGS_processorType ;
class GGS_illegalMaskList ;
class GGS_fieldSettingMap ;
class GGS_configRegisterMaskMap ;
class GGS_configRegisterMap ;
class GGS_piccoloDeviceModel ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@registerTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_registerTable ;

class GGS_registerTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_registerTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_registerTable & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_registerTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_registerTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_registerTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_registerTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRegisterAddressListForKey (C_Compiler & inLexique,
                        const GGS_uintlist & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMSizeForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMBitSliceTableForKey (C_Compiler & inLexique,
                        const GGS_bitSliceTable & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uintlist &  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_bitSliceTable &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uintlist   & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_bitSliceTable   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uintlist & inParameter0,
                                   const GGS_uint & inParameter1,
                                   const GGS_bitSliceTable & inParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uintlist & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_bitSliceTable & outParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_registerTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_registerTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_registerTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_registerTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_registerTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uintlist   & _mRegisterAddressList (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mSize (LOCATION_ARGS) const ;
    public : /* const */ GGS_bitSliceTable   & _mBitSliceTable (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@ramBankTable'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramBankTable ;

class GGS_ramBankTable : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_ramBankTable cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_ramBankTable & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_ramBankTable & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_ramBankTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_ramBankTable * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_ramBankTable constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMFirstFreeAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMLastAddressPlusOneForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_ramBankTable constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_ramBankTable & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_ramBankTable reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_ramBankTable & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_ramBankTable & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mFirstFreeAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mLastAddressPlusOne (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for 'processorType' Enumeration                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_processorType {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_pic18_60, enum_pic18_80} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_processorType (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_processorType (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_processorType  constructor_pic18_60 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_processorType (enum_pic18_60) ;
  }
  public : static inline GGS_processorType  constructor_pic18_80 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_processorType (enum_pic18_80) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_processorType inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_processorType inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_processorType inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_processorType inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_processorType inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_processorType inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@illegalMaskList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_illegalMaskList ;

class GGS_illegalMaskList : public AC_galgas_list {
  public : typedef elementOf_GGS_illegalMaskList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_illegalMaskList constructor_emptyList (void) ;
  public : static GGS_illegalMaskList constructor_listWithValue (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_illegalMaskList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_illegalMaskList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_illegalMaskList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_illegalMaskList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_luint & _out_0,
                              GGS_luint & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_luint & _out_0,
                             GGS_luint & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_luint & _out_0,
                                GGS_luint & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_luint & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_illegalMaskList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_illegalMaskList _operator_concat (const GGS_illegalMaskList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_luint 
  reader_mIllegalValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_luint 
  reader_mIllegalMaskAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mDescriptionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMIllegalValueAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMIllegalMaskAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMDescriptionAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_illegalMaskList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_luint   & _mIllegalValue (LOCATION_ARGS) const ;
  public : /* const */ GGS_luint   & _mIllegalMask (LOCATION_ARGS) const ;
  public : /* const */ GGS_lstring   & _mDescription (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@fieldSettingMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_fieldSettingMap ;

class GGS_fieldSettingMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_fieldSettingMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_fieldSettingMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_fieldSettingMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_fieldSettingMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_fieldSettingMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_fieldSettingMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMValueForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMMaskForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_fieldSettingMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_fieldSettingMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_fieldSettingMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_fieldSettingMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_fieldSettingMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mValue (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mMask (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@configRegisterMaskMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configRegisterMaskMap ;

class GGS_configRegisterMaskMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_configRegisterMaskMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_configRegisterMaskMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_configRegisterMaskMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_configRegisterMaskMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_configRegisterMaskMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_configRegisterMaskMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMMaskValueForKey (C_Compiler & inLexique,
                        const GGS_luint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMDescriptionForKey (C_Compiler & inLexique,
                        const GGS_lstring & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMFieldSettingMapForKey (C_Compiler & inLexique,
                        const GGS_fieldSettingMap & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_lstring &  inParameter1,
                                const GGS_fieldSettingMap &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint   & outParameter0,
                                GGS_lstring   & outParameter1,
                                GGS_fieldSettingMap   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_luint & inParameter0,
                                   const GGS_lstring & inParameter1,
                                   const GGS_fieldSettingMap & inParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint & outParameter0,
                                   GGS_lstring & outParameter1,
                                   GGS_fieldSettingMap & outParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_configRegisterMaskMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_configRegisterMaskMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_configRegisterMaskMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_configRegisterMaskMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_configRegisterMaskMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_luint   & _mMaskValue (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mDescription (LOCATION_ARGS) const ;
    public : /* const */ GGS_fieldSettingMap   & _mFieldSettingMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@configRegisterMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configRegisterMap ;

class GGS_configRegisterMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_configRegisterMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_configRegisterMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_configRegisterMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_configRegisterMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_configRegisterMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_configRegisterMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRegisterAddressForKey (C_Compiler & inLexique,
                        const GGS_luint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMRegisterWidthForKey (C_Compiler & inLexique,
                        const GGS_luint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMConfigRegisterMaskMapForKey (C_Compiler & inLexique,
                        const GGS_configRegisterMaskMap & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMIllegalMaskListForKey (C_Compiler & inLexique,
                        const GGS_illegalMaskList & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_luint &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_configRegisterMaskMap &  inParameter2,
                                const GGS_illegalMaskList &  inParameter3 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_configRegisterMaskMap   & outParameter2,
                                GGS_illegalMaskList   & outParameter3 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_luint & inParameter0,
                                   const GGS_luint & inParameter1,
                                   const GGS_configRegisterMaskMap & inParameter2,
                                   const GGS_illegalMaskList & inParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint & outParameter0,
                                   GGS_luint & outParameter1,
                                   GGS_configRegisterMaskMap & outParameter2,
                                   GGS_illegalMaskList & outParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_configRegisterMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_configRegisterMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_configRegisterMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_configRegisterMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_configRegisterMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_luint   & _mRegisterAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_luint   & _mRegisterWidth (LOCATION_ARGS) const ;
    public : /* const */ GGS_configRegisterMaskMap   & _mConfigRegisterMaskMap (LOCATION_ARGS) const ;
    public : /* const */ GGS_illegalMaskList   & _mIllegalMaskList (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@registerTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_registerTable {
  public : GGS_uintlist  mRegisterAddressList ;
  public : GGS_uint  mSize ;
  public : GGS_bitSliceTable  mBitSliceTable ;

  public : e_registerTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_registerTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_registerTable (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_registerTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_registerTable * nextObject (void) const { return (elementOf_GGS_registerTable *) mNextItem ; }
  public : inline elementOf_GGS_registerTable * infObject (void) const { return (elementOf_GGS_registerTable *) mInfPtr ; }
  public : inline elementOf_GGS_registerTable * supObject (void) const { return (elementOf_GGS_registerTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_registerTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@ramBankTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_ramBankTable {
  public : GGS_uint  mFirstFreeAddress ;
  public : GGS_uint  mLastAddressPlusOne ;

  public : e_ramBankTable (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_ramBankTable : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_ramBankTable (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_ramBankTable & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_ramBankTable * nextObject (void) const { return (elementOf_GGS_ramBankTable *) mNextItem ; }
  public : inline elementOf_GGS_ramBankTable * infObject (void) const { return (elementOf_GGS_ramBankTable *) mInfPtr ; }
  public : inline elementOf_GGS_ramBankTable * supObject (void) const { return (elementOf_GGS_ramBankTable *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_ramBankTable mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@illegalMaskList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_illegalMaskList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mIllegalValue ;
  public : GGS_luint  mIllegalMask ;
  public : GGS_lstring  mDescription ;
//--- Constructor
  public : elementOf_GGS_illegalMaskList (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_illegalMaskList * nextObject (void) const { return (elementOf_GGS_illegalMaskList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_illegalMaskList * previousObject (void) const { return (elementOf_GGS_illegalMaskList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_illegalMaskList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of map '@fieldSettingMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_fieldSettingMap {
  public : GGS_uint  mValue ;
  public : GGS_uint  mMask ;

  public : e_fieldSettingMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_fieldSettingMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_fieldSettingMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_fieldSettingMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_fieldSettingMap * nextObject (void) const { return (elementOf_GGS_fieldSettingMap *) mNextItem ; }
  public : inline elementOf_GGS_fieldSettingMap * infObject (void) const { return (elementOf_GGS_fieldSettingMap *) mInfPtr ; }
  public : inline elementOf_GGS_fieldSettingMap * supObject (void) const { return (elementOf_GGS_fieldSettingMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_fieldSettingMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@configRegisterMaskMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_configRegisterMaskMap {
  public : GGS_luint  mMaskValue ;
  public : GGS_lstring  mDescription ;
  public : GGS_fieldSettingMap  mFieldSettingMap ;

  public : e_configRegisterMaskMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_configRegisterMaskMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_configRegisterMaskMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_configRegisterMaskMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_configRegisterMaskMap * nextObject (void) const { return (elementOf_GGS_configRegisterMaskMap *) mNextItem ; }
  public : inline elementOf_GGS_configRegisterMaskMap * infObject (void) const { return (elementOf_GGS_configRegisterMaskMap *) mInfPtr ; }
  public : inline elementOf_GGS_configRegisterMaskMap * supObject (void) const { return (elementOf_GGS_configRegisterMaskMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_configRegisterMaskMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@configRegisterMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_configRegisterMap {
  public : GGS_luint  mRegisterAddress ;
  public : GGS_luint  mRegisterWidth ;
  public : GGS_configRegisterMaskMap  mConfigRegisterMaskMap ;
  public : GGS_illegalMaskList  mIllegalMaskList ;

  public : e_configRegisterMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_configRegisterMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_configRegisterMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_configRegisterMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_configRegisterMap * nextObject (void) const { return (elementOf_GGS_configRegisterMap *) mNextItem ; }
  public : inline elementOf_GGS_configRegisterMap * infObject (void) const { return (elementOf_GGS_configRegisterMap *) mInfPtr ; }
  public : inline elementOf_GGS_configRegisterMap * supObject (void) const { return (elementOf_GGS_configRegisterMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_configRegisterMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Declarations for 'piccoloDeviceModel' struct                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_piccoloDeviceModel {
//--- Default constructor
  public : GGS_piccoloDeviceModel (void) ;

//--- Virtual destructor
  public : virtual ~GGS_piccoloDeviceModel (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method '_isBuilt'
  public : bool _isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_piccoloDeviceModel * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_piccoloDeviceModel * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_piccoloDeviceModel & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_piccoloDeviceModel & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_piccoloDeviceModel constructor_new (const GGS_lstring & argument_0,
                 const GGS_processorType& argument_1,
                 const GGS_luint & argument_2,
                 const GGS_luint & argument_3,
                 const GGS_registerTable & argument_4,
                 const GGS_ramBankTable & argument_5,
                 const GGS_uint & argument_6,
                 const GGS_uint & argument_7,
                 const GGS_configRegisterMap & argument_8) ;

//--- Readers
  public : inline GGS_lstring 
  reader_mDeviceName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mDeviceName ;
  }

  public : inline GGS_processorType
  reader_mProcessorType (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mProcessorType ;
  }

  public : inline GGS_luint 
  reader_mRomSize (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRomSize ;
  }

  public : inline GGS_luint 
  reader_mBankCount (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mBankCount ;
  }

  public : inline GGS_registerTable 
  reader_mRegisterTable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRegisterTable ;
  }

  public : inline GGS_ramBankTable 
  reader_mRamBankTable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRamBankTable ;
  }

  public : inline GGS_uint 
  reader_mEepromSize (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mEepromSize ;
  }

  public : inline GGS_uint 
  reader_mEepromAddress (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mEepromAddress ;
  }

  public : inline GGS_configRegisterMap 
  reader_mConfigRegisterMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mConfigRegisterMap ;
  }

//--- Attributes
  public : GGS_lstring  mDeviceName ;
  public : GGS_processorType mProcessorType ;
  public : GGS_luint  mRomSize ;
  public : GGS_luint  mBankCount ;
  public : GGS_registerTable  mRegisterTable ;
  public : GGS_ramBankTable  mRamBankTable ;
  public : GGS_uint  mEepromSize ;
  public : GGS_uint  mEepromAddress ;
  public : GGS_configRegisterMap  mConfigRegisterMap ;
} ;

//---------------------------------------------------------------------------*

#endif
