//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'piccoloDevice_syntax.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 9th, 2009, at 22h45'20"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "piccoloDevice_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccoloDevice_syntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccoloDevice_syntax::
pr_start_symbol_piccoloDevice_syntax_13_19_ (piccoloDevice_lexique & inLexique,
                                GGS_piccoloDeviceModel &var_cas_outPiccoloDeviceModel) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_controller) COMMA_HERE) ;
  GGS_lstring  var_cas_deviceName ;
  inLexique.assignFromAttribute_tokenString (var_cas_deviceName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__7B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_processor) COMMA_HERE) ;
  GGS_processorType var_cas_processorType ;
  GGS_lstring  var_cas_processorName ;
  inLexique.assignFromAttribute_tokenString (var_cas_processorName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_string) COMMA_HERE) ;
  if (((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (22))).operator_isEqual (GGS_string ("pic18_60"))).isBuiltAndTrue ()) {
    var_cas_processorType = GGS_processorType::constructor_pic18_60 (inLexique COMMA_HERE) ;
  }else if (((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (24))).operator_isEqual (GGS_string ("pic18_80"))).isBuiltAndTrue ()) {
    var_cas_processorType = GGS_processorType::constructor_pic18_80 (inLexique COMMA_HERE) ;
  }else if (((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (26))).operator_isEqual (GGS_string ("mid-range"))).isBuiltAndTrue ()) {
    var_cas_processorType = GGS_processorType::constructor_midrange (inLexique COMMA_HERE) ;
  }else if (((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (28))).operator_isEqual (GGS_string ("baseline"))).isBuiltAndTrue ()) {
    var_cas_processorType = GGS_processorType::constructor_baseline (inLexique COMMA_HERE) ;
  }else{
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_processorName)).operator_concat (GGS_string ("' processor is not handled")) COMMA_SOURCE_FILE_AT_LINE (32)) ;
    var_cas_processorType.drop () ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_romsize) COMMA_HERE) ;
  GGS_luint  var_cas_romSize ;
  inLexique.assignFromAttribute_uint32value (var_cas_romSize) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
  GGS_uint  var_cas_eepromSize ;
  GGS_uint  var_cas_eepromAddress ;
  switch (select_piccoloDevice_syntax_0 (inLexique)) {
    case 1 : {
      var_cas_eepromSize = GGS_uint (0U) ;
      var_cas_eepromAddress = GGS_uint (0U) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_eepromsize) COMMA_HERE) ;
      GGS_luint  var_cas_l_eepromSize ;
      inLexique.assignFromAttribute_uint32value (var_cas_l_eepromSize) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
      var_cas_eepromSize = var_cas_l_eepromSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_at) COMMA_HERE) ;
      GGS_luint  var_cas_l_eepromAddress ;
      inLexique.assignFromAttribute_uint32value (var_cas_l_eepromAddress) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
      var_cas_eepromAddress = var_cas_l_eepromAddress.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_bank) COMMA_HERE) ;
  GGS_luint  var_cas_bankCount ;
  inLexique.assignFromAttribute_uint32value (var_cas_bankCount) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_piccoloDevice_syntax_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_unusedregister) COMMA_HERE) ;
          GGS_luint  var_cas_unusedRegisterStart ;
          inLexique.assignFromAttribute_uint32value (var_cas_unusedRegisterStart) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
          switch (select_piccoloDevice_syntax_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_to) COMMA_HERE) ;
              GGS_luint  var_cas_unusedRegisterEnd ;
              inLexique.assignFromAttribute_uint32value (var_cas_unusedRegisterEnd) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_ramBankTable  var_cas_ramBankTable ;
  var_cas_ramBankTable = GGS_ramBankTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_piccoloDevice_syntax_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_ram) COMMA_HERE) ;
          GGS_lstring  var_cas_ramName ;
          inLexique.assignFromAttribute_tokenString (var_cas_ramName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3A_) COMMA_HERE) ;
          GGS_luint  var_cas_ramStart ;
          inLexique.assignFromAttribute_uint32value (var_cas_ramStart) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_to) COMMA_HERE) ;
          GGS_luint  var_cas_ramEnd ;
          inLexique.assignFromAttribute_uint32value (var_cas_ramEnd) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
          GGS_uintlist  var_cas_mirrorOffsetList ;
          var_cas_mirrorOffsetList = GGS_uintlist ::constructor_emptyList () ;
          switch (select_piccoloDevice_syntax_4 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_mirrorat) COMMA_HERE) ;
              { bool syntaxRepeat_5 = true ;
                while (syntaxRepeat_5) {
                    GGS_luint  var_cas_mirrorStartAddress ;
                    inLexique.assignFromAttribute_uint32value (var_cas_mirrorStartAddress) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                    var_cas_mirrorOffsetList._addAssign_operation (var_cas_mirrorStartAddress.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).substract_operation (inLexique, var_cas_ramStart.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80))) ;
                  switch (select_repeat_piccoloDevice_syntax_5 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_5 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
          var_cas_ramBankTable.modifier_insertKey (inLexique, var_cas_ramName, var_cas_ramStart.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (88)), var_cas_ramStart.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (89)), var_cas_ramEnd.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (90)), var_cas_mirrorOffsetList COMMA_SOURCE_FILE_AT_LINE (86)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = GGS_registerTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_piccoloDevice_syntax_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_register) COMMA_HERE) ;
          GGS_lstring  var_cas_registerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_registerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_at) COMMA_HERE) ;
          GGS_uintlist  var_cas_registerAddressList ;
          var_cas_registerAddressList = GGS_uintlist ::constructor_emptyList () ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                GGS_luint  var_cas_registerAddress ;
                inLexique.assignFromAttribute_uint32value (var_cas_registerAddress) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                var_cas_registerAddressList._addAssign_operation (var_cas_registerAddress.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
              switch (select_repeat_piccoloDevice_syntax_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3C_) COMMA_HERE) ;
          GGS_uint  var_cas_sliceIndex ;
          var_cas_sliceIndex = GGS_uint (8U) ;
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_string var_cas_bitDefinitionString ;
          var_cas_bitDefinitionString = GGS_string (" <") ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                switch (select_piccoloDevice_syntax_9 (inLexique)) {
                  case 1 : {
                    GGS_uint  var_cas_sliceWidth ;
                    var_cas_sliceWidth = GGS_uint (0U) ;
                    { bool syntaxRepeat_10 = true ;
                      while (syntaxRepeat_10) {
                          GGS_uint  var_cas_sliceBase ;
                          var_cas_sliceBase = var_cas_sliceIndex ;
                          GGS_lstring  var_cas_sliceName ;
                          inLexique.assignFromAttribute_tokenString (var_cas_sliceName) ;
                          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
                          switch (select_piccoloDevice_syntax_11 (inLexique)) {
                            case 1 : {
                              if ((((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (0U))).operator_and ((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (1U)))).isBuiltAndTrue ()) {
                                var_cas_sliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a slice of 1 bit is expected for '")).operator_concat (var_cas_sliceName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
                              }
                              var_cas_sliceWidth = GGS_uint (1U) ;
                              var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122))) ;
                              } break ;
                            case 2 : {
                              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__5B_) COMMA_HERE) ;
                              GGS_luint  var_cas_sliceSize ;
                              inLexique.assignFromAttribute_uint32value (var_cas_sliceSize) ;
                              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                              if ((((var_cas_sliceWidth).operator_isNotEqual (GGS_uint (0U))).operator_and ((var_cas_sliceWidth).operator_isNotEqual (var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (126))))).isBuiltAndTrue ()) {
                                var_cas_sliceName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("a slice of ")).operator_concat (var_cas_sliceWidth.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)))).operator_concat (GGS_string (" bits is expected for '"))).operator_concat (var_cas_sliceName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (128)) ;
                              }
                              var_cas_sliceWidth = var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
                              var_cas_sliceBase = var_cas_sliceBase.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (130)).substract_operation (inLexique, var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) COMMA_SOURCE_FILE_AT_LINE (130)) ;
                              inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__5D_) COMMA_HERE) ;
                              var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
                              var_cas_bitDefinitionString.appendCString ("[") ;
                              var_cas_bitDefinitionString.dotAssign_operation (var_cas_sliceSize.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
                              var_cas_bitDefinitionString.appendCString ("]") ;
                              } break ;
                            default :
                              break ;
                          }
                          var_cas_bitSliceTable.modifier_insertKey (inLexique, var_cas_sliceName, var_cas_sliceIndex.substract_operation (inLexique, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (134)), var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (134)) ;
                        switch (select_repeat_piccoloDevice_syntax_10 (inLexique)) {
                          case 2 : {
                            inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__2F_) COMMA_HERE) ;
                            var_cas_bitDefinitionString.appendCString ("/") ;
                            } break ;
                          default :
                            syntaxRepeat_10 = false ;
                            break ;
                        }
                      }
                    }
                    var_cas_sliceIndex = var_cas_sliceIndex.substract_operation (inLexique, var_cas_sliceWidth COMMA_SOURCE_FILE_AT_LINE (139)) ;
                    } break ;
                  case 2 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__2D_) COMMA_HERE) ;
                    var_cas_bitDefinitionString.appendCString ("-") ;
                    var_cas_sliceIndex.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_piccoloDevice_syntax_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__2C_) COMMA_HERE) ;
                  var_cas_bitDefinitionString.appendCString (", ") ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          if (((var_cas_sliceIndex).operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_registerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Incorrect bit definition for register '")).operator_concat (var_cas_registerName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
          }
          var_cas_bitDefinitionString.appendCString (">") ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3E_) COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (inLexique, var_cas_registerName, var_cas_registerAddressList, GGS_uint (1U), var_cas_bitSliceTable, var_cas_bitDefinitionString COMMA_SOURCE_FILE_AT_LINE (154)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_configRegisterMap  var_cas_configRegisterMap ;
  var_cas_configRegisterMap = GGS_configRegisterMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_piccoloDevice_syntax_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_configuration) COMMA_HERE) ;
          GGS_lstring  var_cas_configRegisterName ;
          inLexique.assignFromAttribute_tokenString (var_cas_configRegisterName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_at) COMMA_HERE) ;
          GGS_luint  var_cas_configRegisterAddress ;
          inLexique.assignFromAttribute_uint32value (var_cas_configRegisterAddress) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_width) COMMA_HERE) ;
          GGS_luint  var_cas_configRegisterWidth ;
          inLexique.assignFromAttribute_uint32value (var_cas_configRegisterWidth) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
          GGS_illegalMaskList  var_cas_illegalMaskList ;
          var_cas_illegalMaskList = GGS_illegalMaskList ::constructor_emptyList () ;
          { bool syntaxRepeat_13 = true ;
            while (syntaxRepeat_13) {
              switch (select_repeat_piccoloDevice_syntax_13 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_illegal) COMMA_HERE) ;
                  GGS_luint  var_cas_illegalValue ;
                  inLexique.assignFromAttribute_uint32value (var_cas_illegalValue) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_mask) COMMA_HERE) ;
                  GGS_luint  var_cas_illegalMask ;
                  inLexique.assignFromAttribute_uint32value (var_cas_illegalMask) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_message) COMMA_HERE) ;
                  GGS_lstring  var_cas_illegalDescriptionString ;
                  inLexique.assignFromAttribute_tokenString (var_cas_illegalDescriptionString) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_string) COMMA_HERE) ;
                  var_cas_illegalMaskList._addAssign_operation (var_cas_illegalValue, var_cas_illegalMask, var_cas_illegalDescriptionString) ;
                  } break ;
                default :
                  syntaxRepeat_13 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__7B_) COMMA_HERE) ;
          GGS_configRegisterMaskMap  var_cas_configRegisterMaskMap ;
          var_cas_configRegisterMaskMap = GGS_configRegisterMaskMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_stringset  var_cas_settingNameSet ;
          var_cas_settingNameSet = GGS_stringset ::constructor_emptySet () ;
          { bool syntaxRepeat_14 = true ;
            while (syntaxRepeat_14) {
              switch (select_repeat_piccoloDevice_syntax_14 (inLexique)) {
                case 2 : {
                  GGS_lstring  var_cas_maskName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_maskName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_identifier) COMMA_HERE) ;
                  if ((var_cas_settingNameSet.reader_hasKey (inLexique, var_cas_maskName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) COMMA_SOURCE_FILE_AT_LINE (183))).isBuiltAndTrue ()) {
                    var_cas_maskName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_maskName)).operator_concat (GGS_string ("' setting is already defined")) COMMA_SOURCE_FILE_AT_LINE (185)) ;
                  }
                  var_cas_settingNameSet._addAssign_operation (var_cas_maskName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_mask) COMMA_HERE) ;
                  GGS_luint  var_cas_maskValue ;
                  inLexique.assignFromAttribute_uint32value (var_cas_maskValue) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_description) COMMA_HERE) ;
                  GGS_lstring  var_cas_maskDescriptionString ;
                  inLexique.assignFromAttribute_tokenString (var_cas_maskDescriptionString) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_string) COMMA_HERE) ;
                  GGS_fieldSettingMap  var_cas_fieldSettingMap ;
                  var_cas_fieldSettingMap = GGS_fieldSettingMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
                  { bool syntaxRepeat_15 = true ;
                    while (syntaxRepeat_15) {
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_setting) COMMA_HERE) ;
                        GGS_luint  var_cas_value ;
                        inLexique.assignFromAttribute_uint32value (var_cas_value) ;
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_mask) COMMA_HERE) ;
                        GGS_luint  var_cas_mask ;
                        inLexique.assignFromAttribute_uint32value (var_cas_mask) ;
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_integer) COMMA_HERE) ;
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_description) COMMA_HERE) ;
                        GGS_lstring  var_cas_descriptionString ;
                        inLexique.assignFromAttribute_tokenString (var_cas_descriptionString) ;
                        inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1_string) COMMA_HERE) ;
                        var_cas_fieldSettingMap.modifier_insertKey (inLexique, var_cas_descriptionString, var_cas_value.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (199)), var_cas_mask.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (199)) ;
                      switch (select_repeat_piccoloDevice_syntax_15 (inLexique)) {
                        case 2 : {
                          } break ;
                        default :
                          syntaxRepeat_15 = false ;
                          break ;
                      }
                    }
                  }
                  var_cas_configRegisterMaskMap.modifier_insertKey (inLexique, var_cas_maskName, var_cas_maskValue, var_cas_maskDescriptionString, var_cas_fieldSettingMap COMMA_SOURCE_FILE_AT_LINE (202)) ;
                  } break ;
                default :
                  syntaxRepeat_14 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__7D_) COMMA_HERE) ;
          var_cas_configRegisterMap.modifier_insertKey (inLexique, var_cas_configRegisterName, var_cas_configRegisterAddress, var_cas_configRegisterWidth, var_cas_configRegisterMaskMap, var_cas_illegalMaskList COMMA_SOURCE_FILE_AT_LINE (205)) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (piccoloDevice_lexique::piccoloDevice_lexique_1__7D_) COMMA_HERE) ;
  if ((((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215))).operator_isEqual (GGS_string ("pic18_60"))).operator_or ((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215))).operator_isEqual (GGS_string ("pic18_80")))).isBuiltAndTrue ()) {
    GGS_uintlist  automatic_var_0 ;
    GGS_uint  automatic_var_1 ;
    GGS_bitSliceTable  automatic_var_2 ;
    GGS_string automatic_var_3 ;
    const GGS_registerTable  temp_6515 = var_cas_registerTable ;
    if (temp_6515.isBuilt ()) {
      temp_6515 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("BSR"), GGS_location (inLexique) COMMA_HERE), automatic_var_0, automatic_var_1, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (216)) ;
    }
    GGS_uintlist  automatic_var_4 ;
    GGS_uint  automatic_var_5 ;
    GGS_bitSliceTable  automatic_var_6 ;
    GGS_string automatic_var_7 ;
    const GGS_registerTable  temp_6580 = var_cas_registerTable ;
    if (temp_6580.isBuilt ()) {
      temp_6580 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSL"), GGS_location (inLexique) COMMA_HERE), automatic_var_4, automatic_var_5, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (217)) ;
    }
    GGS_uintlist  automatic_var_8 ;
    GGS_uint  automatic_var_9 ;
    GGS_bitSliceTable  automatic_var_10 ;
    GGS_string automatic_var_11 ;
    const GGS_registerTable  temp_6646 = var_cas_registerTable ;
    if (temp_6646.isBuilt ()) {
      temp_6646 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSH"), GGS_location (inLexique) COMMA_HERE), automatic_var_8, automatic_var_9, automatic_var_10, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }
    GGS_uintlist  automatic_var_12 ;
    GGS_uint  automatic_var_13 ;
    GGS_bitSliceTable  automatic_var_14 ;
    GGS_string automatic_var_15 ;
    const GGS_registerTable  temp_6712 = var_cas_registerTable ;
    if (temp_6712.isBuilt ()) {
      temp_6712 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("TOSU"), GGS_location (inLexique) COMMA_HERE), automatic_var_12, automatic_var_13, automatic_var_14, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (219)) ;
    }
  }
  GGS_string var_cas_sharedBankName ;
  var_cas_sharedBankName = GGS_string ("") ;
  if (((var_cas_processorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223))).operator_isEqual (GGS_string ("mid-range"))).isBuiltAndTrue ()) {
    {
      GGS_ramBankTable::cEnumerator enumerator_6937 (var_cas_ramBankTable, true) ;
      const GGS_ramBankTable::cElement * operand_6937 = NULL ;
      while (((operand_6937 = enumerator_6937.nextObject ()))
          && ((var_cas_sharedBankName).operator_isEqual (GGS_string ("")).isBuiltAndTrue ())) {
        macroValidPointer (operand_6937) ;
        GGS_uint  var_cas_bankAccessibility ;
        var_cas_bankAccessibility = GGS_uint (1U).left_shift_operation (inLexique, operand_6937->mInfo.mFirstFreeAddress.right_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (225)) COMMA_SOURCE_FILE_AT_LINE (225)) ;
        {
          GGS_uintlist::cEnumerator enumerator_7065 (operand_6937->mInfo.mMirrorOffsetList, true) ;
          const GGS_uintlist::cElement * operand_7065 = NULL ;
          while (((operand_7065 = enumerator_7065.nextObject ()))) {
            macroValidPointer (operand_7065) ;
            var_cas_bankAccessibility = (var_cas_bankAccessibility).operator_or (GGS_uint (1U).left_shift_operation (inLexique, operand_6937->mInfo.mFirstFreeAddress.add_operation (inLexique, operand_7065->mValue COMMA_SOURCE_FILE_AT_LINE (227)).right_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (227)) COMMA_SOURCE_FILE_AT_LINE (227))) ;
          }
        }
        if (((GGS_uint (1U).left_shift_operation (inLexique, var_cas_bankCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) COMMA_SOURCE_FILE_AT_LINE (229))).operator_isEqual (var_cas_bankAccessibility.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (229)))).isBuiltAndTrue ()) {
          var_cas_sharedBankName = operand_6937->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (230)) ;
        }
      }
    }
  }
  var_cas_outPiccoloDeviceModel = GGS_piccoloDeviceModel::constructor_new (var_cas_deviceName, var_cas_processorType, var_cas_romSize, var_cas_bankCount, var_cas_registerTable, var_cas_ramBankTable, var_cas_eepromSize, var_cas_eepromAddress, var_cas_configRegisterMap, var_cas_sharedBankName) ;
}

//---------------------------------------------------------------------------*

