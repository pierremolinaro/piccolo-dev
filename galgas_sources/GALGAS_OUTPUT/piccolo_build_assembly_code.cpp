//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'piccolo_build_assembly_code.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 8th, 2008, at 11h28'7"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@ipic_instruction.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__buildAssemblyCode> gDispatchTableFor__ipic_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__buildAssemblyCode (typeCategoryMethod__ipic_instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__buildAssemblyCode
findCategoryMethod__ipic_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__ipic_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic_pseudo_ORG.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_663,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_663 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_663->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_LABEL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_896,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_896 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_896->mLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (31))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FDA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_1118,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1118 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_1118->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_1118->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) ;
    if (((operand_1118->m_W_isDestination)._operator_and (operand_1118->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((operand_1118->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (43))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_1118->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVFF.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_1709,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1709 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    var_cas_ioString._dotAssign_operation (operand_1709->mSourceRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_1709->mDestinationRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FBA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_2086,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2086 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2086->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2086->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_2086->mBitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
    if ((operand_2086->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (76))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_BitTestSkip.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BitTestSkip__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BitTestSkip * operand_2561,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2561 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    if ((operand_2561->mSkipIfSet).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("BTFSS") ;
    }else{
      var_cas_ioString.writeString ("BTFSC") ;
    }
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2561->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_2561->mBitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
    if ((operand_2561->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (97))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction_FA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_3090,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3090 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_3090->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_3090->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
    if ((operand_3090->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (110))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic_instruction_conditionalBranch.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_3490,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3490 != NULL) {
    switch (operand_3490->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (operand_3490->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (124))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (operand_3490->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (124))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_3490->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (127)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (129))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_3490->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (130))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_3490->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (134)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_3490->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_jump_test_register.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_4560,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4560 != NULL) {
    var_cas_ioString.writeString ("  "
    "TSTFSZ ") ;
    var_cas_ioString._dotAssign_operation (operand_4560->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (148))) ;
    if ((operand_4560->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (149))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
    if ((operand_4560->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (154))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (154)) ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      if ((operand_4560->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_4560->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_4560->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
    }else{
      if ((operand_4560->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_4560->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_4560->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_5423,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5423 != NULL) {
    if (((operand_5423->mBranchIfZero)._operator_and (operand_5423->mIncrement)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "INFSNZ ") ;
    }else if (((operand_5423->mBranchIfZero)._operator_and ((operand_5423->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "DCFSNZ ") ;
    }else if ((((operand_5423->mBranchIfZero)._operator_not ())._operator_and (operand_5423->mIncrement)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "INCFSZ ") ;
    }else{
      var_cas_ioString.writeString ("  "
      "DECFSZ ") ;
    }
    var_cas_ioString._dotAssign_operation (operand_5423->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
    if (((operand_5423->m_W_isDestination)._operator_and (operand_5423->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((operand_5423->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_5423->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
    if ((operand_5423->mUsesBra).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_5423->mTargetLabel) ;
      var_cas_ioString.writeString ("\n") ;
    }else{
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_5423->mTargetLabel) ;
      var_cas_ioString.writeString ("\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_registerComparisonCondition.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_6392,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6392 != NULL) {
    switch (operand_6392->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_ioString.writeString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_ioString.writeString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_ioString.writeString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_ioString.writeString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_ioString.writeString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_ioString.writeString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    var_cas_ioString._dotAssign_operation (operand_6392->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (218))) ;
    if ((operand_6392->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (219))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_6392->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (223)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (225))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      if ((operand_6392->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_6392->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_6392->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
    }else{
      if ((operand_6392->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_6392->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_6392->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JUMP.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_7610,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7610 != NULL) {
    switch (operand_7610->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioString.writeString ("  BRA   ") ;
      var_cas_ioString._dotAssign_operation (operand_7610->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (249))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioString.writeString ("  GOTO  ") ;
      var_cas_ioString._dotAssign_operation (operand_7610->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (250))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioString.writeString ("  BRA   ") ;
      var_cas_ioString._dotAssign_operation (operand_7610->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioString.writeString ("  GOTO  ") ;
      var_cas_ioString._dotAssign_operation (operand_7610->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (252))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@ipic_JSR.buildAssemblyCode'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_8130,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8130 != NULL) {
    switch (operand_8130->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      var_cas_ioString.writeString ("  RCALL ") ;
      var_cas_ioString._dotAssign_operation (operand_8130->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (263))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      var_cas_ioString.writeString ("  CALL  ") ;
      var_cas_ioString._dotAssign_operation (operand_8130->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (264))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      var_cas_ioString.writeString ("  RCALL ") ;
      var_cas_ioString._dotAssign_operation (operand_8130->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (265))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      var_cas_ioString.writeString ("  CALL  ") ;
      var_cas_ioString._dotAssign_operation (operand_8130->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVLB.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVLB__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVLB * operand_8664,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8664 != NULL) {
    var_cas_ioString.writeString ("  MOVLB ") ;
    var_cas_ioString._dotAssign_operation (operand_8664->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (276))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_CLRWDT.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_CLRWDT * operand_8915,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8915 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_DAW.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_DAW * operand_9126,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9126 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_NOP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_NOP * operand_9334,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9334 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_POP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_POP * operand_9542,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9542 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_PUSH.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_PUSH * operand_9751,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9751 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RESET.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RESET * operand_9962,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9962 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETURN.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETURN * operand_10175,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10175 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETFIE.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETFIE * operand_10390,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10390 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_10390->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_SLEEP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_SLEEP * operand_10679,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10679 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_literalOperation.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_10902,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10902 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_10902->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (370))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_10902->mLiteralValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (370))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_LFSR.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_11181,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11181 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_11181->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (379))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_11181->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (380))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_MNOP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_11467,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11467 != NULL) {
    if (((operand_11467->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_11467->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_11771 = operand_11467->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)) ;
    GGS_bool _condition_11771 (_variant_11771._isBuilt (), true) ;
    while (_condition_11771.isBuiltAndTrue ()) {
      _condition_11771 = (var_cas_idx)._operator_strictInf (operand_11467->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (394))) ;
      if (_condition_11771.isBuiltAndTrue ()) {
        if (_variant_11771.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (398)) ;
          _condition_11771 = GGS_bool (true, false) ;
        }else{
          _variant_11771._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLRD.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_11906,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11906 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_11906->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (407))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLWT.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_12145,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12145 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_12145->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (416))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_retlw.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_12393,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12393 != NULL) {
    if ((operand_12393->mUsesRCALL).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_12606 (operand_12393->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_12606 = NULL ;
      while (((operand_12606 = enumerator_12606.nextObject ()))) {
        macroValidPointer (operand_12606) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_12606->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (431))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_computed_bra.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_12817,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12817 != NULL) {
    if ((operand_12817->mUsesRCALL).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13029 (operand_12817->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13029 = NULL ;
      while (((operand_13029 = enumerator_13029.nextObject ()))) {
        macroValidPointer (operand_13029) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_13029->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (447))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_goto.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_13236,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13236 != NULL) {
    if ((operand_13236->mUsesRCALL).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13448 (operand_13236->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13448 = NULL ;
      while (((operand_13448 = enumerator_13448.nextObject ()))) {
        macroValidPointer (operand_13448) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_13448->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (463))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_ipic_instructionList   var_cas_inInstructionList,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex ;
  var_cas_bccLabelIndex = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_14047 (var_cas_inInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_14047 = NULL ;
    while (((operand_14047 = enumerator_14047.nextObject ()))) {
      macroValidPointer (operand_14047) ;
      const GGS_ipic_instruction  _temp_14086 = operand_14047->mInstruction ;
      if (_temp_14086._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__buildAssemblyCode _method = findCategoryMethod__ipic_instruction__buildAssemblyCode (_temp_14086._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_14086 (HERE), var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (483)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_14276 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_14276 = NULL ;
    while (((operand_14276 = enumerator_14276.nextObject ()))) {
      macroValidPointer (operand_14276) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_14333 = operand_14276->mInfo.mRegisterAddressList ;
      if (_temp_14333._isBuilt ()) {
        _temp_14333 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (489)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_14276->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (490))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (490))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_14602 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_14602 = NULL ;
    while (((operand_14602 = enumerator_14602.nextObject ()))) {
      macroValidPointer (operand_14602) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_14602->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (496)) COMMA_SOURCE_FILE_AT_LINE (496)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_14722 = operand_14602->mInfo.mRegisterAddressList ;
        if (_temp_14722._isBuilt ()) {
          _temp_14722 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (497)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_14602->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (498))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (498))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n"
    "\n") ;
  if (((var_cas_inActualConfigurationMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (508)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_outAssemblyCode.writeString (";--- Configuration\n"
      "\n") ;
    {
      GGS_actualConfigurationMap::cEnumerator enumerator_15269 (var_cas_inActualConfigurationMap, true) ;
      const GGS_actualConfigurationMap::cElement * operand_15269 = NULL ;
      while (((operand_15269 = enumerator_15269.nextObject ()))) {
        macroValidPointer (operand_15269) ;
        var_cas_outAssemblyCode.writeString ("  __config ") ;
        var_cas_outAssemblyCode._dotAssign_operation (operand_15269->mInfo.mRegisterAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (511))) ;
        var_cas_outAssemblyCode.writeString (", ") ;
        var_cas_outAssemblyCode._dotAssign_operation ((operand_15269->mInfo.mRegisterValue)._operator_and (GGS_uint (true, 255U)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (511))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
        var_cas_outAssemblyCode.writeString ("  __config ") ;
        var_cas_outAssemblyCode._dotAssign_operation (operand_15269->mInfo.mRegisterAddress._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (512)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (512))) ;
        var_cas_outAssemblyCode.writeString (", ") ;
        var_cas_outAssemblyCode._dotAssign_operation ((operand_15269->mInfo.mRegisterValue._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (512)))._operator_and (GGS_uint (true, 255U)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (512))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_assembly_code (void) {
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FDA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVFF__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FBA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_BitTestSkip__buildAssemblyCode, gClassInfoFor__ipic_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_jump_test_register__buildAssemblyCode, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_incDecRegisterInCondition__buildAssemblyCode, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_registerComparisonCondition__buildAssemblyCode, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_JUMP__buildAssemblyCode, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_JSR__buildAssemblyCode, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVLB__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_DAW__buildAssemblyCode, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_NOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_POP__buildAssemblyCode, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_PUSH__buildAssemblyCode, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RESET__buildAssemblyCode, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETURN__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_LFSR__buildAssemblyCode, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MNOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLRD__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLWT__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_bra__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_goto__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_assembly_code (prologueRoutineFor_piccolo_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

