//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'piccolo_build_assembly_code.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 22th, 2008, at 18h35'4"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_assembly_code.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction * operand_368,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & /* var_cas_ioString */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_368 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@instruction.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__buildAssemblyCode> gDispatchTableFor__instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__buildAssemblyCode (typeCategoryMethod__instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__buildAssemblyCode
findCategoryMethod__instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@pseudo_ORG.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_ORG * operand_556,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_556 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_556->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (20))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@pseudo_LABEL.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_793,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_793 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_793->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (29))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_1019,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1019 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_1019->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) ;
    if (((operand_1019->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" + ") ;
      var_cas_ioString._dotAssign_operation (operand_1019->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (42))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_1356 = var_cas_inRegisterTable ;
    if (_temp_1356._isBuilt ()) {
      _temp_1356 (HERE)->method_searchKey (_inLexique, operand_1019->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (46)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_1464 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_1464 = NULL ;
      while (((operand_1464 = enumerator_1464.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_1464) ;
        var_cas_found = ((operand_1464->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_1464->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__buildAssemblyCode> gDispatchTableFor__registerExpression__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__buildAssemblyCode (typeCategoryMethod__registerExpression__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__buildAssemblyCode
findCategoryMethod__registerExpression__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__registerExpression__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FDA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_1768,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1768 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_1768->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (66))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_2145 = operand_1768->mRegisterExpression ;
    if (_temp_2145._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2145._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2145 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (68)) ;
      }
    }
    if (((operand_1768->m_W_isDestination)._operator_and (var_cas_useBSRaccess)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_1768->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVFF.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_2576,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2576 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    GGS_bool automatic_var_1 ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_2701 = operand_2576->mSourceRegisterName ;
    if (_temp_2701._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2701._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2701 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (88)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_3 ;
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_2805 = operand_2576->mDestinationRegisterName ;
    if (_temp_2805._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2805._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2805 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_3, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_3205,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3205 != NULL) {
    if (((operand_3205->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_3205->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_3205->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (108)) ;
    }
    var_cas_outBitNumber = operand_3205->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_3639,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3639 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_3770 = var_cas_inBitSliceTable ;
    if (_temp_3770._isBuilt ()) {
      _temp_3770 (HERE)->method_searchKey (_inLexique, operand_3639->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (121)) ;
    }
    if (((operand_3639->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (122)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_3639->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_3639->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (123)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (123))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (124))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_3639->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)) COMMA_SOURCE_FILE_AT_LINE (126)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FBA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_4204,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4204 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_4204->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_4413 = operand_4204->mRegisterExpression ;
    if (_temp_4413._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_4413._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4413 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (138)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_4525 = operand_4204->mBitNumber ;
    if (_temp_4525._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_4525._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4525 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (140)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (var_cas_bitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (141))) ;
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FA.buildAssemblyCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_4800,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4800 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_4800->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (155))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_4976 = operand_4800->mRegisterExpression ;
    if (_temp_4976._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_4976._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4976 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (156)) ;
      }
    }
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_conditionalBranch.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_5248,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5248 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_5248->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (169))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_5248->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (169))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_BRA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_5524,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5524 != NULL) {
    var_cas_ioString.writeString ("  BRA  ") ;
    var_cas_ioString._dotAssign_operation (operand_5524->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (178))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_CALL.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CALL * operand_5768,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5768 != NULL) {
    var_cas_ioString.writeString ("  CALL ") ;
    var_cas_ioString._dotAssign_operation (operand_5768->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_GOTO.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_GOTO * operand_6003,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6003 != NULL) {
    var_cas_ioString.writeString ("  GOTO ") ;
    var_cas_ioString._dotAssign_operation (operand_6003->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RCALL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RCALL * operand_6239,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6239 != NULL) {
    var_cas_ioString.writeString ("  RCALL ") ;
    var_cas_ioString._dotAssign_operation (operand_6239->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_CLRWDT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CLRWDT * operand_6477,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6477 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_DAW.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_DAW * operand_6692,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6692 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_NOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_NOP * operand_6904,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6904 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_POP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_POP * operand_7116,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7116 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_PUSH.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_PUSH * operand_7329,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7329 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RESET.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RESET * operand_7544,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7544 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETURN.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETURN * operand_7761,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7761 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETFIE.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETFIE * operand_7980,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7980 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_7980->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_SLEEP.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_SLEEP * operand_8273,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8273 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_literalOperation.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_8500,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8500 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_8500->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (299))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_8500->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (299)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (299))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_LFSR.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_8790,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8790 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_8790->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (308)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (308))) ;
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_6 ;
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_8949 = operand_8790->mRegisterExpression ;
    if (_temp_8949._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_8949._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8949 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (309)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVAW.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_9152,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9152 != NULL) {
    var_cas_ioString.writeString ("  MOVLW ") ;
    GGS_bool automatic_var_8 ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_9277 = operand_9152->mRegisterExpression ;
    if (_temp_9277._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_9277._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9277 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (325)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MNOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_9478,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9478 != NULL) {
    if (((operand_9478->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_9478->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_9802 = operand_9478->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
    GGS_bool _condition_9802 (_variant_9802._isBuilt (), true) ;
    while (_condition_9802.isBuiltAndTrue ()) {
      _condition_9802 = (var_cas_idx)._operator_strictInf (operand_9478->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (345))) ;
      if (_condition_9802.isBuiltAndTrue ()) {
        if (_variant_9802.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (348)) ;
          _condition_9802 = GGS_bool (true, false) ;
        }else{
          _variant_9802._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLRD.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_9921,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9921 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_9921->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (358))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLWT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_10164,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10164 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_10164->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (367))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_computed_retlw.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_10416,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10416 != NULL) {
    if ((operand_10416->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_10647 (operand_10416->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_10647 = NULL ;
      while (((operand_10647 = enumerator_10647.nextObject ()))) {
        macroValidPointer (operand_10647) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_10647->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (382)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (382))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_bra.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_10858,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10858 != NULL) {
    if ((operand_10858->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_11089 (operand_10858->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_11089 = NULL ;
      while (((operand_11089 = enumerator_11089.nextObject ()))) {
        macroValidPointer (operand_11089) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_11089->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (398))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_goto.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_11288,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11288 != NULL) {
    if ((operand_11288->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_11519 (operand_11288->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_11519 = NULL ;
      while (((operand_11519 = enumerator_11519.nextObject ()))) {
        macroValidPointer (operand_11519) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_11519->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (414))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_12022 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_12022 = NULL ;
    while (((operand_12022 = enumerator_12022.nextObject ()))) {
      macroValidPointer (operand_12022) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_12095 = operand_12022->mInfo.mRegisterAddressList ;
      if (_temp_12095._isBuilt ()) {
        _temp_12095 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (431)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_12022->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (432))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (432))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_12327 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_12327 = NULL ;
    while (((operand_12327 = enumerator_12327.nextObject ()))) {
      macroValidPointer (operand_12327) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_12327->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_12456 = operand_12327->mInfo.mRegisterAddressList ;
        if (_temp_12456._isBuilt ()) {
          _temp_12456 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (438)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_12327->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (439))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (439))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n") ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  {
    GGS_instructionList::cEnumerator enumerator_12885 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_12885 = NULL ;
    while (((operand_12885 = enumerator_12885.nextObject ()))) {
      macroValidPointer (operand_12885) ;
      const GGS_instruction  _temp_12924 = operand_12885->mInstruction ;
      if (_temp_12924._isBuilt ()) {
        typeCategoryMethod__instruction__buildAssemblyCode _method = findCategoryMethod__instruction__buildAssemblyCode (_temp_12924._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_12924 (HERE), var_cas_inAllRegisters, var_cas_outAssemblyCode COMMA_SOURCE_FILE_AT_LINE (451)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_assembly_code (void) {
 enterCategoryMethod__instruction__buildAssemblyCode (category_method__instruction__buildAssemblyCode, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_ORG__buildAssemblyCode, gClassInfoFor__pseudo_ORG.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_LABEL__buildAssemblyCode, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__registerExpression__buildAssemblyCode (category_method__registerExpression__buildAssemblyCode, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FDA__buildAssemblyCode, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVFF__buildAssemblyCode, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FBA__buildAssemblyCode, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FA__buildAssemblyCode, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_BRA__buildAssemblyCode, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CALL__buildAssemblyCode, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_GOTO__buildAssemblyCode, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RCALL__buildAssemblyCode, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_DAW__buildAssemblyCode, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_NOP__buildAssemblyCode, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_POP__buildAssemblyCode, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_PUSH__buildAssemblyCode, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RESET__buildAssemblyCode, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETURN__buildAssemblyCode, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETFIE__buildAssemblyCode, gClassInfoFor__instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_SLEEP__buildAssemblyCode, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_literalOperation__buildAssemblyCode, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_LFSR__buildAssemblyCode, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVAW__buildAssemblyCode, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MNOP__buildAssemblyCode, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLRD__buildAssemblyCode, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLWT__buildAssemblyCode, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_bra__buildAssemblyCode, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_goto__buildAssemblyCode, gClassInfoFor__instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_assembly_code (prologueRoutineFor_piccolo_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

