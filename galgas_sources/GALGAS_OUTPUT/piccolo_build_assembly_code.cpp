//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'piccolo_build_assembly_code.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 25th, 2008, at 12h12'13"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@ipic_instruction.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__buildAssemblyCode> gDispatchTableFor__ipic_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__buildAssemblyCode (typeCategoryMethod__ipic_instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__buildAssemblyCode
findCategoryMethod__ipic_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__ipic_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic_pseudo_ORG.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_688,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_688 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_688->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_LABEL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_963,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_963 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_963->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (34))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_1222,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1222 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_1222->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))) ;
    if (((operand_1222->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" + ") ;
      var_cas_ioString._dotAssign_operation (operand_1222->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (47))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_1559 = var_cas_inRegisterTable ;
    if (_temp_1559._isBuilt ()) {
      _temp_1559 (HERE)->method_searchKey (_inLexique, operand_1222->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (51)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_1667 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_1667 = NULL ;
      while (((operand_1667 = enumerator_1667.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_1667) ;
        var_cas_found = ((operand_1667->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_1667->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__buildAssemblyCode> gDispatchTableFor__registerExpression__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__buildAssemblyCode (typeCategoryMethod__registerExpression__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__buildAssemblyCode
findCategoryMethod__registerExpression__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__registerExpression__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FDA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_1976,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1976 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_1976->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (72))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_2386 = operand_1976->mRegisterExpression ;
    if (_temp_2386._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2386._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2386 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (74)) ;
      }
    }
    if (((operand_1976->m_W_isDestination)._operator_and (var_cas_useBSRaccess)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_1976->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVFF.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_2822,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2822 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    GGS_bool automatic_var_1 ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_2980 = operand_2822->mSourceRegisterName ;
    if (_temp_2980._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2980._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2980 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_3 ;
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_3084 = operand_2822->mDestinationRegisterName ;
    if (_temp_3084._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_3084._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_3084 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_3, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_3484,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3484 != NULL) {
    if (((operand_3484->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (114)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_3484->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_3484->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (115)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (115))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (115)) ;
    }
    var_cas_outBitNumber = operand_3484->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_3918,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3918 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_4049 = var_cas_inBitSliceTable ;
    if (_temp_4049._isBuilt ()) {
      _temp_4049 (HERE)->method_searchKey (_inLexique, operand_3918->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
    if (((operand_3918->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_3918->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_3918->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (130)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (130))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (131))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_3918->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)) COMMA_SOURCE_FILE_AT_LINE (133)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FBA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_4488,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4488 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_4488->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (144))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_4730 = operand_4488->mRegisterExpression ;
    if (_temp_4730._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_4730._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4730 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_4842 = operand_4488->mBitNumber ;
    if (_temp_4842._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_4842._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4842 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (var_cas_bitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (149))) ;
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction_FA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_5122,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5122 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_5122->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (164))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_5331 = operand_5122->mRegisterExpression ;
    if (_temp_5331._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_5331._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5331 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (165)) ;
      }
    }
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic_instruction_conditionalBranch.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_5608,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5608 != NULL) {
    switch (operand_5608->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (operand_5608->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (operand_5608->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_5608->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (183)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_5608->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_5608->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (190)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_5608->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_BRA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BRA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BRA * operand_6705,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6705 != NULL) {
    var_cas_ioString.writeString ("  BRA  ") ;
    var_cas_ioString._dotAssign_operation (operand_6705->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_CALL.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_CALL * operand_6987,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6987 != NULL) {
    var_cas_ioString.writeString ("  CALL ") ;
    var_cas_ioString._dotAssign_operation (operand_6987->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_GOTO.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_GOTO__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_GOTO * operand_7260,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7260 != NULL) {
    var_cas_ioString.writeString ("  GOTO ") ;
    var_cas_ioString._dotAssign_operation (operand_7260->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RCALL.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RCALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RCALL * operand_7534,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7534 != NULL) {
    var_cas_ioString.writeString ("  RCALL ") ;
    var_cas_ioString._dotAssign_operation (operand_7534->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_CLRWDT.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_CLRWDT * operand_7810,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7810 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_DAW.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_DAW * operand_8063,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8063 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_NOP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_NOP * operand_8313,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8313 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_POP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_POP * operand_8563,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8563 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_PUSH.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_PUSH * operand_8814,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8814 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RESET.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RESET * operand_9067,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9067 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETURN.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETURN * operand_9322,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9322 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETFIE.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETFIE * operand_9579,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9579 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_9579->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_SLEEP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_SLEEP * operand_9910,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9910 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_literalOperation.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_10175,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10175 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_10175->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (340))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_10175->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (340))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_LFSR.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_10503,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10503 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_10503->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (350)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (350))) ;
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_6 ;
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_10695 = operand_10503->mRegisterExpression ;
    if (_temp_10695._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_10695._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10695 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (351)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVAW.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVAW__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVAW * operand_10903,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10903 != NULL) {
    var_cas_ioString.writeString ("  MOVLW ") ;
    GGS_bool automatic_var_8 ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_11061 = operand_10903->mRegisterExpression ;
    if (_temp_11061._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_11061._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11061 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (368)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_MNOP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_11267,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11267 != NULL) {
    if (((operand_11267->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_11267->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (385)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_11624 = operand_11267->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388)) ;
    GGS_bool _condition_11624 (_variant_11624._isBuilt (), true) ;
    while (_condition_11624.isBuiltAndTrue ()) {
      _condition_11624 = (var_cas_idx)._operator_strictInf (operand_11267->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))) ;
      if (_condition_11624.isBuiltAndTrue ()) {
        if (_variant_11624.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (392)) ;
          _condition_11624 = GGS_bool (true, false) ;
        }else{
          _variant_11624._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (392)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLRD.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_11748,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11748 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_11748->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (403))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLWT.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_12029,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12029 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_12029->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (413))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_retlw.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_12319,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12319 != NULL) {
    if ((operand_12319->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_12583 (operand_12319->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_12583 = NULL ;
      while (((operand_12583 = enumerator_12583.nextObject ()))) {
        macroValidPointer (operand_12583) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_12583->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (429)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (429))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_computed_bra.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_12799,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12799 != NULL) {
    if ((operand_12799->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13063 (operand_12799->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13063 = NULL ;
      while (((operand_13063 = enumerator_13063.nextObject ()))) {
        macroValidPointer (operand_13063) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_13063->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_goto.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_13267,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13267 != NULL) {
    if ((operand_13267->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13531 (operand_13267->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13531 = NULL ;
      while (((operand_13531 = enumerator_13531.nextObject ()))) {
        macroValidPointer (operand_13531) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_13531->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (463))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_ipic_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex ;
  var_cas_bccLabelIndex = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_14073 (var_cas_inInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_14073 = NULL ;
    while (((operand_14073 = enumerator_14073.nextObject ()))) {
      macroValidPointer (operand_14073) ;
      const GGS_ipic_instruction  _temp_14112 = operand_14073->mInstruction ;
      if (_temp_14112._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__buildAssemblyCode _method = findCategoryMethod__ipic_instruction__buildAssemblyCode (_temp_14112._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_14112 (HERE), var_cas_inAllRegisters, var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (482)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_14314 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_14314 = NULL ;
    while (((operand_14314 = enumerator_14314.nextObject ()))) {
      macroValidPointer (operand_14314) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_14387 = operand_14314->mInfo.mRegisterAddressList ;
      if (_temp_14387._isBuilt ()) {
        _temp_14387 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (488)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_14314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (489))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (489))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_14647 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_14647 = NULL ;
    while (((operand_14647 = enumerator_14647.nextObject ()))) {
      macroValidPointer (operand_14647) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_14647->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (495)) COMMA_SOURCE_FILE_AT_LINE (495)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_14776 = operand_14647->mInfo.mRegisterAddressList ;
        if (_temp_14776._isBuilt ()) {
          _temp_14776 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (496)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_14647->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n") ;
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_assembly_code (void) {
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__registerExpression__buildAssemblyCode (category_method__registerExpression__buildAssemblyCode, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FDA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVFF__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FBA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_BRA__buildAssemblyCode, gClassInfoFor__ipic_instruction_BRA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_CALL__buildAssemblyCode, gClassInfoFor__ipic_instruction_CALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_GOTO__buildAssemblyCode, gClassInfoFor__ipic_instruction_GOTO.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RCALL__buildAssemblyCode, gClassInfoFor__ipic_instruction_RCALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_DAW__buildAssemblyCode, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_NOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_POP__buildAssemblyCode, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_PUSH__buildAssemblyCode, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RESET__buildAssemblyCode, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETURN__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_LFSR__buildAssemblyCode, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVAW__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MNOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLRD__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLWT__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_bra__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_goto__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_assembly_code (prologueRoutineFor_piccolo_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

