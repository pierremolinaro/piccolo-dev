//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'piccolo_build_assembly_code.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 23th, 2008, at 11h51'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_assembly_code.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@instruction.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction * operand_368,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & /* var_cas_ioString */,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_368 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@instruction.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__buildAssemblyCode> gDispatchTableFor__instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__buildAssemblyCode (typeCategoryMethod__instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__buildAssemblyCode
findCategoryMethod__instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@pseudo_ORG.buildAssemblyCode'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_ORG * operand_590,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_590 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_590->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@pseudo_LABEL.buildAssemblyCode'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_860,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_860 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_860->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (33))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_1119,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1119 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_1119->mRegisterName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (44))) ;
    if (((operand_1119->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (45)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" + ") ;
      var_cas_ioString._dotAssign_operation (operand_1119->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (46))) ;
    }
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_1456 = var_cas_inRegisterTable ;
    if (_temp_1456._isBuilt ()) {
      _temp_1456 (HERE)->method_searchKey (_inLexique, operand_1119->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (50)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_1564 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_1564 = NULL ;
      while (((operand_1564 = enumerator_1564.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_1564) ;
        var_cas_found = ((operand_1564->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_1564->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.buildAssemblyCode'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__buildAssemblyCode> gDispatchTableFor__registerExpression__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__buildAssemblyCode (typeCategoryMethod__registerExpression__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__buildAssemblyCode
findCategoryMethod__registerExpression__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__registerExpression__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__registerExpression__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FDA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_1868,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1868 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_1868->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (71))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerExpression  _temp_2278 = operand_1868->mRegisterExpression ;
    if (_temp_2278._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2278._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2278 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
    }
    if (((operand_1868->m_W_isDestination)._operator_and (var_cas_useBSRaccess)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_1868->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVFF.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_2709,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2709 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    GGS_bool automatic_var_1 ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_2867 = operand_2709->mSourceRegisterName ;
    if (_temp_2867._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2867._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2867 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (94)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_3 ;
    GGS_bitSliceTable  automatic_var_4 ;
    const GGS_registerExpression  _temp_2971 = operand_2709->mDestinationRegisterName ;
    if (_temp_2971._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_2971._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2971 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_3, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_3371,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3371 != NULL) {
    if (((operand_3371->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (113)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_3371->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_3371->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (114)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
    }
    var_cas_outBitNumber = operand_3371->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_3805,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3805 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_3936 = var_cas_inBitSliceTable ;
    if (_temp_3936._isBuilt ()) {
      _temp_3936 (HERE)->method_searchKey (_inLexique, operand_3805->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }
    if (((operand_3805->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_3805->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_3805->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (129))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (130))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_3805->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (132)) COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FBA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_4370,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4370 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_4370->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (143))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_4612 = operand_4370->mRegisterExpression ;
    if (_temp_4612._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_4612._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4612 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_4724 = operand_4370->mBitNumber ;
    if (_temp_4724._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_4724._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4724 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (147)) ;
      }
    }
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (var_cas_bitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (148))) ;
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_FA.buildAssemblyCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_4999,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4999 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_4999->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (163))) ;
    var_cas_ioString.writeString (" ") ;
    GGS_bitSliceTable  automatic_var_5 ;
    const GGS_registerExpression  _temp_5208 = operand_4999->mRegisterExpression ;
    if (_temp_5208._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_5208._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5208 (HERE), var_cas_inRegisterTable, var_cas_ioString, var_cas_useBSRaccess, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (164)) ;
      }
    }
    if ((var_cas_useBSRaccess).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_conditionalBranch.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_5480,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5480 != NULL) {
    switch (operand_5480->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (operand_5480->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (operand_5480->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_5480->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (182)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (184))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_5480->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_5480->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (189)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (191))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_5480->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_BRA.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_6572,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6572 != NULL) {
    var_cas_ioString.writeString ("  BRA  ") ;
    var_cas_ioString._dotAssign_operation (operand_6572->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (205))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_CALL.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CALL * operand_6849,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6849 != NULL) {
    var_cas_ioString.writeString ("  CALL ") ;
    var_cas_ioString._dotAssign_operation (operand_6849->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_GOTO.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_GOTO * operand_7117,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7117 != NULL) {
    var_cas_ioString.writeString ("  GOTO ") ;
    var_cas_ioString._dotAssign_operation (operand_7117->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RCALL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RCALL * operand_7386,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7386 != NULL) {
    var_cas_ioString.writeString ("  RCALL ") ;
    var_cas_ioString._dotAssign_operation (operand_7386->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_CLRWDT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_CLRWDT * operand_7657,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7657 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_DAW.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_DAW * operand_7905,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7905 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_NOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_NOP * operand_8150,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8150 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@instruction_POP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_POP * operand_8395,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8395 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_PUSH.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_PUSH * operand_8641,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8641 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_RESET.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RESET * operand_8889,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8889 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETURN.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETURN * operand_9139,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9139 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_RETFIE.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_RETFIE * operand_9391,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9391 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_9391->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_SLEEP.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_instruction_SLEEP * operand_9717,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9717 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_literalOperation.buildAssemblyCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_9977,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9977 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_9977->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (339))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_9977->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (339))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_LFSR.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_10300,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10300 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_10300->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (349))) ;
    var_cas_ioString.writeString (", ") ;
    GGS_bool automatic_var_6 ;
    GGS_bitSliceTable  automatic_var_7 ;
    const GGS_registerExpression  _temp_10492 = operand_10300->mRegisterExpression ;
    if (_temp_10492._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_10492._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10492 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (350)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MOVAW.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_10695,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10695 != NULL) {
    var_cas_ioString.writeString ("  MOVLW ") ;
    GGS_bool automatic_var_8 ;
    GGS_bitSliceTable  automatic_var_9 ;
    const GGS_registerExpression  _temp_10853 = operand_10695->mRegisterExpression ;
    if (_temp_10853._isBuilt ()) {
      typeCategoryMethod__registerExpression__buildAssemblyCode _method = findCategoryMethod__registerExpression__buildAssemblyCode (_temp_10853._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10853 (HERE), var_cas_inRegisterTable, var_cas_ioString, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (367)) ;
      }
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_MNOP.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_11054,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11054 != NULL) {
    if (((operand_11054->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (383)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_11054->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (384)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_11411 = operand_11054->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (387)) ;
    GGS_bool _condition_11411 (_variant_11411._isBuilt (), true) ;
    while (_condition_11411.isBuiltAndTrue ()) {
      _condition_11411 = (var_cas_idx)._operator_strictInf (operand_11054->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388))) ;
      if (_condition_11411.isBuiltAndTrue ()) {
        if (_variant_11411.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (391)) ;
          _condition_11411 = GGS_bool (true, false) ;
        }else{
          _variant_11411._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLRD.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_11530,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11530 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_11530->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@instruction_TBLWT.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_11806,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11806 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_11806->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (412))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_computed_retlw.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_12091,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12091 != NULL) {
    if ((operand_12091->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_12355 (operand_12091->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_12355 = NULL ;
      while (((operand_12355 = enumerator_12355.nextObject ()))) {
        macroValidPointer (operand_12355) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_12355->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (428)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (428))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_bra.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_12566,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12566 != NULL) {
    if ((operand_12566->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_12830 (operand_12566->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_12830 = NULL ;
      while (((operand_12830 = enumerator_12830.nextObject ()))) {
        macroValidPointer (operand_12830) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_12830->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (445))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_computed_goto.buildAssemblyCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_13029,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13029 != NULL) {
    if ((operand_13029->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13293 (operand_13029->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_13293 = NULL ;
      while (((operand_13293 = enumerator_13293.nextObject ()))) {
        macroValidPointer (operand_13293) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_13293->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (462))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_13796 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_13796 = NULL ;
    while (((operand_13796 = enumerator_13796.nextObject ()))) {
      macroValidPointer (operand_13796) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_13869 = operand_13796->mInfo.mRegisterAddressList ;
      if (_temp_13869._isBuilt ()) {
        _temp_13869 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (479)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_13796->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (480))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (480))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_14101 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_14101 = NULL ;
    while (((operand_14101 = enumerator_14101.nextObject ()))) {
      macroValidPointer (operand_14101) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_14101->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (485)) COMMA_SOURCE_FILE_AT_LINE (485)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_14230 = operand_14101->mInfo.mRegisterAddressList ;
        if (_temp_14230._isBuilt ()) {
          _temp_14230 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (486)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_14101->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (487))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (487))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n") ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex ;
  var_cas_bccLabelIndex = GGS_uint (true, 0U) ;
  {
    GGS_instructionList::cEnumerator enumerator_14688 (var_cas_inInstructionList, true) ;
    const GGS_instructionList::cElement * operand_14688 = NULL ;
    while (((operand_14688 = enumerator_14688.nextObject ()))) {
      macroValidPointer (operand_14688) ;
      const GGS_instruction  _temp_14727 = operand_14688->mInstruction ;
      if (_temp_14727._isBuilt ()) {
        typeCategoryMethod__instruction__buildAssemblyCode _method = findCategoryMethod__instruction__buildAssemblyCode (_temp_14727._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_14727 (HERE), var_cas_inAllRegisters, var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (500)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_assembly_code (void) {
 enterCategoryMethod__instruction__buildAssemblyCode (category_method__instruction__buildAssemblyCode, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_ORG__buildAssemblyCode, gClassInfoFor__pseudo_ORG.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__pseudo_LABEL__buildAssemblyCode, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__registerExpression__buildAssemblyCode (category_method__registerExpression__buildAssemblyCode, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FDA__buildAssemblyCode, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVFF__buildAssemblyCode, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FBA__buildAssemblyCode, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_FA__buildAssemblyCode, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_BRA__buildAssemblyCode, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CALL__buildAssemblyCode, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_GOTO__buildAssemblyCode, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RCALL__buildAssemblyCode, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_DAW__buildAssemblyCode, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_NOP__buildAssemblyCode, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_POP__buildAssemblyCode, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_PUSH__buildAssemblyCode, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RESET__buildAssemblyCode, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETURN__buildAssemblyCode, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_RETFIE__buildAssemblyCode, gClassInfoFor__instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_SLEEP__buildAssemblyCode, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_literalOperation__buildAssemblyCode, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_LFSR__buildAssemblyCode, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MOVAW__buildAssemblyCode, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_MNOP__buildAssemblyCode, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLRD__buildAssemblyCode, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_TBLWT__buildAssemblyCode, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_bra__buildAssemblyCode, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__buildAssemblyCode ((typeCategoryMethod__instruction__buildAssemblyCode) category_method__instruction_computed_goto__buildAssemblyCode, gClassInfoFor__instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_assembly_code (prologueRoutineFor_piccolo_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

