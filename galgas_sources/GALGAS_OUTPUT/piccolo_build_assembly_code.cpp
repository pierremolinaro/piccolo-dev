//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'piccolo_build_assembly_code.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 27th, 2008, at 20h2'43"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_assembly_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_assembly_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@ipic_instruction.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__buildAssemblyCode> gDispatchTableFor__ipic_instruction__buildAssemblyCode ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__buildAssemblyCode (typeCategoryMethod__ipic_instruction__buildAssemblyCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__buildAssemblyCode
findCategoryMethod__ipic_instruction__buildAssemblyCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__buildAssemblyCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__buildAssemblyCode.count ()) {
    result = gDispatchTableFor__ipic_instruction__buildAssemblyCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__buildAssemblyCode (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__buildAssemblyCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@ipic_pseudo_ORG.buildAssemblyCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_646,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_646 != NULL) {
    var_cas_ioString.writeString ("  ORG ") ;
    var_cas_ioString._dotAssign_operation (operand_646->mOrigin.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_LABEL.buildAssemblyCode'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_879,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_879 != NULL) {
    var_cas_ioString._dotAssign_operation (operand_879->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (31))) ;
    var_cas_ioString.writeString (":\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FDA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_1107,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1107 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_1107->mInstruction_FDA_base_code.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_1107->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) ;
    if (((operand_1107->m_W_isDestination)._operator_and (operand_1107->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (41)))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((operand_1107->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (43))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_1107->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVFF.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_1698,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1698 != NULL) {
    var_cas_ioString.writeString ("  MOVFF ") ;
    var_cas_ioString._dotAssign_operation (operand_1698->mSourceRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_1698->mDestinationRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_FBA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_2075,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2075 != NULL) {
    GGS_bool var_cas_useBSRaccess ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2075->mBitOrientedOp.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2075->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_2075->mBitNumber.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
    if ((operand_2075->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (76))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction_FA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_2541,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2541 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_2541->mFAinstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (88))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_2541->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (88))) ;
    if ((operand_2541->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (89))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic_instruction_conditionalBranch.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_2941,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2941 != NULL) {
    switch (operand_2941->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (operand_2941->mConditionalBranch.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (operand_2941->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
      var_cas_ioString.writeString ("\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_2941->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (105)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_2941->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_2941->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (112)) ;
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
      var_cas_ioString.writeString ("  ") ;
      var_cas_ioString._dotAssign_operation (var_cas_complementary.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
      var_cas_ioString.writeString (" ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_2941->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (116))) ;
      var_cas_ioString.writeString ("\n") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_jump_test_register.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_3999,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3999 != NULL) {
    var_cas_ioString.writeString ("  "
    "TSTFSZ ") ;
    var_cas_ioString._dotAssign_operation (operand_3999->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
    if ((operand_3999->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
    if ((operand_3999->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      if ((operand_3999->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_3999->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_3999->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
    }else{
      if ((operand_3999->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_3999->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_3999->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_incDecRegisterInCondition.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_4862,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4862 != NULL) {
    if (((operand_4862->mBranchIfZero)._operator_and (operand_4862->mIncrement)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "INFSNZ ") ;
    }else if (((operand_4862->mBranchIfZero)._operator_and ((operand_4862->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "DCFSNZ ") ;
    }else if ((((operand_4862->mBranchIfZero)._operator_not ())._operator_and (operand_4862->mIncrement)).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  "
      "INCFSZ ") ;
    }else{
      var_cas_ioString.writeString ("  "
      "DECFSZ ") ;
    }
    var_cas_ioString._dotAssign_operation (operand_4862->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (165))) ;
    if (((operand_4862->m_W_isDestination)._operator_and (operand_4862->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (166)))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W, BSR_ACCESS") ;
    }else if ((operand_4862->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (168))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", F, BSR_ACCESS") ;
    }else if ((operand_4862->m_W_isDestination).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", W") ;
    }else{
      var_cas_ioString.writeString (", F") ;
    }
    var_cas_ioString.writeString ("\n") ;
    if ((operand_4862->mUsesBra).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (operand_4862->mTargetLabel) ;
      var_cas_ioString.writeString ("\n") ;
    }else{
      var_cas_ioString.writeString ("  GOTO ") ;
      var_cas_ioString._dotAssign_operation (operand_4862->mTargetLabel) ;
      var_cas_ioString.writeString ("\n") ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_registerComparisonCondition.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_5831,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & var_cas_ioBccLabelIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5831 != NULL) {
    switch (operand_5831->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_ioString.writeString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_ioString.writeString (" CPFSEQ ") ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_ioString.writeString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_ioString.writeString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_ioString.writeString (" CPFSGT ") ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_ioString.writeString (" CPFSLT ") ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    var_cas_ioString._dotAssign_operation (operand_5831->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (197))) ;
    if ((operand_5831->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (198))).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (", BSR_ACCESS") ;
    }
    var_cas_ioString.writeString ("\n") ;
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_5831->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (202)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_string var_cas_aLabel ;
      var_cas_aLabel = (GGS_string (true, "_bcc_label_"))._operator_concat (var_cas_ioBccLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (204))) ;
      var_cas_ioBccLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)) ;
      var_cas_ioString.writeString ("  BRA ") ;
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString ("\n") ;
      if ((operand_5831->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_5831->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_5831->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
      var_cas_ioString._dotAssign_operation (var_cas_aLabel) ;
      var_cas_ioString.writeString (":\n") ;
    }else{
      if ((operand_5831->mUsesBra).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_5831->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }else{
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_5831->mTargetLabel) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_BRA.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BRA__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BRA * operand_7060,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7060 != NULL) {
    var_cas_ioString.writeString ("  BRA  ") ;
    var_cas_ioString._dotAssign_operation (operand_7060->mTargetLabel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_CALL.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_CALL * operand_7300,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7300 != NULL) {
    var_cas_ioString.writeString ("  CALL ") ;
    var_cas_ioString._dotAssign_operation (operand_7300->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_GOTO.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_GOTO__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_GOTO * operand_7531,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7531 != NULL) {
    var_cas_ioString.writeString ("  GOTO ") ;
    var_cas_ioString._dotAssign_operation (operand_7531->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RCALL.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RCALL__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RCALL * operand_7763,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7763 != NULL) {
    var_cas_ioString.writeString ("  RCALL ") ;
    var_cas_ioString._dotAssign_operation (operand_7763->mTargetLabel) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_CLRWDT.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_CLRWDT * operand_7997,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7997 != NULL) {
    var_cas_ioString.writeString ("  CLRWDT\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_DAW.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_DAW * operand_8208,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8208 != NULL) {
    var_cas_ioString.writeString ("  DAW\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_NOP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_NOP * operand_8416,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8416 != NULL) {
    var_cas_ioString.writeString ("  NOP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_POP.buildAssemblyCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_POP * operand_8624,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8624 != NULL) {
    var_cas_ioString.writeString ("  POP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_PUSH.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_PUSH * operand_8833,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8833 != NULL) {
    var_cas_ioString.writeString ("  PUSH\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RESET.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RESET * operand_9044,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9044 != NULL) {
    var_cas_ioString.writeString ("  RESET\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETURN.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETURN * operand_9257,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9257 != NULL) {
    var_cas_ioString.writeString ("  RETURN\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_RETFIE.buildAssemblyCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_RETFIE * operand_9472,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9472 != NULL) {
    var_cas_ioString.writeString ("  RETFIE") ;
    if ((operand_9472->mFastReturn).isBuiltAndTrue ()) {
      var_cas_ioString.writeString (" 1") ;
    }
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_SLEEP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__buildAssemblyCode (C_Compiler &,
                                const cPtr_ipic_instruction_SLEEP * operand_9761,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9761 != NULL) {
    var_cas_ioString.writeString ("  SLEEP\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_literalOperation.buildAssemblyCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_9984,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9984 != NULL) {
    var_cas_ioString.writeString ("  ") ;
    var_cas_ioString._dotAssign_operation (operand_9984->mLiteralInstruction.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))) ;
    var_cas_ioString.writeString (" ") ;
    var_cas_ioString._dotAssign_operation (operand_9984->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_LFSR.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_10270,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10270 != NULL) {
    var_cas_ioString.writeString ("  LFSR ") ;
    var_cas_ioString._dotAssign_operation (operand_10270->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (357)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (357))) ;
    var_cas_ioString.writeString (", ") ;
    var_cas_ioString._dotAssign_operation (operand_10270->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (358))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_MOVAW.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVAW__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVAW * operand_10578,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10578 != NULL) {
    var_cas_ioString.writeString ("  MOVLW ") ;
    var_cas_ioString._dotAssign_operation (operand_10578->mRegisterDescription.reader_mAssemblyString (_inLexique COMMA_SOURCE_FILE_AT_LINE (367))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_instruction_MNOP.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_10836,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10836 != NULL) {
    if (((operand_10836->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (376)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_10836->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_11151 = operand_10836->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (380)) ;
    GGS_bool _condition_11151 (_variant_11151._isBuilt (), true) ;
    while (_condition_11151.isBuiltAndTrue ()) {
      _condition_11151 = (var_cas_idx)._operator_strictInf (operand_10836->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (381))) ;
      if (_condition_11151.isBuiltAndTrue ()) {
        if (_variant_11151.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (384)) ;
          _condition_11151 = GGS_bool (true, false) ;
        }else{
          _variant_11151._decrement_operation (_inLexique COMMA_HERE) ;
          var_cas_ioString.writeString ("  NOP\n") ;
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLRD.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_11275,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11275 != NULL) {
    var_cas_ioString.writeString ("  TBLRD ") ;
    var_cas_ioString._dotAssign_operation (operand_11275->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (394))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_TBLWT.buildAssemblyCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_11514,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11514 != NULL) {
    var_cas_ioString.writeString ("  TBLWT ") ;
    var_cas_ioString._dotAssign_operation (operand_11514->mOption.reader_mnemonic (_inLexique COMMA_SOURCE_FILE_AT_LINE (403))) ;
    var_cas_ioString.writeString ("\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_retlw.buildAssemblyCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_11762,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11762 != NULL) {
    if ((operand_11762->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_11984 (operand_11762->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_11984 = NULL ;
      while (((operand_11984 = enumerator_11984.nextObject ()))) {
        macroValidPointer (operand_11984) ;
        var_cas_ioString.writeString ("  RETLW ") ;
        var_cas_ioString._dotAssign_operation (operand_11984->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (418)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (418))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_computed_bra.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_12200,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12200 != NULL) {
    if ((operand_12200->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_2\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_2\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_12422 (operand_12200->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_12422 = NULL ;
      while (((operand_12422 = enumerator_12422.nextObject ()))) {
        macroValidPointer (operand_12422) ;
        var_cas_ioString.writeString ("  BRA ") ;
        var_cas_ioString._dotAssign_operation (operand_12422->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (434))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_goto.buildAssemblyCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__buildAssemblyCode (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_12626,
                                GGS_string & var_cas_ioString,
                                GGS_uint  & /* var_cas_ioBccLabelIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12626 != NULL) {
    if ((operand_12626->mUsesRelativeCall).isBuiltAndTrue ()) {
      var_cas_ioString.writeString ("  RCALL _computed_goto_4\n") ;
    }else{
      var_cas_ioString.writeString ("  CALL _computed_goto_4\n") ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_12848 (operand_12626->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_12848 = NULL ;
      while (((operand_12848 = enumerator_12848.nextObject ()))) {
        macroValidPointer (operand_12848) ;
        var_cas_ioString.writeString ("  GOTO ") ;
        var_cas_ioString._dotAssign_operation (operand_12848->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (450))) ;
        var_cas_ioString.writeString ("\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "buildAssemblyCode"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyCode (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProcessorName,
                                const GGS_registerTable   var_cas_inPredefinedRegisters,
                                const GGS_registerTable   var_cas_inAllRegisters,
                                const GGS_ipic_instructionList   var_cas_inInstructionList,
                                GGS_string & var_cas_outAssemblyCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outAssemblyCode = ((GGS_string (true, "  PROCESSOR "))._operator_concat (var_cas_inProcessorName))._operator_concat (GGS_string (true, "\n")) ;
  var_cas_outAssemblyCode.writeString (";--- Code\n") ;
  var_cas_outAssemblyCode.writeString ("  ORG 0\n") ;
  GGS_uint  var_cas_bccLabelIndex ;
  var_cas_bccLabelIndex = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_13390 (var_cas_inInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_13390 = NULL ;
    while (((operand_13390 = enumerator_13390.nextObject ()))) {
      macroValidPointer (operand_13390) ;
      const GGS_ipic_instruction  _temp_13429 = operand_13390->mInstruction ;
      if (_temp_13429._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__buildAssemblyCode _method = findCategoryMethod__ipic_instruction__buildAssemblyCode (_temp_13429._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_13429 (HERE), var_cas_outAssemblyCode, var_cas_bccLabelIndex COMMA_SOURCE_FILE_AT_LINE (469)) ;
        }
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Prefefined registers\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_13615 (var_cas_inPredefinedRegisters, true) ;
    const GGS_registerTable::cElement * operand_13615 = NULL ;
    while (((operand_13615 = enumerator_13615.nextObject ()))) {
      macroValidPointer (operand_13615) ;
      GGS_uint  var_cas_firstRegister ;
      const GGS_uintlist  _temp_13688 = operand_13615->mInfo.mRegisterAddressList ;
      if (_temp_13688._isBuilt ()) {
        _temp_13688 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (475)) ;
      }
      var_cas_outAssemblyCode._dotAssign_operation (operand_13615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (476))) ;
      var_cas_outAssemblyCode.writeString (" EQU ") ;
      var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (476))) ;
      var_cas_outAssemblyCode.writeString ("\n") ;
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- User defined registers (in RAM)\n") ;
  {
    GGS_registerTable::cEnumerator enumerator_13948 (var_cas_inAllRegisters, true) ;
    const GGS_registerTable::cElement * operand_13948 = NULL ;
    while (((operand_13948 = enumerator_13948.nextObject ()))) {
      macroValidPointer (operand_13948) ;
      if (((var_cas_inPredefinedRegisters.reader_hasKey (_inLexique, operand_13948->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (482)) COMMA_SOURCE_FILE_AT_LINE (482)))._operator_not ()).isBuiltAndTrue ()) {
        GGS_uint  var_cas_firstRegister ;
        const GGS_uintlist  _temp_14077 = operand_13948->mInfo.mRegisterAddressList ;
        if (_temp_14077._isBuilt ()) {
          _temp_14077 (HERE)->method_first (_inLexique, var_cas_firstRegister COMMA_SOURCE_FILE_AT_LINE (483)) ;
        }
        var_cas_outAssemblyCode._dotAssign_operation (operand_13948->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (484))) ;
        var_cas_outAssemblyCode.writeString (" EQU ") ;
        var_cas_outAssemblyCode._dotAssign_operation (var_cas_firstRegister.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (484))) ;
        var_cas_outAssemblyCode.writeString ("\n") ;
      }
    }
  }
  var_cas_outAssemblyCode.writeString ("\n") ;
  var_cas_outAssemblyCode.writeString (";--- Piccolo defined symbols\n") ;
  var_cas_outAssemblyCode.writeString ("F EQU 0\n") ;
  var_cas_outAssemblyCode.writeString ("W EQU 1\n") ;
  var_cas_outAssemblyCode.writeString ("BSR_ACCESS EQU 1\n") ;
  var_cas_outAssemblyCode.writeString (";---\n"
    "\n") ;
  var_cas_outAssemblyCode.writeString ("  END\n"
    "\n") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_assembly_code (void) {
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_ORG__buildAssemblyCode, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_pseudo_LABEL__buildAssemblyCode, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FDA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVFF__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FBA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_FA__buildAssemblyCode, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_conditionalBranch__buildAssemblyCode, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_jump_test_register__buildAssemblyCode, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_incDecRegisterInCondition__buildAssemblyCode, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_registerComparisonCondition__buildAssemblyCode, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_BRA__buildAssemblyCode, gClassInfoFor__ipic_instruction_BRA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_CALL__buildAssemblyCode, gClassInfoFor__ipic_instruction_CALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_GOTO__buildAssemblyCode, gClassInfoFor__ipic_instruction_GOTO.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RCALL__buildAssemblyCode, gClassInfoFor__ipic_instruction_RCALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_CLRWDT__buildAssemblyCode, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_DAW__buildAssemblyCode, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_NOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_POP__buildAssemblyCode, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_PUSH__buildAssemblyCode, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RESET__buildAssemblyCode, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETURN__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_RETFIE__buildAssemblyCode, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_SLEEP__buildAssemblyCode, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_literalOperation__buildAssemblyCode, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_LFSR__buildAssemblyCode, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MOVAW__buildAssemblyCode, gClassInfoFor__ipic_instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_MNOP__buildAssemblyCode, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLRD__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_TBLWT__buildAssemblyCode, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_retlw__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_bra__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__buildAssemblyCode ((typeCategoryMethod__ipic_instruction__buildAssemblyCode) category_method__ipic_instruction_computed_goto__buildAssemblyCode, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_assembly_code (prologueRoutineFor_piccolo_build_assembly_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

