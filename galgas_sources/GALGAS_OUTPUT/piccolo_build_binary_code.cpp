//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 27th, 2008, at 19h59'41"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (21)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))) COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_symbolTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTable::e_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@symbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTable::
elementOf_GGS_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTable * _p = dynamic_cast <const elementOf_GGS_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isNotEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_instruction * operand_1792,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1792 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.enterLabelAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__enterLabelAtAddress> gDispatchTableFor__ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__enterLabelAtAddress (typeCategoryMethod__ipic_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__enterLabelAtAddress
findCategoryMethod__ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_2015,
                                GGS_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2015 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_2015->mTargetLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_2286,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2286 != NULL) {
    var_cas_ioAddress = operand_2286->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_2532,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2532 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_2532->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (76)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (77)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_3403,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3403 != NULL) {
    var_cas_ioAddress = operand_3403->mOrigin ;
    if (operand_3403->mOrigin._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_3403->mOrigin COMMA_SOURCE_FILE_AT_LINE (98)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FDA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_3683,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3683 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3683->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (109)) ;
    if ((operand_3683->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (110))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_3683->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3683->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (116)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (116)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_FA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_4213,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4213 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4213->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (127)) ;
    if ((operand_4213->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_4213->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (131)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVFF.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_4675,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4675 != NULL) {
    if ((GGS_uint (true, 49152U))._operator_or (operand_4675->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (141)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (operand_4675->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (141))) COMMA_SOURCE_FILE_AT_LINE (140)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (operand_4675->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (operand_4675->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (142))) COMMA_SOURCE_FILE_AT_LINE (141)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FBA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_5052,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5052 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5052->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (152)) ;
    if ((operand_5052->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (153))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5052->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (156)))._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_5052->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (157))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (169))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (169))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (169)) COMMA_SOURCE_FILE_AT_LINE (169))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (169)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (171)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (174)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (176))) COMMA_SOURCE_FILE_AT_LINE (175)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (186))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (186)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (191)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (191))) COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (199)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (199)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (198)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (200)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (200))) COMMA_SOURCE_FILE_AT_LINE (199)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_7039,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7039 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_7174 = var_cas_inRoutineSymbolTable ;
    if (_temp_7174._isBuilt ()) {
      _temp_7174 (HERE)->method_searchKey (_inLexique, operand_7039->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (210)) ;
    }
    switch (operand_7039->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_7039->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)),  operand_7039->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (213)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_7039->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (221)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (225)),  operand_7039->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (226)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (222)) ;
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (230)),  var_cas_targetAddress,  operand_7039->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (232)) COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_7039->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (235)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (239)),  operand_7039->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (240)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (236)) ;
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (242)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_BRA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BRA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BRA * operand_8210,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8210 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_8344 = var_cas_inRoutineSymbolTable ;
    if (_temp_8344._isBuilt ()) {
      _temp_8344 (HERE)->method_searchKey (_inLexique, operand_8210->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (256)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (258))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (258))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (258)) COMMA_SOURCE_FILE_AT_LINE (258))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (258)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_8210->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (260)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8210->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)) COMMA_SOURCE_FILE_AT_LINE (261)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_GOTO.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_GOTO__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_GOTO * operand_8862,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8862 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_9004 = var_cas_inRoutineSymbolTable ;
    if (_temp_9004._isBuilt ()) {
      _temp_9004 (HERE)->method_searchKey (_inLexique, operand_8862->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (277)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (277)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (287)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (287)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (286)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (288)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (288))) COMMA_SOURCE_FILE_AT_LINE (287)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_CALL.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_CALL * operand_9485,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9485 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_9627 = var_cas_inRoutineSymbolTable ;
    if (_temp_9627._isBuilt ()) {
      _temp_9627 (HERE)->method_searchKey (_inLexique, operand_9485->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (298)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (298)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (310))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (310))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (310)) COMMA_SOURCE_FILE_AT_LINE (310))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (310)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement too large ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (312))))._operator_concat (GGS_string (true, ") for RCALL instruction (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (312)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (315)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (315))) COMMA_SOURCE_FILE_AT_LINE (313)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_10438,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10438 != NULL) {
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (true, 26112U) ;
    if ((operand_10438->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (327))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_10438->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (330)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (330)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_10854 = var_cas_inRoutineSymbolTable ;
    if (_temp_10854._isBuilt ()) {
      _temp_10854 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_10438->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (334)) ;
    }
    if ((operand_10438->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_10438->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (338)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (340)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (343)),  var_cas_intermediateTargetAddress,  operand_10438->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (341)) ;
      if ((operand_10438->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (348)),  var_cas_targetAddress,  operand_10438->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (347)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }else{
      if ((operand_10438->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (354)),  var_cas_targetAddress,  operand_10438->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (353)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (355)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_11703,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11703 != NULL) {
    GGS_uint  var_cas_code ;
    if (((operand_11703->mBranchIfZero)._operator_and (operand_11703->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 18432U) ;
    }else if (((operand_11703->mBranchIfZero)._operator_and ((operand_11703->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 19456U) ;
    }else if ((((operand_11703->mBranchIfZero)._operator_not ())._operator_and (operand_11703->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 15360U) ;
    }else{
      var_cas_code = GGS_uint (true, 11264U) ;
    }
    if (((operand_11703->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    if ((operand_11703->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (380))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_11703->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (383)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (383)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_12402 = var_cas_inRoutineSymbolTable ;
    if (_temp_12402._isBuilt ()) {
      _temp_12402 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_11703->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (387)) ;
    }
    if ((operand_11703->mUsesBra).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (389)),  var_cas_targetAddress,  operand_11703->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (388)) ;
    }else{
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_12742,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12742 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_12742->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    if ((operand_12742->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (411))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_12742->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (414)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (414)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_13510 = var_cas_inRoutineSymbolTable ;
    if (_temp_13510._isBuilt ()) {
      _temp_13510 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12742->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_12742->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (419)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_12742->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (423)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (428)),  var_cas_intermediateTargetAddress,  operand_12742->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (426)) ;
      if ((operand_12742->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (433)),  var_cas_targetAddress,  operand_12742->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (432)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (434)) ;
      }
    }else{
      if ((operand_12742->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (439)),  var_cas_targetAddress,  operand_12742->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (438)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (440)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RCALL.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RCALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RCALL * operand_14461,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14461 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_14596 = var_cas_inRoutineSymbolTable ;
    if (_temp_14596._isBuilt ()) {
      _temp_14596 (HERE)->method_searchKey (_inLexique, operand_14461->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (453)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_14461->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (458)) COMMA_SOURCE_FILE_AT_LINE (453)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_CLRWDT * operand_14879,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14879 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (467)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_DAW.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_DAW * operand_15134,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15134 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (476)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_NOP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_NOP * operand_15389,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15389 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (485)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_POP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_POP * operand_15644,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15644 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (494)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_PUSH.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_PUSH * operand_15900,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15900 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (503)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RESET.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RESET * operand_16157,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16157 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (512)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETURN.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETURN * operand_16415,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16415 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (521)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETFIE.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETFIE * operand_16673,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16673 != NULL) {
    if (GGS_uint (true, 17U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (530)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_SLEEP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_SLEEP * operand_16930,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16930 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (539)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_17198,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17198 != NULL) {
    GGS_uint  var_cas_code ;
    operand_17198->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (550)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_17198->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (551))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (551)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_LFSR.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_17550,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17550 != NULL) {
    if (((GGS_uint (true, 60928U))._operator_or (operand_17550->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (561))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (561))))._operator_or (operand_17550->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (561))._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (561)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_17550->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (561))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (561))))._operator_or (operand_17550->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (561))._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (561))) COMMA_SOURCE_FILE_AT_LINE (560)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((operand_17550->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((operand_17550->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (561)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVLB.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVLB * operand_17953,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17953 != NULL) {
    if ((GGS_uint (true, 256U))._operator_or (operand_17953->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (571)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 256U))._operator_or (operand_17953->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (571))) COMMA_SOURCE_FILE_AT_LINE (570)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_18225,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18225 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_18360 = var_cas_inRoutineSymbolTable ;
    if (_temp_18360._isBuilt ()) {
      _temp_18360 (HERE)->method_searchKey (_inLexique, operand_18225->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (581)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_18225->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_18225->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (584))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (585))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (585)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVAW * operand_18803,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18803 != NULL) {
    if ((GGS_uint (true, 3584U))._operator_or (operand_18803->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (595)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (operand_18803->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (595))) COMMA_SOURCE_FILE_AT_LINE (594)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLRD.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_19102,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19102 != NULL) {
    switch (operand_19102->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (605)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (606)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (607)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (608)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLWT.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_19538,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19538 != NULL) {
    switch (operand_19538->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (619)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (620)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (621)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_MNOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_19973,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19973 != NULL) {
    if (((operand_19973->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (632)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_19973->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (633)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_20311 = operand_19973->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (636)) ;
    GGS_bool _condition_20311 (_variant_20311._isBuilt (), true) ;
    while (_condition_20311.isBuiltAndTrue ()) {
      _condition_20311 = (var_cas_idx)._operator_strictInf (operand_19973->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (637))) ;
      if (_condition_20311.isBuiltAndTrue ()) {
        if (_variant_20311.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (640)) ;
          _condition_20311 = GGS_bool (true, false) ;
        }else{
          _variant_20311._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (638)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (640)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_20468,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20468 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_20603 = var_cas_inRoutineSymbolTable ;
    if (_temp_20603._isBuilt ()) {
      _temp_20603 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (651)) ;
    }
    if ((operand_20468->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_20468->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (652)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (654)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_20846 (operand_20468->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_20846 = NULL ;
      while (((operand_20846 = enumerator_20846.nextObject ()))) {
        macroValidPointer (operand_20846) ;
        if ((GGS_uint (true, 3072U))._operator_or (operand_20846->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (658)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_20846->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (658))) COMMA_SOURCE_FILE_AT_LINE (657)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_21061,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21061 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_21196 = var_cas_inRoutineSymbolTable ;
    if (_temp_21196._isBuilt ()) {
      _temp_21196 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (669)) ;
    }
    if ((operand_21061->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_21061->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (670)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (672)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (675)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_21474 (operand_21061->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_21474 = NULL ;
      while (((operand_21474 = enumerator_21474.nextObject ()))) {
        macroValidPointer (operand_21474) ;
        const GGS_symbolTable  _temp_21517 = var_cas_inRoutineSymbolTable ;
        if (_temp_21517._isBuilt ()) {
          _temp_21517 (HERE)->method_searchKey (_inLexique, operand_21474->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (677)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_21474->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (681)) COMMA_SOURCE_FILE_AT_LINE (677)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (683)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_21831,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21831 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_21966 = var_cas_inRoutineSymbolTable ;
    if (_temp_21966._isBuilt ()) {
      _temp_21966 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (694)) ;
    }
    if ((operand_21831->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_21831->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (695)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (697)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22208 (operand_21831->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_22208 = NULL ;
      while (((operand_22208 = enumerator_22208.nextObject ()))) {
        macroValidPointer (operand_22208) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_symbolTable  _temp_22284 = var_cas_inRoutineSymbolTable ;
        if (_temp_22284._isBuilt ()) {
          _temp_22284 (HERE)->method_searchKey (_inLexique, operand_22208->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (702)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (702)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "buildBinaryCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildBinaryCode (C_Compiler & _inLexique,
                                const GGS_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildBinaryCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_23038 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_23038 = NULL ;
    while (((operand_23038 = enumerator_23038.nextObject ()))) {
      macroValidPointer (operand_23038) ;
      const GGS_ipic_instruction  _temp_23086 = operand_23038->mInstruction ;
      if (_temp_23086._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__enterLabelAtAddress _method = findCategoryMethod__ipic_instruction__enterLabelAtAddress (_temp_23086._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_23086 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (723)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (727)) ;
  }
  {
    GGS_ipic_instructionList::cEnumerator enumerator_23325 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_23325 = NULL ;
    while (((operand_23325 = enumerator_23325.nextObject ()))) {
      macroValidPointer (operand_23325) ;
      const GGS_ipic_instruction  _temp_23373 = operand_23325->mInstruction ;
      if (_temp_23373._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (_temp_23373._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_23373 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (730)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic_instruction  _temp_23482 = operand_23325->mInstruction ;
      if (_temp_23482._isBuilt ()) {
        _temp_23482 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (732)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (733)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (733)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (737))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (739))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (739)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (741))))._operator_concat (GGS_string (true, " bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (743))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (743)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildBinaryCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_binary_code (void) {
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress (category_method__ipic_instruction__enterLabelAtAddress, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_BRA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_BRA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_GOTO__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_GOTO.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_CALL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_CALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RCALL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RCALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_binary_code (prologueRoutineFor_piccolo_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

