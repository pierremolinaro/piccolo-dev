//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 23th, 2008, at 10h59'37"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_binary_code.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (20)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))) COMMA_SOURCE_FILE_AT_LINE (23)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_symbolTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTable::e_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@symbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTable::
elementOf_GGS_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTable * _p = dynamic_cast <const elementOf_GGS_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isNotEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_1729,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1729 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@pseudo_LABEL.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_1947,
                                GGS_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1947 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1947->mTargetLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (54)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@pseudo_ORG.enterLabelAtAddress'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_pseudo_ORG * operand_2213,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2213 != NULL) {
    var_cas_ioAddress = operand_2213->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@actualInstruction.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_actualInstruction * operand_2454,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2454 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_2454->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (75)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (76)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3102,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3102 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_3253 = var_cas_inRegisterTable ;
    if (_temp_3253._isBuilt ()) {
      _temp_3253 (HERE)->method_searchKey (_inLexique, operand_3102->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (91)) ;
    }
    if (((operand_3102->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_3102->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_3102->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (93))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (93))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
    }
    const GGS_uintlist  _temp_3493 = var_cas_registerAddressList ;
    if (_temp_3493._isBuilt ()) {
      _temp_3493 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3102->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)) COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3706,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3706 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_3979 = var_cas_inRegisterTable ;
    if (_temp_3979._isBuilt ()) {
      _temp_3979 (HERE)->method_searchKey (_inLexique, operand_3706->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (110)) ;
    }
    const GGS_uintlist  _temp_4075 = var_cas_registerAddressList ;
    if (_temp_4075._isBuilt ()) {
      _temp_4075 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (111)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3706->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
    var_cas_outUseBSRregister = ((var_cas_outRegisterAddress)._operator_supOrEqual (GGS_uint (true, 96U)))._operator_and ((var_cas_outRegisterAddress)._operator_strictInf (GGS_uint (true, 3936U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateBinaryCodeAtAddress> gDispatchTableFor__instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateBinaryCodeAtAddress (typeCategoryMethod__instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateBinaryCodeAtAddress
findCategoryMethod__instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@pseudo_ORG.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_pseudo_ORG * operand_4628,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4628 != NULL) {
    var_cas_ioAddress = operand_4628->mOrigin ;
    if (operand_4628->mOrigin._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_4628->mOrigin COMMA_SOURCE_FILE_AT_LINE (132)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_FDA.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_4945,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4945 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_5152 = operand_4945->mRegisterExpression ;
    if (_temp_5152._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5152._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5152 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_4945->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (153)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_4945->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_FA.generateBinaryCodeAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_5677,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5677 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_5884 = operand_5677->mRegisterExpression ;
    if (_temp_5884._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5884._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5884 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (173)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_5677->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (181)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (185)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_MOVFF.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_6341,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6341 != NULL) {
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_6532 = operand_6341->mSourceRegisterName ;
    if (_temp_6532._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6532._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6532 (HERE), var_cas_inRegisterTable, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_6659 = operand_6341->mDestinationRegisterName ;
    if (_temp_6659._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6659._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6659 (HERE), var_cas_inRegisterTable, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (199)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (199)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (200)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_FBA.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_6949,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6949 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_7202 = operand_6949->mRegisterExpression ;
    if (_temp_7202._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7202._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7202 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (215)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_7396 = operand_6949->mBitNumber ;
    if (_temp_7396._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_7396._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7396 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (224)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_6949->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (226)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (231))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (243))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (243))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)) COMMA_SOURCE_FILE_AT_LINE (243))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (243)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (245)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (248)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (250)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (250))) COMMA_SOURCE_FILE_AT_LINE (249)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (260))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (260))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (260)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (262)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (265))) COMMA_SOURCE_FILE_AT_LINE (263)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (273)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (273)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (272)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (274)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (274))) COMMA_SOURCE_FILE_AT_LINE (273)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_9280,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9280 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_9457 = var_cas_inRoutineSymbolTable ;
    if (_temp_9457._isBuilt ()) {
      _temp_9457 (HERE)->method_searchKey (_inLexique, operand_9280->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (285)) ;
    }
    switch (operand_9280->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_9280->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (292)),  operand_9280->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (288)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_9280->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (296)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (300)),  operand_9280->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (301)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (297)) ;
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (305)),  var_cas_targetAddress,  operand_9280->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (307)) COMMA_SOURCE_FILE_AT_LINE (303)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_9280->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (310)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (314)),  operand_9280->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (315)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (311)) ;
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (317)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_BRA.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_10488,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10488 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_10664 = var_cas_inRoutineSymbolTable ;
    if (_temp_10664._isBuilt ()) {
      _temp_10664 (HERE)->method_searchKey (_inLexique, operand_10488->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (332)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (334))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (334))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (334)) COMMA_SOURCE_FILE_AT_LINE (334))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (334)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_10488->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (336)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_10488->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (342)) COMMA_SOURCE_FILE_AT_LINE (337)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_GOTO.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_11177,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11177 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_11361 = var_cas_inRoutineSymbolTable ;
    if (_temp_11361._isBuilt ()) {
      _temp_11361 (HERE)->method_searchKey (_inLexique, operand_11177->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (354)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (354)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (364)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (364)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (365)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (365))) COMMA_SOURCE_FILE_AT_LINE (364)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_CALL.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_11837,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11837 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_12021 = var_cas_inRoutineSymbolTable ;
    if (_temp_12021._isBuilt ()) {
      _temp_12021 (HERE)->method_searchKey (_inLexique, operand_11837->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (376)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (376)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (388))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (388)) COMMA_SOURCE_FILE_AT_LINE (388))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (388)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement too large ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (390))))._operator_concat (GGS_string (true, ") for RCALL instruction (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (390)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (393))) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_RCALL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_12850,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12850 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_13027 = var_cas_inRoutineSymbolTable ;
    if (_temp_13027._isBuilt ()) {
      _temp_13027 (HERE)->method_searchKey (_inLexique, operand_12850->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (404)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_12850->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_CLRWDT.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_13305,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13305 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (419)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_DAW.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_13597,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13597 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (429)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_NOP.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_13889,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13889 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (439)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@instruction_POP.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_14181,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14181 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (449)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_PUSH.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_14474,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14474 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (459)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_RESET.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_14768,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14768 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (469)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_RETURN.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_15063,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15063 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (479)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_RETFIE.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETFIE * operand_15358,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15358 != NULL) {
    if (GGS_uint (true, 17U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (489)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_SLEEP.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_15652,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15652 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (499)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_15957,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15957 != NULL) {
    GGS_uint  var_cas_code ;
    operand_15957->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (511)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_15957->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (512))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (512)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_LFSR.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_16346,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16346 != NULL) {
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_16537 = operand_16346->mRegisterExpression ;
    if (_temp_16537._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_16537._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_16537 (HERE), var_cas_inRegisterTable, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (524)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_16346->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (525))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (525))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (525)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_16346->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (525))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (525))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (525))) COMMA_SOURCE_FILE_AT_LINE (524)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (525)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_MOVLB.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_16860,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16860 != NULL) {
    if ((GGS_uint (true, 256U))._operator_or (operand_16860->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (536)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 256U))._operator_or (operand_16860->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (536))) COMMA_SOURCE_FILE_AT_LINE (535)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@pseudo_LABEL.generateBinaryCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_pseudo_LABEL * operand_17169,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17169 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_17346 = var_cas_inRoutineSymbolTable ;
    if (_temp_17346._isBuilt ()) {
      _temp_17346 (HERE)->method_searchKey (_inLexique, operand_17169->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (547)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_17169->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_17169->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (550))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (551))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (551)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_MOVAW.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_17784,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17784 != NULL) {
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_17969 = operand_17784->mRegisterExpression ;
    if (_temp_17969._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_17969._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_17969 (HERE), var_cas_inRegisterTable, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (563)) ;
      }
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (566)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_TBLRD.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_18205,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18205 != NULL) {
    switch (operand_18205->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (578)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (579)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (580)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (581)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_TBLWT.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_18678,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18678 != NULL) {
    switch (operand_18678->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (593)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (594)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (595)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (596)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_MNOP.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_19150,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19150 != NULL) {
    if (((operand_19150->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (607)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_19150->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (608)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_19530 = operand_19150->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)) ;
    GGS_bool _condition_19530 (_variant_19530._isBuilt (), true) ;
    while (_condition_19530.isBuiltAndTrue ()) {
      _condition_19530 = (var_cas_idx)._operator_strictInf (operand_19150->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (612))) ;
      if (_condition_19530.isBuiltAndTrue ()) {
        if (_variant_19530.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (615)) ;
          _condition_19530 = GGS_bool (true, false) ;
        }else{
          _variant_19530._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (613)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_computed_retlw.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_19682,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19682 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_19860 = var_cas_inRoutineSymbolTable ;
    if (_temp_19860._isBuilt ()) {
      _temp_19860 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (627)) ;
    }
    if ((operand_19682->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_19682->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (628)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (630)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_20103 (operand_19682->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_20103 = NULL ;
      while (((operand_20103 = enumerator_20103.nextObject ()))) {
        macroValidPointer (operand_20103) ;
        if ((GGS_uint (true, 3072U))._operator_or (operand_20103->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (634)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_20103->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (634))) COMMA_SOURCE_FILE_AT_LINE (633)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_computed_bra.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_20313,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20313 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_20490 = var_cas_inRoutineSymbolTable ;
    if (_temp_20490._isBuilt ()) {
      _temp_20490 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (646)) ;
    }
    if ((operand_20313->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_20313->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (647)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (649)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (652)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_20768 (operand_20313->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_20768 = NULL ;
      while (((operand_20768 = enumerator_20768.nextObject ()))) {
        macroValidPointer (operand_20768) ;
        const GGS_symbolTable  _temp_20811 = var_cas_inRoutineSymbolTable ;
        if (_temp_20811._isBuilt ()) {
          _temp_20811 (HERE)->method_searchKey (_inLexique, operand_20768->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (654)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_20768->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (658)) COMMA_SOURCE_FILE_AT_LINE (654)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (660)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_computed_goto.generateBinaryCodeAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_21120,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21120 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_21297 = var_cas_inRoutineSymbolTable ;
    if (_temp_21297._isBuilt ()) {
      _temp_21297 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (672)) ;
    }
    if ((operand_21120->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_21120->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (673)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (675)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_21539 (operand_21120->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_21539 = NULL ;
      while (((operand_21539 = enumerator_21539.nextObject ()))) {
        macroValidPointer (operand_21539) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_symbolTable  _temp_21615 = var_cas_inRoutineSymbolTable ;
        if (_temp_21615._isBuilt ()) {
          _temp_21615 (HERE)->method_searchKey (_inLexique, operand_21539->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (680)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (680)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "buildBinaryCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildBinaryCode (C_Compiler & _inLexique,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_instructionList   var_cas_inGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildBinaryCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_instructionList::cEnumerator enumerator_22379 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_instructionList::cElement * operand_22379 = NULL ;
    while (((operand_22379 = enumerator_22379.nextObject ()))) {
      macroValidPointer (operand_22379) ;
      const GGS_instruction  _temp_22427 = operand_22379->mInstruction ;
      if (_temp_22427._isBuilt ()) {
        typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_22427._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_22427 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (701)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (705)) ;
  }
  {
    GGS_instructionList::cEnumerator enumerator_22666 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_instructionList::cElement * operand_22666 = NULL ;
    while (((operand_22666 = enumerator_22666.nextObject ()))) {
      macroValidPointer (operand_22666) ;
      const GGS_instruction  _temp_22714 = operand_22666->mInstruction ;
      if (_temp_22714._isBuilt ()) {
        typeCategoryMethod__instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__instruction__generateBinaryCodeAtAddress (_temp_22714._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_22714 (HERE), var_cas_inRegisterTable, var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (708)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_instruction  _temp_22840 = operand_22666->mInstruction ;
      if (_temp_22840._isBuilt ()) {
        _temp_22840 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (711)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (711)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (715))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (717))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildBinaryCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_binary_code (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__pseudo_ORG__enterLabelAtAddress, gClassInfoFor__pseudo_ORG.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__actualInstruction__enterLabelAtAddress, gClassInfoFor__actualInstruction.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__pseudo_ORG.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_BRA__generateBinaryCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_GOTO__generateBinaryCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_CALL__generateBinaryCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_RCALL__generateBinaryCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_MOVAW__generateBinaryCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__instruction__generateBinaryCodeAtAddress) category_method__instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_binary_code (prologueRoutineFor_piccolo_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

