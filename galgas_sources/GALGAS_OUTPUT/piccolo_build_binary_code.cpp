//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 25th, 2008, at 17h41'11"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (21)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))) COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_symbolTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTable::e_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@symbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTable::
elementOf_GGS_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTable * _p = dynamic_cast <const elementOf_GGS_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isNotEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_instruction * operand_1792,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1792 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.enterLabelAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__enterLabelAtAddress> gDispatchTableFor__ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__enterLabelAtAddress (typeCategoryMethod__ipic_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__enterLabelAtAddress
findCategoryMethod__ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_2015,
                                GGS_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2015 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_2015->mTargetLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_2286,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2286 != NULL) {
    var_cas_ioAddress = operand_2286->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_2532,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2532 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_2532->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (76)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (77)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3180,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3180 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_3331 = var_cas_inRegisterTable ;
    if (_temp_3331._isBuilt ()) {
      _temp_3331 (HERE)->method_searchKey (_inLexique, operand_3180->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (92)) ;
    }
    if (((operand_3180->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_3180->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_3180->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (94)) ;
    }
    const GGS_uintlist  _temp_3571 = var_cas_registerAddressList ;
    if (_temp_3571._isBuilt ()) {
      _temp_3571 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (96)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3180->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (97)) COMMA_SOURCE_FILE_AT_LINE (97)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3784,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3784 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_4057 = var_cas_inRegisterTable ;
    if (_temp_4057._isBuilt ()) {
      _temp_4057 (HERE)->method_searchKey (_inLexique, operand_3784->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (111)) ;
    }
    const GGS_uintlist  _temp_4153 = var_cas_registerAddressList ;
    if (_temp_4153._isBuilt ()) {
      _temp_4153 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (112)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3784->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (113)) COMMA_SOURCE_FILE_AT_LINE (113)) ;
    var_cas_outUseBSRregister = ((var_cas_outRegisterAddress)._operator_supOrEqual (GGS_uint (true, 96U)))._operator_and ((var_cas_outRegisterAddress)._operator_strictInf (GGS_uint (true, 3936U))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_4716,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4716 != NULL) {
    var_cas_ioAddress = operand_4716->mOrigin ;
    if (operand_4716->mOrigin._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_4716->mOrigin COMMA_SOURCE_FILE_AT_LINE (133)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FDA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_5038,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5038 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_5245 = operand_5038->mRegisterExpression ;
    if (_temp_5245._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5245._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5245 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_5038->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (154)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_5038->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (161)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_FA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_5775,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5775 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_5982 = operand_5775->mRegisterExpression ;
    if (_temp_5982._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5982._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5982 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_5775->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (182)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (186)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVFF.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_6444,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6444 != NULL) {
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_6635 = operand_6444->mSourceRegisterName ;
    if (_temp_6635._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6635._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6635 (HERE), var_cas_inRegisterTable, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (198)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_6762 = operand_6444->mDestinationRegisterName ;
    if (_temp_6762._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6762._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6762 (HERE), var_cas_inRegisterTable, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (200)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (200)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FBA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_7057,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7057 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_7310 = operand_7057->mRegisterExpression ;
    if (_temp_7310._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7310._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7310 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (216)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_7504 = operand_7057->mBitNumber ;
    if (_temp_7504._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_7504._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7504 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (225)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_7057->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (227)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (232))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (232)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (244))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (244))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (244)) COMMA_SOURCE_FILE_AT_LINE (244))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (244)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (246)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (249)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (251)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))) COMMA_SOURCE_FILE_AT_LINE (250)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (261))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (261))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (261)) COMMA_SOURCE_FILE_AT_LINE (261))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (261)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (263)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (266))) COMMA_SOURCE_FILE_AT_LINE (264)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (274)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (274)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (273)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (275)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (275))) COMMA_SOURCE_FILE_AT_LINE (274)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_9393,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9393 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_9570 = var_cas_inRoutineSymbolTable ;
    if (_temp_9570._isBuilt ()) {
      _temp_9570 (HERE)->method_searchKey (_inLexique, operand_9393->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
    switch (operand_9393->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_9393->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (293)),  operand_9393->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (289)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_9393->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (297)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (301)),  operand_9393->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (302)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (298)) ;
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (306)),  var_cas_targetAddress,  operand_9393->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (304)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_9393->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (311)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (315)),  operand_9393->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (316)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (312)) ;
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (318)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_BRA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BRA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BRA * operand_10606,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10606 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_10782 = var_cas_inRoutineSymbolTable ;
    if (_temp_10782._isBuilt ()) {
      _temp_10782 (HERE)->method_searchKey (_inLexique, operand_10606->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (333)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (335))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (335))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (335)) COMMA_SOURCE_FILE_AT_LINE (335))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (335)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_10606->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (337)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_10606->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (343)) COMMA_SOURCE_FILE_AT_LINE (338)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_GOTO.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_GOTO__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_GOTO * operand_11300,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11300 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_11484 = var_cas_inRoutineSymbolTable ;
    if (_temp_11484._isBuilt ()) {
      _temp_11484 (HERE)->method_searchKey (_inLexique, operand_11300->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (355)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (355)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (365)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (365)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (364)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (366)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (366))) COMMA_SOURCE_FILE_AT_LINE (365)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_CALL.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_CALL * operand_11965,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11965 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_12149 = var_cas_inRoutineSymbolTable ;
    if (_temp_12149._isBuilt ()) {
      _temp_12149 (HERE)->method_searchKey (_inLexique, operand_11965->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (377)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (389))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)) COMMA_SOURCE_FILE_AT_LINE (389))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (389)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement too large ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (391))))._operator_concat (GGS_string (true, ") for RCALL instruction (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (394))) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_12960,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12960 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_13206 = operand_12960->mRegisterExpression ;
    if (_temp_13206._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_13206._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_13206 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (408)) ;
      }
    }
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (true, 26112U) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_13647 = var_cas_inRoutineSymbolTable ;
    if (_temp_13647._isBuilt ()) {
      _temp_13647 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12960->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (424)) ;
    }
    if ((operand_12960->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_12960->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (428)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (430)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (433)),  var_cas_intermediateTargetAddress,  operand_12960->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (431)) ;
      if ((operand_12960->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (438)),  var_cas_targetAddress,  operand_12960->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (437)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (439)) ;
      }
    }else{
      if ((operand_12960->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (444)),  var_cas_targetAddress,  operand_12960->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (443)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (445)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_14496,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14496 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_14742 = operand_14496->mRegisterExpression ;
    if (_temp_14742._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_14742._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_14742 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (462)) ;
      }
    }
    GGS_uint  var_cas_code ;
    if (((operand_14496->mBranchIfZero)._operator_and (operand_14496->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 18432U) ;
    }else if (((operand_14496->mBranchIfZero)._operator_and ((operand_14496->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 19456U) ;
    }else if ((((operand_14496->mBranchIfZero)._operator_not ())._operator_and (operand_14496->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 15360U) ;
    }else{
      var_cas_code = GGS_uint (true, 11264U) ;
    }
    if (((operand_14496->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (485)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_15467 = var_cas_inRoutineSymbolTable ;
    if (_temp_15467._isBuilt ()) {
      _temp_15467 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_14496->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (489)) ;
    }
    if ((operand_14496->mUsesBra).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (491)),  var_cas_targetAddress,  operand_14496->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }else{
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (492)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_15807,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15807 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_16053 = operand_15807->mRegisterExpression ;
    if (_temp_16053._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_16053._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_16053 (HERE), var_cas_inRegisterTable, var_cas_inRoutineSymbolTable, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (508)) ;
      }
    }
    GGS_uint  var_cas_code ;
    switch (operand_15807->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (528)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_16847 = var_cas_inRoutineSymbolTable ;
    if (_temp_16847._isBuilt ()) {
      _temp_16847 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_15807->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (532)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_15807->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (533)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_15807->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (537)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (539)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (542)),  var_cas_intermediateTargetAddress,  operand_15807->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (540)) ;
      if ((operand_15807->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (547)),  var_cas_targetAddress,  operand_15807->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (546)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (548)) ;
      }
    }else{
      if ((operand_15807->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (553)),  var_cas_targetAddress,  operand_15807->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (552)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (554)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RCALL.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RCALL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RCALL * operand_17798,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17798 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_17975 = var_cas_inRoutineSymbolTable ;
    if (_temp_17975._isBuilt ()) {
      _temp_17975 (HERE)->method_searchKey (_inLexique, operand_17798->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (568)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_17798->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (573)) COMMA_SOURCE_FILE_AT_LINE (568)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_CLRWDT * operand_18258,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18258 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (583)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_DAW.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_DAW * operand_18555,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18555 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (593)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_NOP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_NOP * operand_18852,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18852 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (603)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_POP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_POP * operand_19149,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19149 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (613)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_PUSH.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_PUSH * operand_19447,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19447 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (623)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RESET.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RESET * operand_19746,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19746 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (633)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETURN.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETURN * operand_20046,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20046 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (643)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETFIE.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETFIE * operand_20346,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20346 != NULL) {
    if (GGS_uint (true, 17U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (653)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_SLEEP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_SLEEP * operand_20645,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20645 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (663)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_20955,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20955 != NULL) {
    GGS_uint  var_cas_code ;
    operand_20955->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (675)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_20955->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (676))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (676)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_LFSR.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_21349,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21349 != NULL) {
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_21540 = operand_21349->mRegisterExpression ;
    if (_temp_21540._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_21540._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21540 (HERE), var_cas_inRegisterTable, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (688)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_21349->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (689))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (689))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (689)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_21349->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (689))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (689))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (689))) COMMA_SOURCE_FILE_AT_LINE (688)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (689)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVLB.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVLB * operand_21868,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21868 != NULL) {
    if ((GGS_uint (true, 256U))._operator_or (operand_21868->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (700)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 256U))._operator_or (operand_21868->mPageIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (700))) COMMA_SOURCE_FILE_AT_LINE (699)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_22182,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22182 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_22359 = var_cas_inRoutineSymbolTable ;
    if (_temp_22359._isBuilt ()) {
      _temp_22359 (HERE)->method_searchKey (_inLexique, operand_22182->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (711)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_22182->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_22182->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (714))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (715))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVAW.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVAW * operand_22802,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22802 != NULL) {
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_22987 = operand_22802->mRegisterExpression ;
    if (_temp_22987._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_22987._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_22987 (HERE), var_cas_inRegisterTable, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (727)) ;
      }
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (730)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLRD.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_23228,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23228 != NULL) {
    switch (operand_23228->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (742)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (743)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (745)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLWT.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_23706,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23706 != NULL) {
    switch (operand_23706->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (757)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (758)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (759)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (760)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_MNOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_24183,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24183 != NULL) {
    if (((operand_24183->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (771)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_24183->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (772)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_24563 = operand_24183->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (775)) ;
    GGS_bool _condition_24563 (_variant_24563._isBuilt (), true) ;
    while (_condition_24563.isBuiltAndTrue ()) {
      _condition_24563 = (var_cas_idx)._operator_strictInf (operand_24183->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (776))) ;
      if (_condition_24563.isBuiltAndTrue ()) {
        if (_variant_24563.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (779)) ;
          _condition_24563 = GGS_bool (true, false) ;
        }else{
          _variant_24563._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (777)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (779)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_24720,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24720 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_24898 = var_cas_inRoutineSymbolTable ;
    if (_temp_24898._isBuilt ()) {
      _temp_24898 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (791)) ;
    }
    if ((operand_24720->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_24720->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (792)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (794)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_25141 (operand_24720->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_25141 = NULL ;
      while (((operand_25141 = enumerator_25141.nextObject ()))) {
        macroValidPointer (operand_25141) ;
        if ((GGS_uint (true, 3072U))._operator_or (operand_25141->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (798)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_25141->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (798))) COMMA_SOURCE_FILE_AT_LINE (797)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_25356,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25356 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_25533 = var_cas_inRoutineSymbolTable ;
    if (_temp_25533._isBuilt ()) {
      _temp_25533 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (810)) ;
    }
    if ((operand_25356->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_25356->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (811)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (813)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (816)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_25811 (operand_25356->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_25811 = NULL ;
      while (((operand_25811 = enumerator_25811.nextObject ()))) {
        macroValidPointer (operand_25811) ;
        const GGS_symbolTable  _temp_25854 = var_cas_inRoutineSymbolTable ;
        if (_temp_25854._isBuilt ()) {
          _temp_25854 (HERE)->method_searchKey (_inLexique, operand_25811->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (818)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_25811->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (822)) COMMA_SOURCE_FILE_AT_LINE (818)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (824)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_26168,
                                const GGS_registerTable   /* var_cas_inRegisterTable */,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26168 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_26345 = var_cas_inRoutineSymbolTable ;
    if (_temp_26345._isBuilt ()) {
      _temp_26345 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (836)) ;
    }
    if ((operand_26168->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_26168->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_26587 (operand_26168->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_26587 = NULL ;
      while (((operand_26587 = enumerator_26587.nextObject ()))) {
        macroValidPointer (operand_26587) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_symbolTable  _temp_26663 = var_cas_inRoutineSymbolTable ;
        if (_temp_26663._isBuilt ()) {
          _temp_26663 (HERE)->method_searchKey (_inLexique, operand_26587->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (844)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (844)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "buildBinaryCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildBinaryCode (C_Compiler & _inLexique,
                                const GGS_registerTable   var_cas_inRegisterTable,
                                const GGS_ipic_instructionList   var_cas_inGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildBinaryCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_27432 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_27432 = NULL ;
    while (((operand_27432 = enumerator_27432.nextObject ()))) {
      macroValidPointer (operand_27432) ;
      const GGS_ipic_instruction  _temp_27480 = operand_27432->mInstruction ;
      if (_temp_27480._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__enterLabelAtAddress _method = findCategoryMethod__ipic_instruction__enterLabelAtAddress (_temp_27480._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_27480 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (865)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (869)) ;
  }
  {
    GGS_ipic_instructionList::cEnumerator enumerator_27719 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_27719 = NULL ;
    while (((operand_27719 = enumerator_27719.nextObject ()))) {
      macroValidPointer (operand_27719) ;
      const GGS_ipic_instruction  _temp_27767 = operand_27719->mInstruction ;
      if (_temp_27767._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (_temp_27767._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_27767 (HERE), var_cas_inRegisterTable, var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (872)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic_instruction  _temp_27893 = operand_27719->mInstruction ;
      if (_temp_27893._isBuilt ()) {
        _temp_27893 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (874)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (875)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (875)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (879))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (881))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (881)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildBinaryCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_binary_code (void) {
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress (category_method__ipic_instruction__enterLabelAtAddress, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_BRA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_BRA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_GOTO__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_GOTO.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_CALL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_CALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RCALL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RCALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_binary_code (prologueRoutineFor_piccolo_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

