//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_build_binary_code.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 7th, 2008, at 22h13'16"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_build_binary_code.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_build_binary_code.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (21)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (23))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))) COMMA_SOURCE_FILE_AT_LINE (25)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_symbolTable'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTable::e_symbolTable (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@symbolTable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTable::
elementOf_GGS_symbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTable * _p = dynamic_cast <const elementOf_GGS_symbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTable * info = (e_symbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTable::
_operator_isNotEqual (const GGS_symbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTable GGS_symbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_instruction * operand_1811,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1811 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.enterLabelAtAddress'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__enterLabelAtAddress> gDispatchTableFor__ipic_instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__enterLabelAtAddress (typeCategoryMethod__ipic_instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__enterLabelAtAddress
findCategoryMethod__ipic_instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_2034,
                                GGS_symbolTable  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2034 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_2034->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.enterLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__enterLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_2299,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2299 != NULL) {
    var_cas_ioAddress = operand_2299->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.enterLabelAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_2545,
                                GGS_symbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2545 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_2545->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (76)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (77)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress> gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress
findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__generateBinaryCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_pseudo_ORG.generateBinaryCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_ORG * operand_3424,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3424 != NULL) {
    var_cas_ioAddress = operand_3424->mOrigin ;
    if (operand_3424->mOrigin._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  operand_3424->mOrigin COMMA_SOURCE_FILE_AT_LINE (99)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FDA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FDA * operand_3704,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3704 != NULL) {
    GGS_uint  var_cas_code ;
    operand_3704->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (109)) ;
    if ((operand_3704->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (110))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_3704->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_3704->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (116)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (117)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@ipic_instruction_FA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FA * operand_4234,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4234 != NULL) {
    GGS_uint  var_cas_code ;
    operand_4234->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (127)) ;
    if ((operand_4234->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_4234->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (132)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVFF.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVFF * operand_4696,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4696 != NULL) {
    if ((GGS_uint (true, 49152U))._operator_or (operand_4696->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (141)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (operand_4696->mSourceRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (141))) COMMA_SOURCE_FILE_AT_LINE (141)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (operand_4696->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (operand_4696->mDestinationRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (142))) COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_FBA.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_FBA * operand_5073,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5073 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5073->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (152)) ;
    if ((operand_5073->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (153))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5073->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (156)))._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_5073->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (157))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (158)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_BitTestSkip.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BitTestSkip * operand_5578,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5578 != NULL) {
    GGS_uint  var_cas_code ;
    operand_5578->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (168)) ;
    if ((operand_5578->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (169))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_5578->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)))._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (operand_5578->mBitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (173))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (174)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "getBccBaseCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getBccBaseCode (C_Compiler &,
                                const GGS_conditional_branch  var_cas_inConditionalBranch,
                                GGS_uint  & var_cas_outBaseCode COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getBccBaseCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inConditionalBranch.enumValue ()) {
  case GGS_conditional_branch::enum_bz:
    {
    var_cas_outBaseCode = GGS_uint (true, 57344U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnz:
    {
    var_cas_outBaseCode = GGS_uint (true, 57600U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bn:
    {
    var_cas_outBaseCode = GGS_uint (true, 58880U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnn:
    {
    var_cas_outBaseCode = GGS_uint (true, 59136U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bc:
    {
    var_cas_outBaseCode = GGS_uint (true, 57856U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnc:
    {
    var_cas_outBaseCode = GGS_uint (true, 58112U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bov:
    {
    var_cas_outBaseCode = GGS_uint (true, 58368U) ;
    }
    break ;
  case GGS_conditional_branch::enum_bnov:
    {
    var_cas_outBaseCode = GGS_uint (true, 58624U) ;
    }
    break ;
  case GGS_conditional_branch::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getBccBaseCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (200))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (200))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)) COMMA_SOURCE_FILE_AT_LINE (200))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (200)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (206)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (207)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (207))) COMMA_SOURCE_FILE_AT_LINE (207)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (217))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (217))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (220)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (222)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))) COMMA_SOURCE_FILE_AT_LINE (222)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (230)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (230)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (230)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (231)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (231))) COMMA_SOURCE_FILE_AT_LINE (231)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_conditionalBranch.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_8070,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8070 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_8188 = var_cas_inRoutineSymbolTable ;
    if (_temp_8188._isBuilt ()) {
      _temp_8188 (HERE)->method_searchKey (_inLexique, operand_8070->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (241)) ;
    }
    switch (operand_8070->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_ipicNative:
    case GGS_condionalBranchMode::enum_native:
      {
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_8070->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (248)),  operand_8070->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (245)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_8070->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (253)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (256)),  operand_8070->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (257)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (254)) ;
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (261)),  var_cas_targetAddress,  operand_8070->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) COMMA_SOURCE_FILE_AT_LINE (260)) ;
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      GGS_conditional_branch var_cas_complementary ;
      ::routine_getComplementaryBcc (_inLexique,  operand_8070->mConditionalBranch,  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (267)) ;
      ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_ioAddress,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (270)),  operand_8070->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (271)),  var_cas_complementary COMMA_SOURCE_FILE_AT_LINE (268)) ;
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (274)) ;
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JUMP.generateBinaryCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_9242,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9242 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_9360 = var_cas_inRoutineSymbolTable ;
    if (_temp_9360._isBuilt ()) {
      _temp_9360 (HERE)->method_searchKey (_inLexique, operand_9242->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (287)) ;
    }
    switch (operand_9242->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (290))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (290))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)) COMMA_SOURCE_FILE_AT_LINE (290))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (290)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_9242->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_9242->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (297)) COMMA_SOURCE_FILE_AT_LINE (294)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (300)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (309)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (309)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (309)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (310)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (310))) COMMA_SOURCE_FILE_AT_LINE (310)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (320))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (320))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (320)) COMMA_SOURCE_FILE_AT_LINE (320))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (320)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement too large ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (322))))._operator_concat (GGS_string (true, ") for RCALL instruction (should be between -1024 and 1023)")) COMMA_SOURCE_FILE_AT_LINE (323)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (325)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (325))) COMMA_SOURCE_FILE_AT_LINE (325)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_JSR.generateBinaryCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_10859,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10859 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_10977 = var_cas_inRoutineSymbolTable ;
    if (_temp_10977._isBuilt ()) {
      _temp_10977 (HERE)->method_searchKey (_inLexique, operand_10859->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (335)) ;
    }
    switch (operand_10859->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (338))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (338))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (338)) COMMA_SOURCE_FILE_AT_LINE (338))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (338)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_10859->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (341)) ;
      }
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_10859->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (345)) COMMA_SOURCE_FILE_AT_LINE (342)) ;
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (348)) ;
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_jump_test_register.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_11615,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11615 != NULL) {
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (true, 26112U) ;
    if ((operand_11615->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (361))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_11615->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (365)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_12014 = var_cas_inRoutineSymbolTable ;
    if (_temp_12014._isBuilt ()) {
      _temp_12014 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_11615->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (368)) ;
    }
    if ((operand_11615->mBranchIfZero).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_11615->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (372)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (374)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (377)),  var_cas_intermediateTargetAddress,  operand_11615->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (376)) ;
      if ((operand_11615->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (382)),  var_cas_targetAddress,  operand_11615->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (382)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (384)) ;
      }
    }else{
      if ((operand_11615->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (388)),  var_cas_targetAddress,  operand_11615->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (388)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (390)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_incDecRegisterInCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_12880,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12880 != NULL) {
    GGS_uint  var_cas_code ;
    if (((operand_12880->mBranchIfZero)._operator_and (operand_12880->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 18432U) ;
    }else if (((operand_12880->mBranchIfZero)._operator_and ((operand_12880->mIncrement)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 19456U) ;
    }else if ((((operand_12880->mBranchIfZero)._operator_not ())._operator_and (operand_12880->mIncrement)).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 15360U) ;
    }else{
      var_cas_code = GGS_uint (true, 11264U) ;
    }
    if (((operand_12880->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    if ((operand_12880->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (414))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_12880->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (417)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_13562 = var_cas_inRoutineSymbolTable ;
    if (_temp_13562._isBuilt ()) {
      _temp_13562 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_12880->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (421)) ;
    }
    if ((operand_12880->mUsesBra).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (423)),  var_cas_targetAddress,  operand_12880->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (423)) ;
    }else{
      ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (425)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_registerComparisonCondition.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_13919,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13919 != NULL) {
    GGS_uint  var_cas_code ;
    switch (operand_13919->mComparison.enumValue ()) {
    case GGS_registerComparison::enum_notEqual:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_equal:
      {
      var_cas_code = GGS_uint (true, 25088U) ;
      }
      break ;
    case GGS_registerComparison::enum_greaterOrEqual:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::enum_greater:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lowerOrEqual:
      {
      var_cas_code = GGS_uint (true, 25600U) ;
      }
      break ;
    case GGS_registerComparison::enum_lower:
      {
      var_cas_code = GGS_uint (true, 24576U) ;
      }
      break ;
    case GGS_registerComparison::kNotBuilt:
      break ;
    }
    if ((operand_13919->mRegisterDescription.reader_mNeedsBSR (_inLexique COMMA_SOURCE_FILE_AT_LINE (445))).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((operand_13919->mRegisterDescription.reader_mRegisterAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (448)))._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (449)) ;
    }
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_14670 = var_cas_inRoutineSymbolTable ;
    if (_temp_14670._isBuilt ()) {
      _temp_14670 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_13919->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (452)) ;
    }
    GGS_bool var_cas_usesIntermediateBRA ;
    operand_13919->method_usesIntermediateBRA (_inLexique, var_cas_usesIntermediateBRA COMMA_SOURCE_FILE_AT_LINE (453)) ;
    if ((var_cas_usesIntermediateBRA).isBuiltAndTrue ()) {
      GGS_uint  var_cas_intermediateTargetAddress ;
      if ((operand_13919->mUsesBra).isBuiltAndTrue ()) {
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (457)) ;
      }else{
        var_cas_intermediateTargetAddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (459)) ;
      }
      ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (462)),  var_cas_intermediateTargetAddress,  operand_13919->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (461)) ;
      if ((operand_13919->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (467)),  var_cas_targetAddress,  operand_13919->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (467)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (469)) ;
      }
    }else{
      if ((operand_13919->mUsesBra).isBuiltAndTrue ()) {
        ::routine_emitBRAinstruction (_inLexique,  var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (473)),  var_cas_targetAddress,  operand_13919->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (473)) ;
      }else{
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (475)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_CLRWDT.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_CLRWDT * operand_15639,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15639 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (486)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_DAW.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_DAW * operand_15894,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15894 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (495)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_NOP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_NOP * operand_16149,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16149 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (504)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_POP.generateBinaryCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_POP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_POP * operand_16404,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16404 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (513)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_PUSH.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_PUSH * operand_16660,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16660 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (522)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RESET.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RESET * operand_16917,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16917 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (531)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETURN.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETURN * operand_17175,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17175 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (540)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_RETFIE.generateBinaryCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RETFIE * operand_17433,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17433 != NULL) {
    GGS_uint  var_cas_code ;
    if ((operand_17433->mFastReturn).isBuiltAndTrue ()) {
      var_cas_code = GGS_uint (true, 17U) ;
    }else{
      var_cas_code = GGS_uint (true, 16U) ;
    }
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (556)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_SLEEP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_SLEEP * operand_17809,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17809 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (565)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_literalOperation.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_literalOperation * operand_18077,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18077 != NULL) {
    GGS_uint  var_cas_code ;
    operand_18077->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (575)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_18077->mLiteralValue) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (577)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_LFSR.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_LFSR * operand_18422,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18422 != NULL) {
    if (((GGS_uint (true, 60928U))._operator_or (operand_18422->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (586))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (586))))._operator_or (operand_18422->mValue._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (586)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_18422->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (586))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (586))))._operator_or (operand_18422->mValue._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (586))) COMMA_SOURCE_FILE_AT_LINE (586)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((operand_18422->mValue)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((operand_18422->mValue)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (587)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_MOVLB.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MOVLB * operand_18759,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18759 != NULL) {
    if ((GGS_uint (true, 256U))._operator_or (operand_18759->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (596)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 256U))._operator_or (operand_18759->mBankIndex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (596))) COMMA_SOURCE_FILE_AT_LINE (596)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@ipic_pseudo_LABEL.generateBinaryCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_19031,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19031 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_19149 = var_cas_inRoutineSymbolTable ;
    if (_temp_19149._isBuilt ()) {
      _temp_19149 (HERE)->method_searchKey (_inLexique, operand_19031->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_19031->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_19031->mLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (609))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (610))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (611)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLRD.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLRD * operand_19591,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19591 != NULL) {
    switch (operand_19591->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (621)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (623)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_TBLWT.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_TBLWT * operand_20027,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20027 != NULL) {
    switch (operand_20027->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (635)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (636)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (637)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (638)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_MNOP.generateBinaryCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_MNOP * operand_20462,
                                const GGS_symbolTable   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20462 != NULL) {
    if (((operand_20462->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (648)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_20462->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (649)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_20779 = operand_20462->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (652)) ;
    GGS_bool _condition_20779 (_variant_20779._isBuilt (), true) ;
    while (_condition_20779.isBuiltAndTrue ()) {
      _condition_20779 = (var_cas_idx)._operator_strictInf (operand_20462->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (653))) ;
      if (_condition_20779.isBuiltAndTrue ()) {
        if (_variant_20779.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (657)) ;
          _condition_20779 = GGS_bool (true, false) ;
        }else{
          _variant_20779._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (655)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (656)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_retlw.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_20957,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20957 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_21075 = var_cas_inRoutineSymbolTable ;
    if (_temp_21075._isBuilt ()) {
      _temp_21075 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (667)) ;
    }
    if ((operand_20957->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_20957->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (669)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (671)) ;
    }
    {
      GGS_uintlist::cEnumerator enumerator_21316 (operand_20957->mLiteralValues, true) ;
      const GGS_uintlist::cElement * operand_21316 = NULL ;
      while (((operand_21316 = enumerator_21316.nextObject ()))) {
        macroValidPointer (operand_21316) ;
        if ((GGS_uint (true, 3072U))._operator_or (operand_21316->mValue)._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_21316->mValue) COMMA_SOURCE_FILE_AT_LINE (674)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_bra.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_21536,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21536 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_21654 = var_cas_inRoutineSymbolTable ;
    if (_temp_21654._isBuilt ()) {
      _temp_21654 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (685)) ;
    }
    if ((operand_21536->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_21536->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (687)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (689)) ;
    }
    GGS_uint  var_cas_addressForComputingBRA ;
    var_cas_addressForComputingBRA = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (692)) ;
    if (((operand_21536->mUsesRCALL)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (694)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22075 (operand_21536->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_22075 = NULL ;
      while (((operand_22075 = enumerator_22075.nextObject ()))) {
        macroValidPointer (operand_22075) ;
        const GGS_symbolTable  _temp_22114 = var_cas_inRoutineSymbolTable ;
        if (_temp_22114._isBuilt ()) {
          _temp_22114 (HERE)->method_searchKey (_inLexique, operand_22075->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (698)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_addressForComputingBRA,  var_cas_targetAddress,  operand_22075->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (702)) COMMA_SOURCE_FILE_AT_LINE (699)) ;
        var_cas_addressForComputingBRA = var_cas_addressForComputingBRA._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (704)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_computed_goto.generateBinaryCodeAtAddress'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_22490,
                                const GGS_symbolTable   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22490 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTable  _temp_22608 = var_cas_inRoutineSymbolTable ;
    if (_temp_22608._isBuilt ()) {
      _temp_22608 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }
    if ((operand_22490->mUsesRCALL).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_ioAddress,  var_cas_targetAddress,  operand_22490->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (717)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22847 (operand_22490->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_22847 = NULL ;
      while (((operand_22847 = enumerator_22847.nextObject ()))) {
        macroValidPointer (operand_22847) ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_symbolTable  _temp_22919 = var_cas_inRoutineSymbolTable ;
        if (_temp_22919._isBuilt ()) {
          _temp_22919 (HERE)->method_searchKey (_inLexique, operand_22847->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (723)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (724)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "buildBinaryCode"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildBinaryCode (C_Compiler & _inLexique,
                                const GGS_ipic_instructionList   var_cas_inGeneratedInstructionList,
                                const GGS_uint   var_cas_inROMsize,
                                const GGS_actualConfigurationMap   var_cas_inActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildBinaryCode at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_symbolTable  var_cas_symbolTable ;
  var_cas_symbolTable = GGS_symbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_uint  var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  {
    GGS_ipic_instructionList::cEnumerator enumerator_23743 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_23743 = NULL ;
    while (((operand_23743 = enumerator_23743.nextObject ()))) {
      macroValidPointer (operand_23743) ;
      const GGS_ipic_instruction  _temp_23784 = operand_23743->mInstruction ;
      if (_temp_23784._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__enterLabelAtAddress _method = findCategoryMethod__ipic_instruction__enterLabelAtAddress (_temp_23784._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_23784 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (745)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_lastAddressForFirstPass ;
  var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
  var_cas_currentAddress = GGS_uint (true, 0U) ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (750)) ;
  }
  {
    GGS_ipic_instructionList::cEnumerator enumerator_24030 (var_cas_inGeneratedInstructionList, true) ;
    const GGS_ipic_instructionList::cElement * operand_24030 = NULL ;
    while (((operand_24030 = enumerator_24030.nextObject ()))) {
      macroValidPointer (operand_24030) ;
      const GGS_ipic_instruction  _temp_24079 = operand_24030->mInstruction ;
      if (_temp_24079._isBuilt ()) {
        typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress _method = findCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress (_temp_24079._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_24079 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (752)) ;
        }
      }
      GGS_uint  var_cas_instructionLength ;
      const GGS_ipic_instruction  _temp_24178 = operand_24030->mInstruction ;
      if (_temp_24178._isBuilt ()) {
        _temp_24178 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (754)) ;
      }
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (755)) ;
      ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (756)) ;
    }
  }
  if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (759))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (761))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (762)) ;
  }else if (((var_cas_lastAddressForFirstPass)._operator_strictSup (var_cas_inROMsize)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Program too large: "))._operator_concat (var_cas_lastAddressForFirstPass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (763))))._operator_concat (GGS_string (true, " bytes (rom size is ")))._operator_concat (var_cas_inROMsize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (765))))._operator_concat (GGS_string (true, " bytes)")) COMMA_SOURCE_FILE_AT_LINE (766)) ;
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_24875 (var_cas_inActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_24875 = NULL ;
    while (((operand_24875 = enumerator_24875.nextObject ()))) {
      macroValidPointer (operand_24875) ;
      if (operand_24875->mInfo.mRegisterAddress._isBuilt ()) {
        ::routine_setEmitAddress (_inLexique,  operand_24875->mInfo.mRegisterAddress COMMA_SOURCE_FILE_AT_LINE (769)) ;
      }
      if (operand_24875->mInfo.mRegisterValue._isBuilt ()) {
        ::routine_emitCode (_inLexique,  operand_24875->mInfo.mRegisterValue COMMA_SOURCE_FILE_AT_LINE (770)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildBinaryCode\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_build_binary_code (void) {
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress (category_method__ipic_instruction__enterLabelAtAddress, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_LABEL__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_pseudo_ORG__enterLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__enterLabelAtAddress ((typeCategoryMethod__ipic_instruction__enterLabelAtAddress) category_method__ipic_actualInstruction__enterLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_ORG__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FDA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FDA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVFF__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_FBA__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_FBA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_BitTestSkip__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_BitTestSkip.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_conditionalBranch__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_JUMP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_JSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_jump_test_register__generateBinaryCodeAtAddress, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_incDecRegisterInCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_registerComparisonCondition__generateBinaryCodeAtAddress, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_CLRWDT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_DAW__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_DAW.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_NOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_NOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_POP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_POP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_PUSH__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_PUSH.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RESET__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RESET.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETURN__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETURN.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_RETFIE__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_RETFIE.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_SLEEP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_literalOperation__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_LFSR__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_LFSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MOVLB__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_pseudo_LABEL__generateBinaryCodeAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLRD__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_TBLWT__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_MNOP__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_MNOP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_retlw__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_bra__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress ((typeCategoryMethod__ipic_instruction__generateBinaryCodeAtAddress) category_method__ipic_instruction_computed_goto__generateBinaryCodeAtAddress, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_build_binary_code (prologueRoutineFor_piccolo_build_binary_code,
                                   NULL) ;

//---------------------------------------------------------------------------*

