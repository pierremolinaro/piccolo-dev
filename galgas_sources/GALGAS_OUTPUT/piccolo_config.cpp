//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_config.cpp'                          *
//                        Generated by version 2.5.4                         *
//                     january 30th, 2014, at 17h15'9"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "piccolo_config.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*


//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*

cMapElement_configFieldMap::cMapElement_configFieldMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_lstring & in_mRegisterName,
                                                        const GALGAS_luint & in_mMaskValue,
                                                        const GALGAS_lstring & in_mDescription,
                                                        const GALGAS_fieldSettingMap & in_mFieldSettingMap
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterName (in_mRegisterName),
mAttribute_mMaskValue (in_mMaskValue),
mAttribute_mDescription (in_mDescription),
mAttribute_mFieldSettingMap (in_mFieldSettingMap) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_configFieldMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterName.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_configFieldMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configFieldMap (mAttribute_lkey, mAttribute_mRegisterName, mAttribute_mMaskValue, mAttribute_mDescription, mAttribute_mFieldSettingMap COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_configFieldMap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterName" ":" ;
  mAttribute_mRegisterName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaskValue" ":" ;
  mAttribute_mMaskValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mAttribute_mDescription.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldSettingMap" ":" ;
  mAttribute_mFieldSettingMap.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_configFieldMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configFieldMap * operand = (cMapElement_configFieldMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterName.objectCompare (operand->mAttribute_mRegisterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMaskValue.objectCompare (operand->mAttribute_mMaskValue) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDescription.objectCompare (operand->mAttribute_mDescription) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFieldSettingMap.objectCompare (operand->mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap::GALGAS_configFieldMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap::GALGAS_configFieldMap (const GALGAS_configFieldMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap & GALGAS_configFieldMap::operator = (const GALGAS_configFieldMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::constructor_mapWithMapToOverride (const GALGAS_configFieldMap & inMapToOverride
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  GALGAS_configFieldMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_lstring inArgument0,
                                                GALGAS_luint inArgument1,
                                                GALGAS_lstring inArgument2,
                                                GALGAS_fieldSettingMap inArgument3,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_configFieldMap * p = NULL ;
  macroMyNew (p, cMapElement_configFieldMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration field is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_configFieldMap_searchKey = "the '%K' configuration field is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_lstring & outArgument0,
                                              GALGAS_luint & outArgument1,
                                              GALGAS_lstring & outArgument2,
                                              GALGAS_fieldSettingMap & outArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_configFieldMap_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    outArgument0 = p->mAttribute_mRegisterName ;
    outArgument1 = p->mAttribute_mMaskValue ;
    outArgument2 = p->mAttribute_mDescription ;
    outArgument3 = p->mAttribute_mFieldSettingMap ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap::reader_mRegisterNameForKey (const GALGAS_string & inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mRegisterName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configFieldMap::reader_mMaskValueForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mMaskValue ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap::reader_mDescriptionForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mDescription ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configFieldMap::reader_mFieldSettingMapForKey (const GALGAS_string & inKey,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_fieldSettingMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mFieldSettingMap ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMRegisterNameForKey (GALGAS_lstring inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mRegisterName = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMMaskValueForKey (GALGAS_luint inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mMaskValue = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMDescriptionForKey (GALGAS_lstring inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mDescription = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMFieldSettingMapForKey (GALGAS_fieldSettingMap inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mFieldSettingMap = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_configFieldMap * GALGAS_configFieldMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                              const GALGAS_string & inKey
                                                                                              COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * result = (cMapElement_configFieldMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configFieldMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_configFieldMap * GALGAS_configFieldMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                 const GALGAS_lstring & inKey
                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_configFieldMap_searchKey COMMA_THERE) ;
  cMapElement_configFieldMap * result = (cMapElement_configFieldMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configFieldMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_configFieldMap::cEnumerator_configFieldMap (const GALGAS_configFieldMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element cEnumerator_configFieldMap::current (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return GALGAS_configFieldMap_2E_element (p->mAttribute_lkey, p->mAttribute_mRegisterName, p->mAttribute_mMaskValue, p->mAttribute_mDescription, p->mAttribute_mFieldSettingMap) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_mRegisterName (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mRegisterName ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configFieldMap::current_mMaskValue (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mMaskValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_mDescription (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mDescription ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap cEnumerator_configFieldMap::current_mFieldSettingMap (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mFieldSettingMap ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @configFieldMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configFieldMap ("configFieldMap",
                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configFieldMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configFieldMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configFieldMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configFieldMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  const GALGAS_configFieldMap * p = (const GALGAS_configFieldMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configFieldMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configFieldMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'actualBuildConfig'                        *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_actualBuildConfig (const GALGAS_configRegisterMap constinArgument_inConfigRegisterMap,
                                const GALGAS_configDefinitionList constinArgument_inConfigDefinitionList,
                                GALGAS_string & ioArgument_ioListFileContents,
                                GALGAS_actualConfigurationMap & outArgument_outActualConfigurationMap,
                                C_Compiler * inCompiler
                                COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outActualConfigurationMap.drop () ; // Release 'out' argument
  outArgument_outActualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (26)) ;
  GALGAS_configFieldMap var_configFieldMap = GALGAS_configFieldMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (27)) ;
  cEnumerator_configRegisterMap enumerator_1067 (constinArgument_inConfigRegisterMap, kEnumeration_up) ;
  while (enumerator_1067.hasCurrentObject ()) {
    GALGAS_uint var_defaultValue = GALGAS_uint ((PMUInt32) 1U).left_shift_operation (enumerator_1067.current_mRegisterWidth (HERE).reader_uint (SOURCE_FILE_AT_LINE (29)) COMMA_SOURCE_FILE_AT_LINE (29)).substract_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (29)) ;
    {
    outArgument_outActualConfigurationMap.modifier_insertKey (enumerator_1067.current_lkey (HERE), enumerator_1067.current_mRegisterAddress (HERE).reader_uint (SOURCE_FILE_AT_LINE (30)), var_defaultValue, inCompiler COMMA_SOURCE_FILE_AT_LINE (30)) ;
    }
    GALGAS_lstring var_registerName = enumerator_1067.current_lkey (HERE) ;
    cEnumerator_configRegisterMaskMap enumerator_1294 (enumerator_1067.current_mConfigRegisterMaskMap (HERE), kEnumeration_up) ;
    while (enumerator_1294.hasCurrentObject ()) {
      {
      var_configFieldMap.modifier_insertKey (enumerator_1294.current_lkey (HERE), var_registerName, enumerator_1294.current_mMaskValue (HERE), enumerator_1294.current_mDescription (HERE), enumerator_1294.current_mFieldSettingMap (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (33)) ;
      }
      enumerator_1294.gotoNextObject () ;
    }
    enumerator_1067.gotoNextObject () ;
  }
  GALGAS_stringset var_actualSettingNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (37)) ;
  cEnumerator_configDefinitionList enumerator_1571 (constinArgument_inConfigDefinitionList, kEnumeration_up) ;
  while (enumerator_1571.hasCurrentObject ()) {
    cEnumerator_configSettingList enumerator_1599 (enumerator_1571.current_mSettingList (HERE), kEnumeration_up) ;
    while (enumerator_1599.hasCurrentObject ()) {
      const enumGalgasBool test_0 = var_actualSettingNameSet.reader_hasKey (enumerator_1599.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (40)) COMMA_SOURCE_FILE_AT_LINE (40)).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_location location_1 (enumerator_1599.current_mSettingName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_1599.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (41)) COMMA_SOURCE_FILE_AT_LINE (41)).operator_concat (GALGAS_string ("' setting is already defined") COMMA_SOURCE_FILE_AT_LINE (41)) COMMA_SOURCE_FILE_AT_LINE (41)) ;
      }
      var_actualSettingNameSet.addAssign_operation (enumerator_1599.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (43)) COMMA_SOURCE_FILE_AT_LINE (43)) ;
      GALGAS_lstring var_registerName ;
      GALGAS_luint var_maskValue ;
      GALGAS_lstring var_settingDescription ;
      GALGAS_fieldSettingMap var_fieldSettingMap ;
      var_configFieldMap.method_searchKey (enumerator_1599.current_mSettingName (HERE), var_registerName, var_maskValue, var_settingDescription, var_fieldSettingMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (48)) ;
      const enumGalgasBool test_2 = var_fieldSettingMap.reader_hasKey (enumerator_1599.current_mSettingValue (HERE).reader_string (SOURCE_FILE_AT_LINE (49)) COMMA_SOURCE_FILE_AT_LINE (49)).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_uint var_settingValue ;
        GALGAS_uint var_settingMask ;
        var_fieldSettingMap.method_searchKey (enumerator_1599.current_mSettingValue (HERE), var_settingValue, var_settingMask, inCompiler COMMA_SOURCE_FILE_AT_LINE (52)) ;
        GALGAS_uint var_registerValue ;
        GALGAS_uint joker_2359_0 ; // Joker input parameter
        outArgument_outActualConfigurationMap.method_searchKey (var_registerName, joker_2359_0, var_registerValue, inCompiler COMMA_SOURCE_FILE_AT_LINE (54)) ;
        var_registerValue = var_registerValue.operator_and (var_settingMask.operator_tilde (SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)).operator_or (var_settingValue COMMA_SOURCE_FILE_AT_LINE (55)) ;
        {
        outArgument_outActualConfigurationMap.modifier_setMRegisterValueForKey (var_registerValue, var_registerName.reader_string (SOURCE_FILE_AT_LINE (56)), inCompiler COMMA_SOURCE_FILE_AT_LINE (56)) ;
        }
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_fieldSettingMap.reader_count (SOURCE_FILE_AT_LINE (57)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
        if (kBoolTrue == test_3) {
          GALGAS_string var_errorMessage = GALGAS_string ("the '").operator_concat (enumerator_1599.current_mSettingValue (HERE).reader_string (SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)).operator_concat (GALGAS_string ("' value is not defined for configuration setting '") COMMA_SOURCE_FILE_AT_LINE (58)).operator_concat (enumerator_1599.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)).operator_concat (GALGAS_string ("'; possible values are:") COMMA_SOURCE_FILE_AT_LINE (59)) ;
          cEnumerator_fieldSettingMap enumerator_2795 (var_fieldSettingMap, kEnumeration_up) ;
          while (enumerator_2795.hasCurrentObject ()) {
            var_errorMessage.dotAssign_operation (GALGAS_string ("\n"
              "-  \"").operator_concat (enumerator_2795.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (61)) COMMA_SOURCE_FILE_AT_LINE (61)).operator_concat (GALGAS_string ("\"") COMMA_SOURCE_FILE_AT_LINE (61)) COMMA_SOURCE_FILE_AT_LINE (61)) ;
            enumerator_2795.gotoNextObject () ;
          }
          GALGAS_location location_4 (enumerator_1599.current_mSettingValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_4, var_errorMessage COMMA_SOURCE_FILE_AT_LINE (63)) ;
        }
      }
      enumerator_1599.gotoNextObject () ;
    }
    enumerator_1571.gotoNextObject () ;
  }
  GALGAS_stringset var_notDefinedSetting = var_configFieldMap.reader_keySet (SOURCE_FILE_AT_LINE (68)).substract_operation (var_actualSettingNameSet, inCompiler COMMA_SOURCE_FILE_AT_LINE (68)) ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, var_notDefinedSetting.reader_count (SOURCE_FILE_AT_LINE (69)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_string var_errorMessage = GALGAS_string ("the following configuration settings are not defined:") ;
    cEnumerator_stringset enumerator_3258 (var_notDefinedSetting, kEnumeration_up) ;
    while (enumerator_3258.hasCurrentObject ()) {
      var_errorMessage.dotAssign_operation (GALGAS_string ("\n"
        "-  ").operator_concat (enumerator_3258.current_key (HERE) COMMA_SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72)) ;
      enumerator_3258.gotoNextObject () ;
    }
    inCompiler->emitSemanticError (inCompiler->here (), var_errorMessage COMMA_SOURCE_FILE_AT_LINE (74)) ;
  }
  cEnumerator_actualConfigurationMap enumerator_3445 (outArgument_outActualConfigurationMap, kEnumeration_up) ;
  while (enumerator_3445.hasCurrentObject ()) {
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("Register '").operator_concat (enumerator_3445.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (GALGAS_string ("' at ") COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (enumerator_3445.current_mRegisterAddress (HERE).reader_hexString (SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (GALGAS_string (" set to ") COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (enumerator_3445.current_mRegisterValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)) ;
    GALGAS_configRegisterMaskMap var_configRegisterMaskMap ;
    GALGAS_luint joker_3680_0 ; // Joker input parameter
    GALGAS_luint joker_3683_0 ; // Joker input parameter
    GALGAS_illegalMaskList joker_3709_0 ; // Joker input parameter
    constinArgument_inConfigRegisterMap.method_searchKey (enumerator_3445.current_lkey (HERE), joker_3680_0, joker_3683_0, var_configRegisterMaskMap, joker_3709_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (80)) ;
    cEnumerator_configRegisterMaskMap enumerator_3747 (var_configRegisterMaskMap, kEnumeration_up) ;
    while (enumerator_3747.hasCurrentObject ()) {
      GALGAS_lstring var_settingName = enumerator_3747.current_lkey (HERE) ;
      cEnumerator_fieldSettingMap enumerator_3842 (enumerator_3747.current_mFieldSettingMap (HERE), kEnumeration_up) ;
      while (enumerator_3842.hasCurrentObject ()) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, enumerator_3445.current_mRegisterValue (HERE).operator_and (enumerator_3747.current_mMaskValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (84)).objectCompare (enumerator_3842.current_mValue (HERE))).boolEnum () ;
        if (kBoolTrue == test_6) {
          ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("  setting '").operator_concat (var_settingName.reader_string (SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (GALGAS_string ("' set to ") COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (enumerator_3842.current_mValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (GALGAS_string (" (\"") COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (enumerator_3842.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (GALGAS_string ("\")\n") COMMA_SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (85)) ;
        }
        enumerator_3842.gotoNextObject () ;
      }
      enumerator_3747.gotoNextObject () ;
    }
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (89)) ;
    enumerator_3445.gotoNextObject () ;
  }
  cEnumerator_actualConfigurationMap enumerator_4244 (outArgument_outActualConfigurationMap, kEnumeration_up) ;
  while (enumerator_4244.hasCurrentObject ()) {
    GALGAS_illegalMaskList var_illegalMaskList ;
    GALGAS_luint joker_4329_0 ; // Joker input parameter
    GALGAS_luint joker_4332_0 ; // Joker input parameter
    GALGAS_configRegisterMaskMap joker_4335_0 ; // Joker input parameter
    constinArgument_inConfigRegisterMap.method_searchKey (enumerator_4244.current_lkey (HERE), joker_4329_0, joker_4332_0, joker_4335_0, var_illegalMaskList, inCompiler COMMA_SOURCE_FILE_AT_LINE (94)) ;
    cEnumerator_illegalMaskList enumerator_4385 (var_illegalMaskList, kEnumeration_up) ;
    while (enumerator_4385.hasCurrentObject ()) {
      const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, enumerator_4244.current_mRegisterValue (HERE).operator_and (enumerator_4385.current_mIllegalMask (HERE).reader_uint (SOURCE_FILE_AT_LINE (96)) COMMA_SOURCE_FILE_AT_LINE (96)).objectCompare (enumerator_4385.current_mIllegalValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (96)))).boolEnum () ;
      if (kBoolTrue == test_7) {
        inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("illegal setting for '").operator_concat (enumerator_4244.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (97)) COMMA_SOURCE_FILE_AT_LINE (97)).operator_concat (GALGAS_string ("' register: ") COMMA_SOURCE_FILE_AT_LINE (97)).operator_concat (enumerator_4385.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (97)) COMMA_SOURCE_FILE_AT_LINE (97)) COMMA_SOURCE_FILE_AT_LINE (97)) ;
        ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*** ILLEGAL SETTING for register '").operator_concat (enumerator_4244.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (98)) COMMA_SOURCE_FILE_AT_LINE (98)).operator_concat (GALGAS_string ("' ***\n") COMMA_SOURCE_FILE_AT_LINE (98)) COMMA_SOURCE_FILE_AT_LINE (98)) ;
        ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("  message: ").operator_concat (enumerator_4385.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (99)) COMMA_SOURCE_FILE_AT_LINE (99)).operator_concat (GALGAS_string ("\n"
          "\n") COMMA_SOURCE_FILE_AT_LINE (99)) COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
      enumerator_4385.gotoNextObject () ;
    }
    enumerator_4244.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'buildConfig'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_buildConfig (const GALGAS_configRegisterMap constinArgument_inConfigRegisterMap,
                          const GALGAS_configDefinitionList constinArgument_inConfigDefinitionList,
                          GALGAS_string & ioArgument_ioListFileContents,
                          GALGAS_actualConfigurationMap & outArgument_outActualConfigurationMap,
                          C_Compiler * inCompiler
                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outActualConfigurationMap.drop () ; // Release 'out' argument
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (114)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (114)) COMMA_SOURCE_FILE_AT_LINE (114)) ;
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*").operator_concat (GALGAS_string ("MICROCONTROLLER CONFIGURATION").reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)).operator_concat (GALGAS_string ("*\n") COMMA_SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)) ;
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (116)).operator_concat (GALGAS_string ("\n"
    "\n") COMMA_SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inConfigDefinitionList.reader_length (SOURCE_FILE_AT_LINE (118)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    routine_actualBuildConfig (constinArgument_inConfigRegisterMap, constinArgument_inConfigDefinitionList, ioArgument_ioListFileContents, outArgument_outActualConfigurationMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
  }else if (kBoolFalse == test_0) {
    outArgument_outActualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (126)) ;
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("No configuration.\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
}


//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::GALGAS_configFieldMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mRegisterName (),
mAttribute_mMaskValue (),
mAttribute_mDescription (),
mAttribute_mFieldSettingMap () {
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::~ GALGAS_configFieldMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::GALGAS_configFieldMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                    const GALGAS_lstring & inOperand1,
                                                                    const GALGAS_luint & inOperand2,
                                                                    const GALGAS_lstring & inOperand3,
                                                                    const GALGAS_fieldSettingMap & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mRegisterName (inOperand1),
mAttribute_mMaskValue (inOperand2),
mAttribute_mDescription (inOperand3),
mAttribute_mFieldSettingMap (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element GALGAS_configFieldMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_configFieldMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_luint::constructor_default (HERE),
                                           GALGAS_lstring::constructor_default (HERE),
                                           GALGAS_fieldSettingMap::constructor_emptyMap (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element GALGAS_configFieldMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1,
                                                                                    const GALGAS_luint & inOperand2,
                                                                                    const GALGAS_lstring & inOperand3,
                                                                                    const GALGAS_fieldSettingMap & inOperand4 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_configFieldMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_configFieldMap_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_configFieldMap_2E_element::objectCompare (const GALGAS_configFieldMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterName.objectCompare (inOperand.mAttribute_mRegisterName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mMaskValue.objectCompare (inOperand.mAttribute_mMaskValue) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDescription.objectCompare (inOperand.mAttribute_mDescription) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldSettingMap.objectCompare (inOperand.mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_configFieldMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterName.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mRegisterName.drop () ;
  mAttribute_mMaskValue.drop () ;
  mAttribute_mDescription.drop () ;
  mAttribute_mFieldSettingMap.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_configFieldMap_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @configFieldMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mMaskValue.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDescription.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldSettingMap.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_mRegisterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterName ;
}

//-----------------------------------------------------------------------------*

GALGAS_luint GALGAS_configFieldMap_2E_element::reader_mMaskValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMaskValue ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_mDescription (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDescription ;
}

//-----------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configFieldMap_2E_element::reader_mFieldSettingMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldSettingMap ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @configFieldMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configFieldMap_2E_element ("configFieldMap.element",
                                                  NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configFieldMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configFieldMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configFieldMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configFieldMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element GALGAS_configFieldMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap_2E_element result ;
  const GALGAS_configFieldMap_2E_element * p = (const GALGAS_configFieldMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configFieldMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("configFieldMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


