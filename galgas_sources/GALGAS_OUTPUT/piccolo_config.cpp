//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_config.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 21th, 2009, at 21h4'51"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "piccolo_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_configFieldMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_configFieldMap::e_configFieldMap (void) :
mRegisterName (),
mMaskValue (),
mDescription (),
mFieldSettingMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@configFieldMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_configFieldMap::
elementOf_GGS_configFieldMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_configFieldMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_configFieldMap::
appendForMapDescription (C_Compiler & inLexique,
                         const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRegisterName.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mMaskValue.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mDescription.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFieldSettingMap.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_configFieldMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_configFieldMap * ptr = dynamic_cast <const elementOf_GGS_configFieldMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRegisterName.operator_isEqual (ptr->mInfo.mRegisterName)).boolValue ()
           && (mInfo.mMaskValue.operator_isEqual (ptr->mInfo.mMaskValue)).boolValue ()
           && (mInfo.mDescription.operator_isEqual (ptr->mInfo.mDescription)).boolValue ()
           && (mInfo.mFieldSettingMap.operator_isEqual (ptr->mInfo.mFieldSettingMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_configFieldMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_configFieldMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_configFieldMap * info = (e_configFieldMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_configFieldMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_configFieldMap * info = (e_configFieldMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_configFieldMap GGS_configFieldMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_configFieldMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_configFieldMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_configFieldMap::
operator_isEqual (const GGS_configFieldMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_configFieldMap::
operator_isNotEqual (const GGS_configFieldMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_lstring & inParameter0,
                const GGS_luint & inParameter1,
                const GGS_lstring & inParameter2,
                const GGS_fieldSettingMap & inParameter3,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inParameter3.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_configFieldMap info  ;
    info.mRegisterName = inParameter0 ;
    info.mMaskValue = inParameter1 ;
    info.mDescription = inParameter2 ;
    info.mFieldSettingMap = inParameter3 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_luint   & outParameter1,
               GGS_lstring   & outParameter2,
               GGS_fieldSettingMap   & outParameter3,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    outParameter3.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRegisterName ;
    outParameter1 = node->mInfo.mMaskValue ;
    outParameter2 = node->mInfo.mDescription ;
    outParameter3 = node->mInfo.mFieldSettingMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_configFieldMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_lstring   & outParameter2,
                                GGS_fieldSettingMap   & outParameter3 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  outParameter2,
                  outParameter3,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_configFieldMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_configFieldMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0,
                                const GGS_luint & inParameter1,
                                const GGS_lstring & inParameter2,
                                const GGS_fieldSettingMap & inParameter3 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 inParameter3,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_configFieldMap GGS_configFieldMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_configFieldMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_configFieldMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_configFieldMap GGS_configFieldMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_configFieldMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_configFieldMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @configFieldMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    PMSInt32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_configFieldMap::cEnumerator::_mRegisterName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRegisterName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_luint  & GGS_configFieldMap::cEnumerator::_mMaskValue (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mMaskValue ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_configFieldMap::cEnumerator::_mDescription (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mDescription ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_fieldSettingMap  & GGS_configFieldMap::cEnumerator::_mFieldSettingMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFieldSettingMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "actualBuildConfig"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_actualBuildConfig (C_Compiler & inLexique,
                                const GGS_configRegisterMap   var_cas_inConfigRegisterMap,
                                const GGS_configDefinitionList   var_cas_inConfigDefinitionList,
                                const GGS_bool  var_cas_inAcceptDefaultConfiguration,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_actualConfigurationMap  & var_cas_outActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_actualBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outActualConfigurationMap = GGS_actualConfigurationMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_configFieldMap  var_cas_configFieldMap ;
  var_cas_configFieldMap = GGS_configFieldMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_configRegisterMap::cEnumerator enumerator_1259 (var_cas_inConfigRegisterMap, true) ;
    const GGS_configRegisterMap::cElement * operand_1259 = NULL ;
    while (((operand_1259 = enumerator_1259.nextObject ()))) {
      macroValidPointer (operand_1259) ;
      GGS_uint  var_cas_defaultValue ;
      var_cas_defaultValue = GGS_uint (1U).left_shift_operation (inLexique, operand_1259->mInfo.mRegisterWidth.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) COMMA_SOURCE_FILE_AT_LINE (32)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (32)) ;
      var_cas_outActualConfigurationMap.modifier_insertKey (inLexique, operand_1259->mKey, operand_1259->mInfo.mRegisterAddress.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (33)), var_cas_defaultValue COMMA_SOURCE_FILE_AT_LINE (33)) ;
      GGS_lstring  var_cas_registerName ;
      var_cas_registerName = operand_1259->mKey ;
      {
        GGS_configRegisterMaskMap::cEnumerator enumerator_1484 (operand_1259->mInfo.mConfigRegisterMaskMap, true) ;
        const GGS_configRegisterMaskMap::cElement * operand_1484 = NULL ;
        while (((operand_1484 = enumerator_1484.nextObject ()))) {
          macroValidPointer (operand_1484) ;
          var_cas_configFieldMap.modifier_insertKey (inLexique, operand_1484->mKey, var_cas_registerName, operand_1484->mInfo.mMaskValue, operand_1484->mInfo.mDescription, operand_1484->mInfo.mFieldSettingMap COMMA_SOURCE_FILE_AT_LINE (36)) ;
        }
      }
    }
  }
  GGS_stringset  var_cas_actualSettingNameSet ;
  var_cas_actualSettingNameSet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_configDefinitionList::cEnumerator enumerator_1727 (var_cas_inConfigDefinitionList, true) ;
    const GGS_configDefinitionList::cElement * operand_1727 = NULL ;
    while (((operand_1727 = enumerator_1727.nextObject ()))) {
      macroValidPointer (operand_1727) ;
      {
        GGS_configSettingList::cEnumerator enumerator_1755 (operand_1727->mSettingList, true) ;
        const GGS_configSettingList::cElement * operand_1755 = NULL ;
        while (((operand_1755 = enumerator_1755.nextObject ()))) {
          macroValidPointer (operand_1755) ;
          if ((var_cas_actualSettingNameSet.reader_hasKey (inLexique, operand_1755->mSettingName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) COMMA_SOURCE_FILE_AT_LINE (43))).isBuiltAndTrue ()) {
            operand_1755->mSettingName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_1755->mSettingName)).operator_concat (GGS_string ("' setting is already defined")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
          }
          var_cas_actualSettingNameSet._addAssign_operation (operand_1755->mSettingName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (46))) ;
          GGS_lstring  var_cas_registerName ;
          GGS_luint  var_cas_maskValue ;
          GGS_lstring  var_cas_settingDescription ;
          GGS_fieldSettingMap  var_cas_fieldSettingMap ;
          const GGS_configFieldMap  temp_2145 = var_cas_configFieldMap ;
          if (temp_2145.isBuilt ()) {
            temp_2145 (HERE)->method_searchKey (inLexique, operand_1755->mSettingName, var_cas_registerName, var_cas_maskValue, var_cas_settingDescription, var_cas_fieldSettingMap COMMA_SOURCE_FILE_AT_LINE (51)) ;
          }
          if ((var_cas_fieldSettingMap.reader_hasKey (inLexique, operand_1755->mSettingValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) COMMA_SOURCE_FILE_AT_LINE (52))).isBuiltAndTrue ()) {
            GGS_uint  var_cas_settingValue ;
            GGS_uint  var_cas_settingMask ;
            const GGS_fieldSettingMap  temp_2379 = var_cas_fieldSettingMap ;
            if (temp_2379.isBuilt ()) {
              temp_2379 (HERE)->method_searchKey (inLexique, operand_1755->mSettingValue, var_cas_settingValue, var_cas_settingMask COMMA_SOURCE_FILE_AT_LINE (55)) ;
            }
            GGS_uint  var_cas_registerValue ;
            GGS_uint  automatic_var_0 ;
            const GGS_actualConfigurationMap  temp_2499 = var_cas_outActualConfigurationMap ;
            if (temp_2499.isBuilt ()) {
              temp_2499 (HERE)->method_searchKey (inLexique, var_cas_registerName, automatic_var_0, var_cas_registerValue COMMA_SOURCE_FILE_AT_LINE (57)) ;
            }
            var_cas_registerValue = ((var_cas_registerValue).operator_and ((var_cas_settingMask).operator_tilde ())).operator_or (var_cas_settingValue) ;
            var_cas_outActualConfigurationMap.modifier_setMRegisterValueForKey (inLexique, var_cas_registerValue, var_cas_registerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59)) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          }else if (((var_cas_fieldSettingMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (60))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            GGS_string var_cas_errorMessage ;
            var_cas_errorMessage = ((((GGS_string ("the '")).operator_concat (operand_1755->mSettingValue)).operator_concat (GGS_string ("' value is not defined for configuration setting '"))).operator_concat (operand_1755->mSettingName)).operator_concat (GGS_string ("'; possible values are:")) ;
            {
              GGS_fieldSettingMap::cEnumerator enumerator_2951 (var_cas_fieldSettingMap, true) ;
              const GGS_fieldSettingMap::cElement * operand_2951 = NULL ;
              while (((operand_2951 = enumerator_2951.nextObject ()))) {
                macroValidPointer (operand_2951) ;
                var_cas_errorMessage.appendCString ("\n"
                  "-  \"") ;
                var_cas_errorMessage.dotAssign_operation (operand_2951->mKey) ;
                var_cas_errorMessage.appendCString ("\"") ;
              }
            }
            operand_1755->mSettingValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (67)) ;
          }
        }
      }
    }
  }
  if (((var_cas_inAcceptDefaultConfiguration).operator_not ()).isBuiltAndTrue ()) {
    GGS_stringset  var_cas_notDefinedSetting ;
    var_cas_notDefinedSetting = var_cas_configFieldMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (72)).substract_operation (inLexique, var_cas_actualSettingNameSet COMMA_SOURCE_FILE_AT_LINE (72)) ;
    if (((var_cas_notDefinedSetting.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (73))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = GGS_string ("the following configuration settings are not defined:") ;
      {
        GGS_stringset::cEnumerator enumerator_3459 (var_cas_notDefinedSetting, true) ;
        while (enumerator_3459.hasCurrentObject ()) {
          var_cas_errorMessage.appendCString ("\n"
            "-  ") ;
          var_cas_errorMessage.dotAssign_operation (enumerator_3459._key (HERE)) ;
          enumerator_3459.next () ;
        }
      }
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (79)) ;
    }
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_3665 (var_cas_outActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_3665 = NULL ;
    while (((operand_3665 = enumerator_3665.nextObject ()))) {
      macroValidPointer (operand_3665) ;
      var_cas_ioListFileContents.appendCString ("Register '") ;
      var_cas_ioListFileContents.dotAssign_operation (operand_3665->mKey) ;
      var_cas_ioListFileContents.appendCString ("' at ") ;
      var_cas_ioListFileContents.dotAssign_operation (operand_3665->mInfo.mRegisterAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (83))) ;
      var_cas_ioListFileContents.appendCString (" set to ") ;
      var_cas_ioListFileContents.dotAssign_operation (operand_3665->mInfo.mRegisterValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (83))) ;
      var_cas_ioListFileContents.appendCString ("\n") ;
      GGS_configRegisterMaskMap  var_cas_configRegisterMaskMap ;
      GGS_luint  automatic_var_1 ;
      GGS_luint  automatic_var_2 ;
      GGS_illegalMaskList  automatic_var_3 ;
      const GGS_configRegisterMap  temp_3891 = var_cas_inConfigRegisterMap ;
      if (temp_3891.isBuilt ()) {
        temp_3891 (HERE)->method_searchKey (inLexique, operand_3665->mKey, automatic_var_1, automatic_var_2, var_cas_configRegisterMaskMap, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      {
        GGS_configRegisterMaskMap::cEnumerator enumerator_3965 (var_cas_configRegisterMaskMap, true) ;
        const GGS_configRegisterMaskMap::cElement * operand_3965 = NULL ;
        while (((operand_3965 = enumerator_3965.nextObject ()))) {
          macroValidPointer (operand_3965) ;
          GGS_lstring  var_cas_settingName ;
          var_cas_settingName = operand_3965->mKey ;
          {
            GGS_fieldSettingMap::cEnumerator enumerator_4035 (operand_3965->mInfo.mFieldSettingMap, true) ;
            const GGS_fieldSettingMap::cElement * operand_4035 = NULL ;
            while (((operand_4035 = enumerator_4035.nextObject ()))) {
              macroValidPointer (operand_4035) ;
              if ((((operand_3665->mInfo.mRegisterValue).operator_and (operand_3965->mInfo.mMaskValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (89)))).operator_isEqual (operand_4035->mInfo.mValue)).isBuiltAndTrue ()) {
                var_cas_ioListFileContents.appendCString ("  setting '") ;
                var_cas_ioListFileContents.dotAssign_operation (var_cas_settingName) ;
                var_cas_ioListFileContents.appendCString ("' set to ") ;
                var_cas_ioListFileContents.dotAssign_operation (operand_4035->mInfo.mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) ;
                var_cas_ioListFileContents.appendCString (" (\"") ;
                var_cas_ioListFileContents.dotAssign_operation (operand_4035->mKey) ;
                var_cas_ioListFileContents.appendCString ("\")\n") ;
              }
            }
          }
        }
      }
      var_cas_ioListFileContents.appendCString ("\n") ;
    }
  }
  {
    GGS_actualConfigurationMap::cEnumerator enumerator_4398 (var_cas_outActualConfigurationMap, true) ;
    const GGS_actualConfigurationMap::cElement * operand_4398 = NULL ;
    while (((operand_4398 = enumerator_4398.nextObject ()))) {
      macroValidPointer (operand_4398) ;
      GGS_illegalMaskList  var_cas_illegalMaskList ;
      GGS_luint  automatic_var_4 ;
      GGS_luint  automatic_var_5 ;
      GGS_configRegisterMaskMap  automatic_var_6 ;
      const GGS_configRegisterMap  temp_4475 = var_cas_inConfigRegisterMap ;
      if (temp_4475.isBuilt ()) {
        temp_4475 (HERE)->method_searchKey (inLexique, operand_4398->mKey, automatic_var_4, automatic_var_5, automatic_var_6, var_cas_illegalMaskList COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
      {
        GGS_illegalMaskList::cEnumerator enumerator_4538 (var_cas_illegalMaskList, true) ;
        const GGS_illegalMaskList::cElement * operand_4538 = NULL ;
        while (((operand_4538 = enumerator_4538.nextObject ()))) {
          macroValidPointer (operand_4538) ;
          if ((((operand_4398->mInfo.mRegisterValue).operator_and (operand_4538->mIllegalMask.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (101)))).operator_isEqual (operand_4538->mIllegalValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (101)))).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("illegal setting for '")).operator_concat (operand_4398->mKey)).operator_concat (GGS_string ("' register: "))).operator_concat (operand_4538->mDescription) COMMA_SOURCE_FILE_AT_LINE (103)) ;
            var_cas_ioListFileContents.appendCString ("*** ILLEGAL SETTING for register '") ;
            var_cas_ioListFileContents.dotAssign_operation (operand_4398->mKey) ;
            var_cas_ioListFileContents.appendCString ("' ***\n") ;
            var_cas_ioListFileContents.appendCString ("  message: ") ;
            var_cas_ioListFileContents.dotAssign_operation (operand_4538->mDescription) ;
            var_cas_ioListFileContents.appendCString ("\n"
              "\n") ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_actualBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "buildConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildConfig (C_Compiler & inLexique,
                                const GGS_configRegisterMap   var_cas_inConfigRegisterMap,
                                const GGS_configDefinitionList   var_cas_inConfigDefinitionList,
                                const GGS_bool  var_cas_inAcceptDefaultConfiguration,
                                GGS_string & var_cas_ioListFileContents,
                                GGS_actualConfigurationMap  & var_cas_outActualConfigurationMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (120))) ;
  var_cas_ioListFileContents.appendCString ("\n") ;
  var_cas_ioListFileContents.appendCString ("*") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("MICROCONTROLLER CONFIGURATION").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (77U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (121))) ;
  var_cas_ioListFileContents.appendCString ("*\n") ;
  var_cas_ioListFileContents.dotAssign_operation (GGS_string ("").reader_stringByLeftAndRightPadding (inLexique, GGS_uint (79U), GGS_char (TO_UNICODE ('*')) COMMA_SOURCE_FILE_AT_LINE (122))) ;
  var_cas_ioListFileContents.appendCString ("\n"
    "\n") ;
  if (((var_cas_inConfigDefinitionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (124))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    ::routine_actualBuildConfig (inLexique,  var_cas_inConfigRegisterMap,  var_cas_inConfigDefinitionList,  var_cas_inAcceptDefaultConfiguration,  var_cas_ioListFileContents,  var_cas_outActualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }else{
    var_cas_outActualConfigurationMap = GGS_actualConfigurationMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioListFileContents.appendCString ("No configuration.\n"
      "\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*

