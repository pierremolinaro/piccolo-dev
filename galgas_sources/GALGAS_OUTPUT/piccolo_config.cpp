//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_config.cpp'                          *
//                        Generated by version 2.4.3                         *
//                      april 10th, 2013, at 17h38'52"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "piccolo_config.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

cMapElement_configFieldMap::cMapElement_configFieldMap (const GALGAS_lstring & inKey,
                                                        const GALGAS_lstring & in_mRegisterName,
                                                        const GALGAS_luint & in_mMaskValue,
                                                        const GALGAS_lstring & in_mDescription,
                                                        const GALGAS_fieldSettingMap & in_mFieldSettingMap
                                                        COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mRegisterName (in_mRegisterName),
mAttribute_mMaskValue (in_mMaskValue),
mAttribute_mDescription (in_mDescription),
mAttribute_mFieldSettingMap (in_mFieldSettingMap) {
}

//---------------------------------------------------------------------------*

bool cMapElement_configFieldMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterName.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_configFieldMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_configFieldMap (mAttribute_lkey, mAttribute_mRegisterName, mAttribute_mMaskValue, mAttribute_mDescription, mAttribute_mFieldSettingMap COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_configFieldMap::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mRegisterName" ":" ;
  mAttribute_mRegisterName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mMaskValue" ":" ;
  mAttribute_mMaskValue.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mDescription" ":" ;
  mAttribute_mDescription.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mFieldSettingMap" ":" ;
  mAttribute_mFieldSettingMap.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_configFieldMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_configFieldMap * operand = (cMapElement_configFieldMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mRegisterName.objectCompare (operand->mAttribute_mRegisterName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mMaskValue.objectCompare (operand->mAttribute_mMaskValue) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mDescription.objectCompare (operand->mAttribute_mDescription) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mFieldSettingMap.objectCompare (operand->mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap::GALGAS_configFieldMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap::GALGAS_configFieldMap (const GALGAS_configFieldMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap & GALGAS_configFieldMap::operator = (const GALGAS_configFieldMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::constructor_mapWithMapToOverride (const GALGAS_configFieldMap & inMapToOverride
                                                                               COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_configFieldMap result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_insertKey (GALGAS_lstring inKey,
                                                GALGAS_lstring inArgument0,
                                                GALGAS_luint inArgument1,
                                                GALGAS_lstring inArgument2,
                                                GALGAS_fieldSettingMap inArgument3,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_configFieldMap * p = NULL ;
  macroMyNew (p, cMapElement_configFieldMap (inKey, inArgument0, inArgument1, inArgument2, inArgument3 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' configuration field is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_configFieldMap_searchKey = "the '%K' configuration field is not declared" ;

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::method_searchKey (GALGAS_lstring inKey,
                                              GALGAS_lstring & outArgument0,
                                              GALGAS_luint & outArgument1,
                                              GALGAS_lstring & outArgument2,
                                              GALGAS_fieldSettingMap & outArgument3,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) performSearch (inKey,
                                                                                               inCompiler,
                                                                                               kSearchErrorMessage_configFieldMap_searchKey
                                                                                               COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
    outArgument3.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    outArgument0 = p->mAttribute_mRegisterName ;
    outArgument1 = p->mAttribute_mMaskValue ;
    outArgument2 = p->mAttribute_mDescription ;
    outArgument3 = p->mAttribute_mFieldSettingMap ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap::reader_mRegisterNameForKey (const GALGAS_string & inKey,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mRegisterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_configFieldMap::reader_mMaskValueForKey (const GALGAS_string & inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_luint result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mMaskValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap::reader_mDescriptionForKey (const GALGAS_string & inKey,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_lstring result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mDescription ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configFieldMap::reader_mFieldSettingMapForKey (const GALGAS_string & inKey,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) attributes ;
  GALGAS_fieldSettingMap result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_configFieldMap) ;
    result = p->mAttribute_mFieldSettingMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMRegisterNameForKey (GALGAS_lstring inAttributeValue,
                                                             GALGAS_string inKey,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mRegisterName = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMMaskValueForKey (GALGAS_luint inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mMaskValue = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMDescriptionForKey (GALGAS_lstring inAttributeValue,
                                                            GALGAS_string inKey,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mDescription = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap::modifier_setMFieldSettingMapForKey (GALGAS_fieldSettingMap inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * p = (cMapElement_configFieldMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_configFieldMap) ;
    p->mAttribute_mFieldSettingMap = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_configFieldMap * GALGAS_configFieldMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                              const GALGAS_string & inKey
                                                                                              COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_configFieldMap * result = (cMapElement_configFieldMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configFieldMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_configFieldMap * GALGAS_configFieldMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                 const GALGAS_lstring & inKey
                                                                                                 COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_configFieldMap_searchKey COMMA_THERE) ;
  cMapElement_configFieldMap * result = (cMapElement_configFieldMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_configFieldMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_configFieldMap::cEnumerator_configFieldMap (const GALGAS_configFieldMap & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element cEnumerator_configFieldMap::current (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return GALGAS_configFieldMap_2E_element (p->mAttribute_lkey, p->mAttribute_mRegisterName, p->mAttribute_mMaskValue, p->mAttribute_mDescription, p->mAttribute_mFieldSettingMap) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_mRegisterName (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mRegisterName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint cEnumerator_configFieldMap::current_mMaskValue (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mMaskValue ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_configFieldMap::current_mDescription (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mDescription ;
}

//---------------------------------------------------------------------------*

GALGAS_fieldSettingMap cEnumerator_configFieldMap::current_mFieldSettingMap (LOCATION_ARGS) const {
  const cMapElement_configFieldMap * p = (const cMapElement_configFieldMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_configFieldMap) ;
  return p->mAttribute_mFieldSettingMap ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @configFieldMap type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configFieldMap ("configFieldMap",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configFieldMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configFieldMap ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configFieldMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configFieldMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap GALGAS_configFieldMap::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler,
                                                            const GALGAS_location & inErrorLocation
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap result ;
  const GALGAS_configFieldMap * p = (const GALGAS_configFieldMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configFieldMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "configFieldMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Routine 'actualBuildConfig'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_actualBuildConfig (const GALGAS_configRegisterMap constinArgument_inConfigRegisterMap,
                                const GALGAS_configDefinitionList constinArgument_inConfigDefinitionList,
                                const GALGAS_bool constinArgument_inAcceptDefaultConfiguration,
                                GALGAS_string & ioArgument_ioListFileContents,
                                GALGAS_actualConfigurationMap & outArgument_outActualConfigurationMap,
                                C_Compiler * inCompiler
                                COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outActualConfigurationMap.drop () ; // Release 'out' argument
  //-------- @assignmentInstructionForGeneration
  outArgument_outActualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (27)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_configFieldMap var_configFieldMap = GALGAS_configFieldMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (28)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_configRegisterMap enumerator_1108 (constinArgument_inConfigRegisterMap, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_1108.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_uint var_defaultValue = GALGAS_uint ((PMUInt32) 1U).left_shift_operation (enumerator_1108.current_mRegisterWidth (HERE).reader_uint (SOURCE_FILE_AT_LINE (30)) COMMA_SOURCE_FILE_AT_LINE (30)).substract_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (30)) ;
    { //-------- @modifierCallInstructionForGeneration
    outArgument_outActualConfigurationMap.modifier_insertKey (enumerator_1108.current_lkey (HERE), enumerator_1108.current_mRegisterAddress (HERE).reader_uint (SOURCE_FILE_AT_LINE (31)), var_defaultValue, inCompiler COMMA_SOURCE_FILE_AT_LINE (31)) ;
    } //-------- END @typeMethodInstructionForGeneration
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_lstring var_registerName = enumerator_1108.current_lkey (HERE) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_configRegisterMaskMap enumerator_1343 (enumerator_1108.current_mConfigRegisterMaskMap (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_1343.hasCurrentObject ()) {
      { //-------- @modifierCallInstructionForGeneration
      var_configFieldMap.modifier_insertKey (enumerator_1343.current_lkey (HERE), var_registerName, enumerator_1343.current_mMaskValue (HERE), enumerator_1343.current_mDescription (HERE), enumerator_1343.current_mFieldSettingMap (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (34)) ;
      } //-------- END @typeMethodInstructionForGeneration
      enumerator_1343.gotoNextObject () ;
    }
    enumerator_1108.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringset var_actualSettingNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (38)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_configDefinitionList enumerator_1621 (constinArgument_inConfigDefinitionList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_1621.hasCurrentObject ()) {
    //-------- @foreachInstructionForGeneration
    cEnumerator_configSettingList enumerator_1649 (enumerator_1621.current_mSettingList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_1649.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_0 = var_actualSettingNameSet.reader_hasKey (enumerator_1649.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (41)) COMMA_SOURCE_FILE_AT_LINE (41)).boolEnum () ;
      if (kBoolTrue == test_0) {
        //-------- @errorInstructionForGeneration
        GALGAS_location location_1 (enumerator_1649.current_mSettingName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_1649.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (42)) COMMA_SOURCE_FILE_AT_LINE (42)).operator_concat (GALGAS_string ("' setting is already defined") COMMA_SOURCE_FILE_AT_LINE (42)) COMMA_SOURCE_FILE_AT_LINE (42)) ;
      }
      //-------- @plusEqualnstructionForGeneration
      var_actualSettingNameSet.addAssign_operation (enumerator_1649.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (44)) COMMA_SOURCE_FILE_AT_LINE (44)) ;
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lstring var_registerName ;
      //-------- @localVariableDeclarationForGeneration
      GALGAS_luint var_maskValue ;
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lstring var_settingDescription ;
      //-------- @localVariableDeclarationForGeneration
      GALGAS_fieldSettingMap var_fieldSettingMap ;
      //-------- @methodCallInstructionForGeneration
      var_configFieldMap.method_searchKey (enumerator_1649.current_mSettingName (HERE), var_registerName, var_maskValue, var_settingDescription, var_fieldSettingMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (49)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_2 = var_fieldSettingMap.reader_hasKey (enumerator_1649.current_mSettingValue (HERE).reader_string (SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)).boolEnum () ;
      if (kBoolTrue == test_2) {
        //-------- @localVariableDeclarationForGeneration
        GALGAS_uint var_settingValue ;
        //-------- @localVariableDeclarationForGeneration
        GALGAS_uint var_settingMask ;
        //-------- @methodCallInstructionForGeneration
        var_fieldSettingMap.method_searchKey (enumerator_1649.current_mSettingValue (HERE), var_settingValue, var_settingMask, inCompiler COMMA_SOURCE_FILE_AT_LINE (53)) ;
        //-------- END @methodCallInstructionForGeneration
        //-------- @localVariableDeclarationForGeneration
        GALGAS_uint var_registerValue ;
        //-------- @methodCallInstructionForGeneration
        GALGAS_uint joker_2407_0 ; // Joker input parameter
        outArgument_outActualConfigurationMap.method_searchKey (var_registerName, joker_2407_0, var_registerValue, inCompiler COMMA_SOURCE_FILE_AT_LINE (55)) ;
        //-------- END @methodCallInstructionForGeneration
        //-------- @assignmentInstructionForGeneration
        var_registerValue = var_registerValue.operator_and (var_settingMask.operator_tilde (SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)).operator_or (var_settingValue COMMA_SOURCE_FILE_AT_LINE (56)) ;
        { //-------- @modifierCallInstructionForGeneration
        outArgument_outActualConfigurationMap.modifier_setMRegisterValueForKey (var_registerValue, var_registerName.reader_string (SOURCE_FILE_AT_LINE (57)), inCompiler COMMA_SOURCE_FILE_AT_LINE (57)) ;
        } //-------- END @typeMethodInstructionForGeneration
      }else if (kBoolFalse == test_2) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_fieldSettingMap.reader_count (SOURCE_FILE_AT_LINE (58)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
        if (kBoolTrue == test_3) {
          //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
          GALGAS_string var_errorMessage = GALGAS_string ("the '").operator_concat (enumerator_1649.current_mSettingValue (HERE).reader_string (SOURCE_FILE_AT_LINE (59)) COMMA_SOURCE_FILE_AT_LINE (59)).operator_concat (GALGAS_string ("' value is not defined for configuration setting '") COMMA_SOURCE_FILE_AT_LINE (59)).operator_concat (enumerator_1649.current_mSettingName (HERE).reader_string (SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60)).operator_concat (GALGAS_string ("'; possible values are:") COMMA_SOURCE_FILE_AT_LINE (60)) ;
          //-------- @foreachInstructionForGeneration
          cEnumerator_fieldSettingMap enumerator_2845 (var_fieldSettingMap, kEnumeration_up) ;
          //--- simple foreach instruction
          while (enumerator_2845.hasCurrentObject ()) {
            //-------- @concatInstructionForGeneration
            var_errorMessage.dotAssign_operation (GALGAS_string ("\n"
              "-  \"").operator_concat (enumerator_2845.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (62)) COMMA_SOURCE_FILE_AT_LINE (62)).operator_concat (GALGAS_string ("\"") COMMA_SOURCE_FILE_AT_LINE (62)) COMMA_SOURCE_FILE_AT_LINE (62)) ;
            enumerator_2845.gotoNextObject () ;
          }
          //-------- @errorInstructionForGeneration
          GALGAS_location location_4 (enumerator_1649.current_mSettingValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_4, var_errorMessage COMMA_SOURCE_FILE_AT_LINE (64)) ;
        }
      }
      enumerator_1649.gotoNextObject () ;
    }
    enumerator_1621.gotoNextObject () ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_5 = constinArgument_inAcceptDefaultConfiguration.operator_not (SOURCE_FILE_AT_LINE (69)).boolEnum () ;
  if (kBoolTrue == test_5) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_stringset var_notDefinedSetting = var_configFieldMap.reader_allKeys (SOURCE_FILE_AT_LINE (70)).substract_operation (var_actualSettingNameSet, inCompiler COMMA_SOURCE_FILE_AT_LINE (70)) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, var_notDefinedSetting.reader_count (SOURCE_FILE_AT_LINE (71)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_6) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_errorMessage = GALGAS_string ("the following configuration settings are not defined:") ;
      //-------- @foreachInstructionForGeneration
      cEnumerator_stringset enumerator_3354 (var_notDefinedSetting, kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_3354.hasCurrentObject ()) {
        //-------- @concatInstructionForGeneration
        var_errorMessage.dotAssign_operation (GALGAS_string ("\n"
          "-  ").operator_concat (enumerator_3354.current_key (HERE) COMMA_SOURCE_FILE_AT_LINE (74)) COMMA_SOURCE_FILE_AT_LINE (74)) ;
        enumerator_3354.gotoNextObject () ;
      }
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (inCompiler->here (), var_errorMessage COMMA_SOURCE_FILE_AT_LINE (76)) ;
    }
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_actualConfigurationMap enumerator_3560 (outArgument_outActualConfigurationMap, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_3560.hasCurrentObject ()) {
    //-------- @concatInstructionForGeneration
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("Register '").operator_concat (enumerator_3560.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (GALGAS_string ("' at ") COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (enumerator_3560.current_mRegisterAddress (HERE).reader_hexString (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (GALGAS_string (" set to ") COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (enumerator_3560.current_mRegisterValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)) ;
    //-------- @localVariableDeclarationForGeneration
    GALGAS_configRegisterMaskMap var_configRegisterMaskMap ;
    //-------- @methodCallInstructionForGeneration
    GALGAS_luint joker_3793_0 ; // Joker input parameter
    GALGAS_luint joker_3796_0 ; // Joker input parameter
    GALGAS_illegalMaskList joker_3822_0 ; // Joker input parameter
    constinArgument_inConfigRegisterMap.method_searchKey (enumerator_3560.current_lkey (HERE), joker_3793_0, joker_3796_0, var_configRegisterMaskMap, joker_3822_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (83)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @foreachInstructionForGeneration
    cEnumerator_configRegisterMaskMap enumerator_3870 (var_configRegisterMaskMap, kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_3870.hasCurrentObject ()) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_lstring var_settingName = enumerator_3870.current_lkey (HERE) ;
      //-------- @foreachInstructionForGeneration
      cEnumerator_fieldSettingMap enumerator_3974 (enumerator_3870.current_mFieldSettingMap (HERE), kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_3974.hasCurrentObject ()) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, enumerator_3560.current_mRegisterValue (HERE).operator_and (enumerator_3870.current_mMaskValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (87)) COMMA_SOURCE_FILE_AT_LINE (87)).objectCompare (enumerator_3974.current_mValue (HERE))).boolEnum () ;
        if (kBoolTrue == test_7) {
          //-------- @concatInstructionForGeneration
          ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("  setting '").operator_concat (var_settingName.reader_string (SOURCE_FILE_AT_LINE (88)) COMMA_SOURCE_FILE_AT_LINE (88)).operator_concat (GALGAS_string ("' set to ") COMMA_SOURCE_FILE_AT_LINE (88)).operator_concat (enumerator_3974.current_mValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (88)) COMMA_SOURCE_FILE_AT_LINE (88)).operator_concat (GALGAS_string (" (\"") COMMA_SOURCE_FILE_AT_LINE (88)).operator_concat (enumerator_3974.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (88)) COMMA_SOURCE_FILE_AT_LINE (88)).operator_concat (GALGAS_string ("\")\n") COMMA_SOURCE_FILE_AT_LINE (88)) COMMA_SOURCE_FILE_AT_LINE (88)) ;
        }
        enumerator_3974.gotoNextObject () ;
      }
      enumerator_3870.gotoNextObject () ;
    }
    //-------- @concatInstructionForGeneration
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (92)) ;
    enumerator_3560.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_actualConfigurationMap enumerator_4377 (outArgument_outActualConfigurationMap, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_4377.hasCurrentObject ()) {
    //-------- @localVariableDeclarationForGeneration
    GALGAS_illegalMaskList var_illegalMaskList ;
    //-------- @methodCallInstructionForGeneration
    GALGAS_luint joker_4460_0 ; // Joker input parameter
    GALGAS_luint joker_4463_0 ; // Joker input parameter
    GALGAS_configRegisterMaskMap joker_4466_0 ; // Joker input parameter
    constinArgument_inConfigRegisterMap.method_searchKey (enumerator_4377.current_lkey (HERE), joker_4460_0, joker_4463_0, joker_4466_0, var_illegalMaskList, inCompiler COMMA_SOURCE_FILE_AT_LINE (97)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @foreachInstructionForGeneration
    cEnumerator_illegalMaskList enumerator_4518 (var_illegalMaskList, kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_4518.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_4377.current_mRegisterValue (HERE).operator_and (enumerator_4518.current_mIllegalMask (HERE).reader_uint (SOURCE_FILE_AT_LINE (99)) COMMA_SOURCE_FILE_AT_LINE (99)).objectCompare (enumerator_4518.current_mIllegalValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (99)))).boolEnum () ;
      if (kBoolTrue == test_8) {
        //-------- @errorInstructionForGeneration
        inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("illegal setting for '").operator_concat (enumerator_4377.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100)).operator_concat (GALGAS_string ("' register: ") COMMA_SOURCE_FILE_AT_LINE (100)).operator_concat (enumerator_4518.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100)) ;
        //-------- @concatInstructionForGeneration
        ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*** ILLEGAL SETTING for register '").operator_concat (enumerator_4377.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (101)) COMMA_SOURCE_FILE_AT_LINE (101)).operator_concat (GALGAS_string ("' ***\n") COMMA_SOURCE_FILE_AT_LINE (101)) COMMA_SOURCE_FILE_AT_LINE (101)) ;
        //-------- @concatInstructionForGeneration
        ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("  message: ").operator_concat (enumerator_4518.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (102)) COMMA_SOURCE_FILE_AT_LINE (102)).operator_concat (GALGAS_string ("\n"
          "\n") COMMA_SOURCE_FILE_AT_LINE (102)) COMMA_SOURCE_FILE_AT_LINE (102)) ;
      }
      enumerator_4518.gotoNextObject () ;
    }
    enumerator_4377.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                           Routine 'buildConfig'                           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildConfig (const GALGAS_configRegisterMap constinArgument_inConfigRegisterMap,
                          const GALGAS_configDefinitionList constinArgument_inConfigDefinitionList,
                          const GALGAS_bool constinArgument_inAcceptDefaultConfiguration,
                          GALGAS_string & ioArgument_ioListFileContents,
                          GALGAS_actualConfigurationMap & outArgument_outActualConfigurationMap,
                          C_Compiler * inCompiler
                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outActualConfigurationMap.drop () ; // Release 'out' argument
  //-------- @concatInstructionForGeneration
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (118)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)) ;
  //-------- @concatInstructionForGeneration
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("*").operator_concat (GALGAS_string ("MICROCONTROLLER CONFIGURATION").reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (119)) COMMA_SOURCE_FILE_AT_LINE (119)).operator_concat (GALGAS_string ("*\n") COMMA_SOURCE_FILE_AT_LINE (119)) COMMA_SOURCE_FILE_AT_LINE (119)) ;
  //-------- @concatInstructionForGeneration
  ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string::makeEmptyString ().reader_stringByLeftAndRightPadding (GALGAS_uint ((PMUInt32) 79U), GALGAS_char (TO_UNICODE (42)) COMMA_SOURCE_FILE_AT_LINE (120)).operator_concat (GALGAS_string ("\n"
    "\n") COMMA_SOURCE_FILE_AT_LINE (120)) COMMA_SOURCE_FILE_AT_LINE (120)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inConfigDefinitionList.reader_length (SOURCE_FILE_AT_LINE (122)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    { //-------- @routineCallInstructionForGeneration
    routine_actualBuildConfig (constinArgument_inConfigRegisterMap, constinArgument_inConfigDefinitionList, constinArgument_inAcceptDefaultConfiguration, ioArgument_ioListFileContents, outArgument_outActualConfigurationMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (123)) ;
    } //-------- @routineCallInstructionForGeneration
  }else if (kBoolFalse == test_0) {
    //-------- @assignmentInstructionForGeneration
    outArgument_outActualConfigurationMap = GALGAS_actualConfigurationMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (131)) ;
    //-------- @concatInstructionForGeneration
    ioArgument_ioListFileContents.dotAssign_operation (GALGAS_string ("No configuration.\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::GALGAS_configFieldMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mRegisterName (),
mAttribute_mMaskValue (),
mAttribute_mDescription (),
mAttribute_mFieldSettingMap () {
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::~ GALGAS_configFieldMap_2E_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element::GALGAS_configFieldMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                    const GALGAS_lstring & inOperand1,
                                                                    const GALGAS_luint & inOperand2,
                                                                    const GALGAS_lstring & inOperand3,
                                                                    const GALGAS_fieldSettingMap & inOperand4) :
mAttribute_lkey (inOperand0),
mAttribute_mRegisterName (inOperand1),
mAttribute_mMaskValue (inOperand2),
mAttribute_mDescription (inOperand3),
mAttribute_mFieldSettingMap (inOperand4) {
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element GALGAS_configFieldMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                    const GALGAS_lstring & inOperand1,
                                                                                    const GALGAS_luint & inOperand2,
                                                                                    const GALGAS_lstring & inOperand3,
                                                                                    const GALGAS_fieldSettingMap & inOperand4 
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_configFieldMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_configFieldMap_2E_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_configFieldMap_2E_element::objectCompare (const GALGAS_configFieldMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mRegisterName.objectCompare (inOperand.mAttribute_mRegisterName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mMaskValue.objectCompare (inOperand.mAttribute_mMaskValue) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDescription.objectCompare (inOperand.mAttribute_mDescription) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mFieldSettingMap.objectCompare (inOperand.mAttribute_mFieldSettingMap) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_configFieldMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mRegisterName.isValid () && mAttribute_mMaskValue.isValid () && mAttribute_mDescription.isValid () && mAttribute_mFieldSettingMap.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mRegisterName.drop () ;
  mAttribute_mMaskValue.drop () ;
  mAttribute_mDescription.drop () ;
  mAttribute_mFieldSettingMap.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_configFieldMap_2E_element::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "<struct @configFieldMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mRegisterName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mMaskValue.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDescription.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mFieldSettingMap.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_mRegisterName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mRegisterName ;
}

//---------------------------------------------------------------------------*

GALGAS_luint GALGAS_configFieldMap_2E_element::reader_mMaskValue (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mMaskValue ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_configFieldMap_2E_element::reader_mDescription (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDescription ;
}

//---------------------------------------------------------------------------*

GALGAS_fieldSettingMap GALGAS_configFieldMap_2E_element::reader_mFieldSettingMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mFieldSettingMap ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                       @configFieldMap.element type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_configFieldMap_2E_element ("configFieldMap.element",
                                                  NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_configFieldMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_configFieldMap_2E_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_configFieldMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_configFieldMap_2E_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_configFieldMap_2E_element GALGAS_configFieldMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                  C_Compiler * inCompiler,
                                                                                  const GALGAS_location & inErrorLocation
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_configFieldMap_2E_element result ;
  const GALGAS_configFieldMap_2E_element * p = (const GALGAS_configFieldMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_configFieldMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "configFieldMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


