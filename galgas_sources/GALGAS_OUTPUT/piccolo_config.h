//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'piccolo_config.h'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 2nd, 2010, at 21h0'8"                          *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_config_DEFINED
#define piccolo_config_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "generic_metamodel.h"
#include "piccoloDevice_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_configFieldMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@configFieldMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configFieldMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_configFieldMap ;

//---------------------------------------------------------------------------*

class GGS_configFieldMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_configFieldMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_configFieldMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_configFieldMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_configFieldMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_configFieldMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_configFieldMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_configFieldMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0,
                                const GGS_luint &  inParameter1,
                                const GGS_lstring &  inParameter2,
                                const GGS_fieldSettingMap &  inParameter3 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_luint   & outParameter1,
                                GGS_lstring   & outParameter2,
                                GGS_fieldSettingMap   & outParameter3 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_lstring & inParameter0,
                                   const GGS_luint & inParameter1,
                                   const GGS_lstring & inParameter2,
                                   const GGS_fieldSettingMap & inParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_lstring & outParameter0,
                                   GGS_luint & outParameter1,
                                   GGS_lstring & outParameter2,
                                   GGS_fieldSettingMap & outParameter3,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_configFieldMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_configFieldMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_configFieldMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_configFieldMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_configFieldMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mRegisterName (LOCATION_ARGS) const ;
    public : /* const */ GGS_luint   & _mMaskValue (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mDescription (LOCATION_ARGS) const ;
    public : /* const */ GGS_fieldSettingMap   & _mFieldSettingMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'actualBuildConfig'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_actualBuildConfig (C_Compiler &,
                                const GGS_configRegisterMap  ,
                                const GGS_configDefinitionList  ,
                                const GGS_bool ,
                                GGS_string &,
                                GGS_actualConfigurationMap  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'buildConfig'                            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildConfig (C_Compiler &,
                                const GGS_configRegisterMap  ,
                                const GGS_configDefinitionList  ,
                                const GGS_bool ,
                                GGS_string &,
                                GGS_actualConfigurationMap  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@configFieldMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_configFieldMap {
  public : GGS_lstring  mRegisterName ;
  public : GGS_luint  mMaskValue ;
  public : GGS_lstring  mDescription ;
  public : GGS_fieldSettingMap  mFieldSettingMap ;

  public : e_configFieldMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_configFieldMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_configFieldMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_configFieldMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_configFieldMap * nextObject (void) const { return (elementOf_GGS_configFieldMap *) mNextItem ; }
  public : inline elementOf_GGS_configFieldMap * infObject (void) const { return (elementOf_GGS_configFieldMap *) mInfPtr ; }
  public : inline elementOf_GGS_configFieldMap * supObject (void) const { return (elementOf_GGS_configFieldMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_configFieldMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

#endif
