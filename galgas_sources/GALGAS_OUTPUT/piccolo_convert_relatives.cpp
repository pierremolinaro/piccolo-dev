//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_convert_relatives.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 14h29'55"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_convert_relatives.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_convert_relatives.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'e_symbolTableForConvertingRelatives'                 *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTableForConvertingRelatives::e_symbolTableForConvertingRelatives (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//              class map '@symbolTableForConvertingRelatives'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTableForConvertingRelatives::
elementOf_GGS_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTableForConvertingRelatives & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTableForConvertingRelatives::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTableForConvertingRelatives::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTableForConvertingRelatives * _p = dynamic_cast <const elementOf_GGS_symbolTableForConvertingRelatives *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTableForConvertingRelatives::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTableForConvertingRelatives * info = (e_symbolTableForConvertingRelatives *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTableForConvertingRelatives * info = (e_symbolTableForConvertingRelatives *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForConvertingRelatives result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTableForConvertingRelatives info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForConvertingRelatives::
_operator_isEqual (const GGS_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForConvertingRelatives::
_operator_isNotEqual (const GGS_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTableForConvertingRelatives info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTableForConvertingRelatives & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForConvertingRelatives result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTableForConvertingRelatives result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTableForConvertingRelatives::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTableForConvertingRelatives " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTableForConvertingRelatives::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction.defineLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__defineLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_instruction * operand_918,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_918 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.defineLabelAtAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__defineLabelAtAddress> gDispatchTableFor__ipic_instruction__defineLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__defineLabelAtAddress (typeCategoryMethod__ipic_instruction__defineLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__defineLabelAtAddress
findCategoryMethod__ipic_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__defineLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__defineLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__defineLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__defineLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_pseudo_LABEL.defineLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1164,
                                GGS_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1164 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1164->mLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (33)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_ORG.defineLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__defineLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1452,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1452 != NULL) {
    var_cas_ioAddress = operand_1452->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.defineLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_1721,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1721 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1721->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (54)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__checkRelativeBranch> gDispatchTableFor__ipic_instruction__checkRelativeBranch ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__checkRelativeBranch (typeCategoryMethod__ipic_instruction__checkRelativeBranch inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__checkRelativeBranch.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__checkRelativeBranch
findCategoryMethod__ipic_instruction__checkRelativeBranch (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__checkRelativeBranch result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__checkRelativeBranch.count ()) {
    result = gDispatchTableFor__ipic_instruction__checkRelativeBranch (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__checkRelativeBranch (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__checkRelativeBranch.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.checkRelativeBranch'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__checkRelativeBranch (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_2794,
                                const GGS_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2794 != NULL) {
    var_cas_ioAddress = operand_2794->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_conditionalBranch.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_3239,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3239 != NULL) {
    switch (operand_3239->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_3566 = var_cas_inRoutineSymbolTable ;
      if (_temp_3566._isBuilt ()) {
        _temp_3566 (HERE)->method_searchKey (_inLexique, operand_3239->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (100)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (101))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (101))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)) COMMA_SOURCE_FILE_AT_LINE (101))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (101)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_3239->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))))._operator_concat (GGS_string (true, ") too large for Bcc instruction (limited to [-128, 127])")) COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicNative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_3971 = var_cas_inRoutineSymbolTable ;
      if (_temp_3971._isBuilt ()) {
        _temp_3971 (HERE)->method_searchKey (_inLexique, operand_3239->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (107)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (108))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (108)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (111)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))) ;
          var_cas_ioListFileContents.writeString (":  native Bcc overflow, converted to Bcc with BRA\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_3239->mInstructionLocation, GGS_condionalBranchMode::constructor_ipicBRA (_inLexique COMMA_HERE), operand_3239->mConditionalBranch, operand_3239->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (120)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicBRA:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_4759 = var_cas_inRoutineSymbolTable ;
      if (_temp_4759._isBuilt ()) {
        _temp_4759 (HERE)->method_searchKey (_inLexique, operand_3239->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (124)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (125))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (125))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)) COMMA_SOURCE_FILE_AT_LINE (125))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (125)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (128)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (129))) ;
          var_cas_ioListFileContents.writeString (":  Bcc with BRA overflow, converted to Bcc with GOTO\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_3239->mInstructionLocation, GGS_condionalBranchMode::constructor_ipicGOTO (_inLexique COMMA_HERE), operand_3239->mConditionalBranch, operand_3239->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (137)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_ipicGOTO:
      {
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_jump_test_register.checkRelativeBranch'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_jump_test_register__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_jump_test_register * operand_5679,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5679 != NULL) {
    if ((operand_5679->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (154)) ;
      if ((operand_5679->mBranchIfZero).isBuiltAndTrue ()) {
        var_cas_BRAaddress = var_cas_BRAaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (156)) ;
      }
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_6104 = var_cas_inRoutineSymbolTable ;
      if (_temp_6104._isBuilt ()) {
        _temp_6104 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_5679->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (160))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (160))._substract_operation (_inLexique, var_cas_BRAaddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (160)) COMMA_SOURCE_FILE_AT_LINE (160))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (160)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (163)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (164))) ;
          var_cas_ioListFileContents.writeString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_jump_test_register ::constructor_new (_inLexique, operand_5679->mInstructionLocation, operand_5679->mRegisterDescription, operand_5679->mTargetLabel, operand_5679->mBranchIfZero, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (173)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@ipic_registerComparisonCondition.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_registerComparisonCondition__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_registerComparisonCondition * operand_6998,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6998 != NULL) {
    GGS_bool var_cas_uses ;
    operand_6998->method_usesIntermediateBRA (_inLexique, var_cas_uses COMMA_SOURCE_FILE_AT_LINE (188)) ;
    if ((operand_6998->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (190)) ;
      if ((var_cas_uses).isBuiltAndTrue ()) {
        var_cas_BRAaddress = var_cas_BRAaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (192)) ;
      }
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_7464 = var_cas_inRoutineSymbolTable ;
      if (_temp_7464._isBuilt ()) {
        _temp_7464 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_6998->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (195)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (196))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (196))._substract_operation (_inLexique, var_cas_BRAaddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (196)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (199)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (200))) ;
          var_cas_ioListFileContents.writeString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_registerComparisonCondition ::constructor_new (_inLexique, operand_6998->mInstructionLocation, operand_6998->mRegisterDescription, operand_6998->mTargetLabel, operand_6998->mComparison, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (209)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_incDecRegisterInCondition.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_incDecRegisterInCondition__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_incDecRegisterInCondition * operand_8363,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8363 != NULL) {
    if ((operand_8363->mUsesBra).isBuiltAndTrue ()) {
      GGS_uint  var_cas_BRAaddress ;
      var_cas_BRAaddress = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (225)) ;
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_8712 = var_cas_inRoutineSymbolTable ;
      if (_temp_8712._isBuilt ()) {
        _temp_8712 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_8363->mTargetLabel, GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (227)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (228))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (228))._substract_operation (_inLexique, var_cas_BRAaddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)) COMMA_SOURCE_FILE_AT_LINE (228))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (228)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (231)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (232))) ;
          var_cas_ioListFileContents.writeString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_incDecRegisterInCondition ::constructor_new (_inLexique, operand_8363->mInstructionLocation, operand_8363->mRegisterDescription, operand_8363->mTargetLabel, operand_8363->mIncrement, operand_8363->m_W_isDestination, operand_8363->mBranchIfZero, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (243)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_JUMP.checkRelativeBranch'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JUMP__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_JUMP * operand_9637,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9637 != NULL) {
    switch (operand_9637->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_9964 = var_cas_inRoutineSymbolTable ;
      if (_temp_9964._isBuilt ()) {
        _temp_9964 (HERE)->method_searchKey (_inLexique, operand_9637->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (261)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (262))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (262))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (262)) COMMA_SOURCE_FILE_AT_LINE (262))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (262)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (265)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
          var_cas_ioListFileContents.writeString (":  JUMP with BRA overflow, converted to JUMP with GOTO\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_JUMP ::constructor_new (_inLexique, operand_9637->mInstructionLocation, operand_9637->mTargetLabel, GGS_jumpInstructionKind::constructor_ipicAbsolute (_inLexique COMMA_HERE) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (273)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_10739 = var_cas_inRoutineSymbolTable ;
      if (_temp_10739._isBuilt ()) {
        _temp_10739 (HERE)->method_searchKey (_inLexique, operand_9637->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (278)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (279))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (279))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (279)) COMMA_SOURCE_FILE_AT_LINE (279))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (279)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_9637->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (281))))._operator_concat (GGS_string (true, ") too large for BRA instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (281)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@ipic_JSR.checkRelativeBranch'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_JSR__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_JSR * operand_11235,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11235 != NULL) {
    switch (operand_11235->mKind.enumValue ()) {
    case GGS_jumpInstructionKind::enum_ipicRelative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_11562 = var_cas_inRoutineSymbolTable ;
      if (_temp_11562._isBuilt ()) {
        _temp_11562 (HERE)->method_searchKey (_inLexique, operand_11235->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (300)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (301))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (301))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (301)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (303)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (304))) ;
          var_cas_ioListFileContents.writeString (":  JSR with RCALL overflow, converted to JSR with CALL\n") ;
        }
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_JSR ::constructor_new (_inLexique, operand_11235->mInstructionLocation, operand_11235->mTargetLabel, GGS_jumpInstructionKind::constructor_ipicAbsolute (_inLexique COMMA_HERE) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (312)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_ipicAbsolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::enum_relative:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_12336 = var_cas_inRoutineSymbolTable ;
      if (_temp_12336._isBuilt ()) {
        _temp_12336 (HERE)->method_searchKey (_inLexique, operand_11235->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (317)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (318))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (318))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (318)) COMMA_SOURCE_FILE_AT_LINE (318))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (318)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        operand_11235->mInstructionLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (320))))._operator_concat (GGS_string (true, ") too large for RCALL instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (320)) ;
      }
      }
      break ;
    case GGS_jumpInstructionKind::enum_absolute:
      {
      }
      break ;
    case GGS_jumpInstructionKind::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.checkRelativeBranch'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_12843,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */,
                                GGS_string & /* var_cas_ioListFileContents */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12843 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTableForConvertingRelatives  _temp_13157 = var_cas_inRoutineSymbolTable ;
    if (_temp_13157._isBuilt ()) {
      _temp_13157 (HERE)->method_searchKey (_inLexique, operand_12843->mLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (337)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_12843->mLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_12843->mLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (340))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (341))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_computed_retlw.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_13591,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13591 != NULL) {
    if ((operand_13591->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_13902 = var_cas_inRoutineSymbolTable ;
      if (_temp_13902._isBuilt ()) {
        _temp_13902 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (357)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (358))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (358))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (358)) COMMA_SOURCE_FILE_AT_LINE (358))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (358)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (361)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (362))) ;
          var_cas_ioListFileContents.writeString (":  COMPUTED RETLW with RCALL overflow, converted to COMPUTED RETLW with CALL\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_retlw ::constructor_new (_inLexique, operand_13591->mInstructionLocation, operand_13591->mLiteralValues, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (369)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_bra.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_14777,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14777 != NULL) {
    if ((operand_14777->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_15088 = var_cas_inRoutineSymbolTable ;
      if (_temp_15088._isBuilt ()) {
        _temp_15088 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (386)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (387))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (387))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (387)) COMMA_SOURCE_FILE_AT_LINE (387))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (387)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (390)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (391))) ;
          var_cas_ioListFileContents.writeString (":  COMPUTED BRA with RCALL overflow, converted to COMPUTED BRA with CALL\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_bra ::constructor_new (_inLexique, operand_14777->mInstructionLocation, operand_14777->mTargetLabels, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (398)) ;
      }
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_15859 (operand_14777->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_15859 = NULL ;
      while (((operand_15859 = enumerator_15859.nextObject ()))) {
        macroValidPointer (operand_15859) ;
        GGS_uint  var_cas_targetAddress ;
        const GGS_symbolTableForConvertingRelatives  _temp_15928 = var_cas_inRoutineSymbolTable ;
        if (_temp_15928._isBuilt ()) {
          _temp_15928 (HERE)->method_searchKey (_inLexique, operand_15859->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (404)) ;
        }
        GGS_sint  var_cas_displacement ;
        var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (405))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (405))._substract_operation (_inLexique, var_cas_address.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (405)) COMMA_SOURCE_FILE_AT_LINE (405))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (405)) ;
        if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
          operand_15859->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "displacement ("))._operator_concat (var_cas_displacement.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (407))))._operator_concat (GGS_string (true, ") too large for BRA instruction (limited to [-1024, 1023])")) COMMA_SOURCE_FILE_AT_LINE (407)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (409)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_computed_goto.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_16431,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex,
                                GGS_string & var_cas_ioListFileContents
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16431 != NULL) {
    if ((operand_16431->mUsesRCALL).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_16742 = var_cas_inRoutineSymbolTable ;
      if (_temp_16742._isBuilt ()) {
        _temp_16742 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (426))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (426))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (426)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (429)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("line ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_inIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (430))) ;
          var_cas_ioListFileContents.writeString (":  COMPUTED GOTO with RCALL overflow, converted to COMPUTED GOTO with CALL\n") ;
        }
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_goto ::constructor_new (_inLexique, operand_16431->mInstructionLocation, operand_16431->mTargetLabels, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (437)) ;
      }
    }
    {
      GGS_lstringlist::cEnumerator enumerator_17481 (operand_16431->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_17481 = NULL ;
      while (((operand_17481 = enumerator_17481.nextObject ()))) {
        macroValidPointer (operand_17481) ;
        GGS_uint  var_cas_targetAddress ;
        const GGS_symbolTableForConvertingRelatives  _temp_17550 = var_cas_inRoutineSymbolTable ;
        if (_temp_17550._isBuilt ()) {
          _temp_17550 (HERE)->method_searchKey (_inLexique, operand_17481->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (442)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of routine "convertRelativeBranchsToAbsoluteWhenNeeded"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_convertRelativeBranchsToAbsoluteWhenNeeded (C_Compiler & _inLexique,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                GGS_string & var_cas_ioListFileContents COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_convertRelativeBranchsToAbsoluteWhenNeeded at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (456)))).isBuiltAndTrue ()) {
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (457))) ;
    var_cas_ioListFileContents.writeString ("\n") ;
    var_cas_ioListFileContents.writeString ("*") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "CONVERT RELATIVES").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (458))) ;
    var_cas_ioListFileContents.writeString ("*\n") ;
    var_cas_ioListFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (459))) ;
    var_cas_ioListFileContents.writeString ("\n"
      "\n") ;
  }
  GGS_bool var_cas_relativeBranchOverflow ;
  var_cas_relativeBranchOverflow = GGS_bool (true, true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (true, 0U) ;
  GGS_uint _variant_20170 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (463)) ;
  GGS_bool _condition_20170 (_variant_20170._isBuilt (), true) ;
  while (_condition_20170.isBuiltAndTrue ()) {
    _condition_20170 = var_cas_relativeBranchOverflow ;
    if (_condition_20170.isBuiltAndTrue ()) {
      if (_variant_20170.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (494)) ;
        _condition_20170 = GGS_bool (true, false) ;
      }else{
        _variant_20170._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_relativeBranchOverflow = GGS_bool (true, false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (467)) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (468)))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("Pass ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_iteration.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (469))) ;
          var_cas_ioListFileContents.writeString (":\n") ;
        }
        GGS_symbolTableForConvertingRelatives  var_cas_symbolTable ;
        var_cas_symbolTable = GGS_symbolTableForConvertingRelatives ::constructor_emptyMap (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (true, 0U) ;
        {
          GGS_ipic_instructionList::cEnumerator enumerator_18973 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_18973 = NULL ;
          while (((operand_18973 = enumerator_18973.nextObject ()))) {
            macroValidPointer (operand_18973) ;
            const GGS_ipic_instruction  _temp_19023 = operand_18973->mInstruction ;
            if (_temp_19023._isBuilt ()) {
              typeCategoryMethod__ipic_instruction__defineLabelAtAddress _method = findCategoryMethod__ipic_instruction__defineLabelAtAddress (_temp_19023._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_19023 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (475)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_lastAddressForFirstPass ;
        var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (true, 0U) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic_instructionList::cEnumerator enumerator_19251 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_19251 = NULL ;
          while (((operand_19251 = enumerator_19251.nextObject ()))) {
            macroValidPointer (operand_19251) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_ipic_instruction  _temp_19337 = operand_19251->mInstruction ;
            if (_temp_19337._isBuilt ()) {
              _temp_19337 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (482)) ;
            }
            const GGS_ipic_instruction  _temp_19397 = operand_19251->mInstruction ;
            if (_temp_19397._isBuilt ()) {
              typeCategoryMethod__ipic_instruction__checkRelativeBranch _method = findCategoryMethod__ipic_instruction__checkRelativeBranch (_temp_19397._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_19397 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_relativeBranchOverflow, var_cas_ioGeneratedInstructionList, var_cas_idx, var_cas_ioListFileContents COMMA_SOURCE_FILE_AT_LINE (483)) ;
              }
            }
            var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (484)) ;
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (487))))._operator_concat (GGS_string (true, " value when checking relative branches, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (489))))._operator_concat (GGS_string (true, " value when computing routine map")) COMMA_SOURCE_FILE_AT_LINE (489)) ;
        }
        if ((((var_cas_relativeBranchOverflow)._operator_not ())._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (491))))).isBuiltAndTrue ()) {
          var_cas_ioListFileContents.writeString ("  No relative to convert\n"
            "\n") ;
          var_cas_ioListFileContents.writeString ("Program size: ") ;
          var_cas_ioListFileContents._dotAssign_operation (var_cas_currentAddress.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (493))) ;
          var_cas_ioListFileContents.writeString (" bytes\n"
            "\n") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_convertRelativeBranchsToAbsoluteWhenNeeded\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_convert_relatives (void) {
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress (category_method__ipic_instruction__defineLabelAtAddress, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_pseudo_LABEL__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_pseudo_ORG__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_actualInstruction__defineLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_pseudo_ORG__checkRelativeBranch, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_conditionalBranch__checkRelativeBranch, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_jump_test_register__checkRelativeBranch, gClassInfoFor__ipic_jump_test_register.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_registerComparisonCondition__checkRelativeBranch, gClassInfoFor__ipic_registerComparisonCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_incDecRegisterInCondition__checkRelativeBranch, gClassInfoFor__ipic_incDecRegisterInCondition.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_JUMP__checkRelativeBranch, gClassInfoFor__ipic_JUMP.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_JSR__checkRelativeBranch, gClassInfoFor__ipic_JSR.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_pseudo_LABEL__checkRelativeBranch, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_retlw__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_bra__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_goto__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_convert_relatives (prologueRoutineFor_piccolo_convert_relatives,
                                   NULL) ;

//---------------------------------------------------------------------------*

