//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'piccolo_convert_relatives.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 24th, 2008, at 22h12'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_convert_relatives.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_convert_relatives.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'e_symbolTableForConvertingRelatives'                 *
//                                                                           *
//---------------------------------------------------------------------------*

e_symbolTableForConvertingRelatives::e_symbolTableForConvertingRelatives (void) :
mRoutineAddress () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//              class map '@symbolTableForConvertingRelatives'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_symbolTableForConvertingRelatives::
elementOf_GGS_symbolTableForConvertingRelatives (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_symbolTableForConvertingRelatives & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_symbolTableForConvertingRelatives::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_symbolTableForConvertingRelatives::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_symbolTableForConvertingRelatives * _p = dynamic_cast <const elementOf_GGS_symbolTableForConvertingRelatives *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_symbolTableForConvertingRelatives::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_symbolTableForConvertingRelatives * info = (e_symbolTableForConvertingRelatives *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_symbolTableForConvertingRelatives *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_symbolTableForConvertingRelatives * info = (e_symbolTableForConvertingRelatives *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForConvertingRelatives result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_symbolTableForConvertingRelatives info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForConvertingRelatives::
_operator_isEqual (const GGS_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_symbolTableForConvertingRelatives::
_operator_isNotEqual (const GGS_symbolTableForConvertingRelatives & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_symbolTableForConvertingRelatives info  ;
    info.mRoutineAddress = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' label is not declared",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_symbolTableForConvertingRelatives::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' label is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_symbolTableForConvertingRelatives & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_symbolTableForConvertingRelatives result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_symbolTableForConvertingRelatives GGS_symbolTableForConvertingRelatives::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_symbolTableForConvertingRelatives result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_symbolTableForConvertingRelatives::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @symbolTableForConvertingRelatives " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_symbolTableForConvertingRelatives::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_instruction.defineLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction__defineLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_instruction * operand_813,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & /* var_cas_ioAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_813 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.defineLabelAtAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__defineLabelAtAddress> gDispatchTableFor__ipic_instruction__defineLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__defineLabelAtAddress (typeCategoryMethod__ipic_instruction__defineLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__defineLabelAtAddress
findCategoryMethod__ipic_instruction__defineLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__defineLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__defineLabelAtAddress.count ()) {
    result = gDispatchTableFor__ipic_instruction__defineLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__defineLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__defineLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@ipic_pseudo_LABEL.defineLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_1059,
                                GGS_symbolTableForConvertingRelatives  & var_cas_ioRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1059 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1059->mTargetLabel, var_cas_ioAddress COMMA_SOURCE_FILE_AT_LINE (31)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_ORG.defineLabelAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__defineLabelAtAddress (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_1353,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1353 != NULL) {
    var_cas_ioAddress = operand_1353->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_actualInstruction.defineLabelAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_actualInstruction__defineLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_ipic_actualInstruction * operand_1622,
                                GGS_symbolTableForConvertingRelatives  & /* var_cas_ioRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1622 != NULL) {
    GGS_uint  var_cas_instructionLength ;
    operand_1622->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (52)) ;
    var_cas_ioAddress = var_cas_ioAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (53)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@ipic_instruction.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__ipic_instruction__checkRelativeBranch> gDispatchTableFor__ipic_instruction__checkRelativeBranch ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__ipic_instruction__checkRelativeBranch (typeCategoryMethod__ipic_instruction__checkRelativeBranch inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__ipic_instruction__checkRelativeBranch.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__ipic_instruction__checkRelativeBranch
findCategoryMethod__ipic_instruction__checkRelativeBranch (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__ipic_instruction__checkRelativeBranch result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__ipic_instruction__checkRelativeBranch.count ()) {
    result = gDispatchTableFor__ipic_instruction__checkRelativeBranch (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__ipic_instruction__checkRelativeBranch (superClassPtr) ;
      gDispatchTableFor__ipic_instruction__checkRelativeBranch.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@ipic_pseudo_ORG.checkRelativeBranch'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_ORG__checkRelativeBranch (C_Compiler &,
                                const cPtr_ipic_pseudo_ORG * operand_2657,
                                const GGS_symbolTableForConvertingRelatives   /* var_cas_inRoutineSymbolTable */,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2657 != NULL) {
    var_cas_ioAddress = operand_2657->mOrigin ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@ipic_instruction_conditionalBranch.checkRelativeBranch'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_conditionalBranch__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_conditionalBranch * operand_3064,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3064 != NULL) {
    switch (operand_3064->mBranchMode.enumValue ()) {
    case GGS_condionalBranchMode::enum_native:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_3360 = var_cas_inRoutineSymbolTable ;
      if (_temp_3360._isBuilt ()) {
        _temp_3360 (HERE)->method_searchKey (_inLexique, operand_3064->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (96))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)) COMMA_SOURCE_FILE_AT_LINE (96))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (96)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_3064->mInstructionLocation, GGS_condionalBranchMode::constructor_usesBRA (_inLexique COMMA_HERE), operand_3064->mConditionalBranch, operand_3064->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_usesBRA:
      {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_4036 = var_cas_inRoutineSymbolTable ;
      if (_temp_4036._isBuilt ()) {
        _temp_4036 (HERE)->method_searchKey (_inLexique, operand_3064->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (110)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (111))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (111))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (111)) COMMA_SOURCE_FILE_AT_LINE (111))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (111)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, operand_3064->mInstructionLocation, GGS_condionalBranchMode::constructor_usesGOTO (_inLexique COMMA_HERE), operand_3064->mConditionalBranch, operand_3064->mTargetLabel COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (121)) ;
      }
      }
      break ;
    case GGS_condionalBranchMode::enum_usesGOTO:
      {
      }
      break ;
    case GGS_condionalBranchMode::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ipic_instruction_BRA.checkRelativeBranch'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_BRA__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_BRA * operand_4841,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4841 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTableForConvertingRelatives  _temp_5096 = var_cas_inRoutineSymbolTable ;
    if (_temp_5096._isBuilt ()) {
      _temp_5096 (HERE)->method_searchKey (_inLexique, operand_4841->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (137)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (138))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (138))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (138)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
      GGS_ipic_actualInstruction  var_cas_instruction ;
      var_cas_instruction = GGS_ipic_instruction_GOTO ::constructor_new (_inLexique, operand_4841->mInstructionLocation, operand_4841->mTargetLabel COMMA_HERE) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (146)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ipic_instruction_RCALL.checkRelativeBranch'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_RCALL__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_RCALL * operand_5724,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5724 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTableForConvertingRelatives  _temp_5979 = var_cas_inRoutineSymbolTable ;
    if (_temp_5979._isBuilt ()) {
      _temp_5979 (HERE)->method_searchKey (_inLexique, operand_5724->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (161))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (161))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)) COMMA_SOURCE_FILE_AT_LINE (161))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (161)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
      GGS_ipic_actualInstruction  var_cas_instruction ;
      var_cas_instruction = GGS_ipic_instruction_CALL ::constructor_new (_inLexique, operand_5724->mInstructionLocation, operand_5724->mTargetLabel COMMA_HERE) ;
      var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (169)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@ipic_pseudo_LABEL.checkRelativeBranch'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_pseudo_LABEL__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_pseudo_LABEL * operand_6604,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & /* var_cas_ioRelativeBranchOverflow */,
                                GGS_ipic_instructionList  & /* var_cas_ioGeneratedInstructionList */,
                                const GGS_uint   /* var_cas_inIndex */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6604 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    const GGS_symbolTableForConvertingRelatives  _temp_6880 = var_cas_inRoutineSymbolTable ;
    if (_temp_6880._isBuilt ()) {
      _temp_6880 (HERE)->method_searchKey (_inLexique, operand_6604->mTargetLabel, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (183)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_ioAddress)).isBuiltAndTrue ()) {
      operand_6604->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_6604->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_ioAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (187))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (187)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_computed_retlw.checkRelativeBranch'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_retlw__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_retlw * operand_7332,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7332 != NULL) {
    if ((operand_7332->mUsesRelativeCall).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_7619 = var_cas_inRoutineSymbolTable ;
      if (_temp_7619._isBuilt ()) {
        _temp_7619 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (202)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (203))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) COMMA_SOURCE_FILE_AT_LINE (203))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (203)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_retlw ::constructor_new (_inLexique, operand_7332->mInstructionLocation, operand_7332->mLiteralValues, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@ipic_instruction_computed_bra.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_bra__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_bra * operand_8362,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8362 != NULL) {
    if ((operand_8362->mUsesRelativeCall).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_8649 = var_cas_inRoutineSymbolTable ;
      if (_temp_8649._isBuilt ()) {
        _temp_8649 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (228)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (229))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (229))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (229)) COMMA_SOURCE_FILE_AT_LINE (229))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (229)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_bra ::constructor_new (_inLexique, operand_8362->mInstructionLocation, operand_8362->mTargetLabels, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (238)) ;
      }
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_ioAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (241)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_9288 (operand_8362->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_9288 = NULL ;
      while (((operand_9288 = enumerator_9288.nextObject ()))) {
        macroValidPointer (operand_9288) ;
        GGS_uint  var_cas_targetAddress ;
        const GGS_symbolTableForConvertingRelatives  _temp_9357 = var_cas_inRoutineSymbolTable ;
        if (_temp_9357._isBuilt ()) {
          _temp_9357 (HERE)->method_searchKey (_inLexique, operand_9288->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (244)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (246)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@ipic_instruction_computed_goto.checkRelativeBranch'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ipic_instruction_computed_goto__checkRelativeBranch (C_Compiler & _inLexique,
                                const cPtr_ipic_instruction_computed_goto * operand_9582,
                                const GGS_symbolTableForConvertingRelatives   var_cas_inRoutineSymbolTable,
                                GGS_uint  & var_cas_ioAddress,
                                GGS_bool & var_cas_ioRelativeBranchOverflow,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList,
                                const GGS_uint   var_cas_inIndex
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9582 != NULL) {
    if ((operand_9582->mUsesRelativeCall).isBuiltAndTrue ()) {
      GGS_uint  var_cas_targetAddress ;
      const GGS_symbolTableForConvertingRelatives  _temp_9869 = var_cas_inRoutineSymbolTable ;
      if (_temp_9869._isBuilt ()) {
        _temp_9869 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE), var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (261)) ;
      }
      GGS_sint  var_cas_displacement ;
      var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (262))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (262))._substract_operation (_inLexique, var_cas_ioAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (262)) COMMA_SOURCE_FILE_AT_LINE (262))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (262)) ;
      if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
        var_cas_ioRelativeBranchOverflow = GGS_bool (true, true) ;
        GGS_ipic_actualInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_ipic_instruction_computed_goto ::constructor_new (_inLexique, operand_9582->mInstructionLocation, operand_9582->mTargetLabels, GGS_bool (true, false) COMMA_HERE) ;
        var_cas_ioGeneratedInstructionList.modifier_setMInstructionAtIndex (_inLexique, var_cas_instruction, var_cas_inIndex COMMA_SOURCE_FILE_AT_LINE (271)) ;
      }
    }
    {
      GGS_lstringlist::cEnumerator enumerator_10476 (operand_9582->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_10476 = NULL ;
      while (((operand_10476 = enumerator_10476.nextObject ()))) {
        macroValidPointer (operand_10476) ;
        GGS_uint  var_cas_targetAddress ;
        const GGS_symbolTableForConvertingRelatives  _temp_10545 = var_cas_inRoutineSymbolTable ;
        if (_temp_10545._isBuilt ()) {
          _temp_10545 (HERE)->method_searchKey (_inLexique, operand_10476->mValue, var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (276)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of routine "convertRelativeBranchsToAbsoluteWhenNeeded"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_convertRelativeBranchsToAbsoluteWhenNeeded (C_Compiler & _inLexique,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_convertRelativeBranchsToAbsoluteWhenNeeded at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_relativeBranchOverflow ;
  var_cas_relativeBranchOverflow = GGS_bool (true, true) ;
  GGS_uint  var_cas_iteration ;
  var_cas_iteration = GGS_uint (true, 0U) ;
  GGS_uint _variant_12463 = var_cas_ioGeneratedInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (292)) ;
  GGS_bool _condition_12463 (_variant_12463._isBuilt (), true) ;
  while (_condition_12463.isBuiltAndTrue ()) {
    _condition_12463 = var_cas_relativeBranchOverflow ;
    if (_condition_12463.isBuiltAndTrue ()) {
      if (_variant_12463.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (317)) ;
        _condition_12463 = GGS_bool (true, false) ;
      }else{
        _variant_12463._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_relativeBranchOverflow = GGS_bool (true, false) ;
        var_cas_iteration._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
        GGS_symbolTableForConvertingRelatives  var_cas_symbolTable ;
        var_cas_symbolTable = GGS_symbolTableForConvertingRelatives ::constructor_emptyMap (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (true, 0U) ;
        {
          GGS_ipic_instructionList::cEnumerator enumerator_11561 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_11561 = NULL ;
          while (((operand_11561 = enumerator_11561.nextObject ()))) {
            macroValidPointer (operand_11561) ;
            const GGS_ipic_instruction  _temp_11611 = operand_11561->mInstruction ;
            if (_temp_11611._isBuilt ()) {
              typeCategoryMethod__ipic_instruction__defineLabelAtAddress _method = findCategoryMethod__ipic_instruction__defineLabelAtAddress (_temp_11611._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_11611 (HERE), var_cas_symbolTable, var_cas_currentAddress COMMA_SOURCE_FILE_AT_LINE (302)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_lastAddressForFirstPass ;
        var_cas_lastAddressForFirstPass = var_cas_currentAddress ;
        var_cas_currentAddress = GGS_uint (true, 0U) ;
        {
            GGS_uint var_cas_idx (true, 0) ;
          GGS_ipic_instructionList::cEnumerator enumerator_11839 (var_cas_ioGeneratedInstructionList, true) ;
          const GGS_ipic_instructionList::cElement * operand_11839 = NULL ;
          while (((operand_11839 = enumerator_11839.nextObject ()))) {
            macroValidPointer (operand_11839) ;
            GGS_uint  var_cas_instructionLength ;
            const GGS_ipic_instruction  _temp_11925 = operand_11839->mInstruction ;
            if (_temp_11925._isBuilt ()) {
              _temp_11925 (HERE)->method_instructionLength (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (309)) ;
            }
            const GGS_ipic_instruction  _temp_11985 = operand_11839->mInstruction ;
            if (_temp_11985._isBuilt ()) {
              typeCategoryMethod__ipic_instruction__checkRelativeBranch _method = findCategoryMethod__ipic_instruction__checkRelativeBranch (_temp_11985._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_11985 (HERE), var_cas_symbolTable, var_cas_currentAddress, var_cas_relativeBranchOverflow, var_cas_ioGeneratedInstructionList, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (310)) ;
              }
            }
            var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_instructionLength COMMA_SOURCE_FILE_AT_LINE (311)) ;
            var_cas_idx.mValue ++ ;
          }
        }
        if (((var_cas_lastAddressForFirstPass)._operator_isNotEqual (var_cas_currentAddress)).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (314))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_lastAddressForFirstPass.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (316))))._operator_concat (GGS_string (true, " value in first pass")) COMMA_SOURCE_FILE_AT_LINE (316)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_convertRelativeBranchsToAbsoluteWhenNeeded\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_convert_relatives (void) {
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress (category_method__ipic_instruction__defineLabelAtAddress, gClassInfoFor__ipic_instruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_pseudo_LABEL__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_pseudo_ORG__defineLabelAtAddress, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__defineLabelAtAddress ((typeCategoryMethod__ipic_instruction__defineLabelAtAddress) category_method__ipic_actualInstruction__defineLabelAtAddress, gClassInfoFor__ipic_actualInstruction.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_pseudo_ORG__checkRelativeBranch, gClassInfoFor__ipic_pseudo_ORG.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_conditionalBranch__checkRelativeBranch, gClassInfoFor__ipic_instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_BRA__checkRelativeBranch, gClassInfoFor__ipic_instruction_BRA.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_RCALL__checkRelativeBranch, gClassInfoFor__ipic_instruction_RCALL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_pseudo_LABEL__checkRelativeBranch, gClassInfoFor__ipic_pseudo_LABEL.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_retlw__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_bra__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__ipic_instruction__checkRelativeBranch ((typeCategoryMethod__ipic_instruction__checkRelativeBranch) category_method__ipic_instruction_computed_goto__checkRelativeBranch, gClassInfoFor__ipic_instruction_computed_goto.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_convert_relatives (prologueRoutineFor_piccolo_convert_relatives,
                                   NULL) ;

//---------------------------------------------------------------------------*

