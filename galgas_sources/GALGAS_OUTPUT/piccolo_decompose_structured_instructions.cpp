//---------------------------------------------------------------------------*
//                                                                           *
//           File 'piccolo_decompose_structured_instructions.cpp'            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 23th, 2008, at 20h2'54"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_decompose_structured_instructions.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_decompose_structured_instructions.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction.decomposeComplexInstruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__decomposeComplexInstruction (C_Compiler &,
                                const cPtr_instruction * operand_362,
                                GGS_uint  & /* var_cas_ioLocalLabelIndex */,
                                GGS_instructionList  & /* var_cas_ioGeneratedInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_362 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@instruction.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__decomposeComplexInstruction> gDispatchTableFor__instruction__decomposeComplexInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__decomposeComplexInstruction (typeCategoryMethod__instruction__decomposeComplexInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__decomposeComplexInstruction
findCategoryMethod__instruction__decomposeComplexInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__decomposeComplexInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__decomposeComplexInstruction.count ()) {
    result = gDispatchTableFor__instruction__decomposeComplexInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__decomposeComplexInstruction (superClassPtr) ;
      gDispatchTableFor__instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_FOREVER.decomposeComplexInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_589,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_589 != NULL) {
    GGS_instruction  automatic_var_0 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (21)) ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_589->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_938 (operand_589->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_938 = NULL ;
      while (((operand_938 = enumerator_938.nextObject ()))) {
        macroValidPointer (operand_938) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_938->mInstruction) ;
        const GGS_instruction  _temp_1026 = operand_938->mInstruction ;
        if (_temp_1026._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_1026._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_1026 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (27)) ;
          }
        }
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, operand_589->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_589->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_IF_FA_SEMI_COLON.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_1365,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1365 != NULL) {
    GGS_instruction  automatic_var_1 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (38)) ;
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_1365->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FA ::constructor_new (_inLexique, operand_1365->mInstructionLocation, var_cas_baseCode, operand_1365->mRegisterExpression COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (operand_1365->mInstruction) ;
    const GGS_instruction  _temp_2068 = operand_1365->mInstruction ;
    if (_temp_2068._isBuilt ()) {
      typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_2068._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2068 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (53)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_IF_BitTest.decomposeComplexInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_2259,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2259 != NULL) {
    GGS_instruction  automatic_var_2 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (62)) ;
    GGS_bit_oriented_op var_cas_baseCode ;
    if ((operand_2259->mSkipIfSet).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FBA ::constructor_new (_inLexique, operand_2259->mInstructionLocation, var_cas_baseCode, operand_2259->mRegisterExpression, operand_2259->mBitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (operand_2259->mInstruction) ;
    const GGS_instruction  _temp_2795 = operand_2259->mInstruction ;
    if (_temp_2795._isBuilt ()) {
      typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_2795._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2795 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (77)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@structured_if_condition.decomposeIFcondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__structured_if_condition__decomposeIFcondition> gDispatchTableFor__structured_if_condition__decomposeIFcondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__decomposeIFcondition (typeCategoryMethod__structured_if_condition__decomposeIFcondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__structured_if_condition__decomposeIFcondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__decomposeIFcondition
findCategoryMethod__structured_if_condition__decomposeIFcondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__structured_if_condition__decomposeIFcondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__structured_if_condition__decomposeIFcondition.count ()) {
    result = gDispatchTableFor__structured_if_condition__decomposeIFcondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__structured_if_condition__decomposeIFcondition (superClassPtr) ;
      gDispatchTableFor__structured_if_condition__decomposeIFcondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bcc_in_structured_if_condition.decomposeIFcondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_3225,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3225 != NULL) {
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), operand_3225->mCondition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.decomposeIFcondition' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_3691,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3691 != NULL) {
    GGS_bit_oriented_op var_cas_op ;
    if ((operand_3691->mBTFSSinstruction).isBuiltAndTrue ()) {
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FBA ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_op, operand_3691->mRegisterExpression, operand_3691->mBitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_structured_if.decomposeComplexInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_4353,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4353 != NULL) {
    GGS_instruction  automatic_var_3 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (132)) ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
    GGS_string var_cas_label1 ;
    var_cas_label1 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
    const GGS_structured_if_condition  _temp_4718 = operand_4353->mIfCondition ;
    if (_temp_4718._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__decomposeIFcondition _method = findCategoryMethod__structured_if_condition__decomposeIFcondition (_temp_4718._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4718 (HERE), operand_4353->mInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (136)) ;
      }
    }
    {
      GGS_instructionList::cEnumerator enumerator_4836 (operand_4353->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_4836 = NULL ;
      while (((operand_4836 = enumerator_4836.nextObject ()))) {
        macroValidPointer (operand_4836) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_4836->mInstruction) ;
        const GGS_instruction  _temp_4928 = operand_4836->mInstruction ;
        if (_temp_4928._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_4928._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_4928 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (140)) ;
          }
        }
      }
    }
    if (((operand_4353->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, operand_4353->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4353->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_4353->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_5343 (operand_4353->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_5343 = NULL ;
      while (((operand_5343 = enumerator_5343.nextObject ()))) {
        macroValidPointer (operand_5343) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_5343->mInstruction) ;
        const GGS_instruction  _temp_5435 = operand_5343->mInstruction ;
        if (_temp_5435._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_5435._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_5435 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (149)) ;
          }
        }
      }
    }
    if (((operand_4353->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (151)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4353->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_do_while.decomposeComplexInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_5798,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5798 != NULL) {
    GGS_instruction  automatic_var_4 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (163)) ;
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (165))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_5798->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_6214 (operand_5798->mRepeatedInstructionList, true) ;
      const GGS_instructionList::cElement * operand_6214 = NULL ;
      while (((operand_6214 = enumerator_6214.nextObject ()))) {
        macroValidPointer (operand_6214) ;
        var_cas_ioGeneratedInstructionList._addAssign_operation (operand_6214->mInstruction) ;
        const GGS_instruction  _temp_6310 = operand_6214->mInstruction ;
        if (_temp_6310._isBuilt ()) {
          typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_6310._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_6310 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (171)) ;
          }
        }
      }
    }
    const GGS_structured_if_condition  _temp_6450 = operand_5798->mWhileCondition ;
    if (_temp_6450._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__decomposeIFcondition _method = findCategoryMethod__structured_if_condition__decomposeIFcondition (_temp_6450._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6450 (HERE), operand_5798->mInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_IF_IncDec.decomposeComplexInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_6643,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6643 != NULL) {
    GGS_instruction  automatic_var_5 ;
    var_cas_ioGeneratedInstructionList.modifier_popLast (_inLexique, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (184)) ;
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_6643->mIncrement)._operator_and (operand_6643->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_6643->mIncrement)._operator_and ((operand_6643->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_6643->mIncrement)._operator_not ())._operator_and (operand_6643->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, operand_6643->mInstructionLocation, var_cas_baseCode, operand_6643->mRegisterExpression, operand_6643->m_W_isDestination COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (operand_6643->mInstruction) ;
    const GGS_instruction  _temp_7439 = operand_6643->mInstruction ;
    if (_temp_7439._isBuilt ()) {
      typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_7439._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7439 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (204)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "buildAssemblyInstructionList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyInstructionList (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_instructionList  & var_cas_outGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outGeneratedInstructionList = GGS_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_GOTO ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  if (((var_cas_inHasLowInterrupt)._operator_and (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_BRA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_8510 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_8510 = NULL ;
      while (((operand_8510 = enumerator_8510.nextObject ()))) {
        macroValidPointer (operand_8510) ;
        if (((operand_8510->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (229)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_8618 (operand_8510->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_8618 = NULL ;
            while (((operand_8618 = enumerator_8618.nextObject ()))) {
              macroValidPointer (operand_8618) ;
              var_cas_outGeneratedInstructionList._addAssign_operation (operand_8618->mInstruction) ;
              const GGS_instruction  _temp_8719 = operand_8618->mInstruction ;
              if (_temp_8719._isBuilt ()) {
                typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_8719._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_8719 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (232)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_9284 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (246)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_9284 = NULL ;
      while (((operand_9284 = enumerator_9284.nextObject ()))) {
        macroValidPointer (operand_9284) ;
        if (((operand_9284->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (247)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_9393 (operand_9284->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_9393 = NULL ;
            while (((operand_9393 = enumerator_9393.nextObject ()))) {
              macroValidPointer (operand_9393) ;
              var_cas_outGeneratedInstructionList._addAssign_operation (operand_9393->mInstruction) ;
              const GGS_instruction  _temp_9494 = operand_9393->mInstruction ;
              if (_temp_9494._isBuilt ()) {
                typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_9494._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_9494 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (250)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_9791 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (258)), true) ;
    const GGS_routineDefinitionList::cElement * operand_9791 = NULL ;
    while (((operand_9791 = enumerator_9791.nextObject ()))) {
      macroValidPointer (operand_9791) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, operand_9791->mRoutineName COMMA_HERE)) ;
      {
        GGS_instructionList::cEnumerator enumerator_9918 (operand_9791->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_9918 = NULL ;
        while (((operand_9918 = enumerator_9918.nextObject ()))) {
          macroValidPointer (operand_9918) ;
          var_cas_outGeneratedInstructionList._addAssign_operation (operand_9918->mInstruction) ;
          const GGS_instruction  _temp_10011 = operand_9918->mInstruction ;
          if (_temp_10011._isBuilt ()) {
            typeCategoryMethod__instruction__decomposeComplexInstruction _method = findCategoryMethod__instruction__decomposeComplexInstruction (_temp_10011._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_10011 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (262)) ;
            }
          }
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (266))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (275))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_decompose_structured_instructions (void) {
 enterCategoryMethod__instruction__decomposeComplexInstruction (category_method__instruction__decomposeComplexInstruction, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_FOREVER__decomposeComplexInstruction, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_IF_BitTest__decomposeComplexInstruction, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__structured_if_condition__decomposeIFcondition ((typeCategoryMethod__structured_if_condition__decomposeIFcondition) category_method__bcc_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__structured_if_condition__decomposeIFcondition ((typeCategoryMethod__structured_if_condition__decomposeIFcondition) category_method__bitTest_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_structured_if__decomposeComplexInstruction, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_do_while__decomposeComplexInstruction, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__instruction__decomposeComplexInstruction ((typeCategoryMethod__instruction__decomposeComplexInstruction) category_method__instruction_IF_IncDec__decomposeComplexInstruction, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_decompose_structured_instructions (prologueRoutineFor_piccolo_decompose_structured_instructions,
                                   NULL) ;

//---------------------------------------------------------------------------*

