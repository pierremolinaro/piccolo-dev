//---------------------------------------------------------------------------*
//                                                                           *
//           File 'piccolo_decompose_structured_instructions.cpp'            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 24th, 2008, at 22h14'12"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_decompose_structured_instructions.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_decompose_structured_instructions.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@piccolo_instruction.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction> gDispatchTableFor__piccolo_instruction__decomposeComplexInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction (typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__piccolo_instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction
findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__piccolo_instruction__decomposeComplexInstruction.count ()) {
    result = gDispatchTableFor__piccolo_instruction__decomposeComplexInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (superClassPtr) ;
      gDispatchTableFor__piccolo_instruction__decomposeComplexInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_FOREVER.decomposeComplexInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_598,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_598 != NULL) {
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (20))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_598->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_911 (operand_598->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_911 = NULL ;
      while (((operand_911 = enumerator_911.nextObject ()))) {
        macroValidPointer (operand_911) ;
        const GGS_piccolo_instruction  _temp_949 = operand_911->mInstruction ;
        if (_temp_949._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_949._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_949 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (24)) ;
          }
        }
      }
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_598->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_598->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@instruction_IF_FA_SEMI_COLON.decomposeComplexInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_FA_SEMI_COLON * operand_1293,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1293 != NULL) {
    GGS_FA_instruction_base_code var_cas_baseCode ;
    switch (operand_1293->mOpCode.enumValue ()) {
    case GGS_if_semi_colon_op::enum_CPFSEQ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSEQ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSGT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSGT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_CPFSLT:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_CPFSLT (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::enum_TSTFSZ:
      {
      var_cas_baseCode = GGS_FA_instruction_base_code::constructor_TSTFSZ (_inLexique COMMA_HERE) ;
      }
      break ;
    case GGS_if_semi_colon_op::kNotBuilt:
      break ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FA ::constructor_new (_inLexique, operand_1293->mInstructionLocation, var_cas_baseCode, operand_1293->mRegisterExpression COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_1912 = operand_1293->mInstruction ;
    if (_temp_1912._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_1912._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_1912 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (48)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_IF_BitTest.decomposeComplexInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_2103,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2103 != NULL) {
    GGS_bit_oriented_op var_cas_baseCode ;
    if ((operand_2103->mSkipIfSet).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, operand_2103->mInstructionLocation, var_cas_baseCode, operand_2103->mRegisterExpression, operand_2103->mBitNumber COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_2555 = operand_2103->mInstruction ;
    if (_temp_2555._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_2555._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_2555 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@conditionExpression.decomposeIFcondition'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__conditionExpression__decomposeIFcondition> gDispatchTableFor__conditionExpression__decomposeIFcondition ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__conditionExpression__decomposeIFcondition (typeCategoryMethod__conditionExpression__decomposeIFcondition inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__conditionExpression__decomposeIFcondition.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__conditionExpression__decomposeIFcondition
findCategoryMethod__conditionExpression__decomposeIFcondition (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__conditionExpression__decomposeIFcondition result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__conditionExpression__decomposeIFcondition.count ()) {
    result = gDispatchTableFor__conditionExpression__decomposeIFcondition (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__conditionExpression__decomposeIFcondition (superClassPtr) ;
      gDispatchTableFor__conditionExpression__decomposeIFcondition.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bcc_in_structured_if_condition.decomposeIFcondition'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_3018,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3018 != NULL) {
    GGS_conditional_branch var_cas_condition ;
    if ((var_cas_inComplementaryBranch).isBuiltAndTrue ()) {
      ::routine_getComplementaryBcc (_inLexique,  operand_3018->mCondition,  var_cas_condition COMMA_SOURCE_FILE_AT_LINE (91)) ;
    }else{
      var_cas_condition = operand_3018->mCondition ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_conditionalBranch ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_condionalBranchMode::constructor_native (_inLexique COMMA_HERE), var_cas_condition, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@bitTest_in_structured_if_condition.decomposeIFcondition' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__decomposeIFcondition (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_3688,
                                const GGS_bool  var_cas_inComplementaryBranch,
                                const GGS_location   var_cas_inInstructionLocation,
                                const GGS_string  var_cas_inTargetLabel,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3688 != NULL) {
    GGS_bit_oriented_op var_cas_op ;
    if (((operand_3688->mBTFSSinstruction)._operator_xor (var_cas_inComplementaryBranch)).isBuiltAndTrue ()) {
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSS (_inLexique COMMA_HERE) ;
    }else{
      var_cas_op = GGS_bit_oriented_op::constructor_BTFSC (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FBA ::constructor_new (_inLexique, var_cas_inInstructionLocation, var_cas_op, operand_3688->mRegisterExpression, operand_3688->mBitNumber COMMA_HERE)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, var_cas_inInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_inTargetLabel, var_cas_inInstructionLocation COMMA_HERE) COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@instruction_structured_if.decomposeComplexInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_4421,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4421 != NULL) {
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
    GGS_string var_cas_label1 ;
    var_cas_label1 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
    const GGS_conditionExpression  _temp_4745 = operand_4421->mIfCondition ;
    if (_temp_4745._isBuilt ()) {
      typeCategoryMethod__conditionExpression__decomposeIFcondition _method = findCategoryMethod__conditionExpression__decomposeIFcondition (_temp_4745._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_4745 (HERE), GGS_bool (true, true), operand_4421->mInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (137)) ;
      }
    }
    {
      GGS_instructionList::cEnumerator enumerator_4869 (operand_4421->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_4869 = NULL ;
      while (((operand_4869 = enumerator_4869.nextObject ()))) {
        macroValidPointer (operand_4869) ;
        const GGS_piccolo_instruction  _temp_4911 = operand_4869->mInstruction ;
        if (_temp_4911._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_4911._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_4911 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (140)) ;
          }
        }
      }
    }
    if (((operand_4421->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, operand_4421->mInstructionLocation, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4421->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_4421->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_5336 (operand_4421->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_5336 = NULL ;
      while (((operand_5336 = enumerator_5336.nextObject ()))) {
        macroValidPointer (operand_5336) ;
        const GGS_piccolo_instruction  _temp_5378 = operand_5336->mInstruction ;
        if (_temp_5378._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_5378._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_5378 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (148)) ;
          }
        }
      }
    }
    if (((operand_4421->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (150)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label1, operand_4421->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_do_while.decomposeComplexInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_do_while__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_do_while * operand_5746,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5746 != NULL) {
    GGS_string var_cas_label0 ;
    var_cas_label0 = (GGS_string (true, "_label_"))._operator_concat (var_cas_ioLocalLabelIndex.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (163))) ;
    var_cas_ioLocalLabelIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ;
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_label0, operand_5746->mInstructionLocation COMMA_HERE) COMMA_HERE)) ;
    {
      GGS_instructionList::cEnumerator enumerator_6126 (operand_5746->mRepeatedInstructionList, true) ;
      const GGS_instructionList::cElement * operand_6126 = NULL ;
      while (((operand_6126 = enumerator_6126.nextObject ()))) {
        macroValidPointer (operand_6126) ;
        const GGS_piccolo_instruction  _temp_6172 = operand_6126->mInstruction ;
        if (_temp_6172._isBuilt ()) {
          typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_6172._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_6172 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (168)) ;
          }
        }
      }
    }
    const GGS_conditionExpression  _temp_6312 = operand_5746->mWhileCondition ;
    if (_temp_6312._isBuilt ()) {
      typeCategoryMethod__conditionExpression__decomposeIFcondition _method = findCategoryMethod__conditionExpression__decomposeIFcondition (_temp_6312._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6312 (HERE), GGS_bool (true, false), operand_5746->mInstructionLocation, var_cas_label0, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (171)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_IF_IncDec.decomposeComplexInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_IncDec__decomposeComplexInstruction (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_IncDec * operand_6512,
                                GGS_uint  & var_cas_ioLocalLabelIndex,
                                GGS_ipic_instructionList  & var_cas_ioGeneratedInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6512 != NULL) {
    GGS_instruction_FDA_base_code var_cas_baseCode ;
    if (((operand_6512->mIncrement)._operator_and (operand_6512->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INCFSZ (_inLexique COMMA_HERE) ;
    }else if (((operand_6512->mIncrement)._operator_and ((operand_6512->mSkipIfZero)._operator_not ())).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_INFSNZ (_inLexique COMMA_HERE) ;
    }else if ((((operand_6512->mIncrement)._operator_not ())._operator_and (operand_6512->mSkipIfZero)).isBuiltAndTrue ()) {
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DECFSZ (_inLexique COMMA_HERE) ;
    }else{
      var_cas_baseCode = GGS_instruction_FDA_base_code::constructor_DCFSNZ (_inLexique COMMA_HERE) ;
    }
    var_cas_ioGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, operand_6512->mInstructionLocation, var_cas_baseCode, operand_6512->mRegisterExpression, operand_6512->m_W_isDestination COMMA_HERE)) ;
    const GGS_piccolo_instruction  _temp_7224 = operand_6512->mInstruction ;
    if (_temp_7224._isBuilt ()) {
      typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_7224._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7224 (HERE), var_cas_ioLocalLabelIndex, var_cas_ioGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (199)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "buildAssemblyInstructionList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildAssemblyInstructionList (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_bool  var_cas_inHasHighInterrupt,
                                const GGS_bool  var_cas_inHasLowInterrupt,
                                GGS_ipic_instructionList  & var_cas_outGeneratedInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildAssemblyInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outGeneratedInstructionList = GGS_ipic_instructionList ::constructor_emptyList () ;
  GGS_uint  var_cas_localLabelIndex ;
  var_cas_localLabelIndex = GGS_uint (true, 0U) ;
  var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_GOTO ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  if (((var_cas_inHasLowInterrupt)._operator_and (var_cas_inHasHighInterrupt)).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_BRA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 24U) COMMA_HERE)) ;
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_8325 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (223)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_8325 = NULL ;
      while (((operand_8325 = enumerator_8325.nextObject ()))) {
        macroValidPointer (operand_8325) ;
        if (((operand_8325->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_8433 (operand_8325->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_8433 = NULL ;
            while (((operand_8433 = enumerator_8433.nextObject ()))) {
              macroValidPointer (operand_8433) ;
              const GGS_piccolo_instruction  _temp_8477 = operand_8433->mInstruction ;
              if (_temp_8477._isBuilt ()) {
                typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_8477._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_8477 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (226)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  if ((var_cas_inHasHighInterrupt).isBuiltAndTrue ()) {
    if ((var_cas_inHasLowInterrupt).isBuiltAndTrue ()) {
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_fast_interrupt"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    }else{
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_ORG ::constructor_new (_inLexique, GGS_uint (true, 8U) COMMA_HERE)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_9057 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (240)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_9057 = NULL ;
      while (((operand_9057 = enumerator_9057.nextObject ()))) {
        macroValidPointer (operand_9057) ;
        if (((operand_9057->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (241)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          {
            GGS_instructionList::cEnumerator enumerator_9166 (operand_9057->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_9166 = NULL ;
            while (((operand_9166 = enumerator_9166.nextObject ()))) {
              macroValidPointer (operand_9166) ;
              const GGS_piccolo_instruction  _temp_9210 = operand_9166->mInstruction ;
              if (_temp_9210._isBuilt ()) {
                typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_9210._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_9210 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (243)) ;
                }
              }
            }
          }
          var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETFIE ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_bool (true, true) COMMA_HERE)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_9512 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (251)), true) ;
    const GGS_routineDefinitionList::cElement * operand_9512 = NULL ;
    while (((operand_9512 = enumerator_9512.nextObject ()))) {
      macroValidPointer (operand_9512) ;
      var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, operand_9512->mRoutineName COMMA_HERE)) ;
      {
        GGS_instructionList::cEnumerator enumerator_9644 (operand_9512->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_9644 = NULL ;
        while (((operand_9644 = enumerator_9644.nextObject ()))) {
          macroValidPointer (operand_9644) ;
          const GGS_piccolo_instruction  _temp_9684 = operand_9644->mInstruction ;
          if (_temp_9684._isBuilt ()) {
            typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction _method = findCategoryMethod__piccolo_instruction__decomposeComplexInstruction (_temp_9684._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_9684 (HERE), var_cas_localLabelIndex, var_cas_outGeneratedInstructionList COMMA_SOURCE_FILE_AT_LINE (254)) ;
            }
          }
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (258))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_4"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (267))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_pseudo_LABEL ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "_computed_goto_2"), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (270)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (270)))).isBuiltAndTrue ()) {
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "WREG"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, true) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWF (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSL"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_literalOperation ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_literal_instruction_opcode::constructor_MOVLW (_inLexique COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_FDA ::constructor_new (_inLexique, GGS_location (_inLexique), GGS_instruction_FDA_base_code::constructor_ADDWFC (_inLexique COMMA_HERE), GGS_registerExpression ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "TOSH"), GGS_location (_inLexique) COMMA_HERE), GGS_luint ::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) COMMA_HERE), GGS_bool (true, false) COMMA_HERE)) ;
    var_cas_outGeneratedInstructionList._addAssign_operation (GGS_ipic_instruction_RETURN ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildAssemblyInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_decompose_structured_instructions (void) {
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_FOREVER__decomposeComplexInstruction, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_IF_FA_SEMI_COLON__decomposeComplexInstruction, gClassInfoFor__instruction_IF_FA_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_IF_BitTest__decomposeComplexInstruction, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__conditionExpression__decomposeIFcondition ((typeCategoryMethod__conditionExpression__decomposeIFcondition) category_method__bcc_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__conditionExpression__decomposeIFcondition ((typeCategoryMethod__conditionExpression__decomposeIFcondition) category_method__bitTest_in_structured_if_condition__decomposeIFcondition, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_structured_if__decomposeComplexInstruction, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_do_while__decomposeComplexInstruction, gClassInfoFor__instruction_do_while.slotID ()) ;
 enterCategoryMethod__piccolo_instruction__decomposeComplexInstruction ((typeCategoryMethod__piccolo_instruction__decomposeComplexInstruction) category_method__instruction_IF_IncDec__decomposeComplexInstruction, gClassInfoFor__instruction_IF_IncDec.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_decompose_structured_instructions (prologueRoutineFor_piccolo_decompose_structured_instructions,
                                   NULL) ;

//---------------------------------------------------------------------------*

