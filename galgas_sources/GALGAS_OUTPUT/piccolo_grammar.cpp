//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_grammar.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 16th, 2008, at 12h1'40"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_grammar.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              L L ( 1 )    P R O D U C T I O N    R U L E S                *
//                                                                           *
//---------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const sint16 gProductions [] = {
// At index 0 : <configuration_definition>, in file 'piccolo_syntax.ggs', line 39
  TERMINAL (piccolo_lexique::piccolo_lexique_1_config) // $config$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) // ${$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) // $}$
, END_PRODUCTION
// At index 4 : <instruction>, in file 'piccolo_syntax.ggs', line 82
, NONTERMINAL (11) // <select_piccolo_syntax_3>
, END_PRODUCTION
// At index 6 : <interrupt_definition>, in file 'piccolo_syntax.ggs', line 55
, TERMINAL (piccolo_lexique::piccolo_lexique_1_interrupt) // $interrupt$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) // ${$
, NONTERMINAL (9) // <select_repeat_piccolo_syntax_1>
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) // $}$
, END_PRODUCTION
// At index 11 : <optional_w_as_dest>, in file 'piccolo_syntax.ggs', line 102
, NONTERMINAL (12) // <select_piccolo_syntax_4>
, END_PRODUCTION
// At index 13 : <ram_definition>, in file 'piccolo_syntax.ggs', line 47
, TERMINAL (piccolo_lexique::piccolo_lexique_1_ram) // $ram$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) // ${$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) // $}$
, END_PRODUCTION
// At index 17 : <register_parsing>, in file 'piccolo_syntax.ggs', line 96
, TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) // $identifier$
, END_PRODUCTION
// At index 19 : <routine_definition>, in file 'piccolo_syntax.ggs', line 67
, TERMINAL (piccolo_lexique::piccolo_lexique_1_routine) // $routine$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) // $identifier$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_bsr) // $bsr$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_unsigned_5Fliteral_5Finteger) // $unsigned_literal_integer$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7B) // ${$
, NONTERMINAL (10) // <select_repeat_piccolo_syntax_2>
, TERMINAL (piccolo_lexique::piccolo_lexique_1__7D) // $}$
, END_PRODUCTION
// At index 27 : <start_symbol>, in file 'piccolo_syntax.ggs', line 19
, TERMINAL (piccolo_lexique::piccolo_lexique_1_program) // $program$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_identifier) // $identifier$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_literal_5Fstring) // $literal_string$
, TERMINAL (piccolo_lexique::piccolo_lexique_1__3A) // $:$
, NONTERMINAL (8) // <select_repeat_piccolo_syntax_0>
, TERMINAL (piccolo_lexique::piccolo_lexique_1_end) // $end$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 34 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
, END_PRODUCTION
// At index 35 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
, NONTERMINAL (0) // <configuration_definition>
, NONTERMINAL (8) // <select_repeat_piccolo_syntax_0>
, END_PRODUCTION
// At index 38 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
, NONTERMINAL (4) // <ram_definition>
, NONTERMINAL (8) // <select_repeat_piccolo_syntax_0>
, END_PRODUCTION
// At index 41 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
, NONTERMINAL (2) // <interrupt_definition>
, NONTERMINAL (8) // <select_repeat_piccolo_syntax_0>
, END_PRODUCTION
// At index 44 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
, NONTERMINAL (6) // <routine_definition>
, NONTERMINAL (8) // <select_repeat_piccolo_syntax_0>
, END_PRODUCTION
// At index 47 : <select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58
, END_PRODUCTION
// At index 48 : <select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58
, NONTERMINAL (1) // <instruction>
, NONTERMINAL (9) // <select_repeat_piccolo_syntax_1>
, END_PRODUCTION
// At index 51 : <select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73
, END_PRODUCTION
// At index 52 : <select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73
, NONTERMINAL (1) // <instruction>
, NONTERMINAL (10) // <select_repeat_piccolo_syntax_2>
, END_PRODUCTION
// At index 55 : <select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83
, TERMINAL (piccolo_lexique::piccolo_lexique_1_addwf) // $addwf$
, NONTERMINAL (5) // <register_parsing>
, NONTERMINAL (3) // <optional_w_as_dest>
, END_PRODUCTION
// At index 59 : <select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83
, TERMINAL (piccolo_lexique::piccolo_lexique_1_addwfc) // $addwfc$
, NONTERMINAL (5) // <register_parsing>
, NONTERMINAL (3) // <optional_w_as_dest>
, END_PRODUCTION
// At index 63 : <select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103
, END_PRODUCTION
// At index 64 : <select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103
, TERMINAL (piccolo_lexique::piccolo_lexique_1__2C) // $,$
, TERMINAL (piccolo_lexique::piccolo_lexique_1_w) // $w$
, END_PRODUCTION
// At index 67 : <>, in file '.ggs', line 0
, NONTERMINAL (7) // <start_symbol>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O D U C T I O N    N A M E S                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const char * gProductionNames [22] = {
 "<configuration_definition>, in file 'piccolo_syntax.ggs', line 39", // at index 0
 "<instruction>, in file 'piccolo_syntax.ggs', line 82", // at index 1
 "<interrupt_definition>, in file 'piccolo_syntax.ggs', line 55", // at index 2
 "<optional_w_as_dest>, in file 'piccolo_syntax.ggs', line 102", // at index 3
 "<ram_definition>, in file 'piccolo_syntax.ggs', line 47", // at index 4
 "<register_parsing>, in file 'piccolo_syntax.ggs', line 96", // at index 5
 "<routine_definition>, in file 'piccolo_syntax.ggs', line 67", // at index 6
 "<start_symbol>, in file 'piccolo_syntax.ggs', line 19", // at index 7
 "<select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24", // at index 8
 "<select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24", // at index 9
 "<select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24", // at index 10
 "<select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24", // at index 11
 "<select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24", // at index 12
 "<select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58", // at index 13
 "<select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58", // at index 14
 "<select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73", // at index 15
 "<select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73", // at index 16
 "<select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83", // at index 17
 "<select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83", // at index 18
 "<select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103", // at index 19
 "<select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103", // at index 20
 "<>, in file '.ggs', line 0" // at index 21
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            L L ( 1 )    P R O D U C T I O N    I N D E X E S              *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gProductionIndexes [22] = {
0, // index 0 : <configuration_definition>, in file 'piccolo_syntax.ggs', line 39
4, // index 1 : <instruction>, in file 'piccolo_syntax.ggs', line 82
6, // index 2 : <interrupt_definition>, in file 'piccolo_syntax.ggs', line 55
11, // index 3 : <optional_w_as_dest>, in file 'piccolo_syntax.ggs', line 102
13, // index 4 : <ram_definition>, in file 'piccolo_syntax.ggs', line 47
17, // index 5 : <register_parsing>, in file 'piccolo_syntax.ggs', line 96
19, // index 6 : <routine_definition>, in file 'piccolo_syntax.ggs', line 67
27, // index 7 : <start_symbol>, in file 'piccolo_syntax.ggs', line 19
34, // index 8 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
35, // index 9 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
38, // index 10 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
41, // index 11 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
44, // index 12 : <select_repeat_piccolo_syntax_0>, in file 'piccolo_syntax.ggs', line 24
47, // index 13 : <select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58
48, // index 14 : <select_repeat_piccolo_syntax_1>, in file 'piccolo_syntax.ggs', line 58
51, // index 15 : <select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73
52, // index 16 : <select_repeat_piccolo_syntax_2>, in file 'piccolo_syntax.ggs', line 73
55, // index 17 : <select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83
59, // index 18 : <select_piccolo_syntax_3>, in file 'piccolo_syntax.ggs', line 83
63, // index 19 : <select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103
64, // index 20 : <select_piccolo_syntax_4>, in file 'piccolo_syntax.ggs', line 103
67 // index 21 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gFirstProductionIndexes [15] = {
0, // at 0 : <configuration_definition>
1, // at 1 : <instruction>
2, // at 2 : <interrupt_definition>
3, // at 3 : <optional_w_as_dest>
4, // at 4 : <ram_definition>
5, // at 5 : <register_parsing>
6, // at 6 : <routine_definition>
7, // at 7 : <start_symbol>
8, // at 8 : <select_repeat_piccolo_syntax_0>
13, // at 9 : <select_repeat_piccolo_syntax_1>
15, // at 10 : <select_repeat_piccolo_syntax_2>
17, // at 11 : <select_piccolo_syntax_3>
19, // at 12 : <select_piccolo_syntax_4>
21, // at 13 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               L L ( 1 )    D E C I S I O N    T A B L E S                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecision [] = {
// At index 0 : <configuration_definition> only one production, no choice
  -1,
// At index 1 : <instruction> only one production, no choice
  -1,
// At index 2 : <interrupt_definition> only one production, no choice
  -1,
// At index 3 : <optional_w_as_dest> only one production, no choice
  -1,
// At index 4 : <ram_definition> only one production, no choice
  -1,
// At index 5 : <register_parsing> only one production, no choice
  -1,
// At index 6 : <routine_definition> only one production, no choice
  -1,
// At index 7 : <start_symbol> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 8 : <select_repeat_piccolo_syntax_0>
piccolo_lexique::piccolo_lexique_1_end, -1, // Choice 1
piccolo_lexique::piccolo_lexique_1_config, -1, // Choice 2
piccolo_lexique::piccolo_lexique_1_ram, -1, // Choice 3
piccolo_lexique::piccolo_lexique_1_interrupt, -1, // Choice 4
piccolo_lexique::piccolo_lexique_1_routine, -1, // Choice 5
  -1,
// At index 19 : <select_repeat_piccolo_syntax_1>
piccolo_lexique::piccolo_lexique_1__7D, -1, // Choice 1
piccolo_lexique::piccolo_lexique_1_addwf, piccolo_lexique::piccolo_lexique_1_addwfc, -1, // Choice 2
  -1,
// At index 25 : <select_repeat_piccolo_syntax_2>
piccolo_lexique::piccolo_lexique_1__7D, -1, // Choice 1
piccolo_lexique::piccolo_lexique_1_addwf, piccolo_lexique::piccolo_lexique_1_addwfc, -1, // Choice 2
  -1,
// At index 31 : <select_piccolo_syntax_3>
piccolo_lexique::piccolo_lexique_1_addwf, -1, // Choice 1
piccolo_lexique::piccolo_lexique_1_addwfc, -1, // Choice 2
  -1,
// At index 36 : <select_piccolo_syntax_4>
piccolo_lexique::piccolo_lexique_1_addwf, piccolo_lexique::piccolo_lexique_1_addwfc, piccolo_lexique::piccolo_lexique_1__7D, -1, // Choice 1
piccolo_lexique::piccolo_lexique_1__2C, -1, // Choice 2
  -1,
// At index 43 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecisionIndexes [15] = {
0, // at 0 : <configuration_definition>
1, // at 1 : <instruction>
2, // at 2 : <interrupt_definition>
3, // at 3 : <optional_w_as_dest>
4, // at 4 : <ram_definition>
5, // at 5 : <register_parsing>
6, // at 6 : <routine_definition>
7, // at 7 : <start_symbol>
8, // at 8 : <select_repeat_piccolo_syntax_0>
19, // at 9 : <select_repeat_piccolo_syntax_1>
25, // at 10 : <select_repeat_piccolo_syntax_2>
31, // at 11 : <select_piccolo_syntax_3>
36, // at 12 : <select_piccolo_syntax_4>
43, // at 13 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          'configuration_definition' non terminal implementation           *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_configuration_definition_ (piccolo_lexique & _inLexique) {
pr_configuration_definition_piccolo_syntax_39_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                'instruction' non terminal implementation                  *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_instruction_ (piccolo_lexique & _inLexique) {
pr_instruction_piccolo_syntax_82_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            'interrupt_definition' non terminal implementation             *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_interrupt_definition_ (piccolo_lexique & _inLexique) {
pr_interrupt_definition_piccolo_syntax_55_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             'optional_w_as_dest' non terminal implementation              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_optional_w_as_dest_ (piccolo_lexique & _inLexique) {
pr_optional_w_as_dest_piccolo_syntax_102_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               'ram_definition' non terminal implementation                *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_ram_definition_ (piccolo_lexique & _inLexique) {
pr_ram_definition_piccolo_syntax_47_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              'register_parsing' non terminal implementation               *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_register_parsing_ (piccolo_lexique & _inLexique) {
pr_register_parsing_piccolo_syntax_96_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             'routine_definition' non terminal implementation              *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_routine_definition_ (piccolo_lexique & _inLexique) {
pr_routine_definition_piccolo_syntax_67_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                'start_symbol' non terminal implementation                 *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::
nt_start_symbol_ (piccolo_lexique & _inLexique) {
pr_start_symbol_piccolo_syntax_19_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_grammar::_performSourceFileParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_lstring _inFileName
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = _inFileName.string ().isAbsolutePath ()
    ? _inFileName.string ()
    : _inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (_inFileName.string ()) ;
  if (sourceFileName.fileExists ()) {
    piccolo_lexique * scanner_ = NULL ;
    macroMyNew (scanner_, piccolo_lexique (_inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    if (scanner_->sourceText () != NULL) {
      scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
      const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                       gFirstProductionIndexes, gDecision, gDecisionIndexes, 67) ;
      if (ok && ! scanner_->mParseOnlyFlag) {
        piccolo_grammar _grammar ;
        _grammar.nt_start_symbol_ (*scanner_) ;
        if (_inSentStringPtr != NULL) {
          _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
        }
      }
    }else{
      C_String message ;
      message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
      _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
    }
    macroDetachPointer (scanner_, piccolo_lexique) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

void piccolo_grammar::_performSourceStringParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_string _inSourceString
                                COMMA_UNUSED_LOCATION_ARGS) {
  piccolo_lexique * scanner_ = NULL ;
  macroMyNew (scanner_, piccolo_lexique (_inCompiler.ioParametersPtr (), _inSourceString, "Error when parsing dynamic string" COMMA_HERE)) ;
  scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
  const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                   gFirstProductionIndexes, gDecision, gDecisionIndexes, 67) ;
  if (ok && ! scanner_->mParseOnlyFlag) {
    piccolo_grammar _grammar ;
    _grammar.nt_start_symbol_ (*scanner_) ;
    if (_inSentStringPtr != NULL) {
      _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
    }
  }
  macroDetachPointer (scanner_, piccolo_lexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'select_repeat_piccolo_syntax_0' added non terminal implementation     *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 piccolo_grammar::select_repeat_piccolo_syntax_0 (piccolo_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'select_repeat_piccolo_syntax_1' added non terminal implementation     *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 piccolo_grammar::select_repeat_piccolo_syntax_1 (piccolo_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'select_repeat_piccolo_syntax_2' added non terminal implementation     *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 piccolo_grammar::select_repeat_piccolo_syntax_2 (piccolo_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       'select_piccolo_syntax_3' added non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 piccolo_grammar::select_piccolo_syntax_3 (piccolo_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       'select_piccolo_syntax_4' added non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 piccolo_grammar::select_piccolo_syntax_4 (piccolo_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*

