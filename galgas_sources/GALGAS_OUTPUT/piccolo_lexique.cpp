//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_lexique.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 19th, 2008, at 20h7'44"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "piccolo_lexique.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_piccolo_lexique::cTokenFor_piccolo_lexique (void) :
identifierString (),
uint32value (),
charValue (),
tokenString () {
}

//---------------------------------------------------------------------------*

piccolo_lexique::
piccolo_lexique (C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

piccolo_lexique::
piccolo_lexique (C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "hex number too large" ;
//--- Message 1
static const char * gErrorMessage_1 = "decimal number too large" ;
//--- Message 2
static const char * gErrorMessage_2 = "internal error" ;
//--- Message 3
static const char * gErrorMessage_3 = "incorrect literal character" ;
//--- Message 4
static const char * gErrorMessage_4 = "ASCII code > 255" ;
//--- Message 5
static const char * gErrorMessage_5 = "string does not end with '\"'" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const char * gSyntaxErrorMessage_identifier = "an identifier" ;

//--- Syntax error message for terminal '$program$' :
static const char * gSyntaxErrorMessage_program = "the 'program' keyword" ;

//--- Syntax error message for terminal '$config$' :
static const char * gSyntaxErrorMessage_config = "the 'config' keyword" ;

//--- Syntax error message for terminal '$ram$' :
static const char * gSyntaxErrorMessage_ram = "the 'ram' keyword" ;

//--- Syntax error message for terminal '$interrupt$' :
static const char * gSyntaxErrorMessage_interrupt = "the 'interrupt' keyword" ;

//--- Syntax error message for terminal '$routine$' :
static const char * gSyntaxErrorMessage_routine = "the 'routine' keyword" ;

//--- Syntax error message for terminal '$end$' :
static const char * gSyntaxErrorMessage_end = "the 'end' keyword" ;

//--- Syntax error message for terminal '$bsr$' :
static const char * gSyntaxErrorMessage_bsr = "the 'bsr' keyword" ;

//--- Syntax error message for terminal '$w$' :
static const char * gSyntaxErrorMessage_w = "the 'w' keyword" ;

//--- Syntax error message for terminal '$byte$' :
static const char * gSyntaxErrorMessage_byte = "the 'byte' keyword" ;

//--- Syntax error message for terminal '$label$' :
static const char * gSyntaxErrorMessage_label = "the 'label' keyword" ;

//--- Syntax error message for terminal '$banksel$' :
static const char * gSyntaxErrorMessage_banksel = "the 'banksel' keyword" ;

//--- Syntax error message for terminal '$mnop$' :
static const char * gSyntaxErrorMessage_mnop = "the 'mnop' keyword" ;

//--- Syntax error message for terminal '$noreturn$' :
static const char * gSyntaxErrorMessage_noreturn = "the 'noreturn' keyword" ;

//--- Syntax error message for terminal '$forever$' :
static const char * gSyntaxErrorMessage_forever = "the 'forever' keyword" ;

//--- Syntax error message for terminal '$if$' :
static const char * gSyntaxErrorMessage_if = "the 'if' keyword" ;

//--- Syntax error message for terminal '$addwf$' :
static const char * gSyntaxErrorMessage_addwf = "the 'addwf' instruction" ;

//--- Syntax error message for terminal '$addwfc$' :
static const char * gSyntaxErrorMessage_addwfc = "the 'addwfc' instruction" ;

//--- Syntax error message for terminal '$andwf$' :
static const char * gSyntaxErrorMessage_andwf = "the 'andwf' instruction" ;

//--- Syntax error message for terminal '$clrf$' :
static const char * gSyntaxErrorMessage_clrf = "the 'clrf' instruction" ;

//--- Syntax error message for terminal '$comf$' :
static const char * gSyntaxErrorMessage_comf = "the 'comf' instruction" ;

//--- Syntax error message for terminal '$cpfsgt$' :
static const char * gSyntaxErrorMessage_cpfsgt = "the 'cpfsgt' instruction" ;

//--- Syntax error message for terminal '$cpfslt$' :
static const char * gSyntaxErrorMessage_cpfslt = "the 'cpfslt' instruction" ;

//--- Syntax error message for terminal '$decf$' :
static const char * gSyntaxErrorMessage_decf = "the 'decf' instruction" ;

//--- Syntax error message for terminal '$decfsz$' :
static const char * gSyntaxErrorMessage_decfsz = "the 'decfsz' instruction" ;

//--- Syntax error message for terminal '$dcfsnz$' :
static const char * gSyntaxErrorMessage_dcfsnz = "the 'dcfsnz' instruction" ;

//--- Syntax error message for terminal '$incf$' :
static const char * gSyntaxErrorMessage_incf = "the 'incf' instruction" ;

//--- Syntax error message for terminal '$incfsz$' :
static const char * gSyntaxErrorMessage_incfsz = "the 'incfsz' instruction" ;

//--- Syntax error message for terminal '$infsnz$' :
static const char * gSyntaxErrorMessage_infsnz = "the 'infsnz' instruction" ;

//--- Syntax error message for terminal '$iorwf$' :
static const char * gSyntaxErrorMessage_iorwf = "the 'iorwf' instruction" ;

//--- Syntax error message for terminal '$movf$' :
static const char * gSyntaxErrorMessage_movf = "the 'movf' instruction" ;

//--- Syntax error message for terminal '$movff$' :
static const char * gSyntaxErrorMessage_movff = "the 'movff' instruction" ;

//--- Syntax error message for terminal '$movwf$' :
static const char * gSyntaxErrorMessage_movwf = "the 'movwf' instruction" ;

//--- Syntax error message for terminal '$mulwf$' :
static const char * gSyntaxErrorMessage_mulwf = "the 'mulwf' instruction" ;

//--- Syntax error message for terminal '$negf$' :
static const char * gSyntaxErrorMessage_negf = "the 'negf' instruction" ;

//--- Syntax error message for terminal '$rlcf$' :
static const char * gSyntaxErrorMessage_rlcf = "the 'rlcf' instruction" ;

//--- Syntax error message for terminal '$rlncf$' :
static const char * gSyntaxErrorMessage_rlncf = "the 'rlncf' instruction" ;

//--- Syntax error message for terminal '$rrcf$' :
static const char * gSyntaxErrorMessage_rrcf = "the 'rrcf' instruction" ;

//--- Syntax error message for terminal '$rrncf$' :
static const char * gSyntaxErrorMessage_rrncf = "the 'rrncf' instruction" ;

//--- Syntax error message for terminal '$setf$' :
static const char * gSyntaxErrorMessage_setf = "the 'setf' instruction" ;

//--- Syntax error message for terminal '$subfwb$' :
static const char * gSyntaxErrorMessage_subfwb = "the 'subfwb' instruction" ;

//--- Syntax error message for terminal '$subwf$' :
static const char * gSyntaxErrorMessage_subwf = "the 'subwf' instruction" ;

//--- Syntax error message for terminal '$subwfb$' :
static const char * gSyntaxErrorMessage_subwfb = "the 'subwfb' instruction" ;

//--- Syntax error message for terminal '$swapf$' :
static const char * gSyntaxErrorMessage_swapf = "the 'swapf' instruction" ;

//--- Syntax error message for terminal '$tstfsz$' :
static const char * gSyntaxErrorMessage_tstfsz = "the 'tstfsz' instruction" ;

//--- Syntax error message for terminal '$xorwf$' :
static const char * gSyntaxErrorMessage_xorwf = "the 'xorwf' instruction" ;

//--- Syntax error message for terminal '$bcf$' :
static const char * gSyntaxErrorMessage_bcf = "the 'bcf' instruction" ;

//--- Syntax error message for terminal '$bsf$' :
static const char * gSyntaxErrorMessage_bsf = "the 'bsf' instruction" ;

//--- Syntax error message for terminal '$btfsc$' :
static const char * gSyntaxErrorMessage_btfsc = "the 'btfsc' instruction" ;

//--- Syntax error message for terminal '$btfss$' :
static const char * gSyntaxErrorMessage_btfss = "the 'btfss' instruction" ;

//--- Syntax error message for terminal '$btg$' :
static const char * gSyntaxErrorMessage_btg = "the 'btg' instruction" ;

//--- Syntax error message for terminal '$bc$' :
static const char * gSyntaxErrorMessage_bc = "the 'bc' instruction" ;

//--- Syntax error message for terminal '$bn$' :
static const char * gSyntaxErrorMessage_bn = "the 'bn' instruction" ;

//--- Syntax error message for terminal '$bnc$' :
static const char * gSyntaxErrorMessage_bnc = "the 'bnc' instruction" ;

//--- Syntax error message for terminal '$bnn$' :
static const char * gSyntaxErrorMessage_bnn = "the 'bnn' instruction" ;

//--- Syntax error message for terminal '$bnov$' :
static const char * gSyntaxErrorMessage_bnov = "the 'bnov' instruction" ;

//--- Syntax error message for terminal '$bnz$' :
static const char * gSyntaxErrorMessage_bnz = "the 'bnz' instruction" ;

//--- Syntax error message for terminal '$bov$' :
static const char * gSyntaxErrorMessage_bov = "the 'bov' instruction" ;

//--- Syntax error message for terminal '$bra$' :
static const char * gSyntaxErrorMessage_bra = "the 'bra' instruction" ;

//--- Syntax error message for terminal '$bz$' :
static const char * gSyntaxErrorMessage_bz = "the 'bz' instruction" ;

//--- Syntax error message for terminal '$call$' :
static const char * gSyntaxErrorMessage_call = "the 'call' instruction" ;

//--- Syntax error message for terminal '$clrwdt$' :
static const char * gSyntaxErrorMessage_clrwdt = "the 'clrwdt' instruction" ;

//--- Syntax error message for terminal '$daw$' :
static const char * gSyntaxErrorMessage_daw = "the 'daw' instruction" ;

//--- Syntax error message for terminal '$goto$' :
static const char * gSyntaxErrorMessage_goto = "the 'goto' instruction" ;

//--- Syntax error message for terminal '$nop$' :
static const char * gSyntaxErrorMessage_nop = "the 'nop' instruction" ;

//--- Syntax error message for terminal '$pop$' :
static const char * gSyntaxErrorMessage_pop = "the 'pop' instruction" ;

//--- Syntax error message for terminal '$push$' :
static const char * gSyntaxErrorMessage_push = "the 'push' instruction" ;

//--- Syntax error message for terminal '$rcall$' :
static const char * gSyntaxErrorMessage_rcall = "the 'rcall' instruction" ;

//--- Syntax error message for terminal '$reset$' :
static const char * gSyntaxErrorMessage_reset = "the 'reset' instruction" ;

//--- Syntax error message for terminal '$retlw$' :
static const char * gSyntaxErrorMessage_retlw = "the 'retlw' instruction" ;

//--- Syntax error message for terminal '$return$' :
static const char * gSyntaxErrorMessage_return = "the 'return' instruction" ;

//--- Syntax error message for terminal '$sleep$' :
static const char * gSyntaxErrorMessage_sleep = "the 'sleep' instruction" ;

//--- Syntax error message for terminal '$addlw$' :
static const char * gSyntaxErrorMessage_addlw = "the 'addlw' instruction" ;

//--- Syntax error message for terminal '$andlw$' :
static const char * gSyntaxErrorMessage_andlw = "the 'andlw' instruction" ;

//--- Syntax error message for terminal '$iorlw$' :
static const char * gSyntaxErrorMessage_iorlw = "the 'iorlw' instruction" ;

//--- Syntax error message for terminal '$lfsr$' :
static const char * gSyntaxErrorMessage_lfsr = "the 'lfsr' instruction" ;

//--- Syntax error message for terminal '$movlb$' :
static const char * gSyntaxErrorMessage_movlb = "the 'movlb' instruction" ;

//--- Syntax error message for terminal '$movlw$' :
static const char * gSyntaxErrorMessage_movlw = "the 'movlw' instruction" ;

//--- Syntax error message for terminal '$mullw$' :
static const char * gSyntaxErrorMessage_mullw = "the 'mullw' instruction" ;

//--- Syntax error message for terminal '$sublw$' :
static const char * gSyntaxErrorMessage_sublw = "the 'sublw' instruction" ;

//--- Syntax error message for terminal '$xorlw$' :
static const char * gSyntaxErrorMessage_xorlw = "the 'xorlw' instruction" ;

//--- Syntax error message for terminal '$tblrd$' :
static const char * gSyntaxErrorMessage_tblrd = "the 'tblrd' instruction" ;

//--- Syntax error message for terminal '$tblwt$' :
static const char * gSyntaxErrorMessage_tblwt = "the 'tblwt' instruction" ;

//--- Syntax error message for terminal '$movaw$' :
static const char * gSyntaxErrorMessage_movaw = "the 'movaw' instruction" ;

//--- Syntax error message for terminal '$integer$' :
static const char * gSyntaxErrorMessage_integer = "a 32-bit unsigned number" ;

//--- Syntax error message for terminal '$literal_char$' :
static const char * gSyntaxErrorMessage_literal_5Fchar = "a character constant" ;

//--- Syntax error message for terminal '$*$' :
static const char * gSyntaxErrorMessage__2A = "the '*' delimitor" ;

//--- Syntax error message for terminal '$*+$' :
static const char * gSyntaxErrorMessage__2A_2B = "the '*+' delimitor" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "the ',' delimitor" ;

//--- Syntax error message for terminal '$!=$' :
static const char * gSyntaxErrorMessage__21_3D = "the '!=' delimitor" ;

//--- Syntax error message for terminal '$<=$' :
static const char * gSyntaxErrorMessage__3C_3D = "the '<=' delimitor" ;

//--- Syntax error message for terminal '$>=$' :
static const char * gSyntaxErrorMessage__3E_3D = "the '>=' delimitor" ;

//--- Syntax error message for terminal '$*-$' :
static const char * gSyntaxErrorMessage__2A_2D = "the '*-' delimitor" ;

//--- Syntax error message for terminal '$+*$' :
static const char * gSyntaxErrorMessage__2B_2A = "the '+*' delimitor" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "the ';' delimitor" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "the ':' delimitor" ;

//--- Syntax error message for terminal '$[$' :
static const char * gSyntaxErrorMessage__5B = "the '[' delimitor" ;

//--- Syntax error message for terminal '$]$' :
static const char * gSyntaxErrorMessage__5D = "the ']' delimitor" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "the '{' delimitor" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "the '}' delimitor" ;

//--- Syntax error message for terminal '$literal_string$' :
static const char * gSyntaxErrorMessage_literal_5Fstring = "a character string constant \"...\"" ;

//--- Syntax error message for terminal '$comment$' :
static const char * gSyntaxErrorMessage_comment = "a comment" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void piccolo_lexique::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [103] = {"end of source",
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_program,
       gSyntaxErrorMessage_config,
       gSyntaxErrorMessage_ram,
       gSyntaxErrorMessage_interrupt,
       gSyntaxErrorMessage_routine,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_bsr,
       gSyntaxErrorMessage_w,
       gSyntaxErrorMessage_byte,
       gSyntaxErrorMessage_label,
       gSyntaxErrorMessage_banksel,
       gSyntaxErrorMessage_mnop,
       gSyntaxErrorMessage_noreturn,
       gSyntaxErrorMessage_forever,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_addwf,
       gSyntaxErrorMessage_addwfc,
       gSyntaxErrorMessage_andwf,
       gSyntaxErrorMessage_clrf,
       gSyntaxErrorMessage_comf,
       gSyntaxErrorMessage_cpfsgt,
       gSyntaxErrorMessage_cpfslt,
       gSyntaxErrorMessage_decf,
       gSyntaxErrorMessage_decfsz,
       gSyntaxErrorMessage_dcfsnz,
       gSyntaxErrorMessage_incf,
       gSyntaxErrorMessage_incfsz,
       gSyntaxErrorMessage_infsnz,
       gSyntaxErrorMessage_iorwf,
       gSyntaxErrorMessage_movf,
       gSyntaxErrorMessage_movff,
       gSyntaxErrorMessage_movwf,
       gSyntaxErrorMessage_mulwf,
       gSyntaxErrorMessage_negf,
       gSyntaxErrorMessage_rlcf,
       gSyntaxErrorMessage_rlncf,
       gSyntaxErrorMessage_rrcf,
       gSyntaxErrorMessage_rrncf,
       gSyntaxErrorMessage_setf,
       gSyntaxErrorMessage_subfwb,
       gSyntaxErrorMessage_subwf,
       gSyntaxErrorMessage_subwfb,
       gSyntaxErrorMessage_swapf,
       gSyntaxErrorMessage_tstfsz,
       gSyntaxErrorMessage_xorwf,
       gSyntaxErrorMessage_bcf,
       gSyntaxErrorMessage_bsf,
       gSyntaxErrorMessage_btfsc,
       gSyntaxErrorMessage_btfss,
       gSyntaxErrorMessage_btg,
       gSyntaxErrorMessage_bc,
       gSyntaxErrorMessage_bn,
       gSyntaxErrorMessage_bnc,
       gSyntaxErrorMessage_bnn,
       gSyntaxErrorMessage_bnov,
       gSyntaxErrorMessage_bnz,
       gSyntaxErrorMessage_bov,
       gSyntaxErrorMessage_bra,
       gSyntaxErrorMessage_bz,
       gSyntaxErrorMessage_call,
       gSyntaxErrorMessage_clrwdt,
       gSyntaxErrorMessage_daw,
       gSyntaxErrorMessage_goto,
       gSyntaxErrorMessage_nop,
       gSyntaxErrorMessage_pop,
       gSyntaxErrorMessage_push,
       gSyntaxErrorMessage_rcall,
       gSyntaxErrorMessage_reset,
       gSyntaxErrorMessage_retlw,
       gSyntaxErrorMessage_return,
       gSyntaxErrorMessage_sleep,
       gSyntaxErrorMessage_addlw,
       gSyntaxErrorMessage_andlw,
       gSyntaxErrorMessage_iorlw,
       gSyntaxErrorMessage_lfsr,
       gSyntaxErrorMessage_movlb,
       gSyntaxErrorMessage_movlw,
       gSyntaxErrorMessage_mullw,
       gSyntaxErrorMessage_sublw,
       gSyntaxErrorMessage_xorlw,
       gSyntaxErrorMessage_tblrd,
       gSyntaxErrorMessage_tblwt,
       gSyntaxErrorMessage_movaw,
       gSyntaxErrorMessage_integer,
       gSyntaxErrorMessage_literal_5Fchar,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__2A_2B,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__21_3D,
       gSyntaxErrorMessage__3C_3D,
       gSyntaxErrorMessage__3E_3D,
       gSyntaxErrorMessage__2A_2D,
       gSyntaxErrorMessage__2B_2A,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage_literal_5Fstring,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'controlKeyWordList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 piccolo_lexique::piccolo_lexique_table_size_controlKeyWordList = 15 ;

const C_lexique_table_entry piccolo_lexique::piccolo_lexique_table_for_controlKeyWordList [15] = {
  C_lexique_table_entry ("w", 1, piccolo_lexique_1_w),
  C_lexique_table_entry ("if", 2, piccolo_lexique_1_if),
  C_lexique_table_entry ("bsr", 3, piccolo_lexique_1_bsr),
  C_lexique_table_entry ("end", 3, piccolo_lexique_1_end),
  C_lexique_table_entry ("ram", 3, piccolo_lexique_1_ram),
  C_lexique_table_entry ("byte", 4, piccolo_lexique_1_byte),
  C_lexique_table_entry ("mnop", 4, piccolo_lexique_1_mnop),
  C_lexique_table_entry ("label", 5, piccolo_lexique_1_label),
  C_lexique_table_entry ("config", 6, piccolo_lexique_1_config),
  C_lexique_table_entry ("banksel", 7, piccolo_lexique_1_banksel),
  C_lexique_table_entry ("forever", 7, piccolo_lexique_1_forever),
  C_lexique_table_entry ("program", 7, piccolo_lexique_1_program),
  C_lexique_table_entry ("routine", 7, piccolo_lexique_1_routine),
  C_lexique_table_entry ("noreturn", 8, piccolo_lexique_1_noreturn),
  C_lexique_table_entry ("interrupt", 9, piccolo_lexique_1_interrupt)
} ;

sint16 piccolo_lexique::search_into_controlKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, piccolo_lexique_table_for_controlKeyWordList, piccolo_lexique_table_size_controlKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Key words table 'instructionKeyWordList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 piccolo_lexique::piccolo_lexique_table_size_instructionKeyWordList = 68 ;

const C_lexique_table_entry piccolo_lexique::piccolo_lexique_table_for_instructionKeyWordList [68] = {
  C_lexique_table_entry ("bc", 2, piccolo_lexique_1_bc),
  C_lexique_table_entry ("bn", 2, piccolo_lexique_1_bn),
  C_lexique_table_entry ("bz", 2, piccolo_lexique_1_bz),
  C_lexique_table_entry ("bcf", 3, piccolo_lexique_1_bcf),
  C_lexique_table_entry ("bnc", 3, piccolo_lexique_1_bnc),
  C_lexique_table_entry ("bnn", 3, piccolo_lexique_1_bnn),
  C_lexique_table_entry ("bnz", 3, piccolo_lexique_1_bnz),
  C_lexique_table_entry ("bov", 3, piccolo_lexique_1_bov),
  C_lexique_table_entry ("bra", 3, piccolo_lexique_1_bra),
  C_lexique_table_entry ("bsf", 3, piccolo_lexique_1_bsf),
  C_lexique_table_entry ("btg", 3, piccolo_lexique_1_btg),
  C_lexique_table_entry ("daw", 3, piccolo_lexique_1_daw),
  C_lexique_table_entry ("nop", 3, piccolo_lexique_1_nop),
  C_lexique_table_entry ("pop", 3, piccolo_lexique_1_pop),
  C_lexique_table_entry ("bnov", 4, piccolo_lexique_1_bnov),
  C_lexique_table_entry ("call", 4, piccolo_lexique_1_call),
  C_lexique_table_entry ("clrf", 4, piccolo_lexique_1_clrf),
  C_lexique_table_entry ("comf", 4, piccolo_lexique_1_comf),
  C_lexique_table_entry ("decf", 4, piccolo_lexique_1_decf),
  C_lexique_table_entry ("goto", 4, piccolo_lexique_1_goto),
  C_lexique_table_entry ("incf", 4, piccolo_lexique_1_incf),
  C_lexique_table_entry ("lfsr", 4, piccolo_lexique_1_lfsr),
  C_lexique_table_entry ("movf", 4, piccolo_lexique_1_movf),
  C_lexique_table_entry ("negf", 4, piccolo_lexique_1_negf),
  C_lexique_table_entry ("push", 4, piccolo_lexique_1_push),
  C_lexique_table_entry ("rlcf", 4, piccolo_lexique_1_rlcf),
  C_lexique_table_entry ("rrcf", 4, piccolo_lexique_1_rrcf),
  C_lexique_table_entry ("setf", 4, piccolo_lexique_1_setf),
  C_lexique_table_entry ("addlw", 5, piccolo_lexique_1_addlw),
  C_lexique_table_entry ("addwf", 5, piccolo_lexique_1_addwf),
  C_lexique_table_entry ("andlw", 5, piccolo_lexique_1_andlw),
  C_lexique_table_entry ("andwf", 5, piccolo_lexique_1_andwf),
  C_lexique_table_entry ("btfsc", 5, piccolo_lexique_1_btfsc),
  C_lexique_table_entry ("btfss", 5, piccolo_lexique_1_btfss),
  C_lexique_table_entry ("iorlw", 5, piccolo_lexique_1_iorlw),
  C_lexique_table_entry ("iorwf", 5, piccolo_lexique_1_iorwf),
  C_lexique_table_entry ("movaw", 5, piccolo_lexique_1_movaw),
  C_lexique_table_entry ("movff", 5, piccolo_lexique_1_movff),
  C_lexique_table_entry ("movlb", 5, piccolo_lexique_1_movlb),
  C_lexique_table_entry ("movlw", 5, piccolo_lexique_1_movlw),
  C_lexique_table_entry ("movwf", 5, piccolo_lexique_1_movwf),
  C_lexique_table_entry ("mullw", 5, piccolo_lexique_1_mullw),
  C_lexique_table_entry ("mulwf", 5, piccolo_lexique_1_mulwf),
  C_lexique_table_entry ("rcall", 5, piccolo_lexique_1_rcall),
  C_lexique_table_entry ("reset", 5, piccolo_lexique_1_reset),
  C_lexique_table_entry ("retlw", 5, piccolo_lexique_1_retlw),
  C_lexique_table_entry ("rlncf", 5, piccolo_lexique_1_rlncf),
  C_lexique_table_entry ("rrncf", 5, piccolo_lexique_1_rrncf),
  C_lexique_table_entry ("sleep", 5, piccolo_lexique_1_sleep),
  C_lexique_table_entry ("sublw", 5, piccolo_lexique_1_sublw),
  C_lexique_table_entry ("subwf", 5, piccolo_lexique_1_subwf),
  C_lexique_table_entry ("swapf", 5, piccolo_lexique_1_swapf),
  C_lexique_table_entry ("tblrd", 5, piccolo_lexique_1_tblrd),
  C_lexique_table_entry ("tblwt", 5, piccolo_lexique_1_tblwt),
  C_lexique_table_entry ("xorlw", 5, piccolo_lexique_1_xorlw),
  C_lexique_table_entry ("xorwf", 5, piccolo_lexique_1_xorwf),
  C_lexique_table_entry ("addwfc", 6, piccolo_lexique_1_addwfc),
  C_lexique_table_entry ("clrwdt", 6, piccolo_lexique_1_clrwdt),
  C_lexique_table_entry ("cpfsgt", 6, piccolo_lexique_1_cpfsgt),
  C_lexique_table_entry ("cpfslt", 6, piccolo_lexique_1_cpfslt),
  C_lexique_table_entry ("dcfsnz", 6, piccolo_lexique_1_dcfsnz),
  C_lexique_table_entry ("decfsz", 6, piccolo_lexique_1_decfsz),
  C_lexique_table_entry ("incfsz", 6, piccolo_lexique_1_incfsz),
  C_lexique_table_entry ("infsnz", 6, piccolo_lexique_1_infsnz),
  C_lexique_table_entry ("return", 6, piccolo_lexique_1_return),
  C_lexique_table_entry ("subfwb", 6, piccolo_lexique_1_subfwb),
  C_lexique_table_entry ("subwfb", 6, piccolo_lexique_1_subwfb),
  C_lexique_table_entry ("tstfsz", 6, piccolo_lexique_1_tstfsz)
} ;

sint16 piccolo_lexique::search_into_instructionKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, piccolo_lexique_table_for_instructionKeyWordList, piccolo_lexique_table_size_instructionKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 piccolo_lexique::piccolo_lexique_table_size_delimitorsList = 14 ;

const C_lexique_table_entry piccolo_lexique::piccolo_lexique_table_for_delimitorsList [14] = {
  C_lexique_table_entry ("*", 1, piccolo_lexique_1__2A),
  C_lexique_table_entry (",", 1, piccolo_lexique_1__2C),
  C_lexique_table_entry (":", 1, piccolo_lexique_1__3A),
  C_lexique_table_entry (";", 1, piccolo_lexique_1__3B),
  C_lexique_table_entry ("[", 1, piccolo_lexique_1__5B),
  C_lexique_table_entry ("]", 1, piccolo_lexique_1__5D),
  C_lexique_table_entry ("{", 1, piccolo_lexique_1__7B),
  C_lexique_table_entry ("}", 1, piccolo_lexique_1__7D),
  C_lexique_table_entry ("!=", 2, piccolo_lexique_1__21_3D),
  C_lexique_table_entry ("*+", 2, piccolo_lexique_1__2A_2B),
  C_lexique_table_entry ("*-", 2, piccolo_lexique_1__2A_2D),
  C_lexique_table_entry ("+*", 2, piccolo_lexique_1__2B_2A),
  C_lexique_table_entry ("<=", 2, piccolo_lexique_1__3C_3D),
  C_lexique_table_entry (">=", 2, piccolo_lexique_1__3E_3D)
} ;

sint16 piccolo_lexique::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, piccolo_lexique_table_for_delimitorsList, piccolo_lexique_table_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String piccolo_lexique::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->_mTokenCode) {
    case  piccolo_lexique_1_:
      s << "$$" ;
      break ;
    case  piccolo_lexique_1_identifier:
      s << '$'
        << "identifier"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  piccolo_lexique_1_program:
      s << '$'
        << "program"
        << '$' ;
      break;
    case  piccolo_lexique_1_config:
      s << '$'
        << "config"
        << '$' ;
      break;
    case  piccolo_lexique_1_ram:
      s << '$'
        << "ram"
        << '$' ;
      break;
    case  piccolo_lexique_1_interrupt:
      s << '$'
        << "interrupt"
        << '$' ;
      break;
    case  piccolo_lexique_1_routine:
      s << '$'
        << "routine"
        << '$' ;
      break;
    case  piccolo_lexique_1_end:
      s << '$'
        << "end"
        << '$' ;
      break;
    case  piccolo_lexique_1_bsr:
      s << '$'
        << "bsr"
        << '$' ;
      break;
    case  piccolo_lexique_1_w:
      s << '$'
        << "w"
        << '$' ;
      break;
    case  piccolo_lexique_1_byte:
      s << '$'
        << "byte"
        << '$' ;
      break;
    case  piccolo_lexique_1_label:
      s << '$'
        << "label"
        << '$' ;
      break;
    case  piccolo_lexique_1_banksel:
      s << '$'
        << "banksel"
        << '$' ;
      break;
    case  piccolo_lexique_1_mnop:
      s << '$'
        << "mnop"
        << '$' ;
      break;
    case  piccolo_lexique_1_noreturn:
      s << '$'
        << "noreturn"
        << '$' ;
      break;
    case  piccolo_lexique_1_forever:
      s << '$'
        << "forever"
        << '$' ;
      break;
    case  piccolo_lexique_1_if:
      s << '$'
        << "if"
        << '$' ;
      break;
    case  piccolo_lexique_1_addwf:
      s << '$'
        << "addwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_addwfc:
      s << '$'
        << "addwfc"
        << '$' ;
      break;
    case  piccolo_lexique_1_andwf:
      s << '$'
        << "andwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_clrf:
      s << '$'
        << "clrf"
        << '$' ;
      break;
    case  piccolo_lexique_1_comf:
      s << '$'
        << "comf"
        << '$' ;
      break;
    case  piccolo_lexique_1_cpfsgt:
      s << '$'
        << "cpfsgt"
        << '$' ;
      break;
    case  piccolo_lexique_1_cpfslt:
      s << '$'
        << "cpfslt"
        << '$' ;
      break;
    case  piccolo_lexique_1_decf:
      s << '$'
        << "decf"
        << '$' ;
      break;
    case  piccolo_lexique_1_decfsz:
      s << '$'
        << "decfsz"
        << '$' ;
      break;
    case  piccolo_lexique_1_dcfsnz:
      s << '$'
        << "dcfsnz"
        << '$' ;
      break;
    case  piccolo_lexique_1_incf:
      s << '$'
        << "incf"
        << '$' ;
      break;
    case  piccolo_lexique_1_incfsz:
      s << '$'
        << "incfsz"
        << '$' ;
      break;
    case  piccolo_lexique_1_infsnz:
      s << '$'
        << "infsnz"
        << '$' ;
      break;
    case  piccolo_lexique_1_iorwf:
      s << '$'
        << "iorwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_movf:
      s << '$'
        << "movf"
        << '$' ;
      break;
    case  piccolo_lexique_1_movff:
      s << '$'
        << "movff"
        << '$' ;
      break;
    case  piccolo_lexique_1_movwf:
      s << '$'
        << "movwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_mulwf:
      s << '$'
        << "mulwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_negf:
      s << '$'
        << "negf"
        << '$' ;
      break;
    case  piccolo_lexique_1_rlcf:
      s << '$'
        << "rlcf"
        << '$' ;
      break;
    case  piccolo_lexique_1_rlncf:
      s << '$'
        << "rlncf"
        << '$' ;
      break;
    case  piccolo_lexique_1_rrcf:
      s << '$'
        << "rrcf"
        << '$' ;
      break;
    case  piccolo_lexique_1_rrncf:
      s << '$'
        << "rrncf"
        << '$' ;
      break;
    case  piccolo_lexique_1_setf:
      s << '$'
        << "setf"
        << '$' ;
      break;
    case  piccolo_lexique_1_subfwb:
      s << '$'
        << "subfwb"
        << '$' ;
      break;
    case  piccolo_lexique_1_subwf:
      s << '$'
        << "subwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_subwfb:
      s << '$'
        << "subwfb"
        << '$' ;
      break;
    case  piccolo_lexique_1_swapf:
      s << '$'
        << "swapf"
        << '$' ;
      break;
    case  piccolo_lexique_1_tstfsz:
      s << '$'
        << "tstfsz"
        << '$' ;
      break;
    case  piccolo_lexique_1_xorwf:
      s << '$'
        << "xorwf"
        << '$' ;
      break;
    case  piccolo_lexique_1_bcf:
      s << '$'
        << "bcf"
        << '$' ;
      break;
    case  piccolo_lexique_1_bsf:
      s << '$'
        << "bsf"
        << '$' ;
      break;
    case  piccolo_lexique_1_btfsc:
      s << '$'
        << "btfsc"
        << '$' ;
      break;
    case  piccolo_lexique_1_btfss:
      s << '$'
        << "btfss"
        << '$' ;
      break;
    case  piccolo_lexique_1_btg:
      s << '$'
        << "btg"
        << '$' ;
      break;
    case  piccolo_lexique_1_bc:
      s << '$'
        << "bc"
        << '$' ;
      break;
    case  piccolo_lexique_1_bn:
      s << '$'
        << "bn"
        << '$' ;
      break;
    case  piccolo_lexique_1_bnc:
      s << '$'
        << "bnc"
        << '$' ;
      break;
    case  piccolo_lexique_1_bnn:
      s << '$'
        << "bnn"
        << '$' ;
      break;
    case  piccolo_lexique_1_bnov:
      s << '$'
        << "bnov"
        << '$' ;
      break;
    case  piccolo_lexique_1_bnz:
      s << '$'
        << "bnz"
        << '$' ;
      break;
    case  piccolo_lexique_1_bov:
      s << '$'
        << "bov"
        << '$' ;
      break;
    case  piccolo_lexique_1_bra:
      s << '$'
        << "bra"
        << '$' ;
      break;
    case  piccolo_lexique_1_bz:
      s << '$'
        << "bz"
        << '$' ;
      break;
    case  piccolo_lexique_1_call:
      s << '$'
        << "call"
        << '$' ;
      break;
    case  piccolo_lexique_1_clrwdt:
      s << '$'
        << "clrwdt"
        << '$' ;
      break;
    case  piccolo_lexique_1_daw:
      s << '$'
        << "daw"
        << '$' ;
      break;
    case  piccolo_lexique_1_goto:
      s << '$'
        << "goto"
        << '$' ;
      break;
    case  piccolo_lexique_1_nop:
      s << '$'
        << "nop"
        << '$' ;
      break;
    case  piccolo_lexique_1_pop:
      s << '$'
        << "pop"
        << '$' ;
      break;
    case  piccolo_lexique_1_push:
      s << '$'
        << "push"
        << '$' ;
      break;
    case  piccolo_lexique_1_rcall:
      s << '$'
        << "rcall"
        << '$' ;
      break;
    case  piccolo_lexique_1_reset:
      s << '$'
        << "reset"
        << '$' ;
      break;
    case  piccolo_lexique_1_retlw:
      s << '$'
        << "retlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_return:
      s << '$'
        << "return"
        << '$' ;
      break;
    case  piccolo_lexique_1_sleep:
      s << '$'
        << "sleep"
        << '$' ;
      break;
    case  piccolo_lexique_1_addlw:
      s << '$'
        << "addlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_andlw:
      s << '$'
        << "andlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_iorlw:
      s << '$'
        << "iorlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_lfsr:
      s << '$'
        << "lfsr"
        << '$' ;
      break;
    case  piccolo_lexique_1_movlb:
      s << '$'
        << "movlb"
        << '$' ;
      break;
    case  piccolo_lexique_1_movlw:
      s << '$'
        << "movlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_mullw:
      s << '$'
        << "mullw"
        << '$' ;
      break;
    case  piccolo_lexique_1_sublw:
      s << '$'
        << "sublw"
        << '$' ;
      break;
    case  piccolo_lexique_1_xorlw:
      s << '$'
        << "xorlw"
        << '$' ;
      break;
    case  piccolo_lexique_1_tblrd:
      s << '$'
        << "tblrd"
        << '$' ;
      break;
    case  piccolo_lexique_1_tblwt:
      s << '$'
        << "tblwt"
        << '$' ;
      break;
    case  piccolo_lexique_1_movaw:
      s << '$'
        << "movaw"
        << '$' ;
      break;
    case  piccolo_lexique_1_integer:
      s << '$'
        << "integer"
        << '$' ;
    s << ' ' << _p->uint32value ;
      break;
    case  piccolo_lexique_1_literal_5Fchar:
      s << '$'
        << "literal_char"
        << '$' ;
    s << ' ' ;
    s.writeCcharConstant (_p->charValue) ;
      break;
    case  piccolo_lexique_1__2A:
      s << '$'
        << "*"
        << '$' ;
      break;
    case  piccolo_lexique_1__2A_2B:
      s << '$'
        << "*+"
        << '$' ;
      break;
    case  piccolo_lexique_1__2C:
      s << '$'
        << ","
        << '$' ;
      break;
    case  piccolo_lexique_1__21_3D:
      s << '$'
        << "!="
        << '$' ;
      break;
    case  piccolo_lexique_1__3C_3D:
      s << '$'
        << "<="
        << '$' ;
      break;
    case  piccolo_lexique_1__3E_3D:
      s << '$'
        << ">="
        << '$' ;
      break;
    case  piccolo_lexique_1__2A_2D:
      s << '$'
        << "*-"
        << '$' ;
      break;
    case  piccolo_lexique_1__2B_2A:
      s << '$'
        << "+*"
        << '$' ;
      break;
    case  piccolo_lexique_1__3B:
      s << '$'
        << ";"
        << '$' ;
      break;
    case  piccolo_lexique_1__3A:
      s << '$'
        << ":"
        << '$' ;
      break;
    case  piccolo_lexique_1__5B:
      s << '$'
        << "["
        << '$' ;
      break;
    case  piccolo_lexique_1__5D:
      s << '$'
        << "]"
        << '$' ;
      break;
    case  piccolo_lexique_1__7B:
      s << '$'
        << "{"
        << '$' ;
      break;
    case  piccolo_lexique_1__7D:
      s << '$'
        << "}"
        << '$' ;
      break;
    case  piccolo_lexique_1_literal_5Fstring:
      s << '$'
        << "literal_string"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  piccolo_lexique_1_comment:
      s << '$'
        << "comment"
        << '$' ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool piccolo_lexique::
parseLexicalToken (void) {
  cTokenFor_piccolo_lexique _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while ((_token._mTokenCode < 0) && (mCurrentChar != '\0')) {
    _token.identifierString.clear () ;
    _token.uint32value = 0 ;
    _token.charValue = '\0' ;
    _token.tokenString.clear () ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_instructionKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_controlKeyWordList (_token.identifierString) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = piccolo_lexique_1_identifier ;
        }
        _enterToken (_token) ;
      }else if (testForInputString ("0x", 2)) {
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('a', 'f')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('A', 'F')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = piccolo_lexique_1_integer ;
        _enterToken (_token) ;
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_1, gErrorMessage_2) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_1, gErrorMessage_2) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = piccolo_lexique_1_integer ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_4, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = piccolo_lexique_1_literal_5Fchar ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputString ("*+", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2A_2B ;
        _enterToken (_token) ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__21_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("<=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__3C_3D ;
        _enterToken (_token) ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__3E_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("*-", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2A_2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("+*", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2B_2A ;
        _enterToken (_token) ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = piccolo_lexique_1__2A ;
        _enterToken (_token) ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = piccolo_lexique_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = piccolo_lexique_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = piccolo_lexique_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = piccolo_lexique_1__5B ;
        _enterToken (_token) ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = piccolo_lexique_1__5D ;
        _enterToken (_token) ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = piccolo_lexique_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = piccolo_lexique_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_4, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = piccolo_lexique_1_literal_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = piccolo_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((mCurrentChar == '\0') && (_token._mTemplateStringBeforeToken.length () > 0)) {
    _token._mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 piccolo_lexique::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_piccolo_lexique _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.identifierString.clear () ;
    _token.uint32value = 0 ;
    _token.charValue = '\0' ;
    _token.tokenString.clear () ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_instructionKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_controlKeyWordList (_token.identifierString) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = piccolo_lexique_1_identifier ;
        }
      }else if (testForInputString ("0x", 2)) {
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('a', 'f')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('A', 'F')) {
            scanner_action_enterHexDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_0, gErrorMessage_2) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = piccolo_lexique_1_integer ;
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_1, gErrorMessage_2) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterDigitIntoUlong (_token.uint32value, previousChar (), gErrorMessage_1, gErrorMessage_2) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = piccolo_lexique_1_integer ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_4, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = piccolo_lexique_1_literal_5Fchar ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputString ("*+", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2A_2B ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__21_3D ;
      }else if (testForInputString ("<=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__3C_3D ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = piccolo_lexique_1__3E_3D ;
      }else if (testForInputString ("*-", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2A_2D ;
      }else if (testForInputString ("+*", 2)) {
        _token._mTokenCode = piccolo_lexique_1__2B_2A ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = piccolo_lexique_1__2A ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = piccolo_lexique_1__2C ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = piccolo_lexique_1__3B ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = piccolo_lexique_1__3A ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = piccolo_lexique_1__5B ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = piccolo_lexique_1__5D ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = piccolo_lexique_1__7B ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = piccolo_lexique_1__7D ;
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_4, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = piccolo_lexique_1_literal_5Fstring ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = piccolo_lexique_1_comment ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = piccolo_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 piccolo_lexique::getStylesCount (void) {
  return 8 ;
}

//---------------------------------------------------------------------------*

const char * piccolo_lexique::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [9] = {"Default style", "Keywords:", "Instructions:", "Delimiters:", "Integer Constants:", "Character Constants:", "String Constants:", "Comments:", NULL} ;
  return (inIndex < 8) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * piccolo_lexique::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [9] = {"", "keywordStyle", "instructionStyle", "delimitersStyle", "integerStyle", "characterStyle", "stringStyle", "commentStyle", NULL} ;
  return (inIndex < 8) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 piccolo_lexique::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [103] = {0,
    0 /* piccolo_lexique_1_identifier */,
    1 /* piccolo_lexique_1_program */,
    1 /* piccolo_lexique_1_config */,
    1 /* piccolo_lexique_1_ram */,
    1 /* piccolo_lexique_1_interrupt */,
    1 /* piccolo_lexique_1_routine */,
    1 /* piccolo_lexique_1_end */,
    1 /* piccolo_lexique_1_bsr */,
    1 /* piccolo_lexique_1_w */,
    1 /* piccolo_lexique_1_byte */,
    1 /* piccolo_lexique_1_label */,
    1 /* piccolo_lexique_1_banksel */,
    1 /* piccolo_lexique_1_mnop */,
    1 /* piccolo_lexique_1_noreturn */,
    1 /* piccolo_lexique_1_forever */,
    1 /* piccolo_lexique_1_if */,
    2 /* piccolo_lexique_1_addwf */,
    2 /* piccolo_lexique_1_addwfc */,
    2 /* piccolo_lexique_1_andwf */,
    2 /* piccolo_lexique_1_clrf */,
    2 /* piccolo_lexique_1_comf */,
    2 /* piccolo_lexique_1_cpfsgt */,
    2 /* piccolo_lexique_1_cpfslt */,
    2 /* piccolo_lexique_1_decf */,
    2 /* piccolo_lexique_1_decfsz */,
    2 /* piccolo_lexique_1_dcfsnz */,
    2 /* piccolo_lexique_1_incf */,
    2 /* piccolo_lexique_1_incfsz */,
    2 /* piccolo_lexique_1_infsnz */,
    2 /* piccolo_lexique_1_iorwf */,
    2 /* piccolo_lexique_1_movf */,
    2 /* piccolo_lexique_1_movff */,
    2 /* piccolo_lexique_1_movwf */,
    2 /* piccolo_lexique_1_mulwf */,
    2 /* piccolo_lexique_1_negf */,
    2 /* piccolo_lexique_1_rlcf */,
    2 /* piccolo_lexique_1_rlncf */,
    2 /* piccolo_lexique_1_rrcf */,
    2 /* piccolo_lexique_1_rrncf */,
    2 /* piccolo_lexique_1_setf */,
    2 /* piccolo_lexique_1_subfwb */,
    2 /* piccolo_lexique_1_subwf */,
    2 /* piccolo_lexique_1_subwfb */,
    2 /* piccolo_lexique_1_swapf */,
    2 /* piccolo_lexique_1_tstfsz */,
    2 /* piccolo_lexique_1_xorwf */,
    2 /* piccolo_lexique_1_bcf */,
    2 /* piccolo_lexique_1_bsf */,
    2 /* piccolo_lexique_1_btfsc */,
    2 /* piccolo_lexique_1_btfss */,
    2 /* piccolo_lexique_1_btg */,
    2 /* piccolo_lexique_1_bc */,
    2 /* piccolo_lexique_1_bn */,
    2 /* piccolo_lexique_1_bnc */,
    2 /* piccolo_lexique_1_bnn */,
    2 /* piccolo_lexique_1_bnov */,
    2 /* piccolo_lexique_1_bnz */,
    2 /* piccolo_lexique_1_bov */,
    2 /* piccolo_lexique_1_bra */,
    2 /* piccolo_lexique_1_bz */,
    2 /* piccolo_lexique_1_call */,
    2 /* piccolo_lexique_1_clrwdt */,
    2 /* piccolo_lexique_1_daw */,
    2 /* piccolo_lexique_1_goto */,
    2 /* piccolo_lexique_1_nop */,
    2 /* piccolo_lexique_1_pop */,
    2 /* piccolo_lexique_1_push */,
    2 /* piccolo_lexique_1_rcall */,
    2 /* piccolo_lexique_1_reset */,
    2 /* piccolo_lexique_1_retlw */,
    2 /* piccolo_lexique_1_return */,
    2 /* piccolo_lexique_1_sleep */,
    2 /* piccolo_lexique_1_addlw */,
    2 /* piccolo_lexique_1_andlw */,
    2 /* piccolo_lexique_1_iorlw */,
    2 /* piccolo_lexique_1_lfsr */,
    2 /* piccolo_lexique_1_movlb */,
    2 /* piccolo_lexique_1_movlw */,
    2 /* piccolo_lexique_1_mullw */,
    2 /* piccolo_lexique_1_sublw */,
    2 /* piccolo_lexique_1_xorlw */,
    2 /* piccolo_lexique_1_tblrd */,
    2 /* piccolo_lexique_1_tblwt */,
    2 /* piccolo_lexique_1_movaw */,
    4 /* piccolo_lexique_1_integer */,
    5 /* piccolo_lexique_1_literal_5Fchar */,
    3 /* piccolo_lexique_1__2A */,
    3 /* piccolo_lexique_1__2A_2B */,
    3 /* piccolo_lexique_1__2C */,
    3 /* piccolo_lexique_1__21_3D */,
    3 /* piccolo_lexique_1__3C_3D */,
    3 /* piccolo_lexique_1__3E_3D */,
    3 /* piccolo_lexique_1__2A_2D */,
    3 /* piccolo_lexique_1__2B_2A */,
    3 /* piccolo_lexique_1__3B */,
    3 /* piccolo_lexique_1__3A */,
    3 /* piccolo_lexique_1__5B */,
    3 /* piccolo_lexique_1__5D */,
    3 /* piccolo_lexique_1__7B */,
    3 /* piccolo_lexique_1__7D */,
    6 /* piccolo_lexique_1_literal_5Fstring */,
    7 /* piccolo_lexique_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void piccolo_lexique::_enterToken (const cTokenFor_piccolo_lexique & inToken) {
  cTokenFor_piccolo_lexique * _p = NULL ;
  macroMyNew (_p, cTokenFor_piccolo_lexique ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mFirstLocation = _mTokenFirstLocation ;
  _p->_mLastLocation  = _mTokenLastLocation ;
  _p->_mTemplateStringBeforeToken  = inToken._mTemplateStringBeforeToken ;
  _p->identifierString = inToken.identifierString ;
  _p->uint32value = inToken.uint32value ;
  _p->charValue = inToken.charValue ;
  _p->tokenString = inToken.tokenString ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void piccolo_lexique::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String piccolo_lexique::
_attributeValue_identifierString (void) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  return _p->identifierString ;
}

//---------------------------------------------------------------------------*

void piccolo_lexique::
_assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->uint32value) ;
}

//---------------------------------------------------------------------------*

uint32 piccolo_lexique::
_attributeValue_uint32value (void) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  return _p->uint32value ;
}

//---------------------------------------------------------------------------*

void piccolo_lexique::
_assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, _p->charValue) ;
}

//---------------------------------------------------------------------------*

char piccolo_lexique::
_attributeValue_charValue (void) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  return _p->charValue ;
}

//---------------------------------------------------------------------------*

void piccolo_lexique::
_assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->tokenString) ;
}

//---------------------------------------------------------------------------*

C_String piccolo_lexique::
_attributeValue_tokenString (void) const {
  cTokenFor_piccolo_lexique * _p = (cTokenFor_piccolo_lexique *) mCurrentTokenPtr ;
  return _p->tokenString ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

