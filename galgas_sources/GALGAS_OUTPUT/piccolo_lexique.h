//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'piccolo_lexique.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     february 10th, 2010, at 17h21'3"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


#ifndef piccolo_5F_lexique_0_DEFINED
#define piccolo_5F_lexique_0_DEFINED

//---------------------------------------------------------------------------*

#include "galgas/GGS_lstring.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_lbool.h"
#include "galgas-utilities/C_Lexique.h"

//---------------------------------------------------------------------------*

#include "galgas2/predefined-types.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    R O U T I N E S                         *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    F U N C T I O N S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                       T O K E N    C L A S S                              *
//                                                                           *
//---------------------------------------------------------------------------*

class cTokenFor_piccolo_5F_lexique : public cToken {
  public : utf32 mLexicalAttribute_charValue ;
  public : C_String mLexicalAttribute_identifierString ;
  public : C_String mLexicalAttribute_tokenString ;
  public : PMUInt32 mLexicalAttribute_uint_33__32_value ;

  public : cTokenFor_piccolo_5F_lexique (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     S C A N N E R    C L A S S                            *
//                                                                           *
//---------------------------------------------------------------------------*

class C_Lexique_piccolo_5F_lexique : public C_Lexique {
//--- Constructors
  public : C_Lexique_piccolo_5F_lexique (C_Compiler * inCallerCompiler,
                       const C_String & inDependencyFileExtension,
                       const C_String & inDependencyFilePath,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public : C_Lexique_piccolo_5F_lexique (C_Compiler * inCallerCompiler,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceString,
                       const C_String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~ C_Lexique_piccolo_5F_lexique (void) {}
  #endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


//--- Terminal symbols enumeration
  public : enum {kToken_,
   kToken_identifier,
   kToken_integer,
   kToken_literal_5F_char,
   kToken_literal_5F_string,
   kToken_comment,
   kToken_bank,
   kToken_banksave,
   kToken_banksel,
   kToken_baseline,
   kToken_bootloader,
   kToken_byte,
   kToken_common,
   kToken_computed,
   kToken_configuration,
   kToken_const,
   kToken_contextsave,
   kToken_default,
   kToken_do,
   kToken_end,
   kToken_else,
   kToken_elsif,
   kToken_fast,
   kToken_forever,
   kToken_if,
   kToken_implements,
   kToken_interrupt,
   kToken_mark,
   kToken_midrange,
   kToken_nobank,
   kToken_noreturn,
   kToken_page,
   kToken_pic_31__38_,
   kToken_preserved,
   kToken_ram,
   kToken_requires,
   kToken_rom,
   kToken_ensures,
   kToken_routine,
   kToken_uses,
   kToken_w,
   kToken_while,
   kToken_addlw,
   kToken_addwf,
   kToken_addwfc,
   kToken_andlw,
   kToken_andwf,
   kToken_bc,
   kToken_bcf,
   kToken_bn,
   kToken_bnc,
   kToken_bnn,
   kToken_bov,
   kToken_bnov,
   kToken_bnz,
   kToken_bsf,
   kToken_bra,
   kToken_btg,
   kToken_bz,
   kToken_call,
   kToken_clrf,
   kToken_clrw,
   kToken_clrwdt,
   kToken_comf,
   kToken_daw,
   kToken_decf,
   kToken_incf,
   kToken_iorlw,
   kToken_iorwf,
   kToken_goto,
   kToken_jsr,
   kToken_jump,
   kToken_lfsr,
   kToken_mnop,
   kToken_movf,
   kToken_movff,
   kToken_movlw,
   kToken_movwf,
   kToken_mullw,
   kToken_mulwf,
   kToken_negf,
   kToken_nop,
   kToken_pop,
   kToken_push,
   kToken_rcall,
   kToken_reset,
   kToken_retlw,
   kToken_rlcf,
   kToken_rlf,
   kToken_rlncf,
   kToken_rrcf,
   kToken_rrf,
   kToken_rrncf,
   kToken_setf,
   kToken_sleep,
   kToken_subfwb,
   kToken_sublw,
   kToken_subwf,
   kToken_subwfb,
   kToken_swapf,
   kToken_tblrd,
   kToken_tblwt,
   kToken_xorlw,
   kToken_xorwf,
   kToken__2A_,
   kToken__2A__2B_,
   kToken__2C_,
   kToken__21__3D_,
   kToken__3C__3D_,
   kToken__3E__3D_,
   kToken__2A__2D_,
   kToken__2B__2A_,
   kToken__3B_,
   kToken__3A_,
   kToken__3D__3D_,
   kToken__3C_,
   kToken__3E_,
   kToken__5B_,
   kToken__5D_,
   kToken__2E_,
   kToken__21_,
   kToken__26_,
   kToken__7C_,
   kToken__3D_,
   kToken__7B_,
   kToken__7D_,
   kToken__28_,
   kToken__29_,
   kToken__2F_,
   kToken__2D_,
   kToken__2B_,
   kToken__5E_,
   kToken__3C__3C_,
   kToken__3E__3E_,
   kToken__7E_,
   kToken__25_,
   kToken__40_} ;

//--- Key words table 'controlKeyWordList'
  public : static PMSInt16 search_into_controlKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'instructionKeyWordList'
  public : static PMSInt16 search_into_instructionKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'delimitorsList'
  public : static PMSInt16 search_into_delimitorsList (const C_String & inSearchedString) ;
  

//--- Assign from attribute (v1)
  public : void assignFromAttribute_charValue (GGS_lchar & outValue) const ;
  public : void assignFromAttribute_identifierString (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_tokenString (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_uint_33__32_value (GGS_luint & outValue) const ;


//--- Assign from attribute (v2)
  public : GALGAS_lchar * synthetizedAttribute_charValue (void) const ;
  public : GALGAS_lstring * synthetizedAttribute_identifierString (void) const ;
  public : GALGAS_lstring * synthetizedAttribute_tokenString (void) const ;
  public : GALGAS_luint * synthetizedAttribute_uint_33__32_value (void) const ;


//--- Attribute access
  public : utf32 attributeValue_charValue (void) const ;
  public : C_String attributeValue_identifierString (void) const ;
  public : C_String attributeValue_tokenString (void) const ;
  public : PMUInt32 attributeValue_uint_33__32_value (void) const ;


//--- Parse lexical token
  protected : virtual bool parseLexicalToken (void) ;

//--- Append terminal message
  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,
                                                              C_String & messageErreur) ;

//--- Get terminal count
  public : virtual PMSInt16 terminalVocabularyCount (void) const { return 136 ; }

//--- Get Token String
  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;

//--- Enter Token
  protected : void enterToken (const cTokenFor_piccolo_5F_lexique & inToken) ;
} ;

//---------------------------------------------------------------------------*

#endif
