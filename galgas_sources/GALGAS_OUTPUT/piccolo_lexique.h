//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'piccolo_lexique.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 19th, 2009, at 22h22'2"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_lexique_0_DEFINED
#define piccolo_lexique_0_DEFINED

//---------------------------------------------------------------------------*

#include "galgas/GGS_lstring.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_lbool.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          Lexical scanner class                            *
//                                                                           *
//---------------------------------------------------------------------------*

class cTokenFor_piccolo_lexique : public cToken {
  public : C_String identifierString ; // user defined attribute
  public : uint32 uint32value ; // user defined attribute
  public : utf32 charValue ; // user defined attribute
  public : C_String tokenString ; // user defined attribute

  public : cTokenFor_piccolo_lexique (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Lexical scanner class                            *
//                                                                           *
//---------------------------------------------------------------------------*

class piccolo_lexique : public C_Lexique {
//--- Constructors
  public : piccolo_lexique (C_Compiler * inCallerCompiler,
                       const C_String & inDependencyFileExtension,
                       const C_String & inDependencyFilePath,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public : piccolo_lexique (C_Compiler * inCallerCompiler,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceString,
                       const C_String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~piccolo_lexique (void) {}
  #endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//--- Terminal symbols enumeration
  public : enum {piccolo_lexique_1_,
  piccolo_lexique_1_identifier,
  piccolo_lexique_1_bank,
  piccolo_lexique_1_banksave,
  piccolo_lexique_1_banksel,
  piccolo_lexique_1_baseline,
  piccolo_lexique_1_bootloader,
  piccolo_lexique_1_byte,
  piccolo_lexique_1_common,
  piccolo_lexique_1_computed,
  piccolo_lexique_1_configuration,
  piccolo_lexique_1_const,
  piccolo_lexique_1_contextsave,
  piccolo_lexique_1_default,
  piccolo_lexique_1_do,
  piccolo_lexique_1_end,
  piccolo_lexique_1_else,
  piccolo_lexique_1_elsif,
  piccolo_lexique_1_fast,
  piccolo_lexique_1_forever,
  piccolo_lexique_1_if,
  piccolo_lexique_1_implements,
  piccolo_lexique_1_interrupt,
  piccolo_lexique_1_mark,
  piccolo_lexique_1_midrange,
  piccolo_lexique_1_nobank,
  piccolo_lexique_1_noreturn,
  piccolo_lexique_1_page,
  piccolo_lexique_1_pic18,
  piccolo_lexique_1_preserved,
  piccolo_lexique_1_ram,
  piccolo_lexique_1_requires,
  piccolo_lexique_1_rom,
  piccolo_lexique_1_ensures,
  piccolo_lexique_1_routine,
  piccolo_lexique_1_uses,
  piccolo_lexique_1_w,
  piccolo_lexique_1_while,
  piccolo_lexique_1_addlw,
  piccolo_lexique_1_addwf,
  piccolo_lexique_1_addwfc,
  piccolo_lexique_1_andlw,
  piccolo_lexique_1_andwf,
  piccolo_lexique_1_bc,
  piccolo_lexique_1_bcf,
  piccolo_lexique_1_bn,
  piccolo_lexique_1_bnc,
  piccolo_lexique_1_bnn,
  piccolo_lexique_1_bov,
  piccolo_lexique_1_bnov,
  piccolo_lexique_1_bnz,
  piccolo_lexique_1_bsf,
  piccolo_lexique_1_bra,
  piccolo_lexique_1_btg,
  piccolo_lexique_1_bz,
  piccolo_lexique_1_call,
  piccolo_lexique_1_clrf,
  piccolo_lexique_1_clrw,
  piccolo_lexique_1_clrwdt,
  piccolo_lexique_1_comf,
  piccolo_lexique_1_daw,
  piccolo_lexique_1_decf,
  piccolo_lexique_1_incf,
  piccolo_lexique_1_iorlw,
  piccolo_lexique_1_iorwf,
  piccolo_lexique_1_goto,
  piccolo_lexique_1_jsr,
  piccolo_lexique_1_jump,
  piccolo_lexique_1_lfsr,
  piccolo_lexique_1_mnop,
  piccolo_lexique_1_movf,
  piccolo_lexique_1_movff,
  piccolo_lexique_1_movlw,
  piccolo_lexique_1_movwf,
  piccolo_lexique_1_mullw,
  piccolo_lexique_1_mulwf,
  piccolo_lexique_1_negf,
  piccolo_lexique_1_nop,
  piccolo_lexique_1_pop,
  piccolo_lexique_1_push,
  piccolo_lexique_1_rcall,
  piccolo_lexique_1_reset,
  piccolo_lexique_1_retlw,
  piccolo_lexique_1_rlcf,
  piccolo_lexique_1_rlf,
  piccolo_lexique_1_rlncf,
  piccolo_lexique_1_rrcf,
  piccolo_lexique_1_rrf,
  piccolo_lexique_1_rrncf,
  piccolo_lexique_1_setf,
  piccolo_lexique_1_sleep,
  piccolo_lexique_1_subfwb,
  piccolo_lexique_1_sublw,
  piccolo_lexique_1_subwf,
  piccolo_lexique_1_subwfb,
  piccolo_lexique_1_swapf,
  piccolo_lexique_1_tblrd,
  piccolo_lexique_1_tblwt,
  piccolo_lexique_1_xorlw,
  piccolo_lexique_1_xorwf,
  piccolo_lexique_1_integer,
  piccolo_lexique_1_literal_5Fchar,
  piccolo_lexique_1__2A,
  piccolo_lexique_1__2A_2B,
  piccolo_lexique_1__2C,
  piccolo_lexique_1__21_3D,
  piccolo_lexique_1__3C_3D,
  piccolo_lexique_1__3E_3D,
  piccolo_lexique_1__2A_2D,
  piccolo_lexique_1__2B_2A,
  piccolo_lexique_1__3B,
  piccolo_lexique_1__3A,
  piccolo_lexique_1__3D_3D,
  piccolo_lexique_1__3C,
  piccolo_lexique_1__3E,
  piccolo_lexique_1__5B,
  piccolo_lexique_1__5D,
  piccolo_lexique_1__2E,
  piccolo_lexique_1__21,
  piccolo_lexique_1__26,
  piccolo_lexique_1__7C,
  piccolo_lexique_1__3D,
  piccolo_lexique_1__7B,
  piccolo_lexique_1__7D,
  piccolo_lexique_1__28,
  piccolo_lexique_1__29,
  piccolo_lexique_1__2F,
  piccolo_lexique_1__2D,
  piccolo_lexique_1__2B,
  piccolo_lexique_1__5E,
  piccolo_lexique_1__3C_3C,
  piccolo_lexique_1__3E_3E,
  piccolo_lexique_1__7E,
  piccolo_lexique_1__25,
  piccolo_lexique_1__40,
  piccolo_lexique_1_literal_5Fstring,
  piccolo_lexique_1_comment} ;

//--- Key words table 'controlKeyWordList'
  public : static sint16 search_into_controlKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'instructionKeyWordList'
  public : static sint16 search_into_instructionKeyWordList (const C_String & inSearchedString) ;

//--- Key words table 'delimitorsList'
  public : static sint16 search_into_delimitorsList (const C_String & inSearchedString) ;

  protected : virtual bool parseLexicalToken (void) ;
  protected : virtual sint16 parseLexicalTokenForLexicalColoring (void) ;
  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,
                                                              C_String & messageErreur) ;

//--- Get attribute values
  public : void _assignFromAttribute_identifierString (GGS_lstring & outValue) const ;
  public : C_String _attributeValue_identifierString (void) const ;
  public : void _assignFromAttribute_uint32value (GGS_luint & outValue) const ;
  public : uint32 _attributeValue_uint32value (void) const ;
  public : void _assignFromAttribute_charValue (GGS_lchar & outValue) const ;
  public : utf32 _attributeValue_charValue (void) const ;
  public : void _assignFromAttribute_tokenString (GGS_lstring & outValue) const ;
  public : C_String _attributeValue_tokenString (void) const ;
//--- Get terminal count
  public : virtual sint16 terminalVocabularyCount (void) const { return 136 ; }
//--- Get Token String
  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;
//--- Enter Token
  protected : void enterToken (const cTokenFor_piccolo_lexique & inToken) ;
//--- Style Definition
  public : static sint32 getStylesCount (void) ;
  public : static const char * getStyleName (const sint32 inIndex) ;
  public : static const char * getStyleIdentifier (const sint32 inIndex) ;
//--- Virtual method called getting terminal style index
  public : virtual uint8 terminalStyleIndex (const sint32 inTerminal) ;
} ;

//---------------------------------------------------------------------------*

#endif
