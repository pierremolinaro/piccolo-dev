//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_metamodel.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 17th, 2008, at 14h32'21"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_metamodel_DEFINED
#define piccolo_metamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "piccolo_options.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction ;
class cPtr_instruction ;
class GGS_instructionList ;
class GGS_registerExpression ;
class cPtr_registerExpression ;
class GGS_instruction_FDA ;
class cPtr_instruction_FDA ;
class GGS_instruction_ADDWF ;
class cPtr_instruction_ADDWF ;
class GGS_instruction_ADDWFC ;
class cPtr_instruction_ADDWFC ;
class GGS_instruction_ANDWF ;
class cPtr_instruction_ANDWF ;
class GGS_instruction_COMF ;
class cPtr_instruction_COMF ;
class GGS_instruction_DECF ;
class cPtr_instruction_DECF ;
class GGS_instruction_DECFSZ ;
class cPtr_instruction_DECFSZ ;
class GGS_instruction_DCFSNZ ;
class cPtr_instruction_DCFSNZ ;
class GGS_instruction_INCF ;
class cPtr_instruction_INCF ;
class GGS_instruction_INCFSZ ;
class cPtr_instruction_INCFSZ ;
class GGS_instruction_INFSNZ ;
class cPtr_instruction_INFSNZ ;
class GGS_instruction_IORWF ;
class cPtr_instruction_IORWF ;
class GGS_instruction_MOVF ;
class cPtr_instruction_MOVF ;
class GGS_instruction_RLCF ;
class cPtr_instruction_RLCF ;
class GGS_instruction_RLNCF ;
class cPtr_instruction_RLNCF ;
class GGS_instruction_RRCF ;
class cPtr_instruction_RRCF ;
class GGS_instruction_RRNCF ;
class cPtr_instruction_RRNCF ;
class GGS_instruction_SUBFWB ;
class cPtr_instruction_SUBFWB ;
class GGS_instruction_SUBWF ;
class cPtr_instruction_SUBWF ;
class GGS_instruction_SUBWFB ;
class cPtr_instruction_SUBWFB ;
class GGS_instruction_SWAPF ;
class cPtr_instruction_SWAPF ;
class GGS_instruction_XORWF ;
class cPtr_instruction_XORWF ;
class GGS_instruction_FA ;
class cPtr_instruction_FA ;
class GGS_instruction_CLRF ;
class cPtr_instruction_CLRF ;
class GGS_instruction_CPFSEQ ;
class cPtr_instruction_CPFSEQ ;
class GGS_instruction_CPFSGT ;
class cPtr_instruction_CPFSGT ;
class GGS_instruction_CPFSLT ;
class cPtr_instruction_CPFSLT ;
class GGS_instruction_MOVWF ;
class cPtr_instruction_MOVWF ;
class GGS_instruction_MULWF ;
class cPtr_instruction_MULWF ;
class GGS_instruction_NEGF ;
class cPtr_instruction_NEGF ;
class GGS_instruction_SETF ;
class cPtr_instruction_SETF ;
class GGS_instruction_TSTFSZ ;
class cPtr_instruction_TSTFSZ ;
class GGS_instruction_MOVFF ;
class cPtr_instruction_MOVFF ;
class GGS_bitNumberExpression ;
class cPtr_bitNumberExpression ;
class GGS_bitNumberLiteralValue ;
class cPtr_bitNumberLiteralValue ;
class GGS_bitNumberLabelValue ;
class cPtr_bitNumberLabelValue ;
class GGS_instruction_FBA ;
class cPtr_instruction_FBA ;
class GGS_instruction_BCF ;
class cPtr_instruction_BCF ;
class GGS_instruction_BSF ;
class cPtr_instruction_BSF ;
class GGS_instruction_BTFSC ;
class cPtr_instruction_BTFSC ;
class GGS_instruction_BTFSS ;
class cPtr_instruction_BTFSS ;
class GGS_instruction_BTG ;
class cPtr_instruction_BTG ;
class GGS_instruction_conditionalBranch ;
class cPtr_instruction_conditionalBranch ;
class GGS_instruction_BC ;
class cPtr_instruction_BC ;
class GGS_instruction_BN ;
class cPtr_instruction_BN ;
class GGS_instruction_BNC ;
class cPtr_instruction_BNC ;
class GGS_instruction_BNN ;
class cPtr_instruction_BNN ;
class GGS_instruction_BNOV ;
class cPtr_instruction_BNOV ;
class GGS_instruction_BNZ ;
class cPtr_instruction_BNZ ;
class GGS_instruction_BOV ;
class cPtr_instruction_BOV ;
class GGS_instruction_BZ ;
class cPtr_instruction_BZ ;
class GGS_instruction_BRA ;
class cPtr_instruction_BRA ;
class GGS_instruction_CALL ;
class cPtr_instruction_CALL ;
class GGS_instruction_GOTO ;
class cPtr_instruction_GOTO ;
class GGS_instruction_RCALL ;
class cPtr_instruction_RCALL ;
class GGS_instruction_CLRWDT ;
class cPtr_instruction_CLRWDT ;
class GGS_instruction_DAW ;
class cPtr_instruction_DAW ;
class GGS_instruction_NOP ;
class cPtr_instruction_NOP ;
class GGS_instruction_POP ;
class cPtr_instruction_POP ;
class GGS_instruction_PUSH ;
class cPtr_instruction_PUSH ;
class GGS_instruction_RESET ;
class cPtr_instruction_RESET ;
class GGS_instruction_RETURN ;
class cPtr_instruction_RETURN ;
class GGS_instruction_SLEEP ;
class cPtr_instruction_SLEEP ;
class GGS_instruction_literalOperation ;
class cPtr_instruction_literalOperation ;
class GGS_instruction_ADDLW ;
class cPtr_instruction_ADDLW ;
class GGS_instruction_ANDLW ;
class cPtr_instruction_ANDLW ;
class GGS_instruction_IORLW ;
class cPtr_instruction_IORLW ;
class GGS_instruction_MOVLW ;
class cPtr_instruction_MOVLW ;
class GGS_instruction_MULLW ;
class cPtr_instruction_MULLW ;
class GGS_instruction_RETLW ;
class cPtr_instruction_RETLW ;
class GGS_instruction_SUBLW ;
class cPtr_instruction_SUBLW ;
class GGS_instruction_XORLW ;
class cPtr_instruction_XORLW ;
class GGS_instruction_LFSR ;
class cPtr_instruction_LFSR ;
class GGS_instruction_MOVLB ;
class cPtr_instruction_MOVLB ;
class GGS_instruction_LABEL ;
class cPtr_instruction_LABEL ;
class GGS_instruction_MOVAW ;
class cPtr_instruction_MOVAW ;
class GGS_tableAccessOption ;
class GGS_instruction_TBLRD ;
class cPtr_instruction_TBLRD ;
class GGS_instruction_TBLWT ;
class cPtr_instruction_TBLWT ;
class GGS_interruptDefinitionList ;
class GGS_routineDefinitionList ;
class GGS_ramDefinitionList ;
class GGS_piccoloModel ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_instruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_instruction (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction * getPtr (void) const {
    return (cPtr_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__instruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@instructionList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_instructionList ;

class GGS_instructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_instructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_instructionList constructor_emptyList (void) ;
  public : static GGS_instructionList constructor_listWithValue (const GGS_instruction & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_instructionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_instructionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_instructionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_instructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_instruction & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_instruction & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_instruction & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_instruction & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_instructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_instruction & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_instructionList _operator_concat (const GGS_instructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_instruction 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_instruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_instructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_instruction   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_registerExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_registerExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_registerExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_registerExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_registerExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_registerExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_registerExpression * getPtr (void) const {
    return (cPtr_registerExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mOffset (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_registerExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_registerExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_registerExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__registerExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FDA'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FDA : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_FDA (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FDA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FDA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FDA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FDA * getPtr (void) const {
    return (cPtr_instruction_FDA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FDA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FDA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FDA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FDA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_ADDWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_ADDWF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_ADDWF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_ADDWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_ADDWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_ADDWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_ADDWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_ADDWF * getPtr (void) const {
    return (cPtr_instruction_ADDWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_ADDWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_ADDWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_ADDWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_ADDWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_ADDWFC'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_ADDWFC : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_ADDWFC (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_ADDWFC (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_ADDWFC (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_ADDWFC
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_ADDWFC constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_ADDWFC * getPtr (void) const {
    return (cPtr_instruction_ADDWFC *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_ADDWFC * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_ADDWFC * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_ADDWFC *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_ADDWFC ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_ANDWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_ANDWF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_ANDWF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_ANDWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_ANDWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_ANDWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_ANDWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_ANDWF * getPtr (void) const {
    return (cPtr_instruction_ANDWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_ANDWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_ANDWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_ANDWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_ANDWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_COMF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_COMF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_COMF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_COMF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_COMF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_COMF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_COMF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_COMF * getPtr (void) const {
    return (cPtr_instruction_COMF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_COMF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_COMF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_COMF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_COMF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_DECF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_DECF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_DECF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_DECF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_DECF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_DECF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_DECF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_DECF * getPtr (void) const {
    return (cPtr_instruction_DECF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_DECF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_DECF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_DECF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_DECF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_DECFSZ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_DECFSZ : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_DECFSZ (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_DECFSZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_DECFSZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_DECFSZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_DECFSZ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_DECFSZ * getPtr (void) const {
    return (cPtr_instruction_DECFSZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_DECFSZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_DECFSZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_DECFSZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_DECFSZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_DCFSNZ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_DCFSNZ : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_DCFSNZ (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_DCFSNZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_DCFSNZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_DCFSNZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_DCFSNZ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_DCFSNZ * getPtr (void) const {
    return (cPtr_instruction_DCFSNZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_DCFSNZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_DCFSNZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_DCFSNZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_DCFSNZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_INCF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_INCF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_INCF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_INCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_INCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_INCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_INCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_INCF * getPtr (void) const {
    return (cPtr_instruction_INCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_INCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_INCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_INCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_INCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_INCFSZ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_INCFSZ : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_INCFSZ (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_INCFSZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_INCFSZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_INCFSZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_INCFSZ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_INCFSZ * getPtr (void) const {
    return (cPtr_instruction_INCFSZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_INCFSZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_INCFSZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_INCFSZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_INCFSZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_INFSNZ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_INFSNZ : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_INFSNZ (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_INFSNZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_INFSNZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_INFSNZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_INFSNZ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_INFSNZ * getPtr (void) const {
    return (cPtr_instruction_INFSNZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_INFSNZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_INFSNZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_INFSNZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_INFSNZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_IORWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IORWF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_IORWF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IORWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IORWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IORWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_IORWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IORWF * getPtr (void) const {
    return (cPtr_instruction_IORWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IORWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IORWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IORWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IORWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_MOVF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVF * getPtr (void) const {
    return (cPtr_instruction_MOVF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RLCF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RLCF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_RLCF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RLCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RLCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RLCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RLCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RLCF * getPtr (void) const {
    return (cPtr_instruction_RLCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RLCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RLCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RLCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RLCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RLNCF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RLNCF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_RLNCF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RLNCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RLNCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RLNCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RLNCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RLNCF * getPtr (void) const {
    return (cPtr_instruction_RLNCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RLNCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RLNCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RLNCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RLNCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RRCF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RRCF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_RRCF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RRCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RRCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RRCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RRCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RRCF * getPtr (void) const {
    return (cPtr_instruction_RRCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RRCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RRCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RRCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RRCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RRNCF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RRNCF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_RRNCF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RRNCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RRNCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RRNCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RRNCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RRNCF * getPtr (void) const {
    return (cPtr_instruction_RRNCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RRNCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RRNCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RRNCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RRNCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_SUBFWB'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SUBFWB : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_SUBFWB (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SUBFWB (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SUBFWB (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SUBFWB
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SUBFWB constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SUBFWB * getPtr (void) const {
    return (cPtr_instruction_SUBFWB *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SUBFWB * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SUBFWB * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SUBFWB *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SUBFWB ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SUBWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SUBWF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_SUBWF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SUBWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SUBWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SUBWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SUBWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SUBWF * getPtr (void) const {
    return (cPtr_instruction_SUBWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SUBWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SUBWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SUBWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SUBWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_SUBWFB'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SUBWFB : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_SUBWFB (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SUBWFB (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SUBWFB (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SUBWFB
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SUBWFB constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SUBWFB * getPtr (void) const {
    return (cPtr_instruction_SUBWFB *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SUBWFB * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SUBWFB * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SUBWFB *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SUBWFB ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SWAPF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SWAPF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_SWAPF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SWAPF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SWAPF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SWAPF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SWAPF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SWAPF * getPtr (void) const {
    return (cPtr_instruction_SWAPF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SWAPF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SWAPF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SWAPF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SWAPF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_XORWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_XORWF : public GGS_instruction_FDA {
//--- Default constructor
  public : inline GGS_instruction_XORWF (void) : GGS_instruction_FDA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_XORWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_XORWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_XORWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_XORWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_XORWF * getPtr (void) const {
    return (cPtr_instruction_XORWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_XORWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_XORWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_XORWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_XORWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FA'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FA : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_FA (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FA * getPtr (void) const {
    return (cPtr_instruction_FA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_CLRF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CLRF : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_CLRF (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CLRF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CLRF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CLRF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CLRF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CLRF * getPtr (void) const {
    return (cPtr_instruction_CLRF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CLRF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CLRF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CLRF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CLRF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_CPFSEQ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CPFSEQ : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_CPFSEQ (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CPFSEQ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CPFSEQ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CPFSEQ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CPFSEQ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CPFSEQ * getPtr (void) const {
    return (cPtr_instruction_CPFSEQ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CPFSEQ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CPFSEQ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CPFSEQ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CPFSEQ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_CPFSGT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CPFSGT : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_CPFSGT (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CPFSGT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CPFSGT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CPFSGT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CPFSGT constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CPFSGT * getPtr (void) const {
    return (cPtr_instruction_CPFSGT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CPFSGT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CPFSGT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CPFSGT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CPFSGT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_CPFSLT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CPFSLT : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_CPFSLT (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CPFSLT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CPFSLT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CPFSLT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CPFSLT constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CPFSLT * getPtr (void) const {
    return (cPtr_instruction_CPFSLT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CPFSLT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CPFSLT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CPFSLT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CPFSLT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVWF : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_MOVWF (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVWF * getPtr (void) const {
    return (cPtr_instruction_MOVWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MULWF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MULWF : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_MULWF (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MULWF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MULWF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MULWF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MULWF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MULWF * getPtr (void) const {
    return (cPtr_instruction_MULWF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MULWF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MULWF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MULWF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MULWF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_NEGF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_NEGF : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_NEGF (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_NEGF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_NEGF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_NEGF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_NEGF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_NEGF * getPtr (void) const {
    return (cPtr_instruction_NEGF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_NEGF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_NEGF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_NEGF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_NEGF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SETF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SETF : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_SETF (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SETF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SETF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SETF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SETF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SETF * getPtr (void) const {
    return (cPtr_instruction_SETF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SETF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SETF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SETF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SETF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_TSTFSZ'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_TSTFSZ : public GGS_instruction_FA {
//--- Default constructor
  public : inline GGS_instruction_TSTFSZ (void) : GGS_instruction_FA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_TSTFSZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_TSTFSZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_TSTFSZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_TSTFSZ constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_TSTFSZ * getPtr (void) const {
    return (cPtr_instruction_TSTFSZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_TSTFSZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_TSTFSZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_TSTFSZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_TSTFSZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVFF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVFF : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_MOVFF (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVFF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVFF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVFF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVFF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_registerExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVFF * getPtr (void) const {
    return (cPtr_instruction_MOVFF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mSourceRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mDestinationRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVFF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVFF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVFF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVFF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_bitNumberExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberExpression * getPtr (void) const {
    return (cPtr_bitNumberExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__bitNumberExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_bitNumberLiteralValue'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLiteralValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLiteralValue (void) : GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLiteralValue (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLiteralValue (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberLiteralValue
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLiteralValue constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLiteralValue * getPtr (void) const {
    return (cPtr_bitNumberLiteralValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mBitNumberLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLiteralValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLiteralValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberLabelValue'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLabelValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLabelValue (void) : GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLabelValue (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLabelValue (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberLabelValue
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLabelValue constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLabelValue * getPtr (void) const {
    return (cPtr_bitNumberLabelValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mBitNumberLabelValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLabelValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLabelValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FBA'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FBA : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_FBA (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FBA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FBA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FBA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FBA * getPtr (void) const {
    return (cPtr_instruction_FBA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitNumberExpression  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FBA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FBA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FBA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FBA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BCF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BCF : public GGS_instruction_FBA {
//--- Default constructor
  public : inline GGS_instruction_BCF (void) : GGS_instruction_FBA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BCF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BCF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BCF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BCF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BCF * getPtr (void) const {
    return (cPtr_instruction_BCF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BCF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BCF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BCF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BCF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BSF'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BSF : public GGS_instruction_FBA {
//--- Default constructor
  public : inline GGS_instruction_BSF (void) : GGS_instruction_FBA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BSF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BSF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BSF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BSF constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BSF * getPtr (void) const {
    return (cPtr_instruction_BSF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BSF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BSF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BSF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BSF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_BTFSC'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BTFSC : public GGS_instruction_FBA {
//--- Default constructor
  public : inline GGS_instruction_BTFSC (void) : GGS_instruction_FBA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BTFSC (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BTFSC (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BTFSC
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BTFSC constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BTFSC * getPtr (void) const {
    return (cPtr_instruction_BTFSC *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BTFSC * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BTFSC * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BTFSC *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BTFSC ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_BTFSS'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BTFSS : public GGS_instruction_FBA {
//--- Default constructor
  public : inline GGS_instruction_BTFSS (void) : GGS_instruction_FBA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BTFSS (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BTFSS (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BTFSS
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BTFSS constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BTFSS * getPtr (void) const {
    return (cPtr_instruction_BTFSS *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BTFSS * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BTFSS * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BTFSS *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BTFSS ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BTG'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BTG : public GGS_instruction_FBA {
//--- Default constructor
  public : inline GGS_instruction_BTG (void) : GGS_instruction_FBA () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BTG (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BTG (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BTG
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BTG constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BTG * getPtr (void) const {
    return (cPtr_instruction_BTG *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BTG * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BTG * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BTG *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BTG ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_instruction_conditionalBranch'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_conditionalBranch : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_conditionalBranch (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_conditionalBranch (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_conditionalBranch (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_conditionalBranch
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_conditionalBranch * getPtr (void) const {
    return (cPtr_instruction_conditionalBranch *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_conditionalBranch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_conditionalBranch * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_conditionalBranch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_conditionalBranch ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BC'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BC : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BC (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BC (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BC (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BC
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BC constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BC * getPtr (void) const {
    return (cPtr_instruction_BC *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BC * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BC * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BC *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BC ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BN'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BN : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BN (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BN (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BN (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BN
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BN constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BN * getPtr (void) const {
    return (cPtr_instruction_BN *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BN * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BN * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BN *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BN ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BNC'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BNC : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BNC (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BNC (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BNC (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BNC
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BNC constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BNC * getPtr (void) const {
    return (cPtr_instruction_BNC *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BNC * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BNC * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BNC *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BNC ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BNN'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BNN : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BNN (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BNN (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BNN (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BNN
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BNN constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BNN * getPtr (void) const {
    return (cPtr_instruction_BNN *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BNN * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BNN * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BNN *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BNN ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_BNOV'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BNOV : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BNOV (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BNOV (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BNOV (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BNOV
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BNOV constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BNOV * getPtr (void) const {
    return (cPtr_instruction_BNOV *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BNOV * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BNOV * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BNOV *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BNOV ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BNZ'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BNZ : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BNZ (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BNZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BNZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BNZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BNZ constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BNZ * getPtr (void) const {
    return (cPtr_instruction_BNZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BNZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BNZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BNZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BNZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BOV'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BOV : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BOV (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BOV (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BOV (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BOV
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BOV constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BOV * getPtr (void) const {
    return (cPtr_instruction_BOV *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BOV * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BOV * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BOV *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BOV ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BZ'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BZ : public GGS_instruction_conditionalBranch {
//--- Default constructor
  public : inline GGS_instruction_BZ (void) : GGS_instruction_conditionalBranch () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BZ (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BZ (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BZ
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BZ constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BZ * getPtr (void) const {
    return (cPtr_instruction_BZ *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BZ * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BZ * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BZ *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BZ ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_BRA'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_BRA : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_BRA (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_BRA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_BRA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_BRA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_BRA constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_BRA * getPtr (void) const {
    return (cPtr_instruction_BRA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_BRA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_BRA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_BRA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_BRA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_CALL'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CALL : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_CALL (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CALL (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CALL (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CALL
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CALL constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CALL * getPtr (void) const {
    return (cPtr_instruction_CALL *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CALL * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CALL * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CALL *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CALL ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_GOTO'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_GOTO : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_GOTO (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_GOTO (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_GOTO (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_GOTO
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_GOTO constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_GOTO * getPtr (void) const {
    return (cPtr_instruction_GOTO *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_GOTO * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_GOTO * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_GOTO *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_GOTO ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RCALL'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RCALL : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_RCALL (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RCALL (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RCALL (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RCALL
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RCALL constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RCALL * getPtr (void) const {
    return (cPtr_instruction_RCALL *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RCALL * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RCALL * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RCALL *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RCALL ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_CLRWDT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CLRWDT : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_CLRWDT (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CLRWDT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CLRWDT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CLRWDT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CLRWDT constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CLRWDT * getPtr (void) const {
    return (cPtr_instruction_CLRWDT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CLRWDT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CLRWDT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CLRWDT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CLRWDT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_DAW'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_DAW : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_DAW (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_DAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_DAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_DAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_DAW constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_DAW * getPtr (void) const {
    return (cPtr_instruction_DAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_DAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_DAW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_DAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_DAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_NOP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_NOP : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_NOP (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_NOP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_NOP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_NOP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_NOP constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_NOP * getPtr (void) const {
    return (cPtr_instruction_NOP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_NOP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_NOP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_NOP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_NOP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_POP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_POP : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_POP (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_POP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_POP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_POP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_POP constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_POP * getPtr (void) const {
    return (cPtr_instruction_POP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_POP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_POP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_POP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_POP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_PUSH'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_PUSH : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_PUSH (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_PUSH (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_PUSH (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_PUSH
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_PUSH constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_PUSH * getPtr (void) const {
    return (cPtr_instruction_PUSH *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_PUSH * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_PUSH * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_PUSH *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_PUSH ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RESET'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RESET : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_RESET (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RESET (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RESET (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RESET
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RESET constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RESET * getPtr (void) const {
    return (cPtr_instruction_RESET *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RESET * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RESET * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RESET *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RESET ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_RETURN'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RETURN : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_RETURN (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RETURN (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RETURN (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RETURN
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RETURN constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RETURN * getPtr (void) const {
    return (cPtr_instruction_RETURN *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RETURN * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RETURN * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RETURN *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RETURN ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SLEEP'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SLEEP : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_SLEEP (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SLEEP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SLEEP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SLEEP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SLEEP constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SLEEP * getPtr (void) const {
    return (cPtr_instruction_SLEEP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SLEEP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SLEEP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SLEEP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SLEEP ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_instruction_literalOperation'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_literalOperation : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_literalOperation (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_literalOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_literalOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_literalOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_literalOperation * getPtr (void) const {
    return (cPtr_instruction_literalOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_literalOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_literalOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_literalOperation *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_literalOperation ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_ADDLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_ADDLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_ADDLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_ADDLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_ADDLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_ADDLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_ADDLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_ADDLW * getPtr (void) const {
    return (cPtr_instruction_ADDLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_ADDLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_ADDLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_ADDLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_ADDLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_ANDLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_ANDLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_ANDLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_ANDLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_ANDLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_ANDLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_ANDLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_ANDLW * getPtr (void) const {
    return (cPtr_instruction_ANDLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_ANDLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_ANDLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_ANDLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_ANDLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_IORLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IORLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_IORLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IORLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IORLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IORLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_IORLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IORLW * getPtr (void) const {
    return (cPtr_instruction_IORLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IORLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IORLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IORLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IORLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_MOVLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVLW * getPtr (void) const {
    return (cPtr_instruction_MOVLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MULLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MULLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_MULLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MULLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MULLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MULLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MULLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MULLW * getPtr (void) const {
    return (cPtr_instruction_MULLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MULLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MULLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MULLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MULLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RETLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RETLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_RETLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RETLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RETLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RETLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RETLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RETLW * getPtr (void) const {
    return (cPtr_instruction_RETLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RETLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RETLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RETLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RETLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SUBLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SUBLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_SUBLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SUBLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SUBLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SUBLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SUBLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SUBLW * getPtr (void) const {
    return (cPtr_instruction_SUBLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SUBLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SUBLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SUBLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SUBLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_XORLW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_XORLW : public GGS_instruction_literalOperation {
//--- Default constructor
  public : inline GGS_instruction_XORLW (void) : GGS_instruction_literalOperation () {}

//--- Pointer assignment constructor
  public : GGS_instruction_XORLW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_XORLW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_XORLW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_XORLW constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_XORLW * getPtr (void) const {
    return (cPtr_instruction_XORLW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_XORLW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_XORLW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_XORLW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_XORLW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_LFSR'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_LFSR : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_LFSR (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_LFSR (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_LFSR (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_LFSR
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_LFSR constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_registerExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_LFSR * getPtr (void) const {
    return (cPtr_instruction_LFSR *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mFSRindex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_LFSR * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_LFSR * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_LFSR *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_LFSR ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVLB'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVLB : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_MOVLB (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVLB (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVLB (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVLB
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVLB constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVLB * getPtr (void) const {
    return (cPtr_instruction_MOVLB *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mPageIndex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVLB * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVLB * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVLB *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVLB ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_LABEL'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_LABEL : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_LABEL (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_LABEL (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_LABEL (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_LABEL
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_LABEL constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_LABEL * getPtr (void) const {
    return (cPtr_instruction_LABEL *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_LABEL * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_LABEL * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_LABEL *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_LABEL ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVAW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVAW : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_MOVAW (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVAW constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVAW * getPtr (void) const {
    return (cPtr_instruction_MOVAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVAW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for 'tableAccessOption' Enumeration                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_tableAccessOption {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_simpleAccess, enum_postIncrement, enum_postDecrement, enum_preIncrement} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_tableAccessOption (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_tableAccessOption (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_tableAccessOption  constructor_simpleAccess (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_simpleAccess) ;
  }
  public : static inline GGS_tableAccessOption  constructor_postIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_postIncrement) ;
  }
  public : static inline GGS_tableAccessOption  constructor_postDecrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_postDecrement) ;
  }
  public : static inline GGS_tableAccessOption  constructor_preIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_preIncrement) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_tableAccessOption inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_TBLRD'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_TBLRD : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_TBLRD (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_TBLRD (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_TBLRD (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_TBLRD
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_TBLRD constructor_new (C_Compiler & inLexique,
                                const GGS_tableAccessOption& argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_TBLRD * getPtr (void) const {
    return (cPtr_instruction_TBLRD *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_TBLRD * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_TBLRD * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_TBLRD *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_TBLRD ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_TBLWT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_TBLWT : public GGS_instruction {
//--- Default constructor
  public : inline GGS_instruction_TBLWT (void) : GGS_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_TBLWT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_TBLWT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_TBLWT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_TBLWT constructor_new (C_Compiler & inLexique,
                                const GGS_tableAccessOption& argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_TBLWT * getPtr (void) const {
    return (cPtr_instruction_TBLWT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_TBLWT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_TBLWT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_TBLWT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_TBLWT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@interruptDefinitionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_interruptDefinitionList ;

class GGS_interruptDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_interruptDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_interruptDefinitionList constructor_emptyList (void) ;
  public : static GGS_interruptDefinitionList constructor_listWithValue (const GGS_instructionList & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_interruptDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_interruptDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_interruptDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_interruptDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_instructionList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_instructionList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_instructionList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_instructionList & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_interruptDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_instructionList & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_interruptDefinitionList _operator_concat (const GGS_interruptDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_instructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_instructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_instructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_instructionList 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_interruptDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_instructionList   & _mInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@routineDefinitionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDefinitionList ;

class GGS_routineDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_routineDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_routineDefinitionList constructor_emptyList (void) ;
  public : static GGS_routineDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_instructionList & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_routineDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_routineDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_routineDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_routineDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_luint & _out_1,
                              GGS_instructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_luint & _out_1,
                             GGS_instructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_luint & _out_1,
                                GGS_instructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_luint & _out_1,
                                 GGS_instructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_routineDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_instructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_routineDefinitionList _operator_concat (const GGS_routineDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_instructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_instructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_instructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mRoutineNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_luint 
  reader_mBankselAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMRoutineNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMBankselAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_routineDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mRoutineName (LOCATION_ARGS) const ;
  public : /* const */ GGS_luint   & _mBanksel (LOCATION_ARGS) const ;
  public : /* const */ GGS_instructionList   & _mInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@ramDefinitionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList ;

class GGS_ramDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_ramDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ramDefinitionList constructor_emptyList (void) ;
  public : static GGS_ramDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ramDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_ramDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ramDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_ramDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_luint & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_luint & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_luint & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_luint & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_ramDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_ramDefinitionList _operator_concat (const GGS_ramDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_luint 
  reader_mSizeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSizeAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ramDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mName (LOCATION_ARGS) const ;
  public : /* const */ GGS_luint   & _mSize (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*

#include "include_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@instructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_instructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_instruction  mInstruction ;
//--- Constructor
  public : elementOf_GGS_instructionList (const GGS_instruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_instructionList * nextObject (void) const { return (elementOf_GGS_instructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_instructionList * previousObject (void) const { return (elementOf_GGS_instructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_instructionList ;
} ;

//---------------------------------------------------------------------------*

#include "include_registerExpression.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FDA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_ADDWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_ADDWFC.h"

//---------------------------------------------------------------------------*

#include "include_instruction_ANDWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_COMF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_DECF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_DECFSZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_DCFSNZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_INCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_INCFSZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_INFSNZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IORWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RLCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RLNCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RRCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RRNCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SUBFWB.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SUBWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SUBWFB.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SWAPF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_XORWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CLRF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CPFSEQ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CPFSGT.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CPFSLT.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MULWF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_NEGF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SETF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_TSTFSZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVFF.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberExpression.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberLiteralValue.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberLabelValue.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FBA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BCF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BSF.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BTFSC.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BTFSS.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BTG.h"

//---------------------------------------------------------------------------*

#include "include_instruction_conditionalBranch.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BC.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BN.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BNC.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BNN.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BNOV.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BNZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BOV.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BZ.h"

//---------------------------------------------------------------------------*

#include "include_instruction_BRA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CALL.h"

//---------------------------------------------------------------------------*

#include "include_instruction_GOTO.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RCALL.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CLRWDT.h"

//---------------------------------------------------------------------------*

#include "include_instruction_DAW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_NOP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_POP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_PUSH.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RESET.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RETURN.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SLEEP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_literalOperation.h"

//---------------------------------------------------------------------------*

#include "include_instruction_ADDLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_ANDLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IORLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MULLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RETLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SUBLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_XORLW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_LFSR.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVLB.h"

//---------------------------------------------------------------------------*

#include "include_instruction_LABEL.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVAW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_TBLRD.h"

//---------------------------------------------------------------------------*

#include "include_instruction_TBLWT.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@interruptDefinitionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_interruptDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_instructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_interruptDefinitionList (const GGS_instructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_interruptDefinitionList * nextObject (void) const { return (elementOf_GGS_interruptDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_interruptDefinitionList * previousObject (void) const { return (elementOf_GGS_interruptDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_interruptDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@routineDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_luint  mBanksel ;
  public : GGS_instructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_routineDefinitionList (const GGS_lstring & ,
                                const GGS_luint & ,
                                const GGS_instructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_routineDefinitionList * nextObject (void) const { return (elementOf_GGS_routineDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_routineDefinitionList * previousObject (void) const { return (elementOf_GGS_routineDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_routineDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@ramDefinitionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_luint  mSize ;
//--- Constructor
  public : elementOf_GGS_ramDefinitionList (const GGS_lstring & ,
                                const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ramDefinitionList * nextObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ramDefinitionList * previousObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_ramDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Declarations for 'piccoloModel' struct                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_piccoloModel {
//--- Default constructor
  public : GGS_piccoloModel (void) ;

//--- Virtual destructor
  public : virtual ~GGS_piccoloModel (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method '_isBuilt'
  public : bool _isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_piccoloModel * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_piccoloModel * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_piccoloModel & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_piccoloModel & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_piccoloModel constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_ramDefinitionList & argument_2,
                 const GGS_interruptDefinitionList & argument_3,
                 const GGS_routineDefinitionList & argument_4) ;

//--- Readers
  public : inline GGS_lstring 
  reader_mProgramName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mProgramName ;
  }

  public : inline GGS_lstring 
  reader_mDeviceName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mDeviceName ;
  }

  public : inline GGS_ramDefinitionList 
  reader_mRamDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRamDefinitionList ;
  }

  public : inline GGS_interruptDefinitionList 
  reader_mInterruptDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mInterruptDefinitionList ;
  }

  public : inline GGS_routineDefinitionList 
  reader_mRoutineDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRoutineDefinitionList ;
  }

//--- Attributes
  public : GGS_lstring  mProgramName ;
  public : GGS_lstring  mDeviceName ;
  public : GGS_ramDefinitionList  mRamDefinitionList ;
  public : GGS_interruptDefinitionList  mInterruptDefinitionList ;
  public : GGS_routineDefinitionList  mRoutineDefinitionList ;
} ;

//---------------------------------------------------------------------------*

#endif
