//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_metamodel.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 1st, 2008, at 14h19'44"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef piccolo_metamodel_DEFINED
#define piccolo_metamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "bitSlice.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_piccolo_instruction ;
class cPtr_piccolo_instruction ;
class GGS_instructionList ;
class GGS_registerExpression ;
class cPtr_registerExpression ;
class GGS_instruction_FDA_base_code ;
class GGS_instruction_FDA ;
class cPtr_instruction_FDA ;
class GGS_FA_instruction_base_code ;
class GGS_instruction_FA ;
class cPtr_instruction_FA ;
class GGS_instruction_MOVFF ;
class cPtr_instruction_MOVFF ;
class GGS_bitNumberExpression ;
class cPtr_bitNumberExpression ;
class GGS_bitNumberLiteralValue ;
class cPtr_bitNumberLiteralValue ;
class GGS_bitNumberLabelValue ;
class cPtr_bitNumberLabelValue ;
class GGS_bit_oriented_op ;
class GGS_instruction_FBA ;
class cPtr_instruction_FBA ;
class GGS_conditional_branch ;
class GGS_jumpInstructionKind ;
class GGS_instruction_JSR ;
class cPtr_instruction_JSR ;
class GGS_instruction_JUMP ;
class cPtr_instruction_JUMP ;
class GGS_instruction_JUMPCC ;
class cPtr_instruction_JUMPCC ;
class GGS_instruction_CLRWDT ;
class cPtr_instruction_CLRWDT ;
class GGS_instruction_DAW ;
class cPtr_instruction_DAW ;
class GGS_instruction_NOP ;
class cPtr_instruction_NOP ;
class GGS_instruction_POP ;
class cPtr_instruction_POP ;
class GGS_instruction_PUSH ;
class cPtr_instruction_PUSH ;
class GGS_instruction_RESET ;
class cPtr_instruction_RESET ;
class GGS_instruction_SLEEP ;
class cPtr_instruction_SLEEP ;
class GGS_literal_instruction_opcode ;
class GGS_instruction_literalOperation ;
class cPtr_instruction_literalOperation ;
class GGS_instruction_LFSR ;
class cPtr_instruction_LFSR ;
class GGS_instruction_MOVAW ;
class cPtr_instruction_MOVAW ;
class GGS_tableAccessOption ;
class GGS_instruction_TBLRD ;
class cPtr_instruction_TBLRD ;
class GGS_instruction_TBLWT ;
class cPtr_instruction_TBLWT ;
class GGS_instruction_MNOP ;
class cPtr_instruction_MNOP ;
class GGS_instruction_FOREVER ;
class cPtr_instruction_FOREVER ;
class GGS_if_semi_colon_op ;
class GGS_instruction_IF_SEMI_COLON ;
class cPtr_instruction_IF_SEMI_COLON ;
class GGS_instruction_IF_FA_SEMI_COLON ;
class cPtr_instruction_IF_FA_SEMI_COLON ;
class GGS_instruction_IF_BitTest ;
class cPtr_instruction_IF_BitTest ;
class GGS_instruction_IF_IncDec ;
class cPtr_instruction_IF_IncDec ;
class GGS_instruction_computed_retlw ;
class cPtr_instruction_computed_retlw ;
class GGS_instruction_computed_bra ;
class cPtr_instruction_computed_bra ;
class GGS_instruction_computed_goto ;
class cPtr_instruction_computed_goto ;
class GGS_conditionExpression ;
class cPtr_conditionExpression ;
class GGS_registerTestCondition ;
class cPtr_registerTestCondition ;
class GGS_registerComparison ;
class GGS_registerComparisonCondition ;
class cPtr_registerComparisonCondition ;
class GGS_incDecRegisterInCondition ;
class cPtr_incDecRegisterInCondition ;
class GGS_bcc_in_structured_if_condition ;
class cPtr_bcc_in_structured_if_condition ;
class GGS_negateCondition ;
class cPtr_negateCondition ;
class GGS_andCondition ;
class cPtr_andCondition ;
class GGS_bitTest_in_structured_if_condition ;
class cPtr_bitTest_in_structured_if_condition ;
class GGS_partList ;
class GGS_instruction_structured_if ;
class cPtr_instruction_structured_if ;
class GGS_instruction_do_while ;
class cPtr_instruction_do_while ;
class GGS_interruptDefinitionList ;
class GGS_routineDefinitionList ;
class GGS_declarationInRam ;
class cPtr_declarationInRam ;
class GGS_byteDeclarationInRam ;
class cPtr_byteDeclarationInRam ;
class GGS_declarationInRamList ;
class GGS_commonBranchList ;
class GGS_commonDeclarationInRam ;
class cPtr_commonDeclarationInRam ;
class GGS_ramDefinitionList ;
class GGS_configSettingList ;
class GGS_configDefinitionList ;
class GGS_piccoloModel ;
class GGS_actualConfigurationMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_piccolo_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_piccolo_instruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_piccolo_instruction (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_piccolo_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_piccolo_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_piccolo_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_piccolo_instruction * getPtr (void) const {
    return (cPtr_piccolo_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_piccolo_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_piccolo_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_piccolo_instruction *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__piccolo_instruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@instructionList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_instructionList ;

class GGS_instructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_instructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_instructionList constructor_emptyList (void) ;
  public : static GGS_instructionList constructor_listWithValue (const GGS_piccolo_instruction & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_instructionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_instructionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_instructionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_instructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_piccolo_instruction & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_piccolo_instruction & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_piccolo_instruction & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_piccolo_instruction & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_instructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_piccolo_instruction & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_instructionList _operator_concat (const GGS_instructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_piccolo_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_piccolo_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_piccolo_instruction & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_piccolo_instruction 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_piccolo_instruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_instructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_piccolo_instruction   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_registerExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_registerExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_registerExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_registerExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_registerExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_registerExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_registerExpression * getPtr (void) const {
    return (cPtr_registerExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mOffset (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_registerExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_registerExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_registerExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__registerExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'instruction_FDA_base_code' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FDA_base_code {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_ADDWF, enum_ADDWFC, enum_ANDWF, enum_COMF, enum_DCFSNZ, enum_DECF, enum_DECFSZ, enum_INCF, enum_INCFSZ, enum_INFSNZ, enum_IORWF, enum_MOVF, enum_RLCF, enum_RLNCF, enum_RRCF, enum_RRNCF, enum_SUBFWB, enum_SUBWF, enum_SUBWFB, enum_SWAPF, enum_XORWF} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_instruction_FDA_base_code (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_instruction_FDA_base_code (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 5 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_instruction_FDA_base_code  constructor_ADDWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_ADDWF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_ADDWFC (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_ADDWFC) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_ANDWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_ANDWF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_COMF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_COMF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_DCFSNZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_DCFSNZ) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_DECF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_DECF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_DECFSZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_DECFSZ) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_INCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_INCF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_INCFSZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_INCFSZ) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_INFSNZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_INFSNZ) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_IORWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_IORWF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_MOVF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_MOVF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_RLCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_RLCF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_RLNCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_RLNCF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_RRCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_RRCF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_RRNCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_RRNCF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_SUBFWB (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_SUBFWB) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_SUBWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_SUBWF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_SUBWFB (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_SUBWFB) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_SWAPF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_SWAPF) ;
  }
  public : static inline GGS_instruction_FDA_base_code  constructor_XORWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_instruction_FDA_base_code (enum_XORWF) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_instruction_FDA_base_code inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_instruction_FDA_base_code inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_instruction_FDA_base_code inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_instruction_FDA_base_code inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_instruction_FDA_base_code inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_instruction_FDA_base_code inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Routine 'getFDAinstructionBaseCode'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getFDAinstructionBaseCode (C_Compiler &,
                                const GGS_instruction_FDA_base_code ,
                                GGS_uint  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FDA'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FDA : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_FDA (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FDA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FDA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FDA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_FDA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_instruction_FDA_base_code& argument_1,
                                const GGS_registerExpression & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FDA * getPtr (void) const {
    return (cPtr_instruction_FDA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_instruction_FDA_base_code reader_mInstruction_FDA_base_code (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FDA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FDA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FDA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FDA ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for 'FA_instruction_base_code' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_FA_instruction_base_code {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_CLRF, enum_CPFSEQ, enum_CPFSGT, enum_CPFSLT, enum_MOVWF, enum_MULWF, enum_NEGF, enum_SETF, enum_TSTFSZ} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_FA_instruction_base_code (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_FA_instruction_base_code (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_FA_instruction_base_code  constructor_CLRF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_CLRF) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_CPFSEQ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_CPFSEQ) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_CPFSGT (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_CPFSGT) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_CPFSLT (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_CPFSLT) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_MOVWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_MOVWF) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_MULWF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_MULWF) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_NEGF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_NEGF) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_SETF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_SETF) ;
  }
  public : static inline GGS_FA_instruction_base_code  constructor_TSTFSZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_FA_instruction_base_code (enum_TSTFSZ) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_FA_instruction_base_code inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_FA_instruction_base_code inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_FA_instruction_base_code inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_FA_instruction_base_code inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_FA_instruction_base_code inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_FA_instruction_base_code inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FA'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FA : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_FA (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_FA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_FA_instruction_base_code& argument_1,
                                const GGS_registerExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FA * getPtr (void) const {
    return (cPtr_instruction_FA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_FA_instruction_base_code reader_mFAinstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVFF'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVFF : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_MOVFF (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVFF (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVFF (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVFF
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVFF constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_registerExpression & argument_1,
                                const GGS_registerExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVFF * getPtr (void) const {
    return (cPtr_instruction_MOVFF *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mSourceRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mDestinationRegisterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVFF * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVFF * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVFF *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVFF ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_bitNumberExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberExpression * getPtr (void) const {
    return (cPtr_bitNumberExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__bitNumberExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_bitNumberLiteralValue'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLiteralValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLiteralValue (void) : GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLiteralValue (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLiteralValue (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberLiteralValue
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLiteralValue constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLiteralValue * getPtr (void) const {
    return (cPtr_bitNumberLiteralValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mBitNumberLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLiteralValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLiteralValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLiteralValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_bitNumberLabelValue'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitNumberLabelValue : public GGS_bitNumberExpression {
//--- Default constructor
  public : inline GGS_bitNumberLabelValue (void) : GGS_bitNumberExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitNumberLabelValue (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitNumberLabelValue (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitNumberLabelValue
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitNumberLabelValue constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitNumberLabelValue * getPtr (void) const {
    return (cPtr_bitNumberLabelValue *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mBitNumberLabelValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mBitNumberIndexValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitNumberLabelValue * operator () (LOCATION_ARGS) const {
      return (cPtr_bitNumberLabelValue *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitNumberLabelValue ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for 'bit_oriented_op' Enumeration                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bit_oriented_op {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_BCF, enum_BSF, enum_BTG} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_bit_oriented_op (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_bit_oriented_op (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_bit_oriented_op  constructor_BCF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_bit_oriented_op (enum_BCF) ;
  }
  public : static inline GGS_bit_oriented_op  constructor_BSF (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_bit_oriented_op (enum_BSF) ;
  }
  public : static inline GGS_bit_oriented_op  constructor_BTG (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_bit_oriented_op (enum_BTG) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_bit_oriented_op inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_bit_oriented_op inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_bit_oriented_op inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_bit_oriented_op inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_bit_oriented_op inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_bit_oriented_op inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_FBA'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FBA : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_FBA (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FBA (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FBA (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FBA
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_FBA constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_bit_oriented_op& argument_1,
                                const GGS_registerExpression & argument_2,
                                const GGS_bitNumberExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FBA * getPtr (void) const {
    return (cPtr_instruction_FBA *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bit_oriented_op reader_mBitOrientedOp (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitNumberExpression  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FBA * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FBA * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FBA *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FBA ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for 'conditional_branch' Enumeration                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_conditional_branch {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_bc, enum_bn, enum_bnc, enum_bnn, enum_bnov, enum_bnz, enum_bov, enum_bz} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_conditional_branch (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_conditional_branch (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_conditional_branch  constructor_bc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bc) ;
  }
  public : static inline GGS_conditional_branch  constructor_bn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bn) ;
  }
  public : static inline GGS_conditional_branch  constructor_bnc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bnc) ;
  }
  public : static inline GGS_conditional_branch  constructor_bnn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bnn) ;
  }
  public : static inline GGS_conditional_branch  constructor_bnov (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bnov) ;
  }
  public : static inline GGS_conditional_branch  constructor_bnz (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bnz) ;
  }
  public : static inline GGS_conditional_branch  constructor_bov (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bov) ;
  }
  public : static inline GGS_conditional_branch  constructor_bz (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_conditional_branch (enum_bz) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_condition (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_conditional_branch inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_conditional_branch inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_conditional_branch inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_conditional_branch inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_conditional_branch inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_conditional_branch inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'getComplementaryBcc'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getComplementaryBcc (C_Compiler &,
                                const GGS_conditional_branch ,
                                GGS_conditional_branch & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for 'jumpInstructionKind' Enumeration                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_jumpInstructionKind {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_absolute, enum_ipicAbsolute, enum_ipicRelative, enum_relative} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_jumpInstructionKind (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_jumpInstructionKind (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_jumpInstructionKind  constructor_absolute (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_jumpInstructionKind (enum_absolute) ;
  }
  public : static inline GGS_jumpInstructionKind  constructor_ipicAbsolute (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_jumpInstructionKind (enum_ipicAbsolute) ;
  }
  public : static inline GGS_jumpInstructionKind  constructor_ipicRelative (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_jumpInstructionKind (enum_ipicRelative) ;
  }
  public : static inline GGS_jumpInstructionKind  constructor_relative (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_jumpInstructionKind (enum_relative) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_jumpInstructionKind inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_jumpInstructionKind inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_jumpInstructionKind inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_jumpInstructionKind inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_jumpInstructionKind inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_jumpInstructionKind inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_JSR'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_JSR : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_JSR (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_JSR (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_JSR (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_JSR
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_JSR constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_jumpInstructionKind& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_JSR * getPtr (void) const {
    return (cPtr_instruction_JSR *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_jumpInstructionKind reader_mKind (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_JSR * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_JSR * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_JSR *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_JSR ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_JUMP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_JUMP : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_JUMP (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_JUMP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_JUMP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_JUMP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_JUMP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_jumpInstructionKind& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_JUMP * getPtr (void) const {
    return (cPtr_instruction_JUMP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_jumpInstructionKind reader_mKind (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_JUMP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_JUMP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_JUMP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_JUMP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_JUMPCC'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_JUMPCC : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_JUMPCC (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_JUMPCC (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_JUMPCC (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_JUMPCC
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_JUMPCC constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_conditional_branch& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_JUMPCC * getPtr (void) const {
    return (cPtr_instruction_JUMPCC *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_conditional_branch reader_mConditionalBranch (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIsBcc (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_JUMPCC * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_JUMPCC * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_JUMPCC *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_JUMPCC ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_CLRWDT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_CLRWDT : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_CLRWDT (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_CLRWDT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_CLRWDT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_CLRWDT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_CLRWDT constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_CLRWDT * getPtr (void) const {
    return (cPtr_instruction_CLRWDT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_CLRWDT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_CLRWDT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_CLRWDT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_CLRWDT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_DAW'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_DAW : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_DAW (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_DAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_DAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_DAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_DAW constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_DAW * getPtr (void) const {
    return (cPtr_instruction_DAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_DAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_DAW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_DAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_DAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_NOP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_NOP : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_NOP (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_NOP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_NOP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_NOP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_NOP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_NOP * getPtr (void) const {
    return (cPtr_instruction_NOP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_NOP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_NOP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_NOP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_NOP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_instruction_POP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_POP : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_POP (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_POP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_POP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_POP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_POP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_POP * getPtr (void) const {
    return (cPtr_instruction_POP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_POP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_POP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_POP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_POP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_PUSH'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_PUSH : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_PUSH (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_PUSH (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_PUSH (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_PUSH
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_PUSH constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_PUSH * getPtr (void) const {
    return (cPtr_instruction_PUSH *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_PUSH * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_PUSH * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_PUSH *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_PUSH ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_RESET'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_RESET : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_RESET (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_RESET (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_RESET (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_RESET
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_RESET constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_RESET * getPtr (void) const {
    return (cPtr_instruction_RESET *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_RESET * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_RESET * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_RESET *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_RESET ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_SLEEP'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_SLEEP : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_SLEEP (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_SLEEP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_SLEEP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_SLEEP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_SLEEP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_SLEEP * getPtr (void) const {
    return (cPtr_instruction_SLEEP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_SLEEP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_SLEEP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_SLEEP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_SLEEP ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'literal_instruction_opcode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literal_instruction_opcode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_ADDLW, enum_ANDLW, enum_IORLW, enum_MOVLW, enum_MULLW, enum_RETLW, enum_SUBLW, enum_XORLW} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_literal_instruction_opcode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_literal_instruction_opcode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_literal_instruction_opcode  constructor_ADDLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_ADDLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_ANDLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_ANDLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_IORLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_IORLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_MOVLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_MOVLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_MULLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_MULLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_RETLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_RETLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_SUBLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_SUBLW) ;
  }
  public : static inline GGS_literal_instruction_opcode  constructor_XORLW (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_literal_instruction_opcode (enum_XORLW) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_literal_instruction_opcode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_literal_instruction_opcode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_literal_instruction_opcode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_literal_instruction_opcode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_literal_instruction_opcode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_literal_instruction_opcode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_instruction_literalOperation'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_literalOperation : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_literalOperation (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_literalOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_literalOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_literalOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_literalOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_literal_instruction_opcode& argument_1,
                                const GGS_luint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_literalOperation * getPtr (void) const {
    return (cPtr_instruction_literalOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_literal_instruction_opcode reader_mLiteralInstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mLiteralValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_literalOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_literalOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_literalOperation *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_literalOperation ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_LFSR'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_LFSR : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_LFSR (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_LFSR (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_LFSR (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_LFSR
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_LFSR constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_registerExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_LFSR * getPtr (void) const {
    return (cPtr_instruction_LFSR *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mFSRindex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_LFSR * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_LFSR * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_LFSR *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_LFSR ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MOVAW'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MOVAW : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_MOVAW (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MOVAW (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MOVAW (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MOVAW
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MOVAW constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_registerExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MOVAW * getPtr (void) const {
    return (cPtr_instruction_MOVAW *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MOVAW * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MOVAW * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MOVAW *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MOVAW ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for 'tableAccessOption' Enumeration                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_tableAccessOption {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_postDecrement, enum_postIncrement, enum_preIncrement, enum_simpleAccess} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_tableAccessOption (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_tableAccessOption (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_tableAccessOption  constructor_postDecrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_postDecrement) ;
  }
  public : static inline GGS_tableAccessOption  constructor_postIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_postIncrement) ;
  }
  public : static inline GGS_tableAccessOption  constructor_preIncrement (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_preIncrement) ;
  }
  public : static inline GGS_tableAccessOption  constructor_simpleAccess (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_tableAccessOption (enum_simpleAccess) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_tableAccessOption inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_tableAccessOption inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_TBLRD'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_TBLRD : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_TBLRD (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_TBLRD (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_TBLRD (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_TBLRD
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_TBLRD constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_tableAccessOption& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_TBLRD * getPtr (void) const {
    return (cPtr_instruction_TBLRD *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_TBLRD * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_TBLRD * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_TBLRD *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_TBLRD ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_TBLWT'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_TBLWT : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_TBLWT (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_TBLWT (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_TBLWT (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_TBLWT
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_TBLWT constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_tableAccessOption& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_TBLWT * getPtr (void) const {
    return (cPtr_instruction_TBLWT *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_tableAccessOption reader_mOption (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_TBLWT * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_TBLWT * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_TBLWT *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_TBLWT ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_instruction_MNOP'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_MNOP : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_MNOP (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_MNOP (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_MNOP (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_MNOP
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_MNOP constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_MNOP * getPtr (void) const {
    return (cPtr_instruction_MNOP *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mOccurrenceFactor (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_MNOP * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_MNOP * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_MNOP *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_MNOP ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_instruction_FOREVER'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_FOREVER : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_FOREVER (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_FOREVER (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_FOREVER (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_FOREVER
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_FOREVER constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_instructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_FOREVER * getPtr (void) const {
    return (cPtr_instruction_FOREVER *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_instructionList  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_FOREVER * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_FOREVER * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_FOREVER *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_FOREVER ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for 'if_semi_colon_op' Enumeration                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_if_semi_colon_op {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_CPFSEQ, enum_CPFSGT, enum_CPFSLT, enum_TSTFSZ} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_if_semi_colon_op (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_if_semi_colon_op (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_if_semi_colon_op  constructor_CPFSEQ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_if_semi_colon_op (enum_CPFSEQ) ;
  }
  public : static inline GGS_if_semi_colon_op  constructor_CPFSGT (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_if_semi_colon_op (enum_CPFSGT) ;
  }
  public : static inline GGS_if_semi_colon_op  constructor_CPFSLT (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_if_semi_colon_op (enum_CPFSLT) ;
  }
  public : static inline GGS_if_semi_colon_op  constructor_TSTFSZ (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_if_semi_colon_op (enum_TSTFSZ) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_if_semi_colon_op inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_if_semi_colon_op inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_if_semi_colon_op inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_if_semi_colon_op inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_if_semi_colon_op inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_if_semi_colon_op inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_instruction_IF_SEMI_COLON'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IF_SEMI_COLON : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_IF_SEMI_COLON (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IF_SEMI_COLON (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IF_SEMI_COLON (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IF_SEMI_COLON
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IF_SEMI_COLON * getPtr (void) const {
    return (cPtr_instruction_IF_SEMI_COLON *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_piccolo_instruction  reader_mInstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IF_SEMI_COLON * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IF_SEMI_COLON * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IF_SEMI_COLON *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IF_SEMI_COLON ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_instruction_IF_FA_SEMI_COLON'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IF_FA_SEMI_COLON : public GGS_instruction_IF_SEMI_COLON {
//--- Default constructor
  public : inline GGS_instruction_IF_FA_SEMI_COLON (void) : GGS_instruction_IF_SEMI_COLON () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IF_FA_SEMI_COLON (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IF_FA_SEMI_COLON (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IF_FA_SEMI_COLON
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_IF_FA_SEMI_COLON constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_piccolo_instruction & argument_1,
                                const GGS_if_semi_colon_op& argument_2,
                                const GGS_registerExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IF_FA_SEMI_COLON * getPtr (void) const {
    return (cPtr_instruction_IF_FA_SEMI_COLON *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_if_semi_colon_op reader_mOpCode (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IF_FA_SEMI_COLON * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IF_FA_SEMI_COLON * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IF_FA_SEMI_COLON *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IF_FA_SEMI_COLON ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_instruction_IF_BitTest'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IF_BitTest : public GGS_instruction_IF_SEMI_COLON {
//--- Default constructor
  public : inline GGS_instruction_IF_BitTest (void) : GGS_instruction_IF_SEMI_COLON () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IF_BitTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IF_BitTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IF_BitTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_IF_BitTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_piccolo_instruction & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_registerExpression & argument_3,
                                const GGS_bitNumberExpression & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IF_BitTest * getPtr (void) const {
    return (cPtr_instruction_IF_BitTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mSkipIfSet (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitNumberExpression  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IF_BitTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IF_BitTest * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IF_BitTest *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IF_BitTest ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_instruction_IF_IncDec'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_IF_IncDec : public GGS_instruction_IF_SEMI_COLON {
//--- Default constructor
  public : inline GGS_instruction_IF_IncDec (void) : GGS_instruction_IF_SEMI_COLON () {}

//--- Pointer assignment constructor
  public : GGS_instruction_IF_IncDec (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_IF_IncDec (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_IF_IncDec
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_IF_IncDec constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_piccolo_instruction & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_bool& argument_3,
                                const GGS_registerExpression & argument_4,
                                const GGS_bool& argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_IF_IncDec * getPtr (void) const {
    return (cPtr_instruction_IF_IncDec *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mIncrement (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mSkipIfZero (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_IF_IncDec * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_IF_IncDec * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_IF_IncDec *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_IF_IncDec ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_instruction_computed_retlw'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_computed_retlw : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_computed_retlw (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_computed_retlw (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_computed_retlw (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_computed_retlw
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_computed_retlw constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_luintlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_computed_retlw * getPtr (void) const {
    return (cPtr_instruction_computed_retlw *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luintlist  reader_mLiteralValues (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRelativeCall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_computed_retlw * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_computed_retlw * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_computed_retlw *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_computed_retlw ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_instruction_computed_bra'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_computed_bra : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_computed_bra (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_computed_bra (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_computed_bra (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_computed_bra
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_computed_bra constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_computed_bra * getPtr (void) const {
    return (cPtr_instruction_computed_bra *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mTargetLabels (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRelativeCall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_computed_bra * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_computed_bra * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_computed_bra *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_computed_bra ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_instruction_computed_goto'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_computed_goto : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_computed_goto (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_computed_goto (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_computed_goto (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_computed_goto
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_computed_goto constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_computed_goto * getPtr (void) const {
    return (cPtr_instruction_computed_goto *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mTargetLabels (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUsesRelativeCall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_computed_goto * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_computed_goto * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_computed_goto *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_computed_goto ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_conditionExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_conditionExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_conditionExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_conditionExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_conditionExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_conditionExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_conditionExpression * getPtr (void) const {
    return (cPtr_conditionExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_conditionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_conditionExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_conditionExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__conditionExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_registerTestCondition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerTestCondition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_registerTestCondition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_registerTestCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_registerTestCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_registerTestCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_registerTestCondition constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_registerTestCondition * getPtr (void) const {
    return (cPtr_registerTestCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mBranchIfZero (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_registerTestCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_registerTestCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_registerTestCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__registerTestCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for 'registerComparison' Enumeration                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerComparison {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_equal, enum_greater, enum_greaterOrEqual, enum_lower, enum_lowerOrEqual, enum_notEqual} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_registerComparison (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_registerComparison (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_registerComparison  constructor_equal (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_equal) ;
  }
  public : static inline GGS_registerComparison  constructor_greater (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_greater) ;
  }
  public : static inline GGS_registerComparison  constructor_greaterOrEqual (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_greaterOrEqual) ;
  }
  public : static inline GGS_registerComparison  constructor_lower (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_lower) ;
  }
  public : static inline GGS_registerComparison  constructor_lowerOrEqual (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_lowerOrEqual) ;
  }
  public : static inline GGS_registerComparison  constructor_notEqual (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_registerComparison (enum_notEqual) ;
  }

//--- Readers
  public : GGS_string reader_mnemonic (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_registerComparison inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_registerComparison inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_registerComparison inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_registerComparison inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_registerComparison inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_registerComparison inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Routine 'getRegisterComparisonComplementary'                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getRegisterComparisonComplementary (C_Compiler &,
                                const GGS_registerComparison ,
                                GGS_registerComparison & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_registerComparisonCondition'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_registerComparisonCondition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_registerComparisonCondition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_registerComparisonCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_registerComparisonCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_registerComparisonCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_registerComparisonCondition constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_registerComparison& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_registerComparisonCondition * getPtr (void) const {
    return (cPtr_registerComparisonCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_registerComparison reader_mComparison (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_registerComparisonCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_registerComparisonCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_registerComparisonCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__registerComparisonCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_incDecRegisterInCondition'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_incDecRegisterInCondition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_incDecRegisterInCondition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_incDecRegisterInCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_incDecRegisterInCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_incDecRegisterInCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_incDecRegisterInCondition constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_bool& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_incDecRegisterInCondition * getPtr (void) const {
    return (cPtr_incDecRegisterInCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIncrement (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_m_W_isDestination (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mBranchIfZero (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_incDecRegisterInCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_incDecRegisterInCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_incDecRegisterInCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__incDecRegisterInCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_bcc_in_structured_if_condition'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bcc_in_structured_if_condition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_bcc_in_structured_if_condition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_bcc_in_structured_if_condition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bcc_in_structured_if_condition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bcc_in_structured_if_condition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bcc_in_structured_if_condition constructor_new (C_Compiler & inLexique,
                                const GGS_conditional_branch& argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bcc_in_structured_if_condition * getPtr (void) const {
    return (cPtr_bcc_in_structured_if_condition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_conditional_branch reader_mCondition (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bcc_in_structured_if_condition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bcc_in_structured_if_condition * operator () (LOCATION_ARGS) const {
      return (cPtr_bcc_in_structured_if_condition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bcc_in_structured_if_condition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_negateCondition'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_negateCondition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_negateCondition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_negateCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_negateCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_negateCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_negateCondition constructor_new (C_Compiler & inLexique,
                                const GGS_conditionExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_negateCondition * getPtr (void) const {
    return (cPtr_negateCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_conditionExpression  reader_mCondition (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_negateCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_negateCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_negateCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__negateCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_andCondition'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_andCondition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_andCondition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_andCondition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_andCondition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_andCondition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_andCondition constructor_new (C_Compiler & inLexique,
                                const GGS_conditionExpression & argument_0,
                                const GGS_conditionExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_andCondition * getPtr (void) const {
    return (cPtr_andCondition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_conditionExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_conditionExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_andCondition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_andCondition * operator () (LOCATION_ARGS) const {
      return (cPtr_andCondition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__andCondition ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_bitTest_in_structured_if_condition'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_bitTest_in_structured_if_condition : public GGS_conditionExpression {
//--- Default constructor
  public : inline GGS_bitTest_in_structured_if_condition (void) : GGS_conditionExpression () {}

//--- Pointer assignment constructor
  public : GGS_bitTest_in_structured_if_condition (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_bitTest_in_structured_if_condition (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_bitTest_in_structured_if_condition
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_bitTest_in_structured_if_condition constructor_new (C_Compiler & inLexique,
                                const GGS_registerExpression & argument_0,
                                const GGS_bitNumberExpression & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_bitTest_in_structured_if_condition * getPtr (void) const {
    return (cPtr_bitTest_in_structured_if_condition *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_registerExpression  reader_mRegisterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitNumberExpression  reader_mBitNumber (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mBTFSSinstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_bitTest_in_structured_if_condition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_bitTest_in_structured_if_condition * operator () (LOCATION_ARGS) const {
      return (cPtr_bitTest_in_structured_if_condition *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__bitTest_in_structured_if_condition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             list '@partList'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_partList ;

class GGS_partList : public AC_galgas_list {
  public : typedef elementOf_GGS_partList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_partList constructor_emptyList (void) ;
  public : static GGS_partList constructor_listWithValue (const GGS_conditionExpression & argument_0,
                                const GGS_instructionList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_partList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_partList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_partList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_partList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_conditionExpression & _out_0,
                              GGS_instructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_conditionExpression & _out_0,
                             GGS_instructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_conditionExpression & _out_0,
                                GGS_instructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_conditionExpression & _out_0,
                                 GGS_instructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_partList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_conditionExpression & argument_0,
                                const GGS_instructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_partList _operator_concat (const GGS_partList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_conditionExpression & argument_0,
                                const GGS_instructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_conditionExpression & argument_0,
                                const GGS_instructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_conditionExpression & argument_0,
                                const GGS_instructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_conditionExpression 
  reader_mConditionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMConditionAtIndex (C_Compiler & inLexique,
                              const GGS_conditionExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_partList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_conditionExpression   & _mCondition (LOCATION_ARGS) const ;
  public : /* const */ GGS_instructionList   & _mInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_instruction_structured_if'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_structured_if : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_structured_if (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_structured_if (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_structured_if (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_structured_if
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_structured_if constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_conditionExpression & argument_1,
                                const GGS_instructionList & argument_2,
                                const GGS_partList & argument_3,
                                const GGS_instructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_structured_if * getPtr (void) const {
    return (cPtr_instruction_structured_if *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_conditionExpression  reader_mIfCondition (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList  reader_mThenInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_partList  reader_mElsifPartList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_structured_if * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_structured_if * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_structured_if *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_structured_if ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_instruction_do_while'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_instruction_do_while : public GGS_piccolo_instruction {
//--- Default constructor
  public : inline GGS_instruction_do_while (void) : GGS_piccolo_instruction () {}

//--- Pointer assignment constructor
  public : GGS_instruction_do_while (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_instruction_do_while (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_instruction_do_while
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_instruction_do_while constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_partList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_instruction_do_while * getPtr (void) const {
    return (cPtr_instruction_do_while *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_instructionList  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_partList  reader_mWhilePartList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_instruction_do_while * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_instruction_do_while * operator () (LOCATION_ARGS) const {
      return (cPtr_instruction_do_while *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__instruction_do_while ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@interruptDefinitionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_interruptDefinitionList ;

class GGS_interruptDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_interruptDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_interruptDefinitionList constructor_emptyList (void) ;
  public : static GGS_interruptDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_location & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_interruptDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_interruptDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_interruptDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_interruptDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_instructionList & _out_1,
                              GGS_location & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_instructionList & _out_1,
                             GGS_location & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_instructionList & _out_1,
                                GGS_location & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_instructionList & _out_1,
                                 GGS_location & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_interruptDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_location & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_interruptDefinitionList _operator_concat (const GGS_interruptDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_instructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mInterruptNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfInterruptLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInterruptNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfInterruptLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_interruptDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mInterruptName (LOCATION_ARGS) const ;
  public : /* const */ GGS_instructionList   & _mInstructionList (LOCATION_ARGS) const ;
  public : /* const */ GGS_location   & _mEndOfInterruptLocation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@routineDefinitionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDefinitionList ;

class GGS_routineDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_routineDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_routineDefinitionList constructor_emptyList (void) ;
  public : static GGS_routineDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_instructionList & argument_3,
                                const GGS_location & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_routineDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_routineDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_routineDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_routineDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_luint & _out_1,
                              GGS_bool& _out_2,
                              GGS_instructionList & _out_3,
                              GGS_location & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_luint & _out_1,
                             GGS_bool& _out_2,
                             GGS_instructionList & _out_3,
                             GGS_location & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_luint & _out_1,
                                GGS_bool& _out_2,
                                GGS_instructionList & _out_3,
                                GGS_location & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_luint & _out_1,
                                 GGS_bool& _out_2,
                                 GGS_instructionList & _out_3,
                                 GGS_location & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_routineDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_instructionList & argument_3,
                                const GGS_location & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_routineDefinitionList _operator_concat (const GGS_routineDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_instructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_instructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_instructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mRoutineNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_luint 
  reader_mBankselAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mIsNoReturnAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_instructionList 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfRoutineLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMRoutineNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMBankselAtIndex (C_Compiler & inLexique,
                              const GGS_luint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMIsNoReturnAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_instructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfRoutineLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_routineDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mRoutineName (LOCATION_ARGS) const ;
  public : /* const */ GGS_luint   & _mBanksel (LOCATION_ARGS) const ;
  public : /* const */ GGS_bool  & _mIsNoReturn (LOCATION_ARGS) const ;
  public : /* const */ GGS_instructionList   & _mInstructionList (LOCATION_ARGS) const ;
  public : /* const */ GGS_location   & _mEndOfRoutineLocation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_declarationInRam'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_declarationInRam : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_declarationInRam (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_declarationInRam (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_declarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_declarationInRam
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_declarationInRam * getPtr (void) const {
    return (cPtr_declarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_declarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_declarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_declarationInRam *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__declarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_byteDeclarationInRam'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_byteDeclarationInRam : public GGS_declarationInRam {
//--- Default constructor
  public : inline GGS_byteDeclarationInRam (void) : GGS_declarationInRam () {}

//--- Pointer assignment constructor
  public : GGS_byteDeclarationInRam (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_byteDeclarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_byteDeclarationInRam
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_byteDeclarationInRam constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_bitSliceTable & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_byteDeclarationInRam * getPtr (void) const {
    return (cPtr_byteDeclarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mSize (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bitSliceTable  reader_mBitSliceTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_byteDeclarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_byteDeclarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_byteDeclarationInRam *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__byteDeclarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@declarationInRamList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_declarationInRamList ;

class GGS_declarationInRamList : public AC_galgas_list {
  public : typedef elementOf_GGS_declarationInRamList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_declarationInRamList constructor_emptyList (void) ;
  public : static GGS_declarationInRamList constructor_listWithValue (const GGS_declarationInRam & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_declarationInRamList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_declarationInRamList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_declarationInRamList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_declarationInRamList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_declarationInRam & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_declarationInRam & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_declarationInRam & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_declarationInRam & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_declarationInRamList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_declarationInRam & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_declarationInRamList _operator_concat (const GGS_declarationInRamList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_declarationInRam & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_declarationInRam 
  reader_mDeclarationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMDeclarationAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRam  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_declarationInRamList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_declarationInRam   & _mDeclaration (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@commonBranchList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_commonBranchList ;

class GGS_commonBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_commonBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_commonBranchList constructor_emptyList (void) ;
  public : static GGS_commonBranchList constructor_listWithValue (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_commonBranchList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_commonBranchList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_commonBranchList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_commonBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_declarationInRamList & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_declarationInRamList & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_declarationInRamList & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_declarationInRamList & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_commonBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_commonBranchList _operator_concat (const GGS_commonBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_declarationInRamList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_declarationInRamList 
  reader_mDeclarationsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfBranchLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMDeclarationsAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRamList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfBranchLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_commonBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_declarationInRamList   & _mDeclarations (LOCATION_ARGS) const ;
  public : /* const */ GGS_location   & _mEndOfBranchLocation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_commonDeclarationInRam'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_commonDeclarationInRam : public GGS_declarationInRam {
//--- Default constructor
  public : inline GGS_commonDeclarationInRam (void) : GGS_declarationInRam () {}

//--- Pointer assignment constructor
  public : GGS_commonDeclarationInRam (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_commonDeclarationInRam (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_commonDeclarationInRam
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_commonDeclarationInRam constructor_new (C_Compiler & inLexique,
                                const GGS_commonBranchList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_commonDeclarationInRam * getPtr (void) const {
    return (cPtr_commonDeclarationInRam *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_commonBranchList  reader_mBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_commonDeclarationInRam * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_commonDeclarationInRam * operator () (LOCATION_ARGS) const {
      return (cPtr_commonDeclarationInRam *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__commonDeclarationInRam ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@ramDefinitionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList ;

class GGS_ramDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_ramDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ramDefinitionList constructor_emptyList (void) ;
  public : static GGS_ramDefinitionList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ramDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_ramDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ramDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_ramDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_declarationInRamList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_declarationInRamList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_declarationInRamList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_declarationInRamList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_ramDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_ramDefinitionList _operator_concat (const GGS_ramDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_declarationInRamList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mBankNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_declarationInRamList 
  reader_mDeclarationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMBankNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMDeclarationAtIndex (C_Compiler & inLexique,
                              const GGS_declarationInRamList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ramDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mBankName (LOCATION_ARGS) const ;
  public : /* const */ GGS_declarationInRamList   & _mDeclaration (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@configSettingList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configSettingList ;

class GGS_configSettingList : public AC_galgas_list {
  public : typedef elementOf_GGS_configSettingList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_configSettingList constructor_emptyList (void) ;
  public : static GGS_configSettingList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_configSettingList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_configSettingList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_configSettingList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_configSettingList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_configSettingList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_configSettingList _operator_concat (const GGS_configSettingList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mSettingNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSettingValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSettingNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSettingValueAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_configSettingList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mSettingName (LOCATION_ARGS) const ;
  public : /* const */ GGS_lstring   & _mSettingValue (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@configDefinitionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configDefinitionList ;

class GGS_configDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_configDefinitionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_configDefinitionList constructor_emptyList (void) ;
  public : static GGS_configDefinitionList constructor_listWithValue (const GGS_configSettingList & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_configDefinitionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_configDefinitionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_configDefinitionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_configDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_configSettingList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_configSettingList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_configSettingList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_configSettingList & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_configDefinitionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_configSettingList & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_configDefinitionList _operator_concat (const GGS_configDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_configSettingList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_configSettingList & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_configSettingList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_configSettingList 
  reader_mSettingListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSettingListAtIndex (C_Compiler & inLexique,
                              const GGS_configSettingList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_configDefinitionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_configSettingList   & _mSettingList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map '@actualConfigurationMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualConfigurationMap ;

class GGS_actualConfigurationMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_actualConfigurationMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_actualConfigurationMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_actualConfigurationMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_actualConfigurationMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_actualConfigurationMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_actualConfigurationMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRegisterAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMRegisterValueForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_actualConfigurationMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_actualConfigurationMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_actualConfigurationMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_actualConfigurationMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_actualConfigurationMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mRegisterAddress (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mRegisterValue (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*

#include "include_piccolo_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@instructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_instructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_piccolo_instruction  mInstruction ;
//--- Constructor
  public : elementOf_GGS_instructionList (const GGS_piccolo_instruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_instructionList * nextObject (void) const { return (elementOf_GGS_instructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_instructionList * previousObject (void) const { return (elementOf_GGS_instructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_instructionList ;
} ;

//---------------------------------------------------------------------------*

#include "include_registerExpression.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FDA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVFF.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberExpression.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberLiteralValue.h"

//---------------------------------------------------------------------------*

#include "include_bitNumberLabelValue.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FBA.h"

//---------------------------------------------------------------------------*

#include "include_instruction_JSR.h"

//---------------------------------------------------------------------------*

#include "include_instruction_JUMP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_JUMPCC.h"

//---------------------------------------------------------------------------*

#include "include_instruction_CLRWDT.h"

//---------------------------------------------------------------------------*

#include "include_instruction_DAW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_NOP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_POP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_PUSH.h"

//---------------------------------------------------------------------------*

#include "include_instruction_RESET.h"

//---------------------------------------------------------------------------*

#include "include_instruction_SLEEP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_literalOperation.h"

//---------------------------------------------------------------------------*

#include "include_instruction_LFSR.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MOVAW.h"

//---------------------------------------------------------------------------*

#include "include_instruction_TBLRD.h"

//---------------------------------------------------------------------------*

#include "include_instruction_TBLWT.h"

//---------------------------------------------------------------------------*

#include "include_instruction_MNOP.h"

//---------------------------------------------------------------------------*

#include "include_instruction_FOREVER.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IF_SEMI_COLON.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IF_FA_SEMI_COLON.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IF_BitTest.h"

//---------------------------------------------------------------------------*

#include "include_instruction_IF_IncDec.h"

//---------------------------------------------------------------------------*

#include "include_instruction_computed_retlw.h"

//---------------------------------------------------------------------------*

#include "include_instruction_computed_bra.h"

//---------------------------------------------------------------------------*

#include "include_instruction_computed_goto.h"

//---------------------------------------------------------------------------*

#include "include_conditionExpression.h"

//---------------------------------------------------------------------------*

#include "include_registerTestCondition.h"

//---------------------------------------------------------------------------*

#include "include_registerComparisonCondition.h"

//---------------------------------------------------------------------------*

#include "include_incDecRegisterInCondition.h"

//---------------------------------------------------------------------------*

#include "include_bcc_in_structured_if_condition.h"

//---------------------------------------------------------------------------*

#include "include_negateCondition.h"

//---------------------------------------------------------------------------*

#include "include_andCondition.h"

//---------------------------------------------------------------------------*

#include "include_bitTest_in_structured_if_condition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@partList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_partList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_conditionExpression  mCondition ;
  public : GGS_instructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_partList (const GGS_conditionExpression & ,
                                const GGS_instructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_partList * nextObject (void) const { return (elementOf_GGS_partList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_partList * previousObject (void) const { return (elementOf_GGS_partList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_partList ;
} ;

//---------------------------------------------------------------------------*

#include "include_instruction_structured_if.h"

//---------------------------------------------------------------------------*

#include "include_instruction_do_while.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@interruptDefinitionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_interruptDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mInterruptName ;
  public : GGS_instructionList  mInstructionList ;
  public : GGS_location  mEndOfInterruptLocation ;
//--- Constructor
  public : elementOf_GGS_interruptDefinitionList (const GGS_lstring & ,
                                const GGS_instructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_interruptDefinitionList * nextObject (void) const { return (elementOf_GGS_interruptDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_interruptDefinitionList * previousObject (void) const { return (elementOf_GGS_interruptDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_interruptDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@routineDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_luint  mBanksel ;
  public : GGS_bool mIsNoReturn ;
  public : GGS_instructionList  mInstructionList ;
  public : GGS_location  mEndOfRoutineLocation ;
//--- Constructor
  public : elementOf_GGS_routineDefinitionList (const GGS_lstring & ,
                                const GGS_luint & ,
                                const GGS_bool& ,
                                const GGS_instructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_routineDefinitionList * nextObject (void) const { return (elementOf_GGS_routineDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_routineDefinitionList * previousObject (void) const { return (elementOf_GGS_routineDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_routineDefinitionList ;
} ;

//---------------------------------------------------------------------------*

#include "include_declarationInRam.h"

//---------------------------------------------------------------------------*

#include "include_byteDeclarationInRam.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@declarationInRamList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_declarationInRamList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_declarationInRam  mDeclaration ;
//--- Constructor
  public : elementOf_GGS_declarationInRamList (const GGS_declarationInRam & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_declarationInRamList * nextObject (void) const { return (elementOf_GGS_declarationInRamList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_declarationInRamList * previousObject (void) const { return (elementOf_GGS_declarationInRamList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_declarationInRamList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@commonBranchList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_commonBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_declarationInRamList  mDeclarations ;
  public : GGS_location  mEndOfBranchLocation ;
//--- Constructor
  public : elementOf_GGS_commonBranchList (const GGS_declarationInRamList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_commonBranchList * nextObject (void) const { return (elementOf_GGS_commonBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_commonBranchList * previousObject (void) const { return (elementOf_GGS_commonBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_commonBranchList ;
} ;

//---------------------------------------------------------------------------*

#include "include_commonDeclarationInRam.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@ramDefinitionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ramDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mBankName ;
  public : GGS_declarationInRamList  mDeclaration ;
//--- Constructor
  public : elementOf_GGS_ramDefinitionList (const GGS_lstring & ,
                                const GGS_declarationInRamList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ramDefinitionList * nextObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ramDefinitionList * previousObject (void) const { return (elementOf_GGS_ramDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_ramDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@configSettingList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configSettingList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mSettingName ;
  public : GGS_lstring  mSettingValue ;
//--- Constructor
  public : elementOf_GGS_configSettingList (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_configSettingList * nextObject (void) const { return (elementOf_GGS_configSettingList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_configSettingList * previousObject (void) const { return (elementOf_GGS_configSettingList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_configSettingList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@configDefinitionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_configDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_configSettingList  mSettingList ;
//--- Constructor
  public : elementOf_GGS_configDefinitionList (const GGS_configSettingList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_configDefinitionList * nextObject (void) const { return (elementOf_GGS_configDefinitionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_configDefinitionList * previousObject (void) const { return (elementOf_GGS_configDefinitionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_configDefinitionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Declarations for 'piccoloModel' struct                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_piccoloModel {
//--- Default constructor
  public : GGS_piccoloModel (void) ;

//--- Virtual destructor
  public : virtual ~GGS_piccoloModel (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method '_isBuilt'
  public : bool _isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_piccoloModel * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_piccoloModel * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_piccoloModel & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_piccoloModel & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_piccoloModel constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_configDefinitionList & argument_2,
                 const GGS_bool& argument_3,
                 const GGS_ramDefinitionList & argument_4,
                 const GGS_interruptDefinitionList & argument_5,
                 const GGS_routineDefinitionList & argument_6,
                 const GGS_bool& argument_7,
                 const GGS_bool& argument_8) ;

//--- Readers
  public : inline GGS_lstring 
  reader_mProgramName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mProgramName ;
  }

  public : inline GGS_lstring 
  reader_mDeviceName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mDeviceName ;
  }

  public : inline GGS_configDefinitionList 
  reader_mConfigDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mConfigDefinitionList ;
  }

  public : inline GGS_bool
  reader_mAcceptDefaultConfiguration (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mAcceptDefaultConfiguration ;
  }

  public : inline GGS_ramDefinitionList 
  reader_mRamDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRamDefinitionList ;
  }

  public : inline GGS_interruptDefinitionList 
  reader_mInterruptDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mInterruptDefinitionList ;
  }

  public : inline GGS_routineDefinitionList 
  reader_mRoutineDefinitionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRoutineDefinitionList ;
  }

  public : inline GGS_bool
  reader_mNeedsComputedGoto2 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mNeedsComputedGoto2 ;
  }

  public : inline GGS_bool
  reader_mNeedsComputedGoto4 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mNeedsComputedGoto4 ;
  }

//--- Attributes
  public : GGS_lstring  mProgramName ;
  public : GGS_lstring  mDeviceName ;
  public : GGS_configDefinitionList  mConfigDefinitionList ;
  public : GGS_bool mAcceptDefaultConfiguration ;
  public : GGS_ramDefinitionList  mRamDefinitionList ;
  public : GGS_interruptDefinitionList  mInterruptDefinitionList ;
  public : GGS_routineDefinitionList  mRoutineDefinitionList ;
  public : GGS_bool mNeedsComputedGoto2 ;
  public : GGS_bool mNeedsComputedGoto4 ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@actualConfigurationMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_actualConfigurationMap {
  public : GGS_uint  mRegisterAddress ;
  public : GGS_uint  mRegisterValue ;

  public : e_actualConfigurationMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_actualConfigurationMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_actualConfigurationMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_actualConfigurationMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_actualConfigurationMap * nextObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mNextItem ; }
  public : inline elementOf_GGS_actualConfigurationMap * infObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mInfPtr ; }
  public : inline elementOf_GGS_actualConfigurationMap * supObject (void) const { return (elementOf_GGS_actualConfigurationMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_actualConfigurationMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
