//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_program.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 9th, 2009, at 14h26'45"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "pic18_metamodel.h"
#include "pic18_semantics.h"
#include "piccolo_grammar.h"
#include "piccolo_program.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                C_options_for_piccolo_program  CONSTRUCTOR                 *
//                                                                           *
//---------------------------------------------------------------------------*

C_options_for_piccolo_program::
C_options_for_piccolo_program (const bool inAcceptsDebugOption) :
mBuiltinOptions (inAcceptsDebugOption),
mGalgasOptions (),
mOptions_piccolo_options (){
  add (& mBuiltinOptions) ;
  add (& mGalgasOptions) ;
  add (& mOptions_piccolo_options) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_prologue (C_Compiler & _inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  if (((((GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputDeviceList" COMMA_SOURCE_FILE_AT_LINE (11))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputPic18DeviceList" COMMA_SOURCE_FILE_AT_LINE (12)))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputBaselineDeviceList" COMMA_SOURCE_FILE_AT_LINE (13)))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputMidrangeDeviceList" COMMA_SOURCE_FILE_AT_LINE (14))))).isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_allDevices ;
    var_cas_allDevices = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allFilePathes (_inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
    GGS_stringlist  var_cas_pic18_devices ;
    var_cas_pic18_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_stringlist  var_cas_midrange_devices ;
    var_cas_midrange_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_stringlist  var_cas_baseline_devices ;
    var_cas_baseline_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true) ;
    {
      GGS_stringlist::cEnumerator enumerator_901 (var_cas_allDevices, true) ;
      const GGS_stringlist::cElement * operand_901 = NULL ;
      while (((operand_901 = enumerator_901.nextObject ()))
          && (var_cas_ok.isBuiltAndTrue ())) {
        macroValidPointer (operand_901) ;
        GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
        GGS_string var_cas_name ;
        var_cas_name = operand_901->mValue.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (24)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
        ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_name, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (25)) ;
        switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (26)).enumValue ()) {
        case GGS_processorType::enum_pic18_60:
        case GGS_processorType::enum_pic18_80:
          {
          var_cas_pic18_devices._addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::enum_midrange:
          {
          var_cas_midrange_devices._addAssign_operation (var_cas_name) ;
          if (((var_cas_piccoloDeviceModel.reader_mBankCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)))._operator_strictSup (GGS_uint (4U))).isBuiltAndTrue ()) {
            _inLexique.printMessage ((((var_cas_name)._operator_concat (GGS_string (" has ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mBankCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (30))))._operator_concat (GGS_string (" banks\n")) COMMA_SOURCE_FILE_AT_LINE (30)) ;
          }
          }
          break ;
        case GGS_processorType::enum_baseline:
          {
          var_cas_baseline_devices._addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::kNotBuilt:
          break ;
        }
      }
    }
    if (((GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputDeviceList" COMMA_SOURCE_FILE_AT_LINE (46))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputBaselineDeviceList" COMMA_SOURCE_FILE_AT_LINE (46))))).isBuiltAndTrue ()) {
      _inLexique.printMessage ((((var_cas_baseline_devices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)))._operator_concat (GGS_string (" baseline devices (not yet supported by Piccolo ")))._operator_concat (GGS_string::constructor_stringWithVersionString (_inLexique COMMA_HERE)))._operator_concat (GGS_string ("):\n")) COMMA_SOURCE_FILE_AT_LINE (47)) ;
      GGS_uint  var_cas_index ;
      var_cas_index = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_2241 (var_cas_baseline_devices, true) ;
        const GGS_stringlist::cElement * operand_2241 = NULL ;
        while (((operand_2241 = enumerator_2241.nextObject ()))) {
          macroValidPointer (operand_2241) ;
          _inLexique.printMessage (operand_2241->mValue.reader_stringByRightPadding (_inLexique, GGS_uint (15U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
          if (((var_cas_index)._operator_isEqual (GGS_uint (5U))).isBuiltAndTrue ()) {
            var_cas_index = GGS_uint (0U) ;
            _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (54)) ;
          }
        }
      }
      if (((var_cas_index)._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (58)) ;
      }
    }
    if (((GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputDeviceList" COMMA_SOURCE_FILE_AT_LINE (62))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputMidrangeDeviceList" COMMA_SOURCE_FILE_AT_LINE (62))))).isBuiltAndTrue ()) {
      _inLexique.printMessage ((((var_cas_midrange_devices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)))._operator_concat (GGS_string (" mid-range devices supported by Piccolo ")))._operator_concat (GGS_string::constructor_stringWithVersionString (_inLexique COMMA_HERE)))._operator_concat (GGS_string (":\n")) COMMA_SOURCE_FILE_AT_LINE (63)) ;
      GGS_uint  var_cas_index ;
      var_cas_index = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_2845 (var_cas_midrange_devices, true) ;
        const GGS_stringlist::cElement * operand_2845 = NULL ;
        while (((operand_2845 = enumerator_2845.nextObject ()))) {
          macroValidPointer (operand_2845) ;
          _inLexique.printMessage (operand_2845->mValue.reader_stringByRightPadding (_inLexique, GGS_uint (15U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)) ;
          var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
          if (((var_cas_index)._operator_isEqual (GGS_uint (5U))).isBuiltAndTrue ()) {
            var_cas_index = GGS_uint (0U) ;
            _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (70)) ;
          }
        }
      }
      if (((var_cas_index)._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (74)) ;
      }
    }
    if (((GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputDeviceList" COMMA_SOURCE_FILE_AT_LINE (78))))._operator_or (GGS_bool (_inLexique.boolOptionValueFromKeys ("piccolo_options", "outputPic18DeviceList" COMMA_SOURCE_FILE_AT_LINE (78))))).isBuiltAndTrue ()) {
      _inLexique.printMessage ((((var_cas_pic18_devices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (79)))._operator_concat (GGS_string (" pic18 devices supported by Piccolo ")))._operator_concat (GGS_string::constructor_stringWithVersionString (_inLexique COMMA_HERE)))._operator_concat (GGS_string (":\n")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
      GGS_uint  var_cas_index ;
      var_cas_index = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_3432 (var_cas_pic18_devices, true) ;
        const GGS_stringlist::cElement * operand_3432 = NULL ;
        while (((operand_3432 = enumerator_3432.nextObject ()))) {
          macroValidPointer (operand_3432) ;
          _inLexique.printMessage (operand_3432->mValue.reader_stringByRightPadding (_inLexique, GGS_uint (15U), GGS_char (TO_UNICODE (' ')) COMMA_SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)) ;
          var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
          if (((var_cas_index)._operator_isEqual (GGS_uint (5U))).isBuiltAndTrue ()) {
            var_cas_index = GGS_uint (0U) ;
            _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (86)) ;
          }
        }
      }
      if (((var_cas_index)._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
  }
  if (((GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "exportDeviceFiles" COMMA_SOURCE_FILE_AT_LINE (96))).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_dir ;
    var_cas_dir = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "exportDeviceFiles" COMMA_SOURCE_FILE_AT_LINE (97))) ;
    if (((var_cas_dir.reader_directoryExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)))._operator_not ()).isBuiltAndTrue ()) {
      const GGS_string _temp_3991 = var_cas_dir ;
      if (_temp_3991.isBuilt ()) {
        _temp_3991 (HERE)->method_makeDirectory (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    GGS_filewrapper  var_cas_fw ;
    var_cas_fw = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices) ;
    GGS_stringlist  var_cas_allDevices ;
    var_cas_allDevices = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allFilePathes (_inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
    {
      GGS_stringlist::cEnumerator enumerator_4163 (var_cas_allDevices, true) ;
      const GGS_stringlist::cElement * operand_4163 = NULL ;
      while (((operand_4163 = enumerator_4163.nextObject ()))) {
        macroValidPointer (operand_4163) ;
        GGS_string var_cas_definitionString ;
        var_cas_definitionString = var_cas_fw.reader_fileContentsAtPath (_inLexique, operand_4163->mValue COMMA_SOURCE_FILE_AT_LINE (104)) ;
        const GGS_string _temp_4270 = var_cas_definitionString ;
        if (_temp_4270.isBuilt ()) {
          _temp_4270 (HERE)->method_writeToFile (_inLexique, (var_cas_dir)._operator_concat (operand_4163->mValue) COMMA_SOURCE_FILE_AT_LINE (105)) ;
        }
      }
    }
    _inLexique.printMessage ((((var_cas_allDevices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)))._operator_concat (GGS_string (" devices copied in '")))._operator_concat (var_cas_dir))._operator_concat (GGS_string ("' directory\n")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
  GGS_string var_cas_deviceForMemoryDescription ;
  var_cas_deviceForMemoryDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "memoryDescription" COMMA_SOURCE_FILE_AT_LINE (110))) ;
  if (((var_cas_deviceForMemoryDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (111)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string ("/"))._operator_concat (var_cas_deviceForMemoryDescription))._operator_concat (GGS_string (".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (113))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForMemoryDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (115)) ;
      GGS_uint  var_cas_totalRam ;
      var_cas_totalRam = GGS_uint (0U) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_4959 (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
        const GGS_ramBankTable::cElement * operand_4959 = NULL ;
        while (((operand_4959 = enumerator_4959.nextObject ()))) {
          macroValidPointer (operand_4959) ;
          var_cas_totalRam = var_cas_totalRam._add_operation (_inLexique, operand_4959->mInfo.mLastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (118))._substract_operation (_inLexique, operand_4959->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (118)) ;
        }
      }
      _inLexique.printMessage ((var_cas_deviceForMemoryDescription)._operator_concat (GGS_string (" device:\n")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
      _inLexique.printMessage (((((GGS_string ("  "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (121))))._operator_concat (GGS_string (" RAM banks (total ")))._operator_concat (var_cas_totalRam.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (121))))._operator_concat (GGS_string (" bytes):\n")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5297 (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (122)), true) ;
        const GGS_ramBankTable::cElement * operand_5297 = NULL ;
        while (((operand_5297 = enumerator_5297.nextObject ()))) {
          macroValidPointer (operand_5297) ;
          _inLexique.printMessage (((((((((GGS_string ("    bank \""))._operator_concat (operand_5297->mKey))._operator_concat (GGS_string ("\" from ")))._operator_concat (operand_5297->mInfo.mFirstFreeAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (123))))._operator_concat (GGS_string (" to ")))._operator_concat (operand_5297->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (124)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (124))))._operator_concat (GGS_string (" (")))._operator_concat (operand_5297->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, operand_5297->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (125)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (125))))._operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (123)) ;
          {
            GGS_uintlist::cEnumerator enumerator_5579 (operand_5297->mInfo.mMirrorOffsetList, true) ;
            const GGS_uintlist::cElement * operand_5579 = enumerator_5579.nextObject () ;
            if ((operand_5579 != NULL)) {
              _inLexique.printMessage (GGS_string (", mirror at ") COMMA_SOURCE_FILE_AT_LINE (127)) ;
              bool _foreach_loop_5579 ;
              do{
                macroValidPointer (operand_5579) ;
                _inLexique.printMessage (operand_5297->mInfo.mFirstFreeAddress._add_operation (_inLexique, operand_5579->mValue COMMA_SOURCE_FILE_AT_LINE (128)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
                operand_5579 = enumerator_5579.nextObject () ;
                _foreach_loop_5579 = ((operand_5579 != NULL)) ;
                if (_foreach_loop_5579) {
                  _inLexique.printMessage (GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (129)) ;
                }
              }while (_foreach_loop_5579) ;
            }
          }
          _inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (131)) ;
        }
      }
      switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)).enumValue ()) {
      case GGS_processorType::enum_pic18_60:
      case GGS_processorType::enum_pic18_80:
        {
        _inLexique.printMessage (((GGS_string ("  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (135))))._operator_concat (GGS_string (" bytes\n")) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        }
        break ;
      case GGS_processorType::enum_midrange:
        {
        GGS_uint  var_cas_pageCount ;
        var_cas_pageCount = var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (137))._add_operation (_inLexique, GGS_uint (2047U) COMMA_SOURCE_FILE_AT_LINE (137))._divide_operation (_inLexique, GGS_uint (2048U) COMMA_SOURCE_FILE_AT_LINE (137)) ;
        GGS_string var_cas_s ;
        var_cas_s = GGS_string ("") ;
        if (((var_cas_pageCount)._operator_strictSup (GGS_uint (1U))).isBuiltAndTrue ()) {
          var_cas_s = GGS_string ("s") ;
        }
        _inLexique.printMessage (((((((GGS_string ("  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (142))))._operator_concat (GGS_string (" instructions (")))._operator_concat (var_cas_pageCount.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (143))))._operator_concat (GGS_string (" page")))._operator_concat (var_cas_s))._operator_concat (GGS_string (")\n")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
        }
        break ;
      case GGS_processorType::enum_baseline:
        {
        _inLexique.printMessage (((GGS_string ("  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (145))))._operator_concat (GGS_string (" instructions\n")) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        }
        break ;
      case GGS_processorType::kNotBuilt:
        break ;
      }
      if (((var_cas_piccoloDeviceModel.reader_mEepromSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (147)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        _inLexique.printMessage (GGS_string ("  No EEPROM\n") COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }else{
        _inLexique.printMessage (((((GGS_string ("  EEPROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mEepromSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (150)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (150))))._operator_concat (GGS_string (" bytes (at ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mEepromAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (151))))._operator_concat (GGS_string (")\n")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("The "))._operator_concat (var_cas_deviceForMemoryDescription))._operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }
  }
  GGS_string var_cas_deviceForRegistersDescription ;
  var_cas_deviceForRegistersDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "registerDescription" COMMA_SOURCE_FILE_AT_LINE (158))) ;
  if (((var_cas_deviceForRegistersDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string ("/"))._operator_concat (var_cas_deviceForRegistersDescription))._operator_concat (GGS_string (".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (161))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForRegistersDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (163)) ;
      _inLexique.printMessage ((((var_cas_deviceForRegistersDescription)._operator_concat (GGS_string (" has ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (164))))._operator_concat (GGS_string (" special registers:\n")) COMMA_SOURCE_FILE_AT_LINE (164)) ;
      {
        GGS_registerTable::cEnumerator enumerator_7536 (var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)), true) ;
        const GGS_registerTable::cElement * operand_7536 = NULL ;
        while (((operand_7536 = enumerator_7536.nextObject ()))) {
          macroValidPointer (operand_7536) ;
          GGS_string var_cas_s ;
          var_cas_s = ((GGS_string ("  '"))._operator_concat (operand_7536->mKey))._operator_concat (GGS_string ("' at ")) ;
          {
            GGS_uintlist::cEnumerator enumerator_7655 (operand_7536->mInfo.mRegisterAddressList, true) ;
            const GGS_uintlist::cElement * operand_7655 = enumerator_7655.nextObject () ;
            if ((operand_7655 != NULL)) {
              bool _foreach_loop_7655 ;
              do{
                macroValidPointer (operand_7655) ;
                var_cas_s._dotAssign_operation (operand_7655->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (168))) ;
                operand_7655 = enumerator_7655.nextObject () ;
                _foreach_loop_7655 = ((operand_7655 != NULL)) ;
                if (_foreach_loop_7655) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_7655) ;
            }
          }
          var_cas_s._dotAssign_operation (operand_7536->mInfo.mBitDefinitionString) ;
          var_cas_s.appendCString ("\n") ;
          _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (172)) ;
        }
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("The "))._operator_concat (var_cas_deviceForRegistersDescription))._operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
  }
  GGS_string var_cas_deviceForConfigDescription ;
  var_cas_deviceForConfigDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "configDescription" COMMA_SOURCE_FILE_AT_LINE (179))) ;
  if (((var_cas_deviceForConfigDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (180)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string ("/"))._operator_concat (var_cas_deviceForConfigDescription))._operator_concat (GGS_string (".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (182))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForConfigDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (184)) ;
      _inLexique.printMessage ((((var_cas_deviceForConfigDescription)._operator_concat (GGS_string (" has ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))))._operator_concat (GGS_string (" configuration registers:\n")) COMMA_SOURCE_FILE_AT_LINE (185)) ;
      {
        GGS_configRegisterMap::cEnumerator enumerator_8641 (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (186)), true) ;
        const GGS_configRegisterMap::cElement * operand_8641 = NULL ;
        while (((operand_8641 = enumerator_8641.nextObject ()))) {
          macroValidPointer (operand_8641) ;
          GGS_string var_cas_s ;
          var_cas_s = ((((((GGS_string ("REGISTER '"))._operator_concat (operand_8641->mKey))._operator_concat (GGS_string ("' at ")))._operator_concat (operand_8641->mInfo.mRegisterAddress.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (187))))._operator_concat (GGS_string (", width ")))._operator_concat (operand_8641->mInfo.mRegisterWidth.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (187))))._operator_concat (GGS_string ("\n")) ;
          {
            GGS_illegalMaskList::cEnumerator enumerator_8858 (operand_8641->mInfo.mIllegalMaskList, true) ;
            const GGS_illegalMaskList::cElement * operand_8858 = NULL ;
            while (((operand_8858 = enumerator_8858.nextObject ()))) {
              macroValidPointer (operand_8858) ;
              var_cas_s.appendCString ("  illegal value ") ;
              var_cas_s._dotAssign_operation (operand_8858->mIllegalValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
              var_cas_s.appendCString (" mask ") ;
              var_cas_s._dotAssign_operation (operand_8858->mIllegalMask.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
              var_cas_s.appendCString (" description \"") ;
              var_cas_s._dotAssign_operation (operand_8858->mDescription) ;
              var_cas_s.appendCString ("\"\n") ;
            }
          }
          {
            GGS_configRegisterMaskMap::cEnumerator enumerator_9082 (operand_8641->mInfo.mConfigRegisterMaskMap, true) ;
            const GGS_configRegisterMaskMap::cElement * operand_9082 = NULL ;
            while (((operand_9082 = enumerator_9082.nextObject ()))) {
              macroValidPointer (operand_9082) ;
              var_cas_s.appendCString ("  setting '") ;
              var_cas_s._dotAssign_operation (operand_9082->mKey) ;
              var_cas_s.appendCString ("': mask ") ;
              var_cas_s._dotAssign_operation (operand_9082->mInfo.mMaskValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
              var_cas_s.appendCString (" description \"") ;
              var_cas_s._dotAssign_operation (operand_9082->mInfo.mDescription) ;
              var_cas_s.appendCString ("\"\n") ;
              {
                GGS_fieldSettingMap::cEnumerator enumerator_9246 (operand_9082->mInfo.mFieldSettingMap, true) ;
                const GGS_fieldSettingMap::cElement * operand_9246 = NULL ;
                while (((operand_9246 = enumerator_9246.nextObject ()))) {
                  macroValidPointer (operand_9246) ;
                  var_cas_s.appendCString ("    value ") ;
                  var_cas_s._dotAssign_operation (operand_9246->mInfo.mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
                  var_cas_s.appendCString (" description \"") ;
                  var_cas_s._dotAssign_operation (operand_9246->mKey) ;
                  var_cas_s.appendCString ("\"\n") ;
                }
              }
            }
          }
          _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (197)) ;
        }
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("The "))._operator_concat (var_cas_deviceForConfigDescription))._operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_epilogue (C_Compiler & /* _inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  sint16 returnCode = 0 ; // No error
//--- Fix parameters for BDD package
  C_BDD::setHashMapSize (18) ;
  C_BDD::setITEcacheSize (15) ;
  C_BDD::setANDcacheSize (1) ;
  C_BDD::forAllOnBitsGreaterCacheSize (17) ;
  C_PrologueEpilogueAction::runPrologueActions () ;
  {
  //--- Input/output parameters
    C_options_for_piccolo_program options (false) ;
    const char * extensions [] = {"piccolo", NULL} ;
    const char * helpMessages [] = {"a source text file with the .piccolo extension", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    bool cocoaOutput = false ;
    F_Analyze_CLI_Options (argc, argv,
                           "version PICCOLO_BETA_VERSION",
                           options,
                           sourceFilesArray,
                           extensions,
                           helpMessages,
                           cocoaOutput) ;
    C_galgas_io_parameters IOparameters  (& options,
      cocoaOutput,
      #ifndef DO_NOT_GENERATE_CHECKINGS
        "version PICCOLO_BETA_VERSION" " [debug]",
      #else
        "version PICCOLO_BETA_VERSION",
      #endif
      argv [1]) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (IOparameters, C_galgas_io::kTerminalOutputKind COMMA_HERE)) ;
  //--- Common lexique object
    C_Compiler * _commonLexique = NULL ;
    macroMyNew (_commonLexique, C_Compiler (NULL, "", "", galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = options.boolOptionValueFromKeys ("generic_cli_options",
                                                                        ASK_TO_SAVE_ON_CLOSE,
                                                                        false) ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (options.boolOptionValueFromKeys ("generic_cli_options",
                                             "enable_allocation_debugging",
                                             false)) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = options.boolOptionValueFromKeys ("generic_galgas_cli_options",
                                                         "verbose_output",
                                                         false) ;
      piccolo_program_prologue (* _commonLexique, sourceFilesArray) ;
      for (sint32 i=0 ; i<sourceFilesArray.count () ; i++) {
        try {
          const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
          sint16 r = 0 ;
          if (fileExtension.compare ("piccolo") == 0) {
            C_Compiler & _inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (_inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (_inLexique, _source, _here COMMA_HERE)) ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              piccolo_grammar::_performSourceFileParsing_ (_inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile
                                            COMMA_SOURCE_FILE_AT_LINE (210)) ;
            }
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else{
            printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
            r = 1 ;
          }
          if (r != 0) {
            returnCode = r ;
          }
        }catch (C_ScanOrParseOnlyException) { // Raised when scan only or parse only options are set
          // Do nothing: accept silently exception
        }
      }
    //--- Error or warnings ?
      if (_commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (_commonLexique->totalWarningCount () > 0) {
        const bool warningsAreTreatedAsError
            = options.boolOptionValueFromKeys ("generic_galgas_cli_options",
                                               TREAT_WARNINGS_AS_ERRORS,
                                               false) ;
        if (warningsAreTreatedAsError) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      piccolo_program_epilogue (* _commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroDetachPointer (galgasIOptr, C_galgas_io) ;
    macroDetachPointer (_commonLexique, C_Compiler) ;
    C_PrologueEpilogueAction::runEpilogueActions () ;
    runAllReleaseRoutines () ;
  }
  #ifndef DO_NOT_GENERATE_CHECKINGS
    C_GGS_Object::checkAllObjectsHaveBeenReleased () ;
  #endif
  if (verboseOptionOn) {
    #ifndef DO_NOT_GENERATE_CHECKINGS
      const uint64 maxUsedMemorySize = getMaxUsedMemorySize () ;
      const uint64 oneMegaByte = 1 << 20 ;
      const uint64 megaBytes = maxUsedMemorySize / oneMegaByte ;
      const uint64 fraction = ((maxUsedMemorySize % oneMegaByte) * 1000) / oneMegaByte ;
      co << cStringWithSigned (getCreatedDynamicObjectsTotalCount ())
         << " C++ objects have been created (" ;
      co.appendUnsigned64 (megaBytes) ;
      co << "." ;
      co.appendUnsignedWithZeroFill ((uint32) fraction, 3) ;
      co << " MB).\n" ;
      deactivateMemoryControl () ;
      if ((getAllocationBalance () != 0) && (returnCode == 0)) {
        display_pointers () ;
      }
    #endif
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


