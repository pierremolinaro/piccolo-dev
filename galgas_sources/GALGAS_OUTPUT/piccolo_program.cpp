//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_program.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 17th, 2010, at 20h26'9"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"
#include "command_line_interface/C_StringCommandLineOption.h"
#include "utilities/cpp-allocation.h"
#include "utilities/basic-allocation.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "pic18_metamodel.h"
#include "pic18_semantics.h"
#include "piccolo_grammar.h"
#include "piccolo_program.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_prologue (C_Compiler & inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  const GGS_bool cond_3742 = (((gOption_piccolo_5F_options_outputDeviceList.reader_value ()).operator_or (gOption_piccolo_5F_options_outputPic_31__38_DeviceList.reader_value ())).operator_or (gOption_piccolo_5F_options_outputBaselineDeviceList.reader_value ())).operator_or (gOption_piccolo_5F_options_outputMidrangeDeviceList.reader_value ()) ;
  if (cond_3742.isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_allDevices = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allFilePathes (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
    GGS_stringlist  var_cas_pic18_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_stringlist  var_cas_midrange_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_stringlist  var_cas_baseline_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_bool var_cas_ok = GGS_bool (true) ;
    {
      GGS_stringlist::cEnumerator enumerator_925 (var_cas_allDevices, true) ;
      const GGS_stringlist::cElement * operand_925 = NULL ;
      while (((operand_925 = enumerator_925.nextObject ()))
          && (var_cas_ok.isBuiltAndTrue ())) {
        macroValidPointer (operand_925) ;
        GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
        GGS_string var_cas_name = operand_925->mValue.reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
        ::routine_parseDeviceDefinition (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (25)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (25)) ;
        switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (26)).enumValue ()) {
        case GGS_processorType::enum_pic18_60:
        case GGS_processorType::enum_pic18_80:
          {
          var_cas_pic18_devices.addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::enum_midrange:
          {
          var_cas_midrange_devices.addAssign_operation (var_cas_name) ;
          const GGS_bool cond_1464 = (var_cas_piccoloDeviceModel.reader_mBankCount (inLexique COMMA_SOURCE_FILE_AT_LINE (29)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (29))).operator_strictSup (GGS_uint (4U)) ;
          if (cond_1464.isBuiltAndTrue ()) {
            inLexique.printMessage ((((var_cas_name).operator_concat (GGS_string (" has "))).operator_concat (var_cas_piccoloDeviceModel.reader_mBankCount (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30)))).operator_concat (GGS_string (" banks\n")) COMMA_SOURCE_FILE_AT_LINE (30)) ;
          }
          }
          break ;
        case GGS_processorType::enum_baseline:
          {
          var_cas_baseline_devices.addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::kNotBuilt:
          break ;
        }
      }
    }
    const GGS_bool cond_2529 = (gOption_piccolo_5F_options_outputDeviceList.reader_value ()).operator_or (gOption_piccolo_5F_options_outputBaselineDeviceList.reader_value ()) ;
    if (cond_2529.isBuiltAndTrue ()) {
      inLexique.printMessage ((((var_cas_baseline_devices.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47))).operator_concat (GGS_string (" baseline devices (not yet supported by Piccolo "))).operator_concat (GGS_string::constructor_stringWithVersionString (inLexique COMMA_SOURCE_FILE_AT_LINE (47)))).operator_concat (GGS_string ("):\n")) COMMA_SOURCE_FILE_AT_LINE (47)) ;
      GGS_uint  var_cas_idx = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_2275 (var_cas_baseline_devices, true) ;
        const GGS_stringlist::cElement * operand_2275 = NULL ;
        while (((operand_2275 = enumerator_2275.nextObject ()))) {
          macroValidPointer (operand_2275) ;
          inLexique.printMessage (operand_2275->mValue.reader_stringByRightPadding (GGS_uint (15U), GGS_char (TO_UNICODE (' '))) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
          const GGS_bool cond_2435 = (var_cas_idx).operator_isEqual (GGS_uint (5U)) ;
          if (cond_2435.isBuiltAndTrue ()) {
            var_cas_idx = GGS_uint (0U) ;
            inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (54)) ;
          }
        }
      }
      const GGS_bool cond_2516 = (var_cas_idx).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_2516.isBuiltAndTrue ()) {
        inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (58)) ;
      }
    }
    const GGS_bool cond_3135 = (gOption_piccolo_5F_options_outputDeviceList.reader_value ()).operator_or (gOption_piccolo_5F_options_outputMidrangeDeviceList.reader_value ()) ;
    if (cond_3135.isBuiltAndTrue ()) {
      inLexique.printMessage ((((var_cas_midrange_devices.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (63))).operator_concat (GGS_string (" mid-range devices supported by Piccolo "))).operator_concat (GGS_string::constructor_stringWithVersionString (inLexique COMMA_SOURCE_FILE_AT_LINE (63)))).operator_concat (GGS_string (":\n")) COMMA_SOURCE_FILE_AT_LINE (63)) ;
      GGS_uint  var_cas_idx = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_2881 (var_cas_midrange_devices, true) ;
        const GGS_stringlist::cElement * operand_2881 = NULL ;
        while (((operand_2881 = enumerator_2881.nextObject ()))) {
          macroValidPointer (operand_2881) ;
          inLexique.printMessage (operand_2881->mValue.reader_stringByRightPadding (GGS_uint (15U), GGS_char (TO_UNICODE (' '))) COMMA_SOURCE_FILE_AT_LINE (66)) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
          const GGS_bool cond_3041 = (var_cas_idx).operator_isEqual (GGS_uint (5U)) ;
          if (cond_3041.isBuiltAndTrue ()) {
            var_cas_idx = GGS_uint (0U) ;
            inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (70)) ;
          }
        }
      }
      const GGS_bool cond_3122 = (var_cas_idx).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_3122.isBuiltAndTrue ()) {
        inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (74)) ;
      }
    }
    const GGS_bool cond_3724 = (gOption_piccolo_5F_options_outputDeviceList.reader_value ()).operator_or (gOption_piccolo_5F_options_outputPic_31__38_DeviceList.reader_value ()) ;
    if (cond_3724.isBuiltAndTrue ()) {
      inLexique.printMessage ((((var_cas_pic18_devices.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_concat (GGS_string (" pic18 devices supported by Piccolo "))).operator_concat (GGS_string::constructor_stringWithVersionString (inLexique COMMA_SOURCE_FILE_AT_LINE (79)))).operator_concat (GGS_string (":\n")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
      GGS_uint  var_cas_idx = GGS_uint (0U) ;
      {
        GGS_stringlist::cEnumerator enumerator_3470 (var_cas_pic18_devices, true) ;
        const GGS_stringlist::cElement * operand_3470 = NULL ;
        while (((operand_3470 = enumerator_3470.nextObject ()))) {
          macroValidPointer (operand_3470) ;
          inLexique.printMessage (operand_3470->mValue.reader_stringByRightPadding (GGS_uint (15U), GGS_char (TO_UNICODE (' '))) COMMA_SOURCE_FILE_AT_LINE (82)) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
          const GGS_bool cond_3630 = (var_cas_idx).operator_isEqual (GGS_uint (5U)) ;
          if (cond_3630.isBuiltAndTrue ()) {
            var_cas_idx = GGS_uint (0U) ;
            inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (86)) ;
          }
        }
      }
      const GGS_bool cond_3711 = (var_cas_idx).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_3711.isBuiltAndTrue ()) {
        inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
  }
  const GGS_bool cond_4445 = (gOption_piccolo_5F_options_exportDeviceFiles.reader_value ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_4445.isBuiltAndTrue ()) {
    GGS_string var_cas_dir = gOption_piccolo_5F_options_exportDeviceFiles.reader_value () ;
    const GGS_bool cond_4044 = (var_cas_dir.reader_directoryExists ()).operator_not () ;
    if (cond_4044.isBuiltAndTrue ()) {
      const GGS_string temp_4033 = var_cas_dir ;
      if (temp_4033.isBuilt ()) {
        temp_4033 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    GGS_filewrapper  var_cas_fw = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices) ;
    GGS_stringlist  var_cas_allDevices = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allFilePathes (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
    {
      GGS_stringlist::cEnumerator enumerator_4205 (var_cas_allDevices, true) ;
      const GGS_stringlist::cElement * operand_4205 = NULL ;
      while (((operand_4205 = enumerator_4205.nextObject ()))) {
        macroValidPointer (operand_4205) ;
        GGS_string var_cas_definitionString = var_cas_fw.reader_fileContentsAtPath (inLexique, operand_4205->mValue COMMA_SOURCE_FILE_AT_LINE (104)) ;
        const GGS_string temp_4312 = var_cas_definitionString ;
        if (temp_4312.isBuilt ()) {
          temp_4312 (HERE)->method_writeToFile (inLexique, (var_cas_dir).operator_concat (operand_4205->mValue) COMMA_SOURCE_FILE_AT_LINE (105)) ;
        }
      }
    }
    inLexique.printMessage ((((var_cas_allDevices.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))).operator_concat (GGS_string (" devices copied in '"))).operator_concat (var_cas_dir)).operator_concat (GGS_string ("' directory\n")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
  GGS_string var_cas_deviceForMemoryDescription = gOption_piccolo_5F_options_memoryDescription.reader_value () ;
  const GGS_bool cond_6898 = (var_cas_deviceForMemoryDescription.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_6898.isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath = ((GGS_string ("/")).operator_concat (var_cas_deviceForMemoryDescription)).operator_concat (GGS_string (".piccoloDevice")) ;
    const GGS_bool cond_6777 = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (113)) ;
    if (cond_6777.isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_deviceForMemoryDescription, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (115)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (115)) ;
      GGS_uint  var_cas_totalRam = GGS_uint (0U) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5007 (var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
        const GGS_ramBankTable::cElement * operand_5007 = NULL ;
        while (((operand_5007 = enumerator_5007.nextObject ()))) {
          macroValidPointer (operand_5007) ;
          var_cas_totalRam = var_cas_totalRam.add_operation (inLexique, operand_5007->mInfo.mLastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (118)).substract_operation (inLexique, operand_5007->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (118)) ;
        }
      }
      inLexique.printMessage ((var_cas_deviceForMemoryDescription).operator_concat (GGS_string (" device:\n")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
      inLexique.printMessage (((((GGS_string ("  ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)))).operator_concat (GGS_string (" RAM banks (total "))).operator_concat (var_cas_totalRam.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)))).operator_concat (GGS_string (" bytes):\n")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_5345 (var_cas_piccoloDeviceModel.reader_mRamBankTable (inLexique COMMA_SOURCE_FILE_AT_LINE (122)), true) ;
        const GGS_ramBankTable::cElement * operand_5345 = NULL ;
        while (((operand_5345 = enumerator_5345.nextObject ()))) {
          macroValidPointer (operand_5345) ;
          inLexique.printMessage (((((((((GGS_string ("    bank \"")).operator_concat (operand_5345->mKey)).operator_concat (GGS_string ("\" from "))).operator_concat (operand_5345->mInfo.mFirstFreeAddress.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (123)))).operator_concat (GGS_string (" to "))).operator_concat (operand_5345->mInfo.mLastAddressPlusOne.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (124)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (124)))).operator_concat (GGS_string (" ("))).operator_concat (operand_5345->mInfo.mLastAddressPlusOne.substract_operation (inLexique, operand_5345->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (125)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)))).operator_concat (GGS_string (" bytes)")) COMMA_SOURCE_FILE_AT_LINE (123)) ;
          {
            GGS_uintlist::cEnumerator enumerator_5627 (operand_5345->mInfo.mMirrorOffsetList, true) ;
            const GGS_uintlist::cElement * operand_5627 = enumerator_5627.nextObject () ;
            if ((operand_5627 != NULL)) {
              inLexique.printMessage (GGS_string (", mirror at ") COMMA_SOURCE_FILE_AT_LINE (127)) ;
              bool _foreach_loop_5627 ;
              do{
                macroValidPointer (operand_5627) ;
                inLexique.printMessage (operand_5345->mInfo.mFirstFreeAddress.add_operation (inLexique, operand_5627->mValue COMMA_SOURCE_FILE_AT_LINE (128)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
                operand_5627 = enumerator_5627.nextObject () ;
                _foreach_loop_5627 = ((operand_5627 != NULL)) ;
                if (_foreach_loop_5627) {
                  inLexique.printMessage (GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (129)) ;
                }
              }while (_foreach_loop_5627) ;
            }
          }
          inLexique.printMessage (GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (131)) ;
        }
      }
      switch (var_cas_piccoloDeviceModel.reader_mProcessorType (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).enumValue ()) {
      case GGS_processorType::enum_pic18_60:
      case GGS_processorType::enum_pic18_80:
        {
        inLexique.printMessage (((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135)))).operator_concat (GGS_string (" bytes\n")) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        }
        break ;
      case GGS_processorType::enum_midrange:
        {
        GGS_uint  var_cas_pageCount = var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).add_operation (inLexique, GGS_uint (2047U) COMMA_SOURCE_FILE_AT_LINE (137)).divide_operation (inLexique, GGS_uint (2048U) COMMA_SOURCE_FILE_AT_LINE (137)) ;
        GGS_string var_cas_s = GGS_string ("") ;
        const GGS_bool cond_6194 = (var_cas_pageCount).operator_strictSup (GGS_uint (1U)) ;
        if (cond_6194.isBuiltAndTrue ()) {
          var_cas_s = GGS_string ("s") ;
        }
        inLexique.printMessage (((((((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (142)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (142)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" instructions ("))).operator_concat (var_cas_pageCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143)))).operator_concat (GGS_string (" page"))).operator_concat (var_cas_s)).operator_concat (GGS_string (")\n")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
        }
        break ;
      case GGS_processorType::enum_baseline:
        {
        inLexique.printMessage (((GGS_string ("  ROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145)))).operator_concat (GGS_string (" instructions\n")) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        }
        break ;
      case GGS_processorType::kNotBuilt:
        break ;
      }
      const GGS_bool cond_6591 = (var_cas_piccoloDeviceModel.reader_mEepromSize (inLexique COMMA_SOURCE_FILE_AT_LINE (147))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_6591.isBuiltAndTrue ()) {
        inLexique.printMessage (GGS_string ("  No EEPROM\n") COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }else if (cond_6591.isBuiltAndFalse ()) {
        inLexique.printMessage (((((GGS_string ("  EEPROM size: ")).operator_concat (var_cas_piccoloDeviceModel.reader_mEepromSize (inLexique COMMA_SOURCE_FILE_AT_LINE (150)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (" bytes (at "))).operator_concat (var_cas_piccoloDeviceModel.reader_mEepromAddress (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (151)))).operator_concat (GGS_string (")\n")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
      }
    }else if (cond_6777.isBuiltAndFalse ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The ")).operator_concat (var_cas_deviceForMemoryDescription)).operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }
  }
  GGS_string var_cas_deviceForRegistersDescription = gOption_piccolo_5F_options_registerDescription.reader_value () ;
  const GGS_bool cond_8012 = (var_cas_deviceForRegistersDescription.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_8012.isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath = ((GGS_string ("/")).operator_concat (var_cas_deviceForRegistersDescription)).operator_concat (GGS_string (".piccoloDevice")) ;
    const GGS_bool cond_7888 = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (161)) ;
    if (cond_7888.isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_deviceForRegistersDescription, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (163)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (163)) ;
      inLexique.printMessage ((((var_cas_deviceForRegistersDescription).operator_concat (GGS_string (" has "))).operator_concat (var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (164)))).operator_concat (GGS_string (" special registers:\n")) COMMA_SOURCE_FILE_AT_LINE (164)) ;
      {
        GGS_registerTable::cEnumerator enumerator_7590 (var_cas_piccoloDeviceModel.reader_mRegisterTable (inLexique COMMA_SOURCE_FILE_AT_LINE (165)), true) ;
        const GGS_registerTable::cElement * operand_7590 = NULL ;
        while (((operand_7590 = enumerator_7590.nextObject ()))) {
          macroValidPointer (operand_7590) ;
          GGS_string var_cas_s = ((GGS_string ("  '")).operator_concat (operand_7590->mKey)).operator_concat (GGS_string ("' at ")) ;
          {
            GGS_uintlist::cEnumerator enumerator_7709 (operand_7590->mInfo.mRegisterAddressList, true) ;
            const GGS_uintlist::cElement * operand_7709 = enumerator_7709.nextObject () ;
            if ((operand_7709 != NULL)) {
              bool _foreach_loop_7709 ;
              do{
                macroValidPointer (operand_7709) ;
                var_cas_s.dotAssign_operation (operand_7709->mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (168))) ;
                operand_7709 = enumerator_7709.nextObject () ;
                _foreach_loop_7709 = ((operand_7709 != NULL)) ;
                if (_foreach_loop_7709) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_7709) ;
            }
          }
          var_cas_s.dotAssign_operation (operand_7590->mInfo.mBitDefinitionString) ;
          var_cas_s.appendCString ("\n") ;
          inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (172)) ;
        }
      }
    }else if (cond_7888.isBuiltAndFalse ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The ")).operator_concat (var_cas_deviceForRegistersDescription)).operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
  }
  GGS_string var_cas_deviceForConfigDescription = gOption_piccolo_5F_options_configDescription.reader_value () ;
  const GGS_bool cond_9693 = (var_cas_deviceForConfigDescription.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_9693.isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath = ((GGS_string ("/")).operator_concat (var_cas_deviceForConfigDescription)).operator_concat (GGS_string (".piccoloDevice")) ;
    const GGS_bool cond_9572 = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (182)) ;
    if (cond_9572.isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_deviceForConfigDescription, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (184)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (184)) ;
      inLexique.printMessage ((((var_cas_deviceForConfigDescription).operator_concat (GGS_string (" has "))).operator_concat (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185)))).operator_concat (GGS_string (" configuration registers:\n")) COMMA_SOURCE_FILE_AT_LINE (185)) ;
      {
        GGS_configRegisterMap::cEnumerator enumerator_8701 (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)), true) ;
        const GGS_configRegisterMap::cElement * operand_8701 = NULL ;
        while (((operand_8701 = enumerator_8701.nextObject ()))) {
          macroValidPointer (operand_8701) ;
          GGS_string var_cas_s = ((((((GGS_string ("REGISTER '")).operator_concat (operand_8701->mKey)).operator_concat (GGS_string ("' at "))).operator_concat (operand_8701->mInfo.mRegisterAddress.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).operator_concat (GGS_string (", width "))).operator_concat (operand_8701->mInfo.mRegisterWidth.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).operator_concat (GGS_string ("\n")) ;
          {
            GGS_illegalMaskList::cEnumerator enumerator_8918 (operand_8701->mInfo.mIllegalMaskList, true) ;
            const GGS_illegalMaskList::cElement * operand_8918 = NULL ;
            while (((operand_8918 = enumerator_8918.nextObject ()))) {
              macroValidPointer (operand_8918) ;
              var_cas_s.appendCString ("  illegal value ") ;
              var_cas_s.dotAssign_operation (operand_8918->mIllegalValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
              var_cas_s.appendCString (" mask ") ;
              var_cas_s.dotAssign_operation (operand_8918->mIllegalMask.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
              var_cas_s.appendCString (" description \"") ;
              var_cas_s.dotAssign_operation (operand_8918->mDescription) ;
              var_cas_s.appendCString ("\"\n") ;
            }
          }
          {
            GGS_configRegisterMaskMap::cEnumerator enumerator_9142 (operand_8701->mInfo.mConfigRegisterMaskMap, true) ;
            const GGS_configRegisterMaskMap::cElement * operand_9142 = NULL ;
            while (((operand_9142 = enumerator_9142.nextObject ()))) {
              macroValidPointer (operand_9142) ;
              var_cas_s.appendCString ("  setting '") ;
              var_cas_s.dotAssign_operation (operand_9142->mKey) ;
              var_cas_s.appendCString ("': mask ") ;
              var_cas_s.dotAssign_operation (operand_9142->mInfo.mMaskValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (192))) ;
              var_cas_s.appendCString (" description \"") ;
              var_cas_s.dotAssign_operation (operand_9142->mInfo.mDescription) ;
              var_cas_s.appendCString ("\"\n") ;
              {
                GGS_fieldSettingMap::cEnumerator enumerator_9353 (operand_9142->mInfo.mFieldSettingMap, true) ;
                const GGS_fieldSettingMap::cElement * operand_9353 = NULL ;
                while (((operand_9353 = enumerator_9353.nextObject ()))) {
                  macroValidPointer (operand_9353) ;
                  var_cas_s.appendCString ("    value ") ;
                  var_cas_s.dotAssign_operation (operand_9353->mInfo.mValue.reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
                  var_cas_s.appendCString (" description \"") ;
                  var_cas_s.dotAssign_operation (operand_9353->mKey) ;
                  var_cas_s.appendCString ("\"\n") ;
                }
              }
            }
          }
          inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (197)) ;
        }
      }
    }else if (cond_9572.isBuiltAndFalse ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The ")).operator_concat (var_cas_deviceForConfigDescription)).operator_concat (GGS_string (" device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_epilogue (C_Compiler & /* inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
//--- Fix parameters for BDD package
  C_BDD::setHashMapSize (19) ;
  C_BDD::setITEcacheSize (17) ;
  C_BDD::setANDcacheSize (1) ;
  C_BDD::forAllOnBitsGreaterCacheSize (18) ;
  C_PrologueEpilogue::runPrologueActions () ;
  {
  //--- Input/output parameters
    const char * extensions [] = {"piccolo", NULL} ;
    const char * helpMessages [] = {"a source text file with the .piccolo extension", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    F_Analyze_CLI_Options (argc, argv,
                                 #ifndef DO_NOT_GENERATE_CHECKINGS
        "version PICCOLO_BETA_VERSION" " [debug]",
      #else
        "version PICCOLO_BETA_VERSION",
      #endif
                           sourceFilesArray,
                           extensions,
                           helpMessages) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;
    macroRetainObject (galgasIOptr) ;
  //--- Common lexique object
    C_Compiler * _commonLexique = NULL ;
    macroMyNew (_commonLexique, C_Compiler (NULL, "", "", galgasIOptr COMMA_HERE)) ;
    macroRetainObject (_commonLexique) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      piccolo_program_prologue (* _commonLexique, sourceFilesArray) ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        try {
          const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
          PMSInt16 r = 0 ;
          if (fileExtension.compare ("piccolo") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              C_Grammar_piccolo_5F_grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile
                                            COMMA_SOURCE_FILE_AT_LINE (210)) ;
            }
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else{
            printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
            r = 1 ;
          }
          if (r != 0) {
            returnCode = r ;
          }
        }catch (C_ScanOrParseOnlyExceptionEX) { // Raised when scan only or parse only options are set
          // Do nothing: accept silently exception
        }
      }
    //--- Error or warnings ?
      if (_commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (_commonLexique->totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      piccolo_program_epilogue (* _commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroReleaseObject (galgasIOptr) ;
    macroReleaseObject (_commonLexique) ;
  }
  C_PrologueEpilogue::runEpilogueActions () ;
  C_Object::garbage () ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    C_Object::checkAllObjectsHaveBeenReleased () ;
  #endif
  displayAllocationStats () ;
  displayAllocatedBlockSizeStats () ;
  displayAllocatedBlocksInfo () ;
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


