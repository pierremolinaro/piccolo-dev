//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_program.cpp'                         *
//                        Generated by version 2.5.4                         *
//                    december 23th, 2013, at 19h51'53"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "piccolo_program.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/F_DisplayException.h"
#include "utilities/basic-allocation.h"
#include "utilities/cpp-allocation.h"
#include "utilities/C_PrologueEpilogue.h"
#include "command_line_interface/F_mainForLIBPM.h"
#include "command_line_interface/C_builtin_CLI_Options.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "project_header.h"

//---------------------------------------------------------------------------*

#include "piccolo_options.h"
#include "pic18_grammar.h"
#include "piccoloDevice_grammar.h"
#include "piccolo_options_not_in_cocoa.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      print_tool_help_message                              *
//                                                                           *
//---------------------------------------------------------------------------*

static void print_tool_help_message (void) {
  co << "Compiled with GALGAS revision NUMERO_REVISION_GALGAS\n" ;
}

//---------------------------------------------------------------------------*

static const char * kSourceFileExtensions [] = {
  "piccolo",
  NULL
} ;    

//---------------------------------------------------------------------------*

static const char * kSourceFileHelpMessages [] = {
  "a source text file with the .piccolo extension",
  NULL
} ;    

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char * kVersionString = "version " PROJECT_VERSION_STRING " [debug]" ;
#else
  static const char * kVersionString = "version " PROJECT_VERSION_STRING ;
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM (int inArgc, const char * inArgv []) {
//--- Analyze Command Line Options
  TC_UniqueArray <C_String> sourceFilesArray ;
  F_Analyze_CLI_Options (inArgc, inArgv,
                         kVersionString,
                         sourceFilesArray,
                         kSourceFileExtensions,
                         kSourceFileHelpMessages,
                         print_tool_help_message) ;
//---
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
//--- Set Execution mode
  C_String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    co << executionModeOptionErrorMessage ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "" COMMA_HERE)) ;
    try{
      routine_before (commonLexique COMMA_HERE) ;
      verboseOptionOn = gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        setCurrentCompiledFilePath (sourceFilesArray (i COMMA_HERE)) ;
        if (gOption_galgas_5F_builtin_5F_options_trace.mValue) {
          enableTraceWithPath (sourceFilesArray (i COMMA_HERE)) ;
        }
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (sourceFilesArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonLexique->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
        PMSInt16 r = 0 ;
        if (fileExtension == "piccolo") {
          routine_programRule_5F__30_ (sourceFilePath, commonLexique COMMA_HERE) ;
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
        closeTrace () ;
      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_builtin_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonLexique COMMA_HERE) ;
    //--- Display error and warnings count
      if (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        C_String message ;
        if (totalWarningCount () == 0) {
          message << "No warning" ;
        }else if (totalWarningCount () == 1) {
          message << "1 warning" ;
        }else{
          message << cStringWithSigned (totalWarningCount ()) << " warnings" ;
        }
        message << ", " ;
        if (totalErrorCount () == 0) {
          message << "no error" ;
        }else if (totalErrorCount () == 1) {
          message << "1 error" ;
        }else{
          message << cStringWithSigned (totalErrorCount ()) << " errors" ;
        }
        message << ".\n" ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\n") ;
      throw ;
    }
    macroDetachSharedObject (commonLexique) ;
  }
  return returnCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                             Routine 'before'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_before (C_Compiler * inCompiler
                     COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputDeviceList.reader_value ()).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputPic_31__38_DeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (10)).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputBaselineDeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (11)).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputMidrangeDeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (12)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_stringlist var_allDevices = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allTextFilePathes (SOURCE_FILE_AT_LINE (15)) ;
    GALGAS_stringlist var_pic_31__38__5F_devices = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (16)) ;
    GALGAS_stringlist var_midrange_5F_devices = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (17)) ;
    GALGAS_stringlist var_baseline_5F_devices = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (18)) ;
    cEnumerator_stringlist enumerator_867 (var_allDevices, kEnumeration_up) ;
    while (enumerator_867.hasCurrentObject ()) {
      GALGAS_string var_name = enumerator_867.current_mValue (HERE).reader_lastPathComponent (SOURCE_FILE_AT_LINE (21)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (21)) ;
      GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
      {
      routine_parseDeviceDefinition (GALGAS_lstring::constructor_new (var_name, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (22)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (22)) ;
      }
      if (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (23)).isValid ()) {
        switch (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (23)).enumValue ()) {
        case GALGAS_processorType::kNotBuilt:
          break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__36__30_: case GALGAS_processorType::kEnum_pic_31__38__5F__38__30_: {
          var_pic_31__38__5F_devices.addAssign_operation (var_name COMMA_SOURCE_FILE_AT_LINE (25)) ;
          } break ;
        case GALGAS_processorType::kEnum_midrange: {
          var_midrange_5F_devices.addAssign_operation (var_name COMMA_SOURCE_FILE_AT_LINE (27)) ;
          } break ;
        case GALGAS_processorType::kEnum_baseline: {
          var_baseline_5F_devices.addAssign_operation (var_name COMMA_SOURCE_FILE_AT_LINE (35)) ;
          } break ;
        }
      }
      enumerator_867.gotoNextObject () ;
    }
    const enumGalgasBool test_1 = GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputDeviceList.reader_value ()).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputBaselineDeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (39)).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->printMessage (var_baseline_5F_devices.reader_length (SOURCE_FILE_AT_LINE (40)).reader_string (SOURCE_FILE_AT_LINE (40)).operator_concat (GALGAS_string (" baseline devices supported by Piccolo ") COMMA_SOURCE_FILE_AT_LINE (40)).operator_concat (GALGAS_string::constructor_stringWithVersionString (SOURCE_FILE_AT_LINE (40)) COMMA_SOURCE_FILE_AT_LINE (40)).operator_concat (GALGAS_string (":\n") COMMA_SOURCE_FILE_AT_LINE (40)) COMMA_SOURCE_FILE_AT_LINE (40)) ;
      GALGAS_uint var_idx = GALGAS_uint ((PMUInt32) 0U) ;
      cEnumerator_stringlist enumerator_2012 (var_baseline_5F_devices, kEnumeration_up) ;
      while (enumerator_2012.hasCurrentObject ()) {
        inCompiler->printMessage (enumerator_2012.current_mValue (HERE).reader_stringByRightPadding (GALGAS_uint ((PMUInt32) 15U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (43)) COMMA_SOURCE_FILE_AT_LINE (43)) ;
        var_idx.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (44)) ;
        const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 5U))).boolEnum () ;
        if (kBoolTrue == test_2) {
          var_idx = GALGAS_uint ((PMUInt32) 0U) ;
          inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (47)) ;
        }
        enumerator_2012.gotoNextObject () ;
      }
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
    const enumGalgasBool test_4 = GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputDeviceList.reader_value ()).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputMidrangeDeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (55)).boolEnum () ;
    if (kBoolTrue == test_4) {
      inCompiler->printMessage (var_midrange_5F_devices.reader_length (SOURCE_FILE_AT_LINE (56)).reader_string (SOURCE_FILE_AT_LINE (56)).operator_concat (GALGAS_string (" mid-range devices supported by Piccolo ") COMMA_SOURCE_FILE_AT_LINE (56)).operator_concat (GALGAS_string::constructor_stringWithVersionString (SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)).operator_concat (GALGAS_string (":\n") COMMA_SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)) ;
      GALGAS_uint var_idx = GALGAS_uint ((PMUInt32) 0U) ;
      cEnumerator_stringlist enumerator_2644 (var_midrange_5F_devices, kEnumeration_up) ;
      while (enumerator_2644.hasCurrentObject ()) {
        inCompiler->printMessage (enumerator_2644.current_mValue (HERE).reader_stringByRightPadding (GALGAS_uint ((PMUInt32) 15U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (59)) COMMA_SOURCE_FILE_AT_LINE (59)) ;
        var_idx.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (60)) ;
        const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 5U))).boolEnum () ;
        if (kBoolTrue == test_5) {
          var_idx = GALGAS_uint ((PMUInt32) 0U) ;
          inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (63)) ;
        }
        enumerator_2644.gotoNextObject () ;
      }
      const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_6) {
        inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (67)) ;
      }
    }
    const enumGalgasBool test_7 = GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputDeviceList.reader_value ()).operator_or (GALGAS_bool (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_outputPic_31__38_DeviceList.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (71)).boolEnum () ;
    if (kBoolTrue == test_7) {
      inCompiler->printMessage (var_pic_31__38__5F_devices.reader_length (SOURCE_FILE_AT_LINE (72)).reader_string (SOURCE_FILE_AT_LINE (72)).operator_concat (GALGAS_string (" pic18 devices supported by Piccolo ") COMMA_SOURCE_FILE_AT_LINE (72)).operator_concat (GALGAS_string::constructor_stringWithVersionString (SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72)).operator_concat (GALGAS_string (":\n") COMMA_SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72)) ;
      GALGAS_uint var_idx = GALGAS_uint ((PMUInt32) 0U) ;
      cEnumerator_stringlist enumerator_3259 (var_pic_31__38__5F_devices, kEnumeration_up) ;
      while (enumerator_3259.hasCurrentObject ()) {
        inCompiler->printMessage (enumerator_3259.current_mValue (HERE).reader_stringByRightPadding (GALGAS_uint ((PMUInt32) 15U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)) ;
        var_idx.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (76)) ;
        const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 5U))).boolEnum () ;
        if (kBoolTrue == test_8) {
          var_idx = GALGAS_uint ((PMUInt32) 0U) ;
          inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        }
        enumerator_3259.gotoNextObject () ;
      }
      const enumGalgasBool test_9 = GALGAS_bool (kIsNotEqual, var_idx.objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_9) {
        inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
  }
  const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, GALGAS_string (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_exportDeviceFiles.reader_value ()).reader_length (SOURCE_FILE_AT_LINE (89)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_10) {
    GALGAS_string var_dir = GALGAS_string (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_exportDeviceFiles.reader_value ()) ;
    const enumGalgasBool test_11 = var_dir.reader_directoryExists (SOURCE_FILE_AT_LINE (91)).operator_not (SOURCE_FILE_AT_LINE (91)).boolEnum () ;
    if (kBoolTrue == test_11) {
      var_dir.method_makeDirectory (inCompiler COMMA_SOURCE_FILE_AT_LINE (92)) ;
    }
    GALGAS_filewrapper var_fw = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices) ;
    GALGAS_stringlist var_allDevices = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allTextFilePathes (SOURCE_FILE_AT_LINE (95)) ;
    cEnumerator_stringlist enumerator_4024 (var_allDevices, kEnumeration_up) ;
    while (enumerator_4024.hasCurrentObject ()) {
      GALGAS_string var_definitionString = var_fw.reader_textFileContentsAtPath (enumerator_4024.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (97)) ;
      var_definitionString.method_writeToFile (var_dir.operator_concat (enumerator_4024.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (98)), inCompiler COMMA_SOURCE_FILE_AT_LINE (98)) ;
      enumerator_4024.gotoNextObject () ;
    }
    inCompiler->printMessage (var_allDevices.reader_length (SOURCE_FILE_AT_LINE (100)).reader_string (SOURCE_FILE_AT_LINE (100)).operator_concat (GALGAS_string (" devices copied in '") COMMA_SOURCE_FILE_AT_LINE (100)).operator_concat (var_dir COMMA_SOURCE_FILE_AT_LINE (100)).operator_concat (GALGAS_string ("' directory\n") COMMA_SOURCE_FILE_AT_LINE (100)) COMMA_SOURCE_FILE_AT_LINE (100)) ;
  }
  GALGAS_string var_deviceForMemoryDescription = GALGAS_string (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_memoryDescription.reader_value ()) ;
  const enumGalgasBool test_12 = GALGAS_bool (kIsStrictSup, var_deviceForMemoryDescription.reader_length (SOURCE_FILE_AT_LINE (104)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_12) {
    GALGAS_string var_devicePath = GALGAS_string ("/").operator_concat (var_deviceForMemoryDescription COMMA_SOURCE_FILE_AT_LINE (105)).operator_concat (GALGAS_string (".piccoloDevice") COMMA_SOURCE_FILE_AT_LINE (105)) ;
    const enumGalgasBool test_13 = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (var_devicePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (106)).boolEnum () ;
    if (kBoolTrue == test_13) {
      GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
      {
      routine_parseDeviceDefinition (GALGAS_lstring::constructor_new (var_deviceForMemoryDescription, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (108)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
      GALGAS_uint var_totalRam = GALGAS_uint ((PMUInt32) 0U) ;
      cEnumerator_ramBankTable enumerator_4876 (var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (110)), kEnumeration_up) ;
      while (enumerator_4876.hasCurrentObject ()) {
        var_totalRam = var_totalRam.add_operation (enumerator_4876.current_mLastAddressPlusOne (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (111)).substract_operation (enumerator_4876.current_mFirstFreeAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (111)) ;
        enumerator_4876.gotoNextObject () ;
      }
      inCompiler->printMessage (var_deviceForMemoryDescription.operator_concat (GALGAS_string (" device:\n") COMMA_SOURCE_FILE_AT_LINE (113)) COMMA_SOURCE_FILE_AT_LINE (113)) ;
      inCompiler->printMessage (GALGAS_string ("  ").operator_concat (var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (114)).reader_count (SOURCE_FILE_AT_LINE (114)).reader_string (SOURCE_FILE_AT_LINE (114)) COMMA_SOURCE_FILE_AT_LINE (114)).operator_concat (GALGAS_string (" RAM banks (total ") COMMA_SOURCE_FILE_AT_LINE (114)).operator_concat (var_totalRam.reader_string (SOURCE_FILE_AT_LINE (114)) COMMA_SOURCE_FILE_AT_LINE (114)).operator_concat (GALGAS_string (" bytes):\n") COMMA_SOURCE_FILE_AT_LINE (114)) COMMA_SOURCE_FILE_AT_LINE (114)) ;
      cEnumerator_ramBankTable enumerator_5214 (var_piccoloDeviceModel.reader_mRamBankTable (SOURCE_FILE_AT_LINE (115)), kEnumeration_up) ;
      while (enumerator_5214.hasCurrentObject ()) {
        inCompiler->printMessage (GALGAS_string ("    bank \"").operator_concat (enumerator_5214.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)).operator_concat (GALGAS_string ("\" from ") COMMA_SOURCE_FILE_AT_LINE (116)).operator_concat (enumerator_5214.current_mFirstFreeAddress (HERE).reader_hexString (SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)).operator_concat (GALGAS_string (" to ") COMMA_SOURCE_FILE_AT_LINE (116)).operator_concat (enumerator_5214.current_mLastAddressPlusOne (HERE).substract_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (117)).reader_hexString (SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (117)).operator_concat (GALGAS_string (" (") COMMA_SOURCE_FILE_AT_LINE (117)).operator_concat (enumerator_5214.current_mLastAddressPlusOne (HERE).substract_operation (enumerator_5214.current_mFirstFreeAddress (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (118)).reader_string (SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)).operator_concat (GALGAS_string (" bytes)") COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (116)) ;
        cEnumerator_uintlist enumerator_5464 (enumerator_5214.current_mMirrorOffsetList (HERE), kEnumeration_up) ;
        const bool bool_14 = true ;
        if (enumerator_5464.hasCurrentObject () && bool_14) {
          inCompiler->printMessage (GALGAS_string (", mirror at ") COMMA_SOURCE_FILE_AT_LINE (120)) ;
          while (enumerator_5464.hasCurrentObject () && bool_14) {
            inCompiler->printMessage (enumerator_5214.current_mFirstFreeAddress (HERE).add_operation (enumerator_5464.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (121)).reader_hexString (SOURCE_FILE_AT_LINE (121)) COMMA_SOURCE_FILE_AT_LINE (121)) ;
            enumerator_5464.gotoNextObject () ;
            if (enumerator_5464.hasCurrentObject () && bool_14) {
              inCompiler->printMessage (GALGAS_string (", ") COMMA_SOURCE_FILE_AT_LINE (122)) ;
            }
          }
        }
        inCompiler->printMessage (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (124)) ;
        enumerator_5214.gotoNextObject () ;
      }
      if (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (126)).isValid ()) {
        switch (var_piccoloDeviceModel.reader_mProcessorType (SOURCE_FILE_AT_LINE (126)).enumValue ()) {
        case GALGAS_processorType::kNotBuilt:
          break ;
        case GALGAS_processorType::kEnum_pic_31__38__5F__36__30_: case GALGAS_processorType::kEnum_pic_31__38__5F__38__30_: {
          inCompiler->printMessage (GALGAS_string ("  ROM size: ").operator_concat (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (128)).reader_uint (SOURCE_FILE_AT_LINE (128)).reader_string (SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)).operator_concat (GALGAS_string (" bytes\n") COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
          } break ;
        case GALGAS_processorType::kEnum_midrange: {
          GALGAS_uint var_pageCount = var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (130)).reader_uint (SOURCE_FILE_AT_LINE (130)).add_operation (GALGAS_uint ((PMUInt32) 2047U), inCompiler COMMA_SOURCE_FILE_AT_LINE (130)).divide_operation (GALGAS_uint ((PMUInt32) 2048U), inCompiler COMMA_SOURCE_FILE_AT_LINE (130)) ;
          GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
          const enumGalgasBool test_15 = GALGAS_bool (kIsStrictSup, var_pageCount.objectCompare (GALGAS_uint ((PMUInt32) 1U))).boolEnum () ;
          if (kBoolTrue == test_15) {
            var_s = GALGAS_string ("s") ;
          }
          inCompiler->printMessage (GALGAS_string ("  ROM size: ").operator_concat (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (135)).reader_uint (SOURCE_FILE_AT_LINE (135)).reader_string (SOURCE_FILE_AT_LINE (135)) COMMA_SOURCE_FILE_AT_LINE (135)).operator_concat (GALGAS_string (" instructions (") COMMA_SOURCE_FILE_AT_LINE (135)).operator_concat (var_pageCount.reader_string (SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (135)).operator_concat (GALGAS_string (" page") COMMA_SOURCE_FILE_AT_LINE (136)).operator_concat (var_s COMMA_SOURCE_FILE_AT_LINE (136)).operator_concat (GALGAS_string (")\n") COMMA_SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (135)) ;
          } break ;
        case GALGAS_processorType::kEnum_baseline: {
          inCompiler->printMessage (GALGAS_string ("  ROM size: ").operator_concat (var_piccoloDeviceModel.reader_mRomSize (SOURCE_FILE_AT_LINE (138)).reader_uint (SOURCE_FILE_AT_LINE (138)).reader_string (SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)).operator_concat (GALGAS_string (" instructions\n") COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)) ;
          } break ;
        }
      }
      const enumGalgasBool test_16 = GALGAS_bool (kIsEqual, var_piccoloDeviceModel.reader_mEepromSize (SOURCE_FILE_AT_LINE (140)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_16) {
        inCompiler->printMessage (GALGAS_string ("  No EEPROM\n") COMMA_SOURCE_FILE_AT_LINE (141)) ;
      }else if (kBoolFalse == test_16) {
        inCompiler->printMessage (GALGAS_string ("  EEPROM size: ").operator_concat (var_piccoloDeviceModel.reader_mEepromSize (SOURCE_FILE_AT_LINE (143)).reader_string (SOURCE_FILE_AT_LINE (143)) COMMA_SOURCE_FILE_AT_LINE (143)).operator_concat (GALGAS_string (" bytes (at ") COMMA_SOURCE_FILE_AT_LINE (143)).operator_concat (var_piccoloDeviceModel.reader_mEepromAddress (SOURCE_FILE_AT_LINE (144)).reader_hexString (SOURCE_FILE_AT_LINE (144)) COMMA_SOURCE_FILE_AT_LINE (143)).operator_concat (GALGAS_string (")\n") COMMA_SOURCE_FILE_AT_LINE (144)) COMMA_SOURCE_FILE_AT_LINE (143)) ;
      }
    }else if (kBoolFalse == test_13) {
      inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("The ").operator_concat (var_deviceForMemoryDescription COMMA_SOURCE_FILE_AT_LINE (147)).operator_concat (GALGAS_string (" device is not supported or does not exist") COMMA_SOURCE_FILE_AT_LINE (147)) COMMA_SOURCE_FILE_AT_LINE (147)) ;
    }
  }
  GALGAS_string var_deviceForRegistersDescription = GALGAS_string (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_registerDescription.reader_value ()) ;
  const enumGalgasBool test_17 = GALGAS_bool (kIsStrictSup, var_deviceForRegistersDescription.reader_length (SOURCE_FILE_AT_LINE (152)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_17) {
    GALGAS_string var_devicePath = GALGAS_string ("/").operator_concat (var_deviceForRegistersDescription COMMA_SOURCE_FILE_AT_LINE (153)).operator_concat (GALGAS_string (".piccoloDevice") COMMA_SOURCE_FILE_AT_LINE (153)) ;
    const enumGalgasBool test_18 = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (var_devicePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (154)).boolEnum () ;
    if (kBoolTrue == test_18) {
      GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
      {
      routine_parseDeviceDefinition (GALGAS_lstring::constructor_new (var_deviceForRegistersDescription, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (156)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (156)) ;
      }
      inCompiler->printMessage (var_deviceForRegistersDescription.operator_concat (GALGAS_string (" has ") COMMA_SOURCE_FILE_AT_LINE (157)).operator_concat (var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (157)).reader_count (SOURCE_FILE_AT_LINE (157)).reader_string (SOURCE_FILE_AT_LINE (157)) COMMA_SOURCE_FILE_AT_LINE (157)).operator_concat (GALGAS_string (" special registers:\n") COMMA_SOURCE_FILE_AT_LINE (157)) COMMA_SOURCE_FILE_AT_LINE (157)) ;
      cEnumerator_registerTable enumerator_7474 (var_piccoloDeviceModel.reader_mRegisterTable (SOURCE_FILE_AT_LINE (158)), kEnumeration_up) ;
      while (enumerator_7474.hasCurrentObject ()) {
        GALGAS_string var_s = GALGAS_string ("  '").operator_concat (enumerator_7474.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (159)) COMMA_SOURCE_FILE_AT_LINE (159)).operator_concat (GALGAS_string ("' at ") COMMA_SOURCE_FILE_AT_LINE (159)) ;
        cEnumerator_uintlist enumerator_7560 (enumerator_7474.current_mRegisterAddressList (HERE), kEnumeration_up) ;
        while (enumerator_7560.hasCurrentObject ()) {
          var_s.dotAssign_operation (enumerator_7560.current_mValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (161)) COMMA_SOURCE_FILE_AT_LINE (161)) ;
          if (enumerator_7560.hasNextObject ()) {
            var_s.dotAssign_operation (GALGAS_string (", ") COMMA_SOURCE_FILE_AT_LINE (162)) ;
          }
          enumerator_7560.gotoNextObject () ;
        }
        var_s.dotAssign_operation (enumerator_7474.current_mBitDefinitionString (HERE).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (164)) COMMA_SOURCE_FILE_AT_LINE (164)) ;
        inCompiler->printMessage (var_s COMMA_SOURCE_FILE_AT_LINE (165)) ;
        enumerator_7474.gotoNextObject () ;
      }
    }else if (kBoolFalse == test_18) {
      inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("The ").operator_concat (var_deviceForRegistersDescription COMMA_SOURCE_FILE_AT_LINE (168)).operator_concat (GALGAS_string (" device is not supported or does not exist") COMMA_SOURCE_FILE_AT_LINE (168)) COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
  }
  GALGAS_string var_deviceForConfigDescription = GALGAS_string (gOption_piccolo_5F_options_5F_not_5F_in_5F_cocoa_configDescription.reader_value ()) ;
  const enumGalgasBool test_19 = GALGAS_bool (kIsStrictSup, var_deviceForConfigDescription.reader_length (SOURCE_FILE_AT_LINE (173)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_19) {
    GALGAS_string var_devicePath = GALGAS_string ("/").operator_concat (var_deviceForConfigDescription COMMA_SOURCE_FILE_AT_LINE (174)).operator_concat (GALGAS_string (".piccoloDevice") COMMA_SOURCE_FILE_AT_LINE (174)) ;
    const enumGalgasBool test_20 = GALGAS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (var_devicePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (175)).boolEnum () ;
    if (kBoolTrue == test_20) {
      GALGAS_piccoloDeviceModel var_piccoloDeviceModel ;
      {
      routine_parseDeviceDefinition (GALGAS_lstring::constructor_new (var_deviceForConfigDescription, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (177)), var_piccoloDeviceModel, inCompiler COMMA_SOURCE_FILE_AT_LINE (177)) ;
      }
      inCompiler->printMessage (var_deviceForConfigDescription.operator_concat (GALGAS_string (" has ") COMMA_SOURCE_FILE_AT_LINE (178)).operator_concat (var_piccoloDeviceModel.reader_mConfigRegisterMap (SOURCE_FILE_AT_LINE (178)).reader_count (SOURCE_FILE_AT_LINE (178)).reader_string (SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178)).operator_concat (GALGAS_string (" configuration registers:\n") COMMA_SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178)) ;
      cEnumerator_configRegisterMap enumerator_8603 (var_piccoloDeviceModel.reader_mConfigRegisterMap (SOURCE_FILE_AT_LINE (179)), kEnumeration_up) ;
      while (enumerator_8603.hasCurrentObject ()) {
        GALGAS_string var_s = GALGAS_string ("REGISTER '").operator_concat (enumerator_8603.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (180)) COMMA_SOURCE_FILE_AT_LINE (180)).operator_concat (GALGAS_string ("' at ") COMMA_SOURCE_FILE_AT_LINE (180)).operator_concat (enumerator_8603.current_mRegisterAddress (HERE).reader_uint (SOURCE_FILE_AT_LINE (180)).reader_hexString (SOURCE_FILE_AT_LINE (180)) COMMA_SOURCE_FILE_AT_LINE (180)).operator_concat (GALGAS_string (", width ") COMMA_SOURCE_FILE_AT_LINE (180)).operator_concat (enumerator_8603.current_mRegisterWidth (HERE).reader_uint (SOURCE_FILE_AT_LINE (180)).reader_string (SOURCE_FILE_AT_LINE (180)) COMMA_SOURCE_FILE_AT_LINE (180)).operator_concat (GALGAS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (180)) ;
        cEnumerator_illegalMaskList enumerator_8783 (enumerator_8603.current_mIllegalMaskList (HERE), kEnumeration_up) ;
        while (enumerator_8783.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("  illegal value ").operator_concat (enumerator_8783.current_mIllegalValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (182)).reader_hexString (SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)).operator_concat (GALGAS_string (" mask ") COMMA_SOURCE_FILE_AT_LINE (182)).operator_concat (enumerator_8783.current_mIllegalMask (HERE).reader_uint (SOURCE_FILE_AT_LINE (182)).reader_hexString (SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)).operator_concat (GALGAS_string (" description \"") COMMA_SOURCE_FILE_AT_LINE (182)).operator_concat (enumerator_8783.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)).operator_concat (GALGAS_string ("\"\n") COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
          enumerator_8783.gotoNextObject () ;
        }
        cEnumerator_configRegisterMaskMap enumerator_9007 (enumerator_8603.current_mConfigRegisterMaskMap (HERE), kEnumeration_up) ;
        while (enumerator_9007.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("  setting '").operator_concat (enumerator_9007.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)).operator_concat (GALGAS_string ("': mask ") COMMA_SOURCE_FILE_AT_LINE (185)).operator_concat (enumerator_9007.current_mMaskValue (HERE).reader_uint (SOURCE_FILE_AT_LINE (185)).reader_hexString (SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)).operator_concat (GALGAS_string (" description \"") COMMA_SOURCE_FILE_AT_LINE (185)).operator_concat (enumerator_9007.current_mDescription (HERE).reader_string (SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)).operator_concat (GALGAS_string ("\"\n") COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
          cEnumerator_fieldSettingMap enumerator_9210 (enumerator_9007.current_mFieldSettingMap (HERE), kEnumeration_up) ;
          while (enumerator_9210.hasCurrentObject ()) {
            var_s.dotAssign_operation (GALGAS_string ("    value ").operator_concat (enumerator_9210.current_mValue (HERE).reader_hexString (SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)).operator_concat (GALGAS_string (" description \"") COMMA_SOURCE_FILE_AT_LINE (187)).operator_concat (enumerator_9210.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)).operator_concat (GALGAS_string ("\"\n") COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
            enumerator_9210.gotoNextObject () ;
          }
          enumerator_9007.gotoNextObject () ;
        }
        inCompiler->printMessage (var_s COMMA_SOURCE_FILE_AT_LINE (190)) ;
        enumerator_8603.gotoNextObject () ;
      }
    }else if (kBoolFalse == test_20) {
      inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("The ").operator_concat (var_deviceForConfigDescription COMMA_SOURCE_FILE_AT_LINE (193)).operator_concat (GALGAS_string (" device is not supported or does not exist") COMMA_SOURCE_FILE_AT_LINE (193)) COMMA_SOURCE_FILE_AT_LINE (193)) ;
    }
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'programRule_0'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_programRule_5F__30_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  {
  cGrammar_pic_31__38__5F_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                              Routine 'after'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_after (C_Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) {
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


