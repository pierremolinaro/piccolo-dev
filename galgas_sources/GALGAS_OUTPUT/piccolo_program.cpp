//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'piccolo_program.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 31th, 2008, at 12h37'39"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "piccolo_grammar.h"
#include "piccolo_metamodel.h"
#include "piccolo_program.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_program.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                C_options_for_piccolo_program  CONSTRUCTOR                 *
//                                                                           *
//---------------------------------------------------------------------------*

C_options_for_piccolo_program::
C_options_for_piccolo_program (const bool inAcceptsDebugOption) :
mBuiltinOptions (inAcceptsDebugOption),
mGalgasOptions (),
mOptions_piccolo_options (){
  add (& mBuiltinOptions) ;
  add (& mGalgasOptions) ;
  add (& mOptions_piccolo_options) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_prologue (C_Compiler & _inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputDeviceList" COMMA_SOURCE_FILE_AT_LINE (11)))).isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_allDevices ;
    var_cas_allDevices = GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_allFilePathes (_inLexique COMMA_SOURCE_FILE_AT_LINE (13)) ;
    GGS_stringlist  var_cas_pic_60_devices ;
    var_cas_pic_60_devices = GGS_stringlist ::constructor_emptyList () ;
    GGS_stringlist  var_cas_pic_80_devices ;
    var_cas_pic_80_devices = GGS_stringlist ::constructor_emptyList () ;
    _inLexique.printMessage ((var_cas_allDevices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (16)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (16)))._operator_concat (GGS_string (true, " supported devices.\n")) COMMA_SOURCE_FILE_AT_LINE (16)) ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (true, 0U) ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true, true) ;
    {
      GGS_stringlist::cEnumerator enumerator_763 (var_cas_allDevices, true) ;
      const GGS_stringlist::cElement * operand_763 = NULL ;
      while (((operand_763 = enumerator_763.nextObject ()))
          && (var_cas_ok.isBuiltAndTrue ())) {
        macroValidPointer (operand_763) ;
        GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
        GGS_string var_cas_name ;
        var_cas_name = operand_763->mValue.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
        ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_name, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (21)) ;
        switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (23)).enumValue ()) {
        case GGS_processorType::enum_pic18_60:
          {
          var_cas_pic_60_devices._addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::enum_pic18_80:
          {
          var_cas_pic_80_devices._addAssign_operation (var_cas_name) ;
          }
          break ;
        case GGS_processorType::kNotBuilt:
          break ;
        }
      }
    }
    _inLexique.printMessage ((var_cas_pic_60_devices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (29)))._operator_concat (GGS_string (true, " devices with access bank split offset 0x60:\n")) COMMA_SOURCE_FILE_AT_LINE (29)) ;
    {
      GGS_stringlist::cEnumerator enumerator_1319 (var_cas_pic_60_devices, true) ;
      const GGS_stringlist::cElement * operand_1319 = NULL ;
      while (((operand_1319 = enumerator_1319.nextObject ()))) {
        macroValidPointer (operand_1319) ;
        _inLexique.printMessage (operand_1319->mValue.reader_stringByRightPadding (_inLexique, GGS_uint (true, 15U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (31)) COMMA_SOURCE_FILE_AT_LINE (31)) ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
        if (((var_cas_index)._operator_isEqual (GGS_uint (true, 5U))).isBuiltAndTrue ()) {
          var_cas_index = GGS_uint (true, 0U) ;
          _inLexique.printMessage (GGS_string (true, "\n") COMMA_SOURCE_FILE_AT_LINE (35)) ;
        }
      }
    }
    if (((var_cas_index)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      _inLexique.printMessage (GGS_string (true, "\n") COMMA_SOURCE_FILE_AT_LINE (39)) ;
    }
    var_cas_index = GGS_uint (true, 0U) ;
    _inLexique.printMessage ((var_cas_pic_80_devices.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)))._operator_concat (GGS_string (true, " devices with access bank split offset 0x80:\n")) COMMA_SOURCE_FILE_AT_LINE (43)) ;
    {
      GGS_stringlist::cEnumerator enumerator_1725 (var_cas_pic_80_devices, true) ;
      const GGS_stringlist::cElement * operand_1725 = NULL ;
      while (((operand_1725 = enumerator_1725.nextObject ()))) {
        macroValidPointer (operand_1725) ;
        _inLexique.printMessage (operand_1725->mValue.reader_stringByRightPadding (_inLexique, GGS_uint (true, 15U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (45)) COMMA_SOURCE_FILE_AT_LINE (45)) ;
        var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ;
        if (((var_cas_index)._operator_isEqual (GGS_uint (true, 5U))).isBuiltAndTrue ()) {
          var_cas_index = GGS_uint (true, 0U) ;
          _inLexique.printMessage (GGS_string (true, "\n") COMMA_SOURCE_FILE_AT_LINE (49)) ;
        }
      }
    }
    if (((var_cas_index)._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      _inLexique.printMessage (GGS_string (true, "\n") COMMA_SOURCE_FILE_AT_LINE (53)) ;
    }
  }
  GGS_string var_cas_deviceForMemoryDescription ;
  var_cas_deviceForMemoryDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "memoryDescription" COMMA_SOURCE_FILE_AT_LINE (146))) ;
  if (((var_cas_deviceForMemoryDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (147)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string (true, "/"))._operator_concat (var_cas_deviceForMemoryDescription))._operator_concat (GGS_string (true, ".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (149))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForMemoryDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (150)) ;
      GGS_uint  var_cas_totalRam ;
      var_cas_totalRam = GGS_uint (true, 0U) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_6249 (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (153)), true) ;
        const GGS_ramBankTable::cElement * operand_6249 = NULL ;
        while (((operand_6249 = enumerator_6249.nextObject ()))) {
          macroValidPointer (operand_6249) ;
          var_cas_totalRam = var_cas_totalRam._add_operation (_inLexique, operand_6249->mInfo.mLastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (154))._substract_operation (_inLexique, operand_6249->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (154)) ;
        }
      }
      _inLexique.printMessage ((var_cas_deviceForMemoryDescription)._operator_concat (GGS_string (true, " device:\n")) COMMA_SOURCE_FILE_AT_LINE (156)) ;
      _inLexique.printMessage (((((GGS_string (true, "  "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (157))))._operator_concat (GGS_string (true, " RAM banks (total ")))._operator_concat (var_cas_totalRam.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (157))))._operator_concat (GGS_string (true, " bytes):\n")) COMMA_SOURCE_FILE_AT_LINE (157)) ;
      {
        GGS_ramBankTable::cEnumerator enumerator_6587 (var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)), true) ;
        const GGS_ramBankTable::cElement * operand_6587 = NULL ;
        while (((operand_6587 = enumerator_6587.nextObject ()))) {
          macroValidPointer (operand_6587) ;
          _inLexique.printMessage (((((((((GGS_string (true, "    bank \""))._operator_concat (operand_6587->mKey))._operator_concat (GGS_string (true, "\" from ")))._operator_concat (operand_6587->mInfo.mFirstFreeAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (159))))._operator_concat (GGS_string (true, " to ")))._operator_concat (operand_6587->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (160)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (160))))._operator_concat (GGS_string (true, " (")))._operator_concat (operand_6587->mInfo.mLastAddressPlusOne._substract_operation (_inLexique, operand_6587->mInfo.mFirstFreeAddress COMMA_SOURCE_FILE_AT_LINE (161)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (161))))._operator_concat (GGS_string (true, " bytes)\n")) COMMA_SOURCE_FILE_AT_LINE (159)) ;
        }
      }
      _inLexique.printMessage (((GGS_string (true, "  ROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (163))))._operator_concat (GGS_string (true, " bytes\n")) COMMA_SOURCE_FILE_AT_LINE (163)) ;
      if (((var_cas_piccoloDeviceModel.reader_mEepromSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        _inLexique.printMessage (GGS_string (true, "  No EEPROM\n") COMMA_SOURCE_FILE_AT_LINE (165)) ;
      }else{
        _inLexique.printMessage (((((GGS_string (true, "  EEPROM size: "))._operator_concat (var_cas_piccoloDeviceModel.reader_mEepromSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))))._operator_concat (GGS_string (true, " bytes (at ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mEepromAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (168))))._operator_concat (GGS_string (true, ")\n")) COMMA_SOURCE_FILE_AT_LINE (167)) ;
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The "))._operator_concat (var_cas_deviceForMemoryDescription))._operator_concat (GGS_string (true, " device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (171)) ;
    }
  }
  GGS_string var_cas_deviceForRegistersDescription ;
  var_cas_deviceForRegistersDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "registerDescription" COMMA_SOURCE_FILE_AT_LINE (175))) ;
  if (((var_cas_deviceForRegistersDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string (true, "/"))._operator_concat (var_cas_deviceForRegistersDescription))._operator_concat (GGS_string (true, ".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (178))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForRegistersDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (179)) ;
      _inLexique.printMessage ((((var_cas_deviceForRegistersDescription)._operator_concat (GGS_string (true, " has ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))))._operator_concat (GGS_string (true, " special registers:\n")) COMMA_SOURCE_FILE_AT_LINE (181)) ;
      {
        GGS_registerTable::cEnumerator enumerator_8039 (var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)), true) ;
        const GGS_registerTable::cElement * operand_8039 = NULL ;
        while (((operand_8039 = enumerator_8039.nextObject ()))) {
          macroValidPointer (operand_8039) ;
          GGS_string var_cas_s ;
          var_cas_s = ((GGS_string (true, "  '"))._operator_concat (operand_8039->mKey))._operator_concat (GGS_string (true, "' at ")) ;
          {
            GGS_uintlist::cEnumerator enumerator_8139 (operand_8039->mInfo.mRegisterAddressList, true) ;
            const GGS_uintlist::cElement * operand_8139 = enumerator_8139.nextObject () ;
            if ((operand_8139 != NULL)) {
              bool _foreach_loop_8139 ;
              do{
                macroValidPointer (operand_8139) ;
                var_cas_s._dotAssign_operation (operand_8139->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
                operand_8139 = enumerator_8139.nextObject () ;
                _foreach_loop_8139 = ((operand_8139 != NULL)) ;
                if (_foreach_loop_8139) {
                  var_cas_s.writeString (", ") ;
                }
              }while (_foreach_loop_8139) ;
            }
          }
          var_cas_s.writeString ("\n") ;
          _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (189)) ;
        }
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The "))._operator_concat (var_cas_deviceForRegistersDescription))._operator_concat (GGS_string (true, " device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (192)) ;
    }
  }
  GGS_string var_cas_deviceForConfigDescription ;
  var_cas_deviceForConfigDescription = GGS_string (true, _inLexique.stringOptionValueFromKeys ("piccolo_options", "configDescription" COMMA_SOURCE_FILE_AT_LINE (196))) ;
  if (((var_cas_deviceForConfigDescription.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_devicePath ;
    var_cas_devicePath = ((GGS_string (true, "/"))._operator_concat (var_cas_deviceForConfigDescription))._operator_concat (GGS_string (true, ".piccoloDevice")) ;
    if ((GGS_filewrapper (gWrapperDirectory_0_embeddedDevices).reader_fileExistsAtPath (_inLexique, var_cas_devicePath COMMA_SOURCE_FILE_AT_LINE (199))).isBuiltAndTrue ()) {
      GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
      ::routine_parseDeviceDefinition (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_deviceForConfigDescription, GGS_location (_inLexique) COMMA_HERE),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (200)) ;
      _inLexique.printMessage ((((var_cas_deviceForConfigDescription)._operator_concat (GGS_string (true, " has ")))._operator_concat (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))))._operator_concat (GGS_string (true, " configuration registers:\n")) COMMA_SOURCE_FILE_AT_LINE (202)) ;
      {
        GGS_configRegisterMap::cEnumerator enumerator_9121 (var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)), true) ;
        const GGS_configRegisterMap::cElement * operand_9121 = NULL ;
        while (((operand_9121 = enumerator_9121.nextObject ()))) {
          macroValidPointer (operand_9121) ;
          GGS_string var_cas_s ;
          var_cas_s = ((((((GGS_string (true, "  '"))._operator_concat (operand_9121->mKey))._operator_concat (GGS_string (true, "' at ")))._operator_concat (operand_9121->mInfo.mRegisterAddress.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (204))))._operator_concat (GGS_string (true, ", width ")))._operator_concat (operand_9121->mInfo.mRegisterWidth.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (204))))._operator_concat (GGS_string (true, "\n")) ;
          {
            GGS_illegalMaskList::cEnumerator enumerator_9316 (operand_9121->mInfo.mIllegalMaskList, true) ;
            const GGS_illegalMaskList::cElement * operand_9316 = NULL ;
            while (((operand_9316 = enumerator_9316.nextObject ()))) {
              macroValidPointer (operand_9316) ;
              var_cas_s.writeString ("    illegal ") ;
              var_cas_s._dotAssign_operation (operand_9121->mKey.ggs_string ().reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
              var_cas_s.writeString ("' mask ") ;
              var_cas_s._dotAssign_operation (operand_9316->mIllegalMask.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
              var_cas_s.writeString (" description \"") ;
              var_cas_s._dotAssign_operation (operand_9316->mDescription) ;
              var_cas_s.writeString ("\"\n") ;
            }
          }
          {
            GGS_configRegisterMaskMap::cEnumerator enumerator_9521 (operand_9121->mInfo.mConfigRegisterMaskMap, true) ;
            const GGS_configRegisterMaskMap::cElement * operand_9521 = NULL ;
            while (((operand_9521 = enumerator_9521.nextObject ()))) {
              macroValidPointer (operand_9521) ;
              var_cas_s.writeString ("    '") ;
              var_cas_s._dotAssign_operation (operand_9521->mKey) ;
              var_cas_s.writeString ("': mask ") ;
              var_cas_s._dotAssign_operation (operand_9521->mInfo.mMaskValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (209)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (209))) ;
              var_cas_s.writeString (" description \"") ;
              var_cas_s._dotAssign_operation (operand_9521->mInfo.mDescription) ;
              var_cas_s.writeString ("\"\n") ;
              {
                GGS_fieldSettingMap::cEnumerator enumerator_9685 (operand_9521->mInfo.mFieldSettingMap, true) ;
                const GGS_fieldSettingMap::cElement * operand_9685 = NULL ;
                while (((operand_9685 = enumerator_9685.nextObject ()))) {
                  macroValidPointer (operand_9685) ;
                  var_cas_s.writeString ("      setting ") ;
                  var_cas_s._dotAssign_operation (operand_9685->mInfo.mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (211))) ;
                  var_cas_s.writeString (" description \"") ;
                  var_cas_s._dotAssign_operation (operand_9685->mKey) ;
                  var_cas_s.writeString ("\"\n") ;
                }
              }
            }
          }
          _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (214)) ;
        }
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The "))._operator_concat (var_cas_deviceForConfigDescription))._operator_concat (GGS_string (true, " device is not supported or does not exist")) COMMA_SOURCE_FILE_AT_LINE (217)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
piccolo_program_epilogue (C_Compiler & /* _inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  sint16 returnCode = 0 ; // No error
//--- Fix parameters for BDD package
  C_BDD::setHashMapSize (18) ;
  C_BDD::setITEcacheSize (15) ;
  C_BDD::setANDcacheSize (1) ;
  C_BDD::forAllOnBitsGreaterCacheSize (17) ;
  C_PrologueEpilogueAction::runPrologueActions () ;
  {
  //--- Input/output parameters
    C_options_for_piccolo_program options (false) ;
    const char * extensions [] = {"piccolo", NULL} ;
    const char * helpMessages [] = {"a source text file with the .piccolo extension", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    bool cocoaOutput = false ;
    F_Analyze_CLI_Options (argc, argv,
                           "version 1.0.0",
                           options,
                           sourceFilesArray,
                           extensions,
                           helpMessages,
                           cocoaOutput) ;
    C_galgas_io_parameters IOparameters  (& options,
      cocoaOutput,
      #ifndef DO_NOT_GENERATE_CHECKINGS
        "version 1.0.0" " [debug]",
      #else
        "version 1.0.0",
      #endif
      100,
      100) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (IOparameters, C_galgas_io::kTerminalOutputKind COMMA_HERE)) ;
  //--- Common lexique object
    C_Compiler * _commonLexique = NULL ;
    macroMyNew (_commonLexique, C_Compiler (galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = options.boolOptionValueFromKeys ("generic_cli_options",
                                                                        ASK_TO_SAVE_ON_CLOSE,
                                                                        false) ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (options.boolOptionValueFromKeys ("generic_cli_options",
                                             "enable_allocation_debugging",
                                             false)) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = options.boolOptionValueFromKeys ("generic_galgas_cli_options",
                                                         "verbose_output",
                                                         false) ;
      piccolo_program_prologue (* _commonLexique, sourceFilesArray) ;
      for (sint32 i=0 ; i<sourceFilesArray.count () ; i++) {
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        sint16 r = 0 ;
        if (fileExtension.compare ("piccolo") == 0) {
          C_Compiler & _inLexique = * _commonLexique ;
          const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (_inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (_inLexique, _source, _here COMMA_HERE)) ;
          GGS_piccoloModel var_cas_piccoloModel ;
          piccolo_grammar::_performSourceFileParsing_ (_inLexique,
                                          NULL,
                                          var_cas_inSourceFile,
                                          var_cas_piccoloModel
                                          COMMA_SOURCE_FILE_AT_LINE (228)) ;
          if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            ::routine_analyze (_inLexique,  var_cas_piccoloModel,  var_cas_inSourceFile.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (230)) COMMA_SOURCE_FILE_AT_LINE (229)) ;
          }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (_commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << _commonLexique->totalErrorCount () << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (_commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << _commonLexique->totalWarningCount () << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString ()) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
      }
    //--- Error or warnings ?
      if (_commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (_commonLexique->totalWarningCount () > 0) {
        const bool warningsAreTreatedAsError
            = options.boolOptionValueFromKeys ("generic_galgas_cli_options",
                                               TREAT_WARNINGS_AS_ERRORS,
                                               false) ;
        if (warningsAreTreatedAsError) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      piccolo_program_epilogue (* _commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      F_default_display_unknown_exception () ;
      returnCode = 2 ; // Error code
    }
    macroDetachPointer (galgasIOptr, C_galgas_io) ;
    macroDetachPointer (_commonLexique, C_Compiler) ;
    C_PrologueEpilogueAction::runEpilogueActions () ;
    runAllReleaseRoutines () ;
  }
  #ifndef DO_NOT_GENERATE_CHECKINGS
    C_GGS_Object::checkAllObjectsHaveBeenReleased () ;
  #endif
  if (verboseOptionOn) {
    #ifndef DO_NOT_GENERATE_CHECKINGS
      const uint64 maxUsedMemorySize = getMaxUsedMemorySize () ;
      const uint64 oneMegaByte = 1 << 20 ;
      const uint64 megaBytes = maxUsedMemorySize / oneMegaByte ;
      const uint64 fraction = ((maxUsedMemorySize % oneMegaByte) * 1000) / oneMegaByte ;
      co << getCreatedDynamicObjectsTotalCount ()
         << " C++ objects have been created ("
         << megaBytes << "." << widthWithZeroFill (3) << fraction
         << " MB).\n" ;
      deactivateMemoryControl () ;
      if ((getAllocationBalance () != 0) && (returnCode == 0)) {
        display_pointers () ;
      }
    #endif
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


