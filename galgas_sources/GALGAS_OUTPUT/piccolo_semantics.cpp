//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      august 2nd, 2008, at 20h23'27"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@declarationInRam.handleDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__declarationInRam__handleDeclaration> gDispatchTableFor__declarationInRam__handleDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__declarationInRam__handleDeclaration (typeCategoryMethod__declarationInRam__handleDeclaration inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__declarationInRam__handleDeclaration
findCategoryMethod__declarationInRam__handleDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__declarationInRam__handleDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__declarationInRam__handleDeclaration.count ()) {
    result = gDispatchTableFor__declarationInRam__handleDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__declarationInRam__handleDeclaration (superClassPtr) ;
      gDispatchTableFor__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@commonDeclarationInRam.handleDeclaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__commonDeclarationInRam__handleDeclaration (C_Compiler & _inLexique,
                                const cPtr_commonDeclarationInRam * operand_1242,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1242 != NULL) {
    GGS_uint  var_cas_firstFreeAddressBeforeCommon ;
    GGS_uint  automatic_var_0 ;
    const GGS_ramBankTable  _temp_1406 = var_cas_ioRamBank ;
    if (_temp_1406._isBuilt ()) {
      _temp_1406 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_firstFreeAddressBeforeCommon, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (31)) ;
    }
    GGS_bool var_cas_firstFreeAddressDefined ;
    var_cas_firstFreeAddressDefined = GGS_bool (true, false) ;
    GGS_uint  var_cas_firstFreeAddress ;
    var_cas_firstFreeAddress = GGS_uint (true, 0U) ;
    {
      GGS_commonBranchList::cEnumerator enumerator_1555 (operand_1242->mBranchList, true) ;
      const GGS_commonBranchList::cElement * operand_1555 = NULL ;
      while (((operand_1555 = enumerator_1555.nextObject ()))) {
        macroValidPointer (operand_1555) ;
        GGS_ramBankTable  var_cas_ramBank ;
        var_cas_ramBank = var_cas_ioRamBank ;
        {
          GGS_declarationInRamList::cEnumerator enumerator_1623 (operand_1555->mDeclarations, true) ;
          const GGS_declarationInRamList::cElement * operand_1623 = NULL ;
          while (((operand_1623 = enumerator_1623.nextObject ()))) {
            macroValidPointer (operand_1623) ;
            const GGS_declarationInRam  _temp_1660 = operand_1623->mDeclaration ;
            if (_temp_1660._isBuilt ()) {
              typeCategoryMethod__declarationInRam__handleDeclaration _method = findCategoryMethod__declarationInRam__handleDeclaration (_temp_1660._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_1660 (HERE), var_cas_ramBank, var_cas_ioRegisterTable, var_cas_inCurrentRamBank COMMA_SOURCE_FILE_AT_LINE (37)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_ffa ;
        GGS_uint  automatic_var_1 ;
        const GGS_ramBankTable  _temp_1774 = var_cas_ramBank ;
        if (_temp_1774._isBuilt ()) {
          _temp_1774 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_ffa, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (40)) ;
        }
        if (((var_cas_firstFreeAddressDefined)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_firstFreeAddress = var_cas_ffa ;
          var_cas_firstFreeAddressDefined = GGS_bool (true, true) ;
        }else if (((var_cas_ffa)._operator_isNotEqual (var_cas_firstFreeAddress)).isBuiltAndTrue ()) {
          operand_1555->mEndOfBranchLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "this branch allocates "))._operator_concat (var_cas_ffa._substract_operation (_inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (45)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))))._operator_concat (GGS_string (true, " byte(s), while the first branch allocates ")))._operator_concat (var_cas_firstFreeAddress._substract_operation (_inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (47)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (47))))._operator_concat (GGS_string (true, " byte(s)")) COMMA_SOURCE_FILE_AT_LINE (47)) ;
        }
      }
    }
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@byteDeclarationInRam.handleDeclaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__byteDeclarationInRam__handleDeclaration (C_Compiler & _inLexique,
                                const cPtr_byteDeclarationInRam * operand_2455,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2455 != NULL) {
    GGS_uint  var_cas_lastAddressPlusOne ;
    GGS_uint  var_cas_firstFreeAddress ;
    const GGS_ramBankTable  _temp_2636 = var_cas_ioRamBank ;
    if (_temp_2636._isBuilt ()) {
      _temp_2636 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (62)) ;
    }
    if (((operand_2455->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_2455->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (64)) ;
    }
    var_cas_ioRegisterTable.modifier_insertKey (_inLexique, operand_2455->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_2455->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)), operand_2455->mBitSliceTable, operand_2455->mBitDefinitionString COMMA_SOURCE_FILE_AT_LINE (66)) ;
    var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_2455->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (67)) ;
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)) COMMA_SOURCE_FILE_AT_LINE (68)) ;
    if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
      operand_2455->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (var_cas_inCurrentRamBank))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_2455->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (70)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (82)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (83))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (88)) ;
  GGS_uint  var_cas_accessBankSplitOffset ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)).enumValue ()) {
  case GGS_processorType::enum_pic18_60:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 96U) ;
    }
    break ;
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 128U) ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_highInterruptIsFast ;
  var_cas_highInterruptIsFast = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_lowInterruptIsFast ;
  var_cas_lowInterruptIsFast = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_4688 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_4688 = NULL ;
    while (((operand_4688 = enumerator_4688.nextObject ()))) {
      macroValidPointer (operand_4688) ;
      if (((operand_4688->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        var_cas_highInterruptIsFast = operand_4688->mIsFast ;
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_4688->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (104)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_4688->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        var_cas_lowInterruptIsFast = operand_4688->mIsFast ;
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_4688->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (110)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_4688->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (114)) ;
      }
      if (((var_cas_highInterruptIsFast)._operator_and (var_cas_lowInterruptIsFast)).isBuiltAndTrue ()) {
        operand_4688->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "either low interrupt or high interrupt can be \"fast\", not both") COMMA_SOURCE_FILE_AT_LINE (117)) ;
      }
    }
  }
  GGS_actualConfigurationMap  var_cas_actualConfigurationMap ;
  ::routine_buildConfig (_inLexique,  var_cas_piccoloDeviceModel.reader_mConfigRegisterMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (123)),  var_cas_inPiccoloModel.reader_mConfigDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (124)),  var_cas_inPiccoloModel.reader_mAcceptDefaultConfiguration (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)),  var_cas_listFileContents,  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (121)) ;
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_6008 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (132)), true) ;
    const GGS_ramDefinitionList::cElement * operand_6008 = NULL ;
    while (((operand_6008 = enumerator_6008.nextObject ()))) {
      macroValidPointer (operand_6008) ;
      {
        GGS_declarationInRamList::cEnumerator enumerator_6059 (operand_6008->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_6059 = NULL ;
        while (((operand_6059 = enumerator_6059.nextObject ()))) {
          macroValidPointer (operand_6059) ;
          const GGS_declarationInRam  _temp_6095 = operand_6059->mDeclaration ;
          if (_temp_6095._isBuilt ()) {
            typeCategoryMethod__declarationInRam__handleDeclaration _method = findCategoryMethod__declarationInRam__handleDeclaration (_temp_6095._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_6095 (HERE), var_cas_ramBank, var_cas_registerTable, operand_6008->mBankName COMMA_SOURCE_FILE_AT_LINE (134)) ;
            }
          }
        }
      }
    }
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (137)))).isBuiltAndTrue ()) {
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (138))) ;
    var_cas_listFileContents.writeString ("\n") ;
    var_cas_listFileContents.writeString ("*") ;
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "DECLARED VARIABLES").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (139))) ;
    var_cas_listFileContents.writeString ("*\n") ;
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (140))) ;
    var_cas_listFileContents.writeString ("\n"
      "\n") ;
    {
      GGS_registerTable::cEnumerator enumerator_6500 (var_cas_registerTable, true) ;
      const GGS_registerTable::cElement * operand_6500 = NULL ;
      while (((operand_6500 = enumerator_6500.nextObject ()))) {
        macroValidPointer (operand_6500) ;
        if (((var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)).reader_hasKey (_inLexique, operand_6500->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (142)) COMMA_SOURCE_FILE_AT_LINE (142)))._operator_not ()).isBuiltAndTrue ()) {
          var_cas_listFileContents._dotAssign_operation (operand_6500->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (143)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (143))) ;
          var_cas_listFileContents.writeString (" ") ;
          GGS_uint  var_cas_address ;
          const GGS_uintlist  _temp_6720 = operand_6500->mInfo.mRegisterAddressList ;
          if (_temp_6720._isBuilt ()) {
            _temp_6720 (HERE)->method_first (_inLexique, var_cas_address COMMA_SOURCE_FILE_AT_LINE (144)) ;
          }
          var_cas_listFileContents._dotAssign_operation (var_cas_address.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (145))) ;
          var_cas_listFileContents._dotAssign_operation (operand_6500->mInfo.mBitDefinitionString) ;
          var_cas_listFileContents.writeString ("\n") ;
        }
      }
    }
    var_cas_listFileContents.writeString ("\n") ;
  }
  ::routine_semanticsCheckings (_inLexique,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (149)) ;
  GGS_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_buildIPICAssemblyInstructionList (_inLexique,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (160)) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "performOptimizations" COMMA_SOURCE_FILE_AT_LINE (171)))).isBuiltAndTrue ()) {
    ::routine_performOptimizations (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (171)) ;
  }
  if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "doNotConvertRelative" COMMA_SOURCE_FILE_AT_LINE (175))))._operator_not ()).isBuiltAndTrue ()) {
    ::routine_convertRelativeBranchsToAbsoluteWhenNeeded (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (175)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (179)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (180)))._operator_concat (GGS_string (true, ".list")) ;
    const GGS_string _temp_8091 = var_cas_listFileContents ;
    if (_temp_8091._isBuilt ()) {
      _temp_8091 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile COMMA_SOURCE_FILE_AT_LINE (181)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    ::routine_buildBinaryCode (_inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)),  var_cas_actualConfigurationMap COMMA_SOURCE_FILE_AT_LINE (184)) ;
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (191)) ;
    GGS_string var_cas_destinationFile ;
    var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (193)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_8546 = var_cas_contents ;
    if (_temp_8546._isBuilt ()) {
      _temp_8546 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (194)) ;
    }
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (196)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_buildAssemblyCode (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_actualConfigurationMap,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (197)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)))._operator_concat (GGS_string (true, ".asm")) ;
      const GGS_string _temp_9092 = var_cas_assemblyCode ;
      if (_temp_9092._isBuilt ()) {
        _temp_9092 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (207)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__commonDeclarationInRam__handleDeclaration, gClassInfoFor__commonDeclarationInRam.slotID ()) ;
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__byteDeclarationInRam__handleDeclaration, gClassInfoFor__byteDeclarationInRam.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

