//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 17th, 2008, at 20h32'19"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_807,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_807 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_1043,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1043 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1043->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (40)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_2096,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2096 != NULL) {
    GGS_lstring  var_cas_registerName ;
    var_cas_registerName = operand_2096->mRegisterExpression.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerTable  _temp_2388 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
    if (_temp_2388._isBuilt ()) {
      _temp_2388 (HERE)->method_searchKey (_inLexique, var_cas_registerName, var_cas_registerAddressList, var_cas_size, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    var_cas_usedRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_2527 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_2527 = NULL ;
      while (((operand_2527 = enumerator_2527.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_2527) ;
        var_cas_usedRegisterAddress = operand_2527->mValue ;
        var_cas_found = ((operand_2527->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_2527->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    GGS_bool var_cas_useBSRregister ;
    var_cas_useBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (80)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (81))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (81)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (82)) ;
      {
        GGS_uintlist::cEnumerator enumerator_2904 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_2904 = NULL ;
        while (((operand_2904 = enumerator_2904.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_2904) ;
          var_cas_usedRegisterAddress = operand_2904->mValue ;
          var_cas_found = ((operand_2904->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_2904->mValue)._operator_infOrEqual (var_cas_highBound)) ;
          var_cas_useBSRregister = GGS_bool (true, true) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (var_cas_registerName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_3203 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_3203 = enumerator_3203.nextObject () ;
        if ((operand_3203 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_3203 ;
          do{
            macroValidPointer (operand_3203) ;
            var_cas_errorMessage._dotAssign_operation (operand_3203->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (93))) ;
            operand_3203 = enumerator_3203.nextObject () ;
            _foreach_loop_3203 = ((operand_3203 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_3203) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_3203) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (98)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (101))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      var_cas_registerName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (103)) ;
    }
    GGS_uint  var_cas_code ;
    var_cas_code = GGS_uint (true, 0U) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (110)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_4016,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4016 != NULL) {
    GGS_lstring  var_cas_registerName ;
    var_cas_registerName = operand_4016->mRegisterExpression.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerTable  _temp_4307 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
    if (_temp_4307._isBuilt ()) {
      _temp_4307 (HERE)->method_searchKey (_inLexique, var_cas_registerName, var_cas_registerAddressList, var_cas_size, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (124)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_4411 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_4411 = NULL ;
      while (((operand_4411 = enumerator_4411.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_4411) ;
        var_cas_found = ((operand_4411->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_4411->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (130))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (130)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (131)) ;
      {
        GGS_uintlist::cEnumerator enumerator_4718 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_4718 = NULL ;
        while (((operand_4718 = enumerator_4718.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_4718) ;
          var_cas_found = ((operand_4718->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_4718->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (var_cas_registerName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_4948 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_4948 = enumerator_4948.nextObject () ;
        if ((operand_4948 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_4948 ;
          do{
            macroValidPointer (operand_4948) ;
            var_cas_errorMessage._dotAssign_operation (operand_4948->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (140))) ;
            operand_4948 = enumerator_4948.nextObject () ;
            _foreach_loop_4948 = ((operand_4948 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_4948) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_4948) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (145)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (148)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (148))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      var_cas_registerName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (150)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_MOVFF * operand_5570,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5570 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_5991,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5991 != NULL) {
    if (((operand_5991->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_5991->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_5991->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (176))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
    var_cas_outBitNumber = operand_5991->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_6414,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6414 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_6545 = var_cas_inBitSliceTable ;
    if (_temp_6545._isBuilt ()) {
      _temp_6545 (HERE)->method_searchKey (_inLexique, operand_6414->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (189)) ;
    }
    if (((operand_6414->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (190)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_6414->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_6414->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (191))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (192)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_6414->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (194)) COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_6992,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6992 != NULL) {
    GGS_lstring  var_cas_registerName ;
    var_cas_registerName = operand_6992->mRegisterExpression.reader_mRegisterName (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerTable  _temp_7284 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
    if (_temp_7284._isBuilt ()) {
      _temp_7284 (HERE)->method_searchKey (_inLexique, var_cas_registerName, var_cas_registerAddressList, var_cas_size, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (207)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    {
      GGS_uintlist::cEnumerator enumerator_7388 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_7388 = NULL ;
      while (((operand_7388 = enumerator_7388.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_7388) ;
        var_cas_found = ((operand_7388->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_7388->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (213))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (213)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (214)) ;
      {
        GGS_uintlist::cEnumerator enumerator_7695 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_7695 = NULL ;
        while (((operand_7695 = enumerator_7695.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_7695) ;
          var_cas_found = ((operand_7695->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_7695->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (var_cas_registerName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_7925 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_7925 = enumerator_7925.nextObject () ;
        if ((operand_7925 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_7925 ;
          do{
            macroValidPointer (operand_7925) ;
            var_cas_errorMessage._dotAssign_operation (operand_7925->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
            operand_7925 = enumerator_7925.nextObject () ;
            _foreach_loop_7925 = ((operand_7925 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_7925) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_7925) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (231)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      var_cas_registerName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (233)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_conditionalBranch * operand_8559,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8559 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_BRA * operand_8784,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8784 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_GOTO * operand_9010,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9010 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_9236,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9236 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_9441 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
    if (_temp_9441._isBuilt ()) {
      _temp_9441 (HERE)->method_searchKey (_inLexique, operand_9236->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (269)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (270))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (271))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (273)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (276))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_9236->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (278)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_10173,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10173 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_10378 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)) ;
    if (_temp_10378._isBuilt ()) {
      _temp_10378 (HERE)->method_searchKey (_inLexique, operand_10173->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (290)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (291))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (292))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (294)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (297)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (297))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_10173->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (299)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_CLRWDT * operand_11111,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11111 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_DAW * operand_11336,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11336 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_NOP * operand_11561,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11561 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_POP * operand_11786,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11786 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_PUSH * operand_12012,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12012 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_RESET * operand_12239,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12239 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_RETURN * operand_12467,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12467 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_SLEEP * operand_12694,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12694 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_literalOperation * operand_12932,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12932 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_LFSR * operand_13158,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13158 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_MOVLB * operand_13385,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13385 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LABEL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_LABEL * operand_13612,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13612 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_MOVAW * operand_13839,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13839 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_TBLRD * operand_14066,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14066 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_TBLWT * operand_14293,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14293 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (430)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (430)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (431)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (431)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (432)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (432))))._operator_concat (GGS_string (true, "' should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (433)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (437)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (436)) ;
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 26U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_15550 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (441)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_15550 = NULL ;
    while (((operand_15550 = enumerator_15550.nextObject ()))) {
      macroValidPointer (operand_15550) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
      {
        GGS_instructionList::cEnumerator enumerator_15677 (operand_15550->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_15677 = NULL ;
        while (((operand_15677 = enumerator_15677.nextObject ()))) {
          macroValidPointer (operand_15677) ;
          const GGS_instruction  _temp_15717 = operand_15677->mInstruction ;
          if (_temp_15717._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_15717._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_15717 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (444)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_15845 = operand_15677->mInstruction ;
          if (_temp_15845._isBuilt ()) {
            _temp_15845 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (446)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (447)) ;
        }
      }
      var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (450)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_16059 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (452)), true) ;
    const GGS_routineDefinitionList::cElement * operand_16059 = NULL ;
    while (((operand_16059 = enumerator_16059.nextObject ()))) {
      macroValidPointer (operand_16059) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_16059->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (453)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_16059->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (454)) ;
      {
        GGS_instructionList::cEnumerator enumerator_16262 (operand_16059->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_16262 = NULL ;
        while (((operand_16262 = enumerator_16262.nextObject ()))) {
          macroValidPointer (operand_16262) ;
          const GGS_instruction  _temp_16302 = operand_16262->mInstruction ;
          if (_temp_16302._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_16302._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_16302 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (456)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_16430 = operand_16262->mInstruction ;
          if (_temp_16430._isBuilt ()) {
            _temp_16430 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (458)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (459)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_currentRamAddress ;
  var_cas_currentRamAddress = GGS_uint (true, 0U) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (464)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_16685 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (465)), true) ;
    const GGS_ramDefinitionList::cElement * operand_16685 = NULL ;
    while (((operand_16685 = enumerator_16685.nextObject ()))) {
      macroValidPointer (operand_16685) ;
      GGS_bitSliceTable  var_cas_bitSliceTable ;
      var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      var_cas_registerTable.modifier_insertKey (_inLexique, operand_16685->mName, GGS_uintlist ::constructor_listWithValue (var_cas_currentRamAddress), operand_16685->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (467)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (467)) ;
      var_cas_currentRamAddress = var_cas_currentRamAddress._add_operation (_inLexique, operand_16685->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (468)) COMMA_SOURCE_FILE_AT_LINE (468)) ;
    }
  }
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (469)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (473)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (474)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_0 ;
    const GGS_routineSymbolTable  _temp_17271 = var_cas_routineSymbolTable ;
    if (_temp_17271._isBuilt ()) {
      _temp_17271 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (477)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (478)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (478)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (477)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (479)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (479))) COMMA_SOURCE_FILE_AT_LINE (478)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U)) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_17673 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (487)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_17673 = NULL ;
    while (((operand_17673 = enumerator_17673.nextObject ()))) {
      macroValidPointer (operand_17673) ;
      var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
      {
        GGS_instructionList::cEnumerator enumerator_17805 (operand_17673->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_17805 = NULL ;
        while (((operand_17805 = enumerator_17805.nextObject ()))) {
          macroValidPointer (operand_17805) ;
          const GGS_instruction  _temp_17845 = operand_17805->mInstruction ;
          if (_temp_17845._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_17845._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_17845 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (490)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_17953 = operand_17805->mInstruction ;
          if (_temp_17953._isBuilt ()) {
            _temp_17953 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (492)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (493)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_18082 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (496)), true) ;
    const GGS_routineDefinitionList::cElement * operand_18082 = NULL ;
    while (((operand_18082 = enumerator_18082.nextObject ()))) {
      macroValidPointer (operand_18082) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_18082->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (497)) ;
      {
        GGS_instructionList::cEnumerator enumerator_18197 (operand_18082->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_18197 = NULL ;
        while (((operand_18197 = enumerator_18197.nextObject ()))) {
          macroValidPointer (operand_18197) ;
          const GGS_instruction  _temp_18237 = operand_18197->mInstruction ;
          if (_temp_18237._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_18237._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_18237 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (499)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_18345 = operand_18197->mInstruction ;
          if (_temp_18345._isBuilt ()) {
            _temp_18345 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (501)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (502)) ;
        }
      }
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (507)) ;
    GGS_string var_cas_destinationFile ;
    var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (509)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_18703 = var_cas_contents ;
    if (_temp_18703._isBuilt ()) {
      _temp_18703 (HERE)->method_writeToFile (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (510)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_LABEL__enterLabelAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LABEL__generateCodeAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

