//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 18th, 2008, at 23h20'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (19)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (21))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_1245,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1245 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_1481,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1481 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1481->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2309,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2309 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_2501 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
    if (_temp_2501._isBuilt ()) {
      _temp_2501 (HERE)->method_searchKey (_inLexique, operand_2309->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (75)) ;
    }
    if (((operand_2309->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_2309->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_2309->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (77))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (77))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (77)) ;
    }
    const GGS_uintlist  _temp_2741 = var_cas_registerAddressList ;
    if (_temp_2741._isBuilt ()) {
      _temp_2741 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (79)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_2309->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_2943,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2943 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_3212 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
    if (_temp_3212._isBuilt ()) {
      _temp_3212 (HERE)->method_searchKey (_inLexique, operand_2943->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (93)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    var_cas_outRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_3348 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_3348 = NULL ;
      while (((operand_3348 = enumerator_3348.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_3348) ;
        var_cas_outRegisterAddress = operand_3348->mValue ;
        var_cas_found = ((operand_3348->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_3348->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (103)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (104)) ;
      {
        GGS_uintlist::cEnumerator enumerator_3753 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_3753 = NULL ;
        while (((operand_3753 = enumerator_3753.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_3753) ;
          var_cas_found = ((operand_3753->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_3753->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (operand_2943->mRegisterName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_3984 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_3984 = enumerator_3984.nextObject () ;
        if ((operand_3984 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_3984 ;
          do{
            macroValidPointer (operand_3984) ;
            var_cas_errorMessage._dotAssign_operation (operand_3984->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
            operand_3984 = enumerator_3984.nextObject () ;
            _foreach_loop_3984 = ((operand_3984 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_3984) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_3984) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (121))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      operand_2943->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (123)) ;
    }
    if (((var_cas_found)._operator_and ((operand_2943->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)))._operator_supOrEqual (var_cas_size))).isBuiltAndTrue ()) {
      operand_2943->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_2943->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (126))))._operator_concat (GGS_string (true, ") is should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (126))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (126)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_2943->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_5054,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5054 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_5233 = operand_5054->mRegisterExpression ;
    if (_temp_5233._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5233._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5233 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_5054->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (153)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_5054->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_5729,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5729 != NULL) {
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_5908 = operand_5729->mRegisterExpression ;
    if (_temp_5908._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_5908._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_5908 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (172)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_5729->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (179)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (183)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_6336,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6336 != NULL) {
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_6492 = operand_6336->mSourceRegisterName ;
    if (_temp_6492._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6492._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6492 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (194)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_6627 = operand_6336->mDestinationRegisterName ;
    if (_temp_6627._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_6627._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_6627 (HERE), var_cas_inCodeGenerationContext, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (196)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (196)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (197)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_7110,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7110 != NULL) {
    if (((operand_7110->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (214)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_7110->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_7110->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (215)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (215))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (215)) ;
    }
    var_cas_outBitNumber = operand_7110->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_7533,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7533 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_7664 = var_cas_inBitSliceTable ;
    if (_temp_7664._isBuilt ()) {
      _temp_7664 (HERE)->method_searchKey (_inLexique, operand_7533->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (228)) ;
    }
    if (((operand_7533->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (229)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_7533->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_7533->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (230)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (230))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (231))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_7533->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (233)) COMMA_SOURCE_FILE_AT_LINE (233)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_8111,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8111 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_8336 = operand_8111->mRegisterExpression ;
    if (_temp_8336._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_8336._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8336 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (246)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_8512 = operand_8111->mBitNumber ;
    if (_temp_8512._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_8512._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8512 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (254)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_8111->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (256)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (261))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (261)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_8909,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8909 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_3 ;
    const GGS_routineSymbolTable  _temp_9076 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (272)) ;
    if (_temp_9076._isBuilt ()) {
      _temp_9076 (HERE)->method_searchKey (_inLexique, operand_8909->mTargetLabel, var_cas_targetAddress, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (272)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (274))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (274))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (274)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_8909->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (276)) ;
    }
    GGS_uint  var_cas_code ;
    operand_8909->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (278)) ;
    var_cas_code = (var_cas_code)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (279))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (279)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_9589,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9589 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_4 ;
    const GGS_routineSymbolTable  _temp_9756 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)) ;
    if (_temp_9756._isBuilt ()) {
      _temp_9756 (HERE)->method_searchKey (_inLexique, operand_9589->mTargetLabel, var_cas_targetAddress, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (290)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (292))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (292))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (292)) COMMA_SOURCE_FILE_AT_LINE (292))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (292)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_9589->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (294)) ;
    }
    if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (296)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (296))) COMMA_SOURCE_FILE_AT_LINE (295)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_10211,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10211 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_5 ;
    const GGS_routineSymbolTable  _temp_10385 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
    if (_temp_10385._isBuilt ()) {
      _temp_10385 (HERE)->method_searchKey (_inLexique, operand_10211->mTargetLabel, var_cas_targetAddress, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (306)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (308)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (308)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (306)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (309)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (309))) COMMA_SOURCE_FILE_AT_LINE (308)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_10659,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10659 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_10864 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (320)) ;
    if (_temp_10864._isBuilt ()) {
      _temp_10864 (HERE)->method_searchKey (_inLexique, operand_10659->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (320)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (321))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (322))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (324)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (327))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_10659->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (329)) ;
    }
    if ((GGS_uint (true, 60416U))._operator_or ((var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (332)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (332)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (330)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (333)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_targetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (333))) COMMA_SOURCE_FILE_AT_LINE (332)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_11707,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11707 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_11905 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
    if (_temp_11905._isBuilt ()) {
      _temp_11905 (HERE)->method_searchKey (_inLexique, operand_11707->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (344)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (345))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (346))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (351)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (351))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_11707->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (353)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (356))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (356))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)) COMMA_SOURCE_FILE_AT_LINE (356))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (356)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_11707->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (358)) ;
    }
    if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (360))) COMMA_SOURCE_FILE_AT_LINE (359)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_12930,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12930 != NULL) {
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (368)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_13176,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13176 != NULL) {
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_13422,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13422 != NULL) {
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (386)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_13668,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13668 != NULL) {
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (395)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_13915,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13915 != NULL) {
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (404)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_14163,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14163 != NULL) {
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (413)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_14412,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14412 != NULL) {
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (422)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_14660,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14660 != NULL) {
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_14919,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14919 != NULL) {
    if (((operand_14919->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (441)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_14919->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "A literal value ("))._operator_concat (operand_14919->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (442)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (442))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (442)) ;
    }
    GGS_uint  var_cas_code ;
    operand_14919->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (445)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_14919->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (446)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_15427,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15427 != NULL) {
    if (((operand_15427->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (456)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_15427->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "LFSR index should be lower or equal to 2") COMMA_SOURCE_FILE_AT_LINE (457)) ;
    }
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_15691 = operand_15427->mRegisterExpression ;
    if (_temp_15691._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_15691._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_15691 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (460)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_15427->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (461))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (461))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (461)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_15427->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (461))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (461))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (461))) COMMA_SOURCE_FILE_AT_LINE (460)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (461)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler &,
                                const cPtr_instruction_MOVLB * operand_16011,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16011 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LABEL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_16238,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16238 != NULL) {
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_16436 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (481)) ;
    if (_temp_16436._isBuilt ()) {
      _temp_16436 (HERE)->method_searchKey (_inLexique, operand_16238->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (481)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_inAddress)).isBuiltAndTrue ()) {
      operand_16238->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_16238->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_inAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (484))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (485))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (485)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_16885,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16885 != NULL) {
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_17035 = operand_16885->mRegisterExpression ;
    if (_temp_17035._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_17035._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_17035 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (496)) ;
      }
    }
    if (((var_cas_registerAddress)._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for MOVAW instruction, address ("))._operator_concat (var_cas_registerAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (501))))._operator_concat (GGS_string (true, ") should be lower or equal to 0xFF")) COMMA_SOURCE_FILE_AT_LINE (501)) ;
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (502)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_17434,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17434 != NULL) {
    switch (operand_17434->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (513)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (514)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (515)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (516)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_17861,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17861 != NULL) {
    switch (operand_17861->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (527)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (528)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (529)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (530)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (541)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (541)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (542)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (542)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (543))))._operator_concat (GGS_string (true, "' should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (544)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (548)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (547)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_19303 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_19303 = NULL ;
    while (((operand_19303 = enumerator_19303.nextObject ()))) {
      macroValidPointer (operand_19303) ;
      if (((operand_19303->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (553)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_19303->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (555)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_19303->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (558)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_19303->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (560)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_19303->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (564)) ;
      }
    }
  }
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_20093 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (572)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_20093 = NULL ;
      while (((operand_20093 = enumerator_20093.nextObject ()))) {
        macroValidPointer (operand_20093) ;
        if (((operand_20093->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (573)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_20275 (operand_20093->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_20275 = NULL ;
            while (((operand_20275 = enumerator_20275.nextObject ()))) {
              macroValidPointer (operand_20275) ;
              const GGS_instruction  _temp_20319 = operand_20275->mInstruction ;
              if (_temp_20319._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_20319._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_20319 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (576)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_20455 = operand_20275->mInstruction ;
              if (_temp_20455._isBuilt ()) {
                _temp_20455 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (578)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (579)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (582)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_highInterruptStartAddress ;
  var_cas_highInterruptStartAddress = var_cas_currentROMaddress ;
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_20913 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (592)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_20913 = NULL ;
      while (((operand_20913 = enumerator_20913.nextObject ()))) {
        macroValidPointer (operand_20913) ;
        if (((operand_20913->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (593)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_21096 (operand_20913->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_21096 = NULL ;
            while (((operand_21096 = enumerator_21096.nextObject ()))) {
              macroValidPointer (operand_21096) ;
              const GGS_instruction  _temp_21140 = operand_21096->mInstruction ;
              if (_temp_21140._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_21140._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_21140 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (596)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_21276 = operand_21096->mInstruction ;
              if (_temp_21276._isBuilt ()) {
                _temp_21276 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (598)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (599)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (602)) ;
        }
      }
    }
  }
  if ((((var_cas_hasHighInterrupt)._operator_not ())._operator_and ((var_cas_hasLowInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_21670 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (610)), true) ;
    const GGS_routineDefinitionList::cElement * operand_21670 = NULL ;
    while (((operand_21670 = enumerator_21670.nextObject ()))) {
      macroValidPointer (operand_21670) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_21670->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_21670->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (612)) ;
      {
        GGS_instructionList::cEnumerator enumerator_21873 (operand_21670->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_21873 = NULL ;
        while (((operand_21873 = enumerator_21873.nextObject ()))) {
          macroValidPointer (operand_21873) ;
          const GGS_instruction  _temp_21913 = operand_21873->mInstruction ;
          if (_temp_21913._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_21913._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_21913 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (614)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_22041 = operand_21873->mInstruction ;
          if (_temp_22041._isBuilt ()) {
            _temp_22041 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (616)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (617)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_currentRamAddress ;
  var_cas_currentRamAddress = GGS_uint (true, 0U) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (622)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_22296 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (623)), true) ;
    const GGS_ramDefinitionList::cElement * operand_22296 = NULL ;
    while (((operand_22296 = enumerator_22296.nextObject ()))) {
      macroValidPointer (operand_22296) ;
      GGS_bitSliceTable  var_cas_bitSliceTable ;
      var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      var_cas_registerTable.modifier_insertKey (_inLexique, operand_22296->mName, GGS_uintlist ::constructor_listWithValue (var_cas_currentRamAddress), operand_22296->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (625)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (625)) ;
      var_cas_currentRamAddress = var_cas_currentRamAddress._add_operation (_inLexique, operand_22296->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (626)) COMMA_SOURCE_FILE_AT_LINE (626)) ;
    }
  }
  GGS_uint  var_cas_programSize ;
  var_cas_programSize = var_cas_currentROMaddress ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (629)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (633)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (634)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_6 ;
    const GGS_routineSymbolTable  _temp_22977 = var_cas_routineSymbolTable ;
    if (_temp_22977._isBuilt ()) {
      _temp_22977 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (637)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (638)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (638)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (637)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (639)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (639))) COMMA_SOURCE_FILE_AT_LINE (638)) ;
    }
  }
  if (((var_cas_hasHighInterrupt)._operator_and (var_cas_hasLowInterrupt)).isBuiltAndTrue ()) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (644)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (646)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (646)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (645)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (647)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (647))) COMMA_SOURCE_FILE_AT_LINE (646)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U)) ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    if (GGS_uint (true, 24U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_23899 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (659)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_23899 = NULL ;
      while (((operand_23899 = enumerator_23899.nextObject ()))) {
        macroValidPointer (operand_23899) ;
        if (((operand_23899->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (660)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_24086 (operand_23899->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_24086 = NULL ;
            while (((operand_24086 = enumerator_24086.nextObject ()))) {
              macroValidPointer (operand_24086) ;
              const GGS_instruction  _temp_24130 = operand_24086->mInstruction ;
              if (_temp_24130._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_24130._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_24130 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (663)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_24246 = operand_24086->mInstruction ;
              if (_temp_24246._isBuilt ()) {
                _temp_24246 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (665)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (666)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (666)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (669)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (669)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (670)) ;
        }
      }
    }
  }
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (677)) ;
    }
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_24783 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (681)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_24783 = NULL ;
      while (((operand_24783 = enumerator_24783.nextObject ()))) {
        macroValidPointer (operand_24783) ;
        if (((operand_24783->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (682)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_24971 (operand_24783->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_24971 = NULL ;
            while (((operand_24971 = enumerator_24971.nextObject ()))) {
              macroValidPointer (operand_24971) ;
              const GGS_instruction  _temp_25015 = operand_24971->mInstruction ;
              if (_temp_25015._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_25015._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_25015 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (685)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_25131 = operand_24971->mInstruction ;
              if (_temp_25131._isBuilt ()) {
                _temp_25131 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (687)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (688)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (688)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (691)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (691)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (692)) ;
        }
      }
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_25518 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (698)), true) ;
    const GGS_routineDefinitionList::cElement * operand_25518 = NULL ;
    while (((operand_25518 = enumerator_25518.nextObject ()))) {
      macroValidPointer (operand_25518) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_25518->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (699)) ;
      {
        GGS_instructionList::cEnumerator enumerator_25633 (operand_25518->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_25633 = NULL ;
        while (((operand_25633 = enumerator_25633.nextObject ()))) {
          macroValidPointer (operand_25633) ;
          const GGS_instruction  _temp_25673 = operand_25633->mInstruction ;
          if (_temp_25673._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_25673._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_25673 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (701)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_25781 = operand_25633->mInstruction ;
          if (_temp_25781._isBuilt ()) {
            _temp_25781 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (703)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (704)) ;
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (704)) ;
        }
      }
    }
  }
  if (((var_cas_programSize)._operator_isNotEqual (var_cas_currentROMaddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentROMaddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (709))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_programSize.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (711))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (711)) ;
  }
  GGS_string var_cas_contents ;
  ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (715)) ;
  GGS_string var_cas_destinationFile ;
  var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))._operator_concat (GGS_string (true, ".hex")) ;
  const GGS_string _temp_26445 = var_cas_contents ;
  if (_temp_26445._isBuilt ()) {
    _temp_26445 (HERE)->method_writeToFile (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (718)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_LABEL__enterLabelAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LABEL__generateCodeAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

