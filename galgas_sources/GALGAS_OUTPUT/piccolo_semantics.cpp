//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 21th, 2008, at 19h38'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (19)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (21))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_1245,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1245 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_1492,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1492 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1492->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FOREVER.enterLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_1809,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1809 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress ;
    {
      GGS_instructionList::cEnumerator enumerator_1970 (operand_1809->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_1970 = NULL ;
      while (((operand_1970 = enumerator_1970.nextObject ()))) {
        macroValidPointer (operand_1970) ;
        const GGS_instruction  _temp_2008 = operand_1970->mInstruction ;
        if (_temp_2008._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2008._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2008 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (65)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2141 = operand_1970->mInstruction ;
        if (_temp_2141._isBuilt ()) {
          _temp_2141 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (70)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_structured_if.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_2326,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2326 != NULL) {
    GGS_uint  var_cas_conditionLength ;
    const GGS_structured_if_condition  _temp_2510 = operand_2326->mIfCondition ;
    if (_temp_2510._isBuilt ()) {
      _temp_2510 (HERE)->method_conditionLength (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (86)) ;
    {
      GGS_instructionList::cEnumerator enumerator_2606 (operand_2326->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_2606 = NULL ;
      while (((operand_2606 = enumerator_2606.nextObject ()))) {
        macroValidPointer (operand_2606) ;
        const GGS_instruction  _temp_2648 = operand_2606->mInstruction ;
        if (_temp_2648._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2648._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2648 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (88)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2781 = operand_2606->mInstruction ;
        if (_temp_2781._isBuilt ()) {
          _temp_2781 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (93)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (94)) ;
      }
    }
    if (((operand_2326->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (97)) ;
    }
    {
      GGS_instructionList::cEnumerator enumerator_2975 (operand_2326->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_2975 = NULL ;
      while (((operand_2975 = enumerator_2975.nextObject ()))) {
        macroValidPointer (operand_2975) ;
        const GGS_instruction  _temp_3017 = operand_2975->mInstruction ;
        if (_temp_3017._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_3017._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_3017 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (100)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_3150 = operand_2975->mInstruction ;
        if (_temp_3150._isBuilt ()) {
          _temp_3150 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (105)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank (),
mComputedGoto2RoutineAddress (),
mComputedGoto4RoutineAddress () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
  mComputedGoto2RoutineAddress._drop () ;
  mComputedGoto4RoutineAddress._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt ()
    && mComputedGoto2RoutineAddress._isBuilt ()
    && mComputedGoto4RoutineAddress._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank))
    ._operator_and (mComputedGoto2RoutineAddress._operator_isEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_and (mComputedGoto4RoutineAddress._operator_isEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank))
    ._operator_or (mComputedGoto2RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_or (mComputedGoto4RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2,
                 const GGS_uint & argument_3,
                 const GGS_uint & argument_4) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  result.mComputedGoto2RoutineAddress = argument_3 ;
  result.mComputedGoto4RoutineAddress = argument_4 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto2RoutineAddress " ;
    _s << mComputedGoto2RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto4RoutineAddress " ;
    _s << mComputedGoto4RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3929,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3929 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_4121 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
    if (_temp_4121._isBuilt ()) {
      _temp_4121 (HERE)->method_searchKey (_inLexique, operand_3929->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (132)) ;
    }
    if (((operand_3929->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_3929->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_3929->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (134)) ;
    }
    const GGS_uintlist  _temp_4361 = var_cas_registerAddressList ;
    if (_temp_4361._isBuilt ()) {
      _temp_4361 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (136)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3929->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)) COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_4574,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4574 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_4843 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
    if (_temp_4843._isBuilt ()) {
      _temp_4843 (HERE)->method_searchKey (_inLexique, operand_4574->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (150)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    var_cas_outRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_4979 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_4979 = NULL ;
      while (((operand_4979 = enumerator_4979.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_4979) ;
        var_cas_outRegisterAddress = operand_4979->mValue ;
        var_cas_found = ((operand_4979->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_4979->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (160))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (160)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (161)) ;
      {
        GGS_uintlist::cEnumerator enumerator_5384 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_5384 = NULL ;
        while (((operand_5384 = enumerator_5384.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_5384) ;
          var_cas_found = ((operand_5384->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_5384->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (operand_4574->mRegisterName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_5615 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_5615 = enumerator_5615.nextObject () ;
        if ((operand_5615 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_5615 ;
          do{
            macroValidPointer (operand_5615) ;
            var_cas_errorMessage._dotAssign_operation (operand_5615->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (170))) ;
            operand_5615 = enumerator_5615.nextObject () ;
            _foreach_loop_5615 = ((operand_5615 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_5615) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_5615) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (178))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      operand_4574->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (180)) ;
    }
    if (((var_cas_found)._operator_and ((operand_4574->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)))._operator_supOrEqual (var_cas_size))).isBuiltAndTrue ()) {
      operand_4574->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_4574->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (183))))._operator_concat (GGS_string (true, ") is should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (183))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (183)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_4574->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInstructionIsReachable"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionIsReachable (C_Compiler & _inLexique,
                                GGS_bool & var_cas_ioIsReachable,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionIsReachable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_ioIsReachable)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "dead code: execution cannot reach this instruction") COMMA_SOURCE_FILE_AT_LINE (192)) ;
  }
  var_cas_ioIsReachable = GGS_bool (true, true) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionIsReachable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_7102,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7102 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_7102->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (211)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_7391 = operand_7102->mRegisterExpression ;
    if (_temp_7391._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7391._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7391 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (215)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_7102->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (222)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_7102->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (229)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_7898,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7898 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_7898->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (239)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_8187 = operand_7898->mRegisterExpression ;
    if (_temp_8187._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_8187._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8187 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (243)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_7898->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (250)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8626,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8626 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_8626->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (264)) ;
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_8892 = operand_8626->mSourceRegisterName ;
    if (_temp_8892._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_8892._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8892 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (267)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_9027 = operand_8626->mDestinationRegisterName ;
    if (_temp_9027._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_9027._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_9027 (HERE), var_cas_inCodeGenerationContext, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (269)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (269)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (270)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_9521,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9521 != NULL) {
    if (((operand_9521->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_9521->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_9521->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (288)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (288))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (288)) ;
    }
    var_cas_outBitNumber = operand_9521->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_9955,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9955 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_10086 = var_cas_inBitSliceTable ;
    if (_temp_10086._isBuilt ()) {
      _temp_10086 (HERE)->method_searchKey (_inLexique, operand_9955->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
    if (((operand_9955->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (302)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_9955->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_9955->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (303))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (304))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (304)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_9955->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (306)) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_10544,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10544 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_10544->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (315)) ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_10879 = operand_10544->mRegisterExpression ;
    if (_temp_10879._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_10879._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10879 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (321)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_11055 = operand_10544->mBitNumber ;
    if (_temp_11055._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_11055._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_11055 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (329)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_10544->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (331)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (336))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (336)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (348))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)) COMMA_SOURCE_FILE_AT_LINE (348))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (348)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (350)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (353)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (355))) COMMA_SOURCE_FILE_AT_LINE (354)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_12160,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12160 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_12160->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (364)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_3 ;
    const GGS_routineSymbolTable  _temp_12437 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
    if (_temp_12437._isBuilt ()) {
      _temp_12437 (HERE)->method_searchKey (_inLexique, operand_12160->mTargetLabel, var_cas_targetAddress, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (367)) ;
    }
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_12160->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (372)),  operand_12160->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (367)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (384))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)) COMMA_SOURCE_FILE_AT_LINE (384))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (384)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))) COMMA_SOURCE_FILE_AT_LINE (387)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_13279,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13279 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_13279->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (398)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_4 ;
    const GGS_routineSymbolTable  _temp_13595 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
    if (_temp_13595._isBuilt ()) {
      _temp_13595 (HERE)->method_searchKey (_inLexique, operand_13279->mTargetLabel, var_cas_targetAddress, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (402)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (404))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (404))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (404))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (404)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_13279->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (406)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_13279->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (421)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (421)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (420)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (422)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (422))) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_14362,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14362 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_14362->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (431)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_5 ;
    const GGS_routineSymbolTable  _temp_14685 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (435)) ;
    if (_temp_14685._isBuilt ()) {
      _temp_14685 (HERE)->method_searchKey (_inLexique, operand_14362->mTargetLabel, var_cas_targetAddress, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (435)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (435)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (445)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (445)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (444)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (446)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (446))) COMMA_SOURCE_FILE_AT_LINE (445)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_15164,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15164 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_15164->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (455)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_15479 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (459)) ;
    if (_temp_15479._isBuilt ()) {
      _temp_15479 (HERE)->method_searchKey (_inLexique, operand_15164->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (459)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (460))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (461))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (463)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (466)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (466))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_15164->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (468)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (469)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (481))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (481))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (481)) COMMA_SOURCE_FILE_AT_LINE (481))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (481)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (483)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (486)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (486))) COMMA_SOURCE_FILE_AT_LINE (484)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_16812,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16812 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_16812->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (495)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_17120 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (499)) ;
    if (_temp_17120._isBuilt ()) {
      _temp_17120 (HERE)->method_searchKey (_inLexique, operand_16812->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (499)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (500))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (501))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (503)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (506)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (506))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_16812->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (508)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_16812->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (514)) COMMA_SOURCE_FILE_AT_LINE (509)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_17969,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17969 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_17969->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (524)) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (525)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_18336,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18336 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18336->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (535)) ;
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (536)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_18703,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18703 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18703->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (546)) ;
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (547)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_19070,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19070 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19070->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (557)) ;
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (558)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_19438,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19438 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19438->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (568)) ;
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (569)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_19807,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19807 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19807->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (579)) ;
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (580)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_20177,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20177 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20177->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (590)) ;
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (591)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_20546,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20546 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20546->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (601)) ;
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (602)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_20926,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20926 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20926->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (612)) ;
    if (((operand_20926->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (614)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_20926->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "A literal value ("))._operator_concat (operand_20926->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (615))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (615)) ;
    }
    GGS_uint  var_cas_code ;
    operand_20926->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (618)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_20926->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (619))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (619)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_21555,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21555 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_21555->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (629)) ;
    if (((operand_21555->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (631)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_21555->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "LFSR index should be lower or equal to 2") COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_21929 = operand_21555->mRegisterExpression ;
    if (_temp_21929._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_21929._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21929 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (635)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_21555->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (636))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (636))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (636)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_21555->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (636))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (636))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (636))) COMMA_SOURCE_FILE_AT_LINE (635)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (636)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_22260,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22260 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_22260->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (646)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LABEL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_22608,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22608 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_22872 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (660)) ;
    if (_temp_22872._isBuilt ()) {
      _temp_22872 (HERE)->method_searchKey (_inLexique, operand_22608->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (660)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_inAddress)).isBuiltAndTrue ()) {
      operand_22608->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_22608->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_inAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (663))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (664))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (664)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_23332,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23332 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_23332->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (674)) ;
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_23592 = operand_23332->mRegisterExpression ;
    if (_temp_23592._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_23592._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23592 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (677)) ;
      }
    }
    if (((var_cas_registerAddress)._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for MOVAW instruction, address ("))._operator_concat (var_cas_registerAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (682))))._operator_concat (GGS_string (true, ") should be lower or equal to 0xFF")) COMMA_SOURCE_FILE_AT_LINE (682)) ;
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (683)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_24002,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24002 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24002->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (693)) ;
    switch (operand_24002->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (696)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (697)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (698)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (699)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_24550,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24550 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24550->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (709)) ;
    switch (operand_24550->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (713)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (714)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (715)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MNOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_25097,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25097 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_25097->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (725)) ;
    if (((operand_25097->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (727)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_25097->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (728)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_25552 = operand_25097->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (731)) ;
    GGS_bool _condition_25552 (_variant_25552._isBuilt (), true) ;
    while (_condition_25552.isBuiltAndTrue ()) {
      _condition_25552 = (var_cas_idx)._operator_strictInf (operand_25097->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (732))) ;
      if (_condition_25552.isBuiltAndTrue ()) {
        if (_variant_25552.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (735)) ;
          _condition_25552 = GGS_bool (true, false) ;
        }else{
          _variant_25552._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (733)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (735)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FOREVER.generateCodeAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_25697,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25697 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_25697->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (745)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_26022 (operand_25697->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_26022 = NULL ;
      while (((operand_26022 = enumerator_26022.nextObject ()))) {
        macroValidPointer (operand_26022) ;
        const GGS_instruction  _temp_26060 = operand_26022->mInstruction ;
        if (_temp_26060._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_26060._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_26060 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (751)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_26177 = operand_26022->mInstruction ;
        if (_temp_26177._isBuilt ()) {
          _temp_26177 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (752)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (753)) ;
      }
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_inAddress,  operand_25697->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (754)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_SEMI_COLON.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_SEMI_COLON * operand_26516,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26516 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_26516->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (769)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_26794 = operand_26516->mRegisterExpression ;
    if (_temp_26794._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_26794._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26794 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (773)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_26516->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (780)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (784)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_27155 = operand_26516->mInstruction ;
    if (_temp_27155._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_27155._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27155 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (787)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (787)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_IF_BitTest.generateCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_27383,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27383 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_27383->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (796)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_27693 = operand_27383->mRegisterExpression ;
    if (_temp_27693._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_27693._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27693 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (801)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_27865 = operand_27383->mBitNumber ;
    if (_temp_27865._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_27865._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27865 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (809)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_27383->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (811)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (816))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (816)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_28187 = operand_27383->mInstruction ;
    if (_temp_28187._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_28187._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_28187 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (819)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (819)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_retlw.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_28419,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28419 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_28419->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (828)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_28419->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (832)),  operand_28419->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (831)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (834)) COMMA_SOURCE_FILE_AT_LINE (833)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_28912 (operand_28419->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_28912 = NULL ;
      while (((operand_28912 = enumerator_28912.nextObject ()))) {
        macroValidPointer (operand_28912) ;
        if (((operand_28912->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value ("))._operator_concat (operand_28912->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (838)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (838))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (838)) ;
        }
        if ((GGS_uint (true, 3072U))._operator_or (operand_28912->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (840)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_28912->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (840))) COMMA_SOURCE_FILE_AT_LINE (839)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_bra.generateCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_29271,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29271 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_29271->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (850)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_29271->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (854)),  operand_29271->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (853)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (856)) COMMA_SOURCE_FILE_AT_LINE (855)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (858)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_29799 (operand_29271->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_29799 = NULL ;
      while (((operand_29799 = enumerator_29799.nextObject ()))) {
        macroValidPointer (operand_29799) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_29926 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (862)) ;
        if (_temp_29926._isBuilt ()) {
          _temp_29926 (HERE)->method_searchKey (_inLexique, operand_29799->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (862)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_29799->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (866)) COMMA_SOURCE_FILE_AT_LINE (862)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (868)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_goto.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_30257,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30257 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_30257->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (878)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_30257->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (882)),  operand_30257->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (881)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (884)) COMMA_SOURCE_FILE_AT_LINE (883)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_30750 (operand_30257->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30750 = NULL ;
      while (((operand_30750 = enumerator_30750.nextObject ()))) {
        macroValidPointer (operand_30750) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_30877 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
        if (_temp_30877._isBuilt ()) {
          _temp_30877 (HERE)->method_searchKey (_inLexique, operand_30750->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (889)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (889)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@structured_if_condition.emitInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__structured_if_condition__emitInstruction> gDispatchTableFor__structured_if_condition__emitInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__emitInstruction (typeCategoryMethod__structured_if_condition__emitInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__emitInstruction
findCategoryMethod__structured_if_condition__emitInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__structured_if_condition__emitInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__structured_if_condition__emitInstruction.count ()) {
    result = gDispatchTableFor__structured_if_condition__emitInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__structured_if_condition__emitInstruction (superClassPtr) ;
      gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@bcc_in_structured_if_condition.emitInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_31440,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31440 != NULL) {
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inCurrentAddress,  var_cas_inTargetAddress,  var_cas_inErrorLocation,  operand_31440->mCondition COMMA_SOURCE_FILE_AT_LINE (912)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bitTest_in_structured_if_condition.emitInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_31864,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31864 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_32139 = operand_31864->mRegisterExpression ;
    if (_temp_32139._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_32139._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_32139 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (933)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_32315 = operand_31864->mBitNumber ;
    if (_temp_32315._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_32315._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_32315 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (941)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_31864->method_baseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (944)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (949))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (949)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inCurrentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (953)),  var_cas_inTargetAddress,  var_cas_inErrorLocation COMMA_SOURCE_FILE_AT_LINE (950)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_structured_if.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_32809,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32809 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_32809->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (965)) ;
    GGS_uint  var_cas_thenInstructionsLength ;
    var_cas_thenInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_33093 (operand_32809->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_33093 = NULL ;
      while (((operand_33093 = enumerator_33093.nextObject ()))) {
        macroValidPointer (operand_33093) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_33146 = operand_33093->mInstruction ;
        if (_temp_33146._isBuilt ()) {
          _temp_33146 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (970)) ;
        }
        var_cas_thenInstructionsLength = var_cas_thenInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (971)) ;
      }
    }
    GGS_uint  var_cas_elseInstructionsLength ;
    var_cas_elseInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_33327 (operand_32809->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_33327 = NULL ;
      while (((operand_33327 = enumerator_33327.nextObject ()))) {
        macroValidPointer (operand_33327) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_33380 = operand_33327->mInstruction ;
        if (_temp_33380._isBuilt ()) {
          _temp_33380 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (976)) ;
        }
        var_cas_elseInstructionsLength = var_cas_elseInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (977)) ;
      }
    }
    GGS_uint  var_cas_conditionLength ;
    const GGS_structured_if_condition  _temp_33545 = operand_32809->mIfCondition ;
    if (_temp_33545._isBuilt ()) {
      _temp_33545 (HERE)->method_conditionLength (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (981)) ;
    }
    GGS_uint  var_cas_conditionalBranchDestination ;
    var_cas_conditionalBranchDestination = var_cas_inAddress._add_operation (_inLexique, var_cas_thenInstructionsLength COMMA_SOURCE_FILE_AT_LINE (983))._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (983)) ;
    if (((operand_32809->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (984)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_conditionalBranchDestination = var_cas_conditionalBranchDestination._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (985)) ;
    }
    const GGS_structured_if_condition  _temp_33839 = operand_32809->mIfCondition ;
    if (_temp_33839._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__emitInstruction _method = findCategoryMethod__structured_if_condition__emitInstruction (_temp_33839._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_33839 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress, var_cas_conditionalBranchDestination, operand_32809->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (987)) ;
      }
    }
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (994)) ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_34099 (operand_32809->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_34099 = NULL ;
      while (((operand_34099 = enumerator_34099.nextObject ()))) {
        macroValidPointer (operand_34099) ;
        const GGS_instruction  _temp_34141 = operand_34099->mInstruction ;
        if (_temp_34141._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_34141._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_34141 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (997)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_34281 = operand_34099->mInstruction ;
        if (_temp_34281._isBuilt ()) {
          _temp_34281 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1002)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1003)) ;
      }
    }
    if (((operand_32809->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1006)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_currentAddress._add_operation (_inLexique, var_cas_elseInstructionsLength COMMA_SOURCE_FILE_AT_LINE (1009))._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1009)),  operand_32809->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1006)) ;
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_34659 (operand_32809->mElseInstructionList, true) ;
        const GGS_instructionList::cElement * operand_34659 = NULL ;
        while (((operand_34659 = enumerator_34659.nextObject ()))) {
          macroValidPointer (operand_34659) ;
          const GGS_instruction  _temp_34703 = operand_34659->mInstruction ;
          if (_temp_34703._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_34703._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_34703 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1015)) ;
            }
          }
          GGS_uint  var_cas_lg ;
          const GGS_instruction  _temp_34853 = operand_34659->mInstruction ;
          if (_temp_34853._isBuilt ()) {
            _temp_34853 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1020)) ;
          }
          var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1021)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (1033)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1033)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1034)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1034)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1035)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1035))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1036)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1040)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (1039)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_36099 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1044)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_36099 = NULL ;
    while (((operand_36099 = enumerator_36099.nextObject ()))) {
      macroValidPointer (operand_36099) ;
      if (((operand_36099->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1045)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_36099->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1047)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_36099->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_36099->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1052)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_36099->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (1056)) ;
      }
    }
  }
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_36889 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1064)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_36889 = NULL ;
      while (((operand_36889 = enumerator_36889.nextObject ()))) {
        macroValidPointer (operand_36889) ;
        if (((operand_36889->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1065)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_37071 (operand_36889->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_37071 = NULL ;
            while (((operand_37071 = enumerator_37071.nextObject ()))) {
              macroValidPointer (operand_37071) ;
              const GGS_instruction  _temp_37115 = operand_37071->mInstruction ;
              if (_temp_37115._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_37115._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_37115 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1068)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_37251 = operand_37071->mInstruction ;
              if (_temp_37251._isBuilt ()) {
                _temp_37251 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1070)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1071)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1074)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_highInterruptStartAddress ;
  var_cas_highInterruptStartAddress = var_cas_currentROMaddress ;
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_37709 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1084)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_37709 = NULL ;
      while (((operand_37709 = enumerator_37709.nextObject ()))) {
        macroValidPointer (operand_37709) ;
        if (((operand_37709->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1085)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_37892 (operand_37709->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_37892 = NULL ;
            while (((operand_37892 = enumerator_37892.nextObject ()))) {
              macroValidPointer (operand_37892) ;
              const GGS_instruction  _temp_37936 = operand_37892->mInstruction ;
              if (_temp_37936._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_37936._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_37936 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1088)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_38072 = operand_37892->mInstruction ;
              if (_temp_38072._isBuilt ()) {
                _temp_38072 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1090)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1091)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1094)) ;
        }
      }
    }
  }
  if ((((var_cas_hasHighInterrupt)._operator_not ())._operator_and ((var_cas_hasLowInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_38466 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1102)), true) ;
    const GGS_routineDefinitionList::cElement * operand_38466 = NULL ;
    while (((operand_38466 = enumerator_38466.nextObject ()))) {
      macroValidPointer (operand_38466) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_38466->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_38466->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      {
        GGS_instructionList::cEnumerator enumerator_38669 (operand_38466->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_38669 = NULL ;
        while (((operand_38669 = enumerator_38669.nextObject ()))) {
          macroValidPointer (operand_38669) ;
          const GGS_instruction  _temp_38709 = operand_38669->mInstruction ;
          if (_temp_38709._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_38709._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_38709 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1106)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_38837 = operand_38669->mInstruction ;
          if (_temp_38837._isBuilt ()) {
            _temp_38837 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1108)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1109)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_computedGoto4RoutineAddress ;
  var_cas_computedGoto4RoutineAddress = var_cas_currentROMaddress ;
  GGS_uint  var_cas_computedGoto2RoutineAddress ;
  var_cas_computedGoto2RoutineAddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1115))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
  }else if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1117))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1118)) ;
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1121)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1122)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_39537 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1123)), true) ;
    const GGS_ramDefinitionList::cElement * operand_39537 = NULL ;
    while (((operand_39537 = enumerator_39537.nextObject ()))) {
      macroValidPointer (operand_39537) ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uint  var_cas_firstFreeAddress ;
      const GGS_ramBankTable  _temp_39670 = var_cas_ramBank ;
      if (_temp_39670._isBuilt ()) {
        _temp_39670 (HERE)->method_searchKey (_inLexique, operand_39537->mBankName, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      }
      {
        GGS_declarationInRamList::cEnumerator enumerator_39744 (operand_39537->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_39744 = NULL ;
        while (((operand_39744 = enumerator_39744.nextObject ()))) {
          macroValidPointer (operand_39744) ;
          if (((operand_39744->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1129)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            operand_39744->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          }
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (_inLexique, operand_39744->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_39744->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1133)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1133)) ;
          var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_39744->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
          var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_39537->mBankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) COMMA_SOURCE_FILE_AT_LINE (1135)) ;
          if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
            operand_39744->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (operand_39537->mBankName))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_39744->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
          }
        }
      }
    }
  }
  GGS_uint  var_cas_programSize ;
  var_cas_programSize = var_cas_currentROMaddress ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1142)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1146)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (1147)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_7 ;
    const GGS_routineSymbolTable  _temp_40773 = var_cas_routineSymbolTable ;
    if (_temp_40773._isBuilt ()) {
      _temp_40773 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (1150)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1151)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1151)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1150)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1152)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1152))) COMMA_SOURCE_FILE_AT_LINE (1151)) ;
    }
  }
  if (((var_cas_hasHighInterrupt)._operator_and (var_cas_hasLowInterrupt)).isBuiltAndTrue ()) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1157)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1159)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1159)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1160)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1160))) COMMA_SOURCE_FILE_AT_LINE (1159)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U), var_cas_computedGoto2RoutineAddress, var_cas_computedGoto4RoutineAddress) ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    if (GGS_uint (true, 24U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (1172)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_41761 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1174)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_41761 = NULL ;
      while (((operand_41761 = enumerator_41761.nextObject ()))) {
        macroValidPointer (operand_41761) ;
        if (((operand_41761->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1175)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_41992 (operand_41761->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_41992 = NULL ;
            while (((operand_41992 = enumerator_41992.nextObject ()))) {
              macroValidPointer (operand_41992) ;
              const GGS_instruction  _temp_42036 = operand_41992->mInstruction ;
              if (_temp_42036._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_42036._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_42036 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1179)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_42174 = operand_41992->mInstruction ;
              if (_temp_42174._isBuilt ()) {
                _temp_42174 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1181)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1182)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1182)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1186)) ;
        }
      }
    }
  }
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1193)) ;
    }
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_42711 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1197)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_42711 = NULL ;
      while (((operand_42711 = enumerator_42711.nextObject ()))) {
        macroValidPointer (operand_42711) ;
        if (((operand_42711->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1198)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_42943 (operand_42711->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_42943 = NULL ;
            while (((operand_42943 = enumerator_42943.nextObject ()))) {
              macroValidPointer (operand_42943) ;
              const GGS_instruction  _temp_42987 = operand_42943->mInstruction ;
              if (_temp_42987._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_42987._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_42987 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1202)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_43125 = operand_42943->mInstruction ;
              if (_temp_43125._isBuilt ()) {
                _temp_43125 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1204)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1205)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1205)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1208)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1208)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1209)) ;
        }
      }
    }
  }
  if ((((var_cas_hasLowInterrupt)._operator_not ())._operator_and ((var_cas_hasHighInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1216)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_43637 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1219)), true) ;
    const GGS_routineDefinitionList::cElement * operand_43637 = NULL ;
    while (((operand_43637 = enumerator_43637.nextObject ()))) {
      macroValidPointer (operand_43637) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_43637->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1220)) ;
      if ((((operand_43637->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_43637->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221)))._operator_isNotEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
        operand_43637->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as PIC18 is started with BSR register set to 0, the 'main' routine requires the 'banksel 0' declaration") COMMA_SOURCE_FILE_AT_LINE (1222)) ;
      }
      if ((((operand_43637->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1224)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_43637->mHasNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_43637->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as the 'main' routine is an endless loop, it should be declared with 'noreturn' qualifier") COMMA_SOURCE_FILE_AT_LINE (1225)) ;
      }
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_44206 (operand_43637->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_44206 = NULL ;
        while (((operand_44206 = enumerator_44206.nextObject ()))) {
          macroValidPointer (operand_44206) ;
          const GGS_instruction  _temp_44246 = operand_44206->mInstruction ;
          if (_temp_44246._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_44246._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_44246 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1229)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_44376 = operand_44206->mInstruction ;
          if (_temp_44376._isBuilt ()) {
            _temp_44376 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1231)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1232)) ;
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1232)) ;
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1237))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1237)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1241)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1241)))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1241)) ;
    }
    if (GGS_uint (true, 9981U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9981U) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
    }
    if (GGS_uint (true, 3584U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3584U) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
    }
    if (GGS_uint (true, 8958U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8958U) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
    }
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1247)) ;
  }
  if (((var_cas_programSize)._operator_isNotEqual (var_cas_currentROMaddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentROMaddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1251))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_programSize.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1253))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    GGS_string var_cas_destinationFile ;
    var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1259)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_45658 = var_cas_contents ;
    if (_temp_45658._isBuilt ()) {
      _temp_45658 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (1260)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_LABEL__enterLabelAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_FOREVER__enterLabelAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_structured_if__enterLabelAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LABEL__generateCodeAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MNOP__generateCodeAtAddress, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FOREVER__generateCodeAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress, gClassInfoFor__instruction_IF_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_BitTest__generateCodeAtAddress, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_retlw__generateCodeAtAddress, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_bra__generateCodeAtAddress, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_goto__generateCodeAtAddress, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bcc_in_structured_if_condition__emitInstruction, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bitTest_in_structured_if_condition__emitInstruction, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_structured_if__generateCodeAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

