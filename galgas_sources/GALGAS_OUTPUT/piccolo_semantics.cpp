//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 21th, 2008, at 15h1'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "checkCurrentEmitAddress"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCurrentEmitAddress (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inCurrentAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCurrentEmitAddress at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_addr ;
  ::routine_currentEmitAddress (_inLexique,  var_cas_addr COMMA_SOURCE_FILE_AT_LINE (19)) ;
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and ((var_cas_addr)._operator_isNotEqual (var_cas_inCurrentAddress))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "internal error: current emit address is "))._operator_concat (var_cas_addr.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (21))))._operator_concat (GGS_string (true, "; it should be ")))._operator_concat (var_cas_inCurrentAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) COMMA_SOURCE_FILE_AT_LINE (22)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCurrentEmitAddress\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_routineSymbolTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineSymbolTable::e_routineSymbolTable (void) :
mRoutineAddress (),
mRequiredSelectedBank () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@routineSymbolTable'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_routineSymbolTable::
elementOf_GGS_routineSymbolTable (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_routineSymbolTable & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineSymbolTable::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRoutineAddress.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mRequiredSelectedBank.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineSymbolTable::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineSymbolTable * _p = dynamic_cast <const elementOf_GGS_routineSymbolTable *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mRoutineAddress._operator_isEqual (_p->mInfo.mRoutineAddress)).boolValue ()
           && (mInfo.mRequiredSelectedBank._operator_isEqual (_p->mInfo.mRequiredSelectedBank)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineSymbolTable::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineSymbolTable *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineSymbolTable * info = (e_routineSymbolTable *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineSymbolTable info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineSymbolTable::
_operator_isNotEqual (const GGS_routineSymbolTable & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_routineSymbolTable info  ;
    info.mRoutineAddress = inParameter0 ;
    info.mRequiredSelectedBank = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mRoutineAddress ;
    outParameter1 = node->mInfo.mRequiredSelectedBank ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRoutineAddressForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRoutineAddressForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRoutineAddress = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_setMRequiredSelectedBankForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMRequiredSelectedBankForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mRequiredSelectedBank = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' routine is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_routineSymbolTable::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' routine is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineSymbolTable & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineSymbolTable result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineSymbolTable GGS_routineSymbolTable::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineSymbolTable result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineSymbolTable::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @routineSymbolTable " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRoutineAddress (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineAddress ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_routineSymbolTable::cEnumerator::_mRequiredSelectedBank (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRequiredSelectedBank ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@instruction.enterLabelAtAddress'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction__enterLabelAtAddress (C_Compiler &,
                                const cPtr_instruction * operand_1245,
                                GGS_routineSymbolTable  & /* var_cas_ioRoutineSymbolTable */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_uint  & /* var_cas_ioCurrentlySelectedBank */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1245 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category method '@instruction.enterLabelAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__enterLabelAtAddress> gDispatchTableFor__instruction__enterLabelAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__enterLabelAtAddress (typeCategoryMethod__instruction__enterLabelAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__enterLabelAtAddress
findCategoryMethod__instruction__enterLabelAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__enterLabelAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__enterLabelAtAddress.count ()) {
    result = gDispatchTableFor__instruction__enterLabelAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__enterLabelAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__enterLabelAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_LABEL.enterLabelAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_1481,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1481 != NULL) {
    var_cas_ioRoutineSymbolTable.modifier_insertKey (_inLexique, operand_1481->mTargetLabel, var_cas_inAddress, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_FOREVER.enterLabelAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_1787,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1787 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress ;
    {
      GGS_instructionList::cEnumerator enumerator_1948 (operand_1787->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_1948 = NULL ;
      while (((operand_1948 = enumerator_1948.nextObject ()))) {
        macroValidPointer (operand_1948) ;
        const GGS_instruction  _temp_1986 = operand_1948->mInstruction ;
        if (_temp_1986._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_1986._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_1986 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (65)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2119 = operand_1948->mInstruction ;
        if (_temp_2119._isBuilt ()) {
          _temp_2119 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (70)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_structured_if.enterLabelAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__enterLabelAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_2293,
                                GGS_routineSymbolTable  & var_cas_ioRoutineSymbolTable,
                                const GGS_uint   var_cas_inAddress,
                                GGS_uint  & var_cas_ioCurrentlySelectedBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2293 != NULL) {
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (83)) ;
    {
      GGS_instructionList::cEnumerator enumerator_2458 (operand_2293->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_2458 = NULL ;
      while (((operand_2458 = enumerator_2458.nextObject ()))) {
        macroValidPointer (operand_2458) ;
        const GGS_instruction  _temp_2500 = operand_2458->mInstruction ;
        if (_temp_2500._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2500._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2500 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (85)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_2633 = operand_2458->mInstruction ;
        if (_temp_2633._isBuilt ()) {
          _temp_2633 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (90)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
    }
    if (((operand_2293->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (94)) ;
    }
    {
      GGS_instructionList::cEnumerator enumerator_2825 (operand_2293->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_2825 = NULL ;
      while (((operand_2825 = enumerator_2825.nextObject ()))) {
        macroValidPointer (operand_2825) ;
        const GGS_instruction  _temp_2867 = operand_2825->mInstruction ;
        if (_temp_2867._isBuilt ()) {
          typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_2867._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_2867 (HERE), var_cas_ioRoutineSymbolTable, var_cas_address, var_cas_ioCurrentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (97)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_3000 = operand_2825->mInstruction ;
        if (_temp_3000._isBuilt ()) {
          _temp_3000 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (102)) ;
        }
        var_cas_address = var_cas_address._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of 'codeGenerationContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_codeGenerationContext::GGS_codeGenerationContext (void) :
mRoutineSymbolTable (),
mRegisterTable (),
mCurrentBank (),
mComputedGoto2RoutineAddress (),
mComputedGoto4RoutineAddress () {
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext::~GGS_codeGenerationContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_codeGenerationContext::_drop (void) {
  mRoutineSymbolTable._drop () ;
  mRegisterTable._drop () ;
  mCurrentBank._drop () ;
  mComputedGoto2RoutineAddress._drop () ;
  mComputedGoto4RoutineAddress._drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_codeGenerationContext::_isBuilt (void) const {
  return mRoutineSymbolTable._isBuilt ()
    && mRegisterTable._isBuilt ()
    && mCurrentBank._isBuilt ()
    && mComputedGoto2RoutineAddress._isBuilt ()
    && mComputedGoto4RoutineAddress._isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isEqual (inOperand.mRoutineSymbolTable)
    ._operator_and (mRegisterTable._operator_isEqual (inOperand.mRegisterTable))
    ._operator_and (mCurrentBank._operator_isEqual (inOperand.mCurrentBank))
    ._operator_and (mComputedGoto2RoutineAddress._operator_isEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_and (mComputedGoto4RoutineAddress._operator_isEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_codeGenerationContext::
_operator_isNotEqual (const GGS_codeGenerationContext & inOperand) const {
  return mRoutineSymbolTable._operator_isNotEqual (inOperand.mRoutineSymbolTable)
    ._operator_or (mRegisterTable._operator_isNotEqual (inOperand.mRegisterTable))
    ._operator_or (mCurrentBank._operator_isNotEqual (inOperand.mCurrentBank))
    ._operator_or (mComputedGoto2RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto2RoutineAddress))
    ._operator_or (mComputedGoto4RoutineAddress._operator_isNotEqual (inOperand.mComputedGoto4RoutineAddress)) ;
}

//---------------------------------------------------------------------------*

GGS_codeGenerationContext GGS_codeGenerationContext::
constructor_new (const GGS_routineSymbolTable & argument_0,
                 const GGS_registerTable & argument_1,
                 const GGS_uint & argument_2,
                 const GGS_uint & argument_3,
                 const GGS_uint & argument_4) {
  GGS_codeGenerationContext result ;
  result.mRoutineSymbolTable = argument_0 ;
  result.mRegisterTable = argument_1 ;
  result.mCurrentBank = argument_2 ;
  result.mComputedGoto2RoutineAddress = argument_3 ;
  result.mComputedGoto4RoutineAddress = argument_4 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_codeGenerationContext::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String _s ;
  _s << "<struct @codeGenerationContext" ;
  if (_isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineSymbolTable " ;
    _s << mRoutineSymbolTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRegisterTable " ;
    _s << mRegisterTable.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCurrentBank " ;
    _s << mCurrentBank.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto2RoutineAddress " ;
    _s << mComputedGoto2RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mComputedGoto4RoutineAddress " ;
    _s << mComputedGoto4RoutineAddress.reader_description (_inLexique COMMA_THERE, inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@registerExpression.getRegisterAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddress (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_3768,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3768 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    GGS_bitSliceTable  automatic_var_0 ;
    const GGS_registerTable  _temp_3960 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
    if (_temp_3960._isBuilt ()) {
      _temp_3960 (HERE)->method_searchKey (_inLexique, operand_3768->mRegisterName, var_cas_registerAddressList, var_cas_size, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (129)) ;
    }
    if (((operand_3768->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (130)))._operator_strictSup (var_cas_size)).isBuiltAndTrue ()) {
      operand_3768->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The index ("))._operator_concat (operand_3768->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (131))))._operator_concat (GGS_string (true, ") should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (131))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
    }
    const GGS_uintlist  _temp_4200 = var_cas_registerAddressList ;
    if (_temp_4200._isBuilt ()) {
      _temp_4200 (HERE)->method_first (_inLexique, var_cas_outRegisterAddress COMMA_SOURCE_FILE_AT_LINE (133)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_3768->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (134)) COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddress' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddress> gDispatchTableFor__registerExpression__getRegisterAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddress (typeCategoryMethod__registerExpression__getRegisterAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddress
findCategoryMethod__registerExpression__getRegisterAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddress.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddress (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@registerExpression.getRegisterAddressingInformations'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__registerExpression__getRegisterAddressingInformations (C_Compiler & _inLexique,
                                const cPtr_registerExpression * operand_4402,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                GGS_uint  & var_cas_outRegisterAddress,
                                GGS_bool & var_cas_outUseBSRregister,
                                GGS_bitSliceTable  & var_cas_outBitSliceTable
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4402 != NULL) {
    GGS_uintlist  var_cas_registerAddressList ;
    GGS_uint  var_cas_size ;
    const GGS_registerTable  _temp_4671 = var_cas_inCodeGenerationContext.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (147)) ;
    if (_temp_4671._isBuilt ()) {
      _temp_4671 (HERE)->method_searchKey (_inLexique, operand_4402->mRegisterName, var_cas_registerAddressList, var_cas_size, var_cas_outBitSliceTable COMMA_SOURCE_FILE_AT_LINE (147)) ;
    }
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (true, false) ;
    var_cas_outRegisterAddress = GGS_uint (true, 0U) ;
    {
      GGS_uintlist::cEnumerator enumerator_4807 (var_cas_registerAddressList, true) ;
      const GGS_uintlist::cElement * operand_4807 = NULL ;
      while (((operand_4807 = enumerator_4807.nextObject ()))
          && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_4807) ;
        var_cas_outRegisterAddress = operand_4807->mValue ;
        var_cas_found = ((operand_4807->mValue)._operator_strictInf (GGS_uint (true, 96U)))._operator_or ((operand_4807->mValue)._operator_supOrEqual (GGS_uint (true, 3936U))) ;
      }
    }
    var_cas_outUseBSRregister = GGS_bool (true, false) ;
    if ((((var_cas_found)._operator_not ())._operator_and ((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (155)))._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      var_cas_outUseBSRregister = GGS_bool (true, true) ;
      GGS_uint  var_cas_lowBound ;
      var_cas_lowBound = var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (157))._multiply_operation (_inLexique, GGS_uint (true, 256U) COMMA_SOURCE_FILE_AT_LINE (157)) ;
      GGS_uint  var_cas_highBound ;
      var_cas_highBound = var_cas_lowBound._add_operation (_inLexique, GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (158)) ;
      {
        GGS_uintlist::cEnumerator enumerator_5212 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_5212 = NULL ;
        while (((operand_5212 = enumerator_5212.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_5212) ;
          var_cas_found = ((operand_5212->mValue)._operator_supOrEqual (var_cas_lowBound))._operator_and ((operand_5212->mValue)._operator_infOrEqual (var_cas_highBound)) ;
        }
      }
    }
    if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "register '"))._operator_concat (operand_4402->mRegisterName))._operator_concat (GGS_string (true, "' at ")) ;
      {
        GGS_uintlist::cEnumerator enumerator_5443 (var_cas_registerAddressList, true) ;
        const GGS_uintlist::cElement * operand_5443 = enumerator_5443.nextObject () ;
        if ((operand_5443 != NULL)
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          bool _foreach_loop_5443 ;
          do{
            macroValidPointer (operand_5443) ;
            var_cas_errorMessage._dotAssign_operation (operand_5443->mValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
            operand_5443 = enumerator_5443.nextObject () ;
            _foreach_loop_5443 = ((operand_5443 != NULL)
              && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) ;
            if (_foreach_loop_5443) {
              var_cas_errorMessage.writeString (", ") ;
            }
          }while (_foreach_loop_5443) ;
        }
      }
      var_cas_errorMessage.writeString (" cannot be accessed, neither throught access bank, neither with BSR value") ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString (" (unknown)") ;
      }else{
        var_cas_errorMessage.writeString (" (") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (175))) ;
        var_cas_errorMessage.writeString (")") ;
      }
      operand_4402->mRegisterName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (177)) ;
    }
    if (((var_cas_found)._operator_and ((operand_4402->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (179)))._operator_supOrEqual (var_cas_size))).isBuiltAndTrue ()) {
      operand_4402->mOffset.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "index ("))._operator_concat (operand_4402->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (180))))._operator_concat (GGS_string (true, ") is should be lower than size (")))._operator_concat (var_cas_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (180))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (180)) ;
    }
    var_cas_outRegisterAddress = var_cas_outRegisterAddress._add_operation (_inLexique, operand_4402->mOffset.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@registerExpression.getRegisterAddressingInformations'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__registerExpression__getRegisterAddressingInformations> gDispatchTableFor__registerExpression__getRegisterAddressingInformations ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__registerExpression__getRegisterAddressingInformations (typeCategoryMethod__registerExpression__getRegisterAddressingInformations inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__registerExpression__getRegisterAddressingInformations
findCategoryMethod__registerExpression__getRegisterAddressingInformations (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__registerExpression__getRegisterAddressingInformations result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__registerExpression__getRegisterAddressingInformations.count ()) {
    result = gDispatchTableFor__registerExpression__getRegisterAddressingInformations (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__registerExpression__getRegisterAddressingInformations (superClassPtr) ;
      gDispatchTableFor__registerExpression__getRegisterAddressingInformations.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInstructionIsReachable"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInstructionIsReachable (C_Compiler & _inLexique,
                                GGS_bool & var_cas_ioIsReachable,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInstructionIsReachable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_ioIsReachable)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "dead code: execution cannot reach this instruction") COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  var_cas_ioIsReachable = GGS_bool (true, true) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInstructionIsReachable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@instruction.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__instruction__generateCodeAtAddress> gDispatchTableFor__instruction__generateCodeAtAddress ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__instruction__generateCodeAtAddress (typeCategoryMethod__instruction__generateCodeAtAddress inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__instruction__generateCodeAtAddress
findCategoryMethod__instruction__generateCodeAtAddress (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__instruction__generateCodeAtAddress result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__instruction__generateCodeAtAddress.count ()) {
    result = gDispatchTableFor__instruction__generateCodeAtAddress (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__instruction__generateCodeAtAddress (superClassPtr) ;
      gDispatchTableFor__instruction__generateCodeAtAddress.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FDA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FDA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FDA * operand_6919,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6919 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_6919->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (208)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_1 ;
    const GGS_registerExpression  _temp_7208 = operand_6919->mRegisterExpression ;
    if (_temp_7208._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7208._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7208 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_6919->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (219)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    if (((operand_6919->m_W_isDestination)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 512U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (226)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FA.generateCodeAtAddress'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FA * operand_7704,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7704 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_7704->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (236)) ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_2 ;
    const GGS_registerExpression  _temp_7993 = operand_7704->mRegisterExpression ;
    if (_temp_7993._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_7993._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_7993 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (240)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_7704->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (247)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (251)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVFF.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVFF__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVFF * operand_8421,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8421 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_8421->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (261)) ;
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_8687 = operand_8421->mSourceRegisterName ;
    if (_temp_8687._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_8687._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8687 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (264)) ;
      }
    }
    GGS_uint  var_cas_destinationRegisterAddress ;
    const GGS_registerExpression  _temp_8822 = operand_8421->mDestinationRegisterName ;
    if (_temp_8822._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_8822._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_8822 (HERE), var_cas_inCodeGenerationContext, var_cas_destinationRegisterAddress COMMA_SOURCE_FILE_AT_LINE (266)) ;
      }
    }
    if ((GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 49152U))._operator_or (var_cas_sourceRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (266)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_destinationRegisterAddress) COMMA_SOURCE_FILE_AT_LINE (267)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@bitNumberExpression.getBitNumber'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__bitNumberExpression__getBitNumber> gDispatchTableFor__bitNumberExpression__getBitNumber ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__bitNumberExpression__getBitNumber (typeCategoryMethod__bitNumberExpression__getBitNumber inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__bitNumberExpression__getBitNumber
findCategoryMethod__bitNumberExpression__getBitNumber (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__bitNumberExpression__getBitNumber result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__bitNumberExpression__getBitNumber.count ()) {
    result = gDispatchTableFor__bitNumberExpression__getBitNumber (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__bitNumberExpression__getBitNumber (superClassPtr) ;
      gDispatchTableFor__bitNumberExpression__getBitNumber.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@bitNumberLiteralValue.getBitNumber'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLiteralValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLiteralValue * operand_9305,
                                const GGS_bitSliceTable   /* var_cas_inBitSliceTable */,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9305 != NULL) {
    if (((operand_9305->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (284)))._operator_strictSup (GGS_uint (true, 7U))).isBuiltAndTrue ()) {
      operand_9305->mBitNumberLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "The bit number is "))._operator_concat (operand_9305->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (285)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))))._operator_concat (GGS_string (true, " (should be <= 7)")) COMMA_SOURCE_FILE_AT_LINE (285)) ;
    }
    var_cas_outBitNumber = operand_9305->mBitNumberLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@bitNumberLabelValue.getBitNumber'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitNumberLabelValue__getBitNumber (C_Compiler & _inLexique,
                                const cPtr_bitNumberLabelValue * operand_9728,
                                const GGS_bitSliceTable   var_cas_inBitSliceTable,
                                GGS_uint  & var_cas_outBitNumber
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9728 != NULL) {
    GGS_uint  var_cas_sliceIndex ;
    GGS_uint  var_cas_sliceSize ;
    const GGS_bitSliceTable  _temp_9859 = var_cas_inBitSliceTable ;
    if (_temp_9859._isBuilt ()) {
      _temp_9859 (HERE)->method_searchKey (_inLexique, operand_9728->mBitNumberLabelValue, var_cas_sliceIndex, var_cas_sliceSize COMMA_SOURCE_FILE_AT_LINE (298)) ;
    }
    if (((operand_9728->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (299)))._operator_strictSup (var_cas_sliceSize)).isBuiltAndTrue ()) {
      operand_9728->mBitNumberIndexValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "The "))._operator_concat (operand_9728->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (300)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (300))))._operator_concat (GGS_string (true, " index is too large (should be < ")))._operator_concat (var_cas_sliceSize.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (301))))._operator_concat (GGS_string (true, ")")) COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
    var_cas_outBitNumber = var_cas_sliceIndex._add_operation (_inLexique, operand_9728->mBitNumberIndexValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (303)) COMMA_SOURCE_FILE_AT_LINE (303)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_FBA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FBA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FBA * operand_10306,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10306 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_10306->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (312)) ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_10641 = operand_10306->mRegisterExpression ;
    if (_temp_10641._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_10641._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10641 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (318)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_10817 = operand_10306->mBitNumber ;
    if (_temp_10817._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_10817._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_10817 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (326)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_10306->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (328)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (333))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (333)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "emitConditionalBranchInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitConditionalBranchInstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inConditionalBranchInstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_conditional_branch  var_cas_inConditionalBranch COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitConditionalBranchInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (345))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (345))._substract_operation (_inLexique, var_cas_inConditionalBranchInstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (345)) COMMA_SOURCE_FILE_AT_LINE (345))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (345)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 127L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 128L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for conditional branch instruction") COMMA_SOURCE_FILE_AT_LINE (347)) ;
  }
  GGS_uint  var_cas_baseCode ;
  ::routine_getBccBaseCode (_inLexique,  var_cas_inConditionalBranch,  var_cas_baseCode COMMA_SOURCE_FILE_AT_LINE (350)) ;
  if ((var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (var_cas_baseCode)._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 255L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (352))) COMMA_SOURCE_FILE_AT_LINE (351)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitConditionalBranchInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_conditionalBranch.generateCodeAtAddress'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_conditionalBranch__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_conditionalBranch * operand_11911,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11911 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_11911->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (361)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_3 ;
    const GGS_routineSymbolTable  _temp_12188 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
    if (_temp_12188._isBuilt ()) {
      _temp_12188 (HERE)->method_searchKey (_inLexique, operand_11911->mTargetLabel, var_cas_targetAddress, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (364)) ;
    }
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_11911->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (369)),  operand_11911->mConditionalBranch COMMA_SOURCE_FILE_AT_LINE (364)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "emitBRAinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitBRAinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inBRAinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitBRAinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (381))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (381))._substract_operation (_inLexique, var_cas_inBRAinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (381)) COMMA_SOURCE_FILE_AT_LINE (381))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (381)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for BRA instruction") COMMA_SOURCE_FILE_AT_LINE (383)) ;
  }
  if ((GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 53248U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (386))) COMMA_SOURCE_FILE_AT_LINE (384)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitBRAinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_BRA.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_BRA__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_BRA * operand_13019,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13019 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_13019->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (395)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_4 ;
    const GGS_routineSymbolTable  _temp_13335 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (399)) ;
    if (_temp_13335._isBuilt ()) {
      _temp_13335 (HERE)->method_searchKey (_inLexique, operand_13019->mTargetLabel, var_cas_targetAddress, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (399)) ;
    }
    GGS_sint  var_cas_displacement ;
    var_cas_displacement = var_cas_targetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (401))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (401))._substract_operation (_inLexique, var_cas_inAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (401)) COMMA_SOURCE_FILE_AT_LINE (401))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (401)) ;
    if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 2048L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 2048L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
      operand_13019->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (403)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_13019->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitGOTOinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitGOTOinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitGOTOinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (418)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (418)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (417)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (419)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (419))) COMMA_SOURCE_FILE_AT_LINE (418)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitGOTOinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_GOTO.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_GOTO__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_GOTO * operand_14091,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14091 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_14091->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (428)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  automatic_var_5 ;
    const GGS_routineSymbolTable  _temp_14414 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (432)) ;
    if (_temp_14414._isBuilt ()) {
      _temp_14414 (HERE)->method_searchKey (_inLexique, operand_14091->mTargetLabel, var_cas_targetAddress, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (432)) ;
    }
    ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (432)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitCALLinstruction"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inTargetAddress COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if ((GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (442)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 60416U))._operator_or ((var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (442)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (441)) ;
  }
  if ((GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (443)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_inTargetAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (443))) COMMA_SOURCE_FILE_AT_LINE (442)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_CALL.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CALL * operand_14882,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14882 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_14882->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (452)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_15197 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (456)) ;
    if (_temp_15197._isBuilt ()) {
      _temp_15197 (HERE)->method_searchKey (_inLexique, operand_14882->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (456)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (457))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (458))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (460)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (463)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (463))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_14882->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (465)) ;
    }
    ::routine_emitCALLinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (466)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "emitRCALLinstruction"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_emitRCALLinstruction (C_Compiler & _inLexique,
                                const GGS_uint   var_cas_inRCALLinstructionAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_emitRCALLinstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_sint  var_cas_displacement ;
  var_cas_displacement = var_cas_inTargetAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (478))._substract_operation (_inLexique, GGS_sint (true, 2L) COMMA_SOURCE_FILE_AT_LINE (478))._substract_operation (_inLexique, var_cas_inRCALLinstructionAddress.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478))._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (478)) ;
  if ((((var_cas_displacement)._operator_strictSup (GGS_sint (true, 1023L)))._operator_or ((var_cas_displacement)._operator_strictInf (GGS_sint (true, 1024L)._operator_unary_minus (_inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "displacement too large for RCALL instruction") COMMA_SOURCE_FILE_AT_LINE (480)) ;
  }
  if ((GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (483)))._isBuilt ()) {
    ::routine_emitCode (_inLexique,  (GGS_uint (true, 55296U))._operator_or ((var_cas_displacement)._operator_and (GGS_sint (true, 2047L)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (483))) COMMA_SOURCE_FILE_AT_LINE (481)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_emitRCALLinstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RCALL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RCALL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RCALL * operand_16519,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16519 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_16519->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (492)) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_16827 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (496)) ;
    if (_temp_16827._isBuilt ()) {
      _temp_16827 (HERE)->method_searchKey (_inLexique, operand_16519->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (496)) ;
    }
    if ((((var_cas_requiredSelectedBank)._operator_isNotEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE)))._operator_and ((var_cas_requiredSelectedBank)._operator_isNotEqual (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (497))))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "The routine requires the "))._operator_concat (var_cas_requiredSelectedBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (498))))._operator_concat (GGS_string (true, " bank to be selected, but ")) ;
      if (((var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (500)))._operator_isEqual (GGS_uint ::constructor_max (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        var_cas_errorMessage.writeString ("no bank is currentled selected") ;
      }else{
        var_cas_errorMessage.writeString ("the ") ;
        var_cas_errorMessage._dotAssign_operation (var_cas_inCodeGenerationContext.reader_mCurrentBank (_inLexique COMMA_SOURCE_FILE_AT_LINE (503)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (503))) ;
        var_cas_errorMessage.writeString (" bank is currentled selected") ;
      }
      operand_16519->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (505)) ;
    }
    ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_targetAddress,  operand_16519->mTargetLabel.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (511)) COMMA_SOURCE_FILE_AT_LINE (506)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_CLRWDT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_CLRWDT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_CLRWDT * operand_17665,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17665 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_17665->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (521)) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (522)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_DAW.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_DAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_DAW * operand_18021,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18021 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18021->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (532)) ;
    if (GGS_uint (true, 7U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (533)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_NOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_NOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_NOP * operand_18377,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18377 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18377->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (543)) ;
    if (GGS_uint (true, 0U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (544)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@instruction_POP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_POP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_POP * operand_18733,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18733 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_18733->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (554)) ;
    if (GGS_uint (true, 6U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 6U) COMMA_SOURCE_FILE_AT_LINE (555)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_PUSH.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_PUSH__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_PUSH * operand_19090,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19090 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19090->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (565)) ;
    if (GGS_uint (true, 5U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 5U) COMMA_SOURCE_FILE_AT_LINE (566)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_RESET.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RESET__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RESET * operand_19448,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19448 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19448->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (576)) ;
    if (GGS_uint (true, 255U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 255U) COMMA_SOURCE_FILE_AT_LINE (577)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_RETURN.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_RETURN__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_RETURN * operand_19807,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19807 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_19807->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (587)) ;
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (588)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_SLEEP.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_SLEEP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_SLEEP * operand_20165,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20165 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20165->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (598)) ;
    if (GGS_uint (true, 3U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3U) COMMA_SOURCE_FILE_AT_LINE (599)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@instruction_literalOperation.generateCodeAtAddress'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_literalOperation__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_literalOperation * operand_20534,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20534 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_20534->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (609)) ;
    if (((operand_20534->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      operand_20534->mLiteralValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "A literal value ("))._operator_concat (operand_20534->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (612)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (612))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (612)) ;
    }
    GGS_uint  var_cas_code ;
    operand_20534->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (615)) ;
    var_cas_code = (var_cas_code)._operator_or (operand_20534->mLiteralValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (616))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (616)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LFSR.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LFSR__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LFSR * operand_21152,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21152 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_21152->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (626)) ;
    if (((operand_21152->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (628)))._operator_strictSup (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
      operand_21152->mFSRindex.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "LFSR index should be lower or equal to 2") COMMA_SOURCE_FILE_AT_LINE (629)) ;
    }
    GGS_uint  var_cas_sourceRegisterAddress ;
    const GGS_registerExpression  _temp_21526 = operand_21152->mRegisterExpression ;
    if (_temp_21526._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_21526._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_21526 (HERE), var_cas_inCodeGenerationContext, var_cas_sourceRegisterAddress COMMA_SOURCE_FILE_AT_LINE (632)) ;
      }
    }
    if (((GGS_uint (true, 60928U))._operator_or (operand_21152->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (633))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (633))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (633)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  ((GGS_uint (true, 60928U))._operator_or (operand_21152->mFSRindex.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (633))._left_shift_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (633))))._operator_or (var_cas_sourceRegisterAddress._right_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (633))) COMMA_SOURCE_FILE_AT_LINE (632)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or ((var_cas_sourceRegisterAddress)._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (633)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVLB.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVLB__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVLB * operand_21846,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21846 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_21846->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (643)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_LABEL.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_LABEL__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_LABEL * operand_22183,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22183 != NULL) {
    var_cas_ioContinuesInSequence = GGS_bool (true, true) ;
    GGS_uint  var_cas_targetAddress ;
    GGS_uint  var_cas_requiredSelectedBank ;
    const GGS_routineSymbolTable  _temp_22447 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (657)) ;
    if (_temp_22447._isBuilt ()) {
      _temp_22447 (HERE)->method_searchKey (_inLexique, operand_22183->mTargetLabel, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }
    if (((var_cas_targetAddress)._operator_isNotEqual (var_cas_inAddress)).isBuiltAndTrue ()) {
      operand_22183->mTargetLabel.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((GGS_string (true, "Internal second pass error: the '"))._operator_concat (operand_22183->mTargetLabel))._operator_concat (GGS_string (true, "' label gets ")))._operator_concat (var_cas_inAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (660))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_targetAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (661))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (661)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MOVAW.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MOVAW__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MOVAW * operand_22896,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22896 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_22896->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (671)) ;
    GGS_uint  var_cas_registerAddress ;
    const GGS_registerExpression  _temp_23156 = operand_22896->mRegisterExpression ;
    if (_temp_23156._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddress _method = findCategoryMethod__registerExpression__getRegisterAddress (_temp_23156._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_23156 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress COMMA_SOURCE_FILE_AT_LINE (674)) ;
      }
    }
    if (((var_cas_registerAddress)._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "for MOVAW instruction, address ("))._operator_concat (var_cas_registerAddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (679))))._operator_concat (GGS_string (true, ") should be lower or equal to 0xFF")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
    }
    if ((GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 3584U))._operator_or (var_cas_registerAddress) COMMA_SOURCE_FILE_AT_LINE (680)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLRD.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLRD__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLRD * operand_23555,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23555 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_23555->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (690)) ;
    switch (operand_23555->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 8U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (693)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 9U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (694)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 10U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (695)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 11U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 11U) COMMA_SOURCE_FILE_AT_LINE (696)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_TBLWT.generateCodeAtAddress'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_TBLWT__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_TBLWT * operand_24092,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24092 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24092->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (706)) ;
    switch (operand_24092->mOption.enumValue ()) {
    case GGS_tableAccessOption::enum_simpleAccess:
      {
      if (GGS_uint (true, 12U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (709)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postIncrement:
      {
      if (GGS_uint (true, 13U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 13U) COMMA_SOURCE_FILE_AT_LINE (710)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_postDecrement:
      {
      if (GGS_uint (true, 14U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 14U) COMMA_SOURCE_FILE_AT_LINE (711)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::enum_preIncrement:
      {
      if (GGS_uint (true, 15U)._isBuilt ()) {
        ::routine_emitCode (_inLexique,  GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
      }
      break ;
    case GGS_tableAccessOption::kNotBuilt:
      break ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@instruction_MNOP.generateCodeAtAddress'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_MNOP__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_MNOP * operand_24628,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   /* var_cas_inAddress */,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24628 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_24628->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (722)) ;
    if (((operand_24628->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (724)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_24628->mOccurrenceFactor.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "No generated code") COMMA_SOURCE_FILE_AT_LINE (725)) ;
    }
    GGS_uint  var_cas_idx ;
    var_cas_idx = GGS_uint (true, 0U) ;
    GGS_uint _variant_25083 = operand_24628->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (728)) ;
    GGS_bool _condition_25083 (_variant_25083._isBuilt (), true) ;
    while (_condition_25083.isBuiltAndTrue ()) {
      _condition_25083 = (var_cas_idx)._operator_strictInf (operand_24628->mOccurrenceFactor.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (729))) ;
      if (_condition_25083.isBuiltAndTrue ()) {
        if (_variant_25083.uintValue () == 0) {
          _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (732)) ;
          _condition_25083 = GGS_bool (true, false) ;
        }else{
          _variant_25083._decrement_operation (_inLexique COMMA_HERE) ;
          if (GGS_uint (true, 0U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (730)) ;
          }
          var_cas_idx._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (732)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@instruction_FOREVER.generateCodeAtAddress'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_FOREVER__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_FOREVER * operand_25217,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25217 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_25217->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (742)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_25542 (operand_25217->mInstructionList, true) ;
      const GGS_instructionList::cElement * operand_25542 = NULL ;
      while (((operand_25542 = enumerator_25542.nextObject ()))) {
        macroValidPointer (operand_25542) ;
        const GGS_instruction  _temp_25580 = operand_25542->mInstruction ;
        if (_temp_25580._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_25580._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_25580 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (748)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_25697 = operand_25542->mInstruction ;
        if (_temp_25697._isBuilt ()) {
          _temp_25697 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (749)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (750)) ;
      }
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_inAddress,  operand_25217->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (751)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_IF_SEMI_COLON.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_SEMI_COLON * operand_26025,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26025 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_26025->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (766)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  automatic_var_6 ;
    const GGS_registerExpression  _temp_26303 = operand_26025->mRegisterExpression ;
    if (_temp_26303._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_26303._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26303 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (770)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_26025->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (777)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (781)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_26664 = operand_26025->mInstruction ;
    if (_temp_26664._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_26664._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_26664 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (784)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (784)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@instruction_IF_BitTest.generateCodeAtAddress'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_IF_BitTest__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_IF_BitTest * operand_26881,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26881 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_26881->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (793)) ;
    GGS_uint  var_cas_registerAddress ;
    GGS_bool var_cas_useBSRregister ;
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    const GGS_registerExpression  _temp_27191 = operand_26881->mRegisterExpression ;
    if (_temp_27191._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_27191._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27191 (HERE), var_cas_inCodeGenerationContext, var_cas_registerAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (798)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_27363 = operand_26881->mBitNumber ;
    if (_temp_27363._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_27363._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27363 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (806)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_26881->method_getBaseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (808)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_registerAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (813))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (813)) ;
    }
    GGS_bool var_cas_unusedContinuesInSequence ;
    var_cas_unusedContinuesInSequence = GGS_bool (true, true) ;
    const GGS_instruction  _temp_27685 = operand_26881->mInstruction ;
    if (_temp_27685._isBuilt ()) {
      typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_27685._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_27685 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (816)), var_cas_unusedContinuesInSequence COMMA_SOURCE_FILE_AT_LINE (816)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@instruction_computed_retlw.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_retlw__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_retlw * operand_27906,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27906 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_27906->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (825)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_27906->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (829)),  operand_27906->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (828)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (831)) COMMA_SOURCE_FILE_AT_LINE (830)) ;
    }
    {
      GGS_luintlist::cEnumerator enumerator_28399 (operand_27906->mLiteralValues, true) ;
      const GGS_luintlist::cElement * operand_28399 = NULL ;
      while (((operand_28399 = enumerator_28399.nextObject ()))) {
        macroValidPointer (operand_28399) ;
        if (((operand_28399->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (834)))._operator_strictSup (GGS_uint (true, 255U))).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "immediate value ("))._operator_concat (operand_28399->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (835)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (835))))._operator_concat (GGS_string (true, ") should be lower or equal to 255")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
        }
        if ((GGS_uint (true, 3072U))._operator_or (operand_28399->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)))._isBuilt ()) {
          ::routine_emitCode (_inLexique,  (GGS_uint (true, 3072U))._operator_or (operand_28399->mValue.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (837))) COMMA_SOURCE_FILE_AT_LINE (836)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_bra.generateCodeAtAddress'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_bra__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_bra * operand_28747,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28747 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_28747->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (847)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_28747->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (851)),  operand_28747->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (850)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto2RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (853)) COMMA_SOURCE_FILE_AT_LINE (852)) ;
    }
    GGS_uint  var_cas_address ;
    var_cas_address = var_cas_inAddress._add_operation (_inLexique, GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (855)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_29275 (operand_28747->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_29275 = NULL ;
      while (((operand_29275 = enumerator_29275.nextObject ()))) {
        macroValidPointer (operand_29275) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_29402 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (859)) ;
        if (_temp_29402._isBuilt ()) {
          _temp_29402 (HERE)->method_searchKey (_inLexique, operand_29275->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (859)) ;
        }
        ::routine_emitBRAinstruction (_inLexique,  var_cas_address,  var_cas_targetAddress,  operand_29275->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (863)) COMMA_SOURCE_FILE_AT_LINE (859)) ;
        var_cas_address = var_cas_address._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (865)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_computed_goto.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_computed_goto__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_computed_goto * operand_29722,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29722 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_29722->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (875)) ;
    var_cas_ioContinuesInSequence = GGS_bool (true, false) ;
    if ((operand_29722->mUsesRelativeCall).isBuiltAndTrue ()) {
      ::routine_emitRCALLinstruction (_inLexique,  var_cas_inAddress,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (879)),  operand_29722->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (878)) ;
    }else{
      ::routine_emitCALLinstruction (_inLexique,  var_cas_inCodeGenerationContext.reader_mComputedGoto4RoutineAddress (_inLexique COMMA_SOURCE_FILE_AT_LINE (881)) COMMA_SOURCE_FILE_AT_LINE (880)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_30215 (operand_29722->mTargetLabels, true) ;
      const GGS_lstringlist::cElement * operand_30215 = NULL ;
      while (((operand_30215 = enumerator_30215.nextObject ()))) {
        macroValidPointer (operand_30215) ;
        GGS_uint  var_cas_targetAddress ;
        GGS_uint  var_cas_requiredSelectedBank ;
        const GGS_routineSymbolTable  _temp_30342 = var_cas_inCodeGenerationContext.reader_mRoutineSymbolTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (886)) ;
        if (_temp_30342._isBuilt ()) {
          _temp_30342 (HERE)->method_searchKey (_inLexique, operand_30215->mValue, var_cas_targetAddress, var_cas_requiredSelectedBank COMMA_SOURCE_FILE_AT_LINE (886)) ;
        }
        ::routine_emitGOTOinstruction (_inLexique,  var_cas_targetAddress COMMA_SOURCE_FILE_AT_LINE (886)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@structured_if_condition.emitInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__structured_if_condition__emitInstruction> gDispatchTableFor__structured_if_condition__emitInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__structured_if_condition__emitInstruction (typeCategoryMethod__structured_if_condition__emitInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__structured_if_condition__emitInstruction
findCategoryMethod__structured_if_condition__emitInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__structured_if_condition__emitInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__structured_if_condition__emitInstruction.count ()) {
    result = gDispatchTableFor__structured_if_condition__emitInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__structured_if_condition__emitInstruction (superClassPtr) ;
      gDispatchTableFor__structured_if_condition__emitInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@bcc_in_structured_if_condition.emitInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bcc_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bcc_in_structured_if_condition * operand_30894,
                                const GGS_codeGenerationContext  /* var_cas_inCodeGenerationContext */,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30894 != NULL) {
    ::routine_emitConditionalBranchInstruction (_inLexique,  var_cas_inCurrentAddress,  var_cas_inTargetAddress,  var_cas_inErrorLocation,  operand_30894->mCondition COMMA_SOURCE_FILE_AT_LINE (909)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@bitTest_in_structured_if_condition.emitInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__bitTest_in_structured_if_condition__emitInstruction (C_Compiler & _inLexique,
                                const cPtr_bitTest_in_structured_if_condition * operand_31307,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inCurrentAddress,
                                const GGS_uint   var_cas_inTargetAddress,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31307 != NULL) {
    GGS_bitSliceTable  var_cas_bitSliceTable ;
    GGS_uint  var_cas_usedRegisterAddress ;
    GGS_bool var_cas_useBSRregister ;
    const GGS_registerExpression  _temp_31582 = operand_31307->mRegisterExpression ;
    if (_temp_31582._isBuilt ()) {
      typeCategoryMethod__registerExpression__getRegisterAddressingInformations _method = findCategoryMethod__registerExpression__getRegisterAddressingInformations (_temp_31582._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31582 (HERE), var_cas_inCodeGenerationContext, var_cas_usedRegisterAddress, var_cas_useBSRregister, var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (930)) ;
      }
    }
    GGS_uint  var_cas_bitNumber ;
    const GGS_bitNumberExpression  _temp_31758 = operand_31307->mBitNumber ;
    if (_temp_31758._isBuilt ()) {
      typeCategoryMethod__bitNumberExpression__getBitNumber _method = findCategoryMethod__bitNumberExpression__getBitNumber (_temp_31758._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_31758 (HERE), var_cas_bitSliceTable, var_cas_bitNumber COMMA_SOURCE_FILE_AT_LINE (938)) ;
      }
    }
    GGS_uint  var_cas_code ;
    operand_31307->method_baseCode (_inLexique, var_cas_code COMMA_SOURCE_FILE_AT_LINE (941)) ;
    if ((var_cas_useBSRregister).isBuiltAndTrue ()) {
      var_cas_code = (var_cas_code)._operator_or (GGS_uint (true, 256U)) ;
    }
    var_cas_code = (var_cas_code)._operator_or ((var_cas_usedRegisterAddress)._operator_and (GGS_uint (true, 255U))) ;
    var_cas_code = (var_cas_code)._operator_or (var_cas_bitNumber._left_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (946))) ;
    if (var_cas_code._isBuilt ()) {
      ::routine_emitCode (_inLexique,  var_cas_code COMMA_SOURCE_FILE_AT_LINE (946)) ;
    }
    ::routine_emitBRAinstruction (_inLexique,  var_cas_inCurrentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (950)),  var_cas_inTargetAddress,  var_cas_inErrorLocation COMMA_SOURCE_FILE_AT_LINE (947)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@instruction_structured_if.generateCodeAtAddress'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__instruction_structured_if__generateCodeAtAddress (C_Compiler & _inLexique,
                                const cPtr_instruction_structured_if * operand_32241,
                                const GGS_codeGenerationContext  var_cas_inCodeGenerationContext,
                                const GGS_uint   var_cas_inAddress,
                                GGS_bool & var_cas_ioContinuesInSequence
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32241 != NULL) {
    ::routine_checkInstructionIsReachable (_inLexique,  var_cas_ioContinuesInSequence,  operand_32241->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (962)) ;
    GGS_uint  var_cas_thenInstructionsLength ;
    var_cas_thenInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_32525 (operand_32241->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_32525 = NULL ;
      while (((operand_32525 = enumerator_32525.nextObject ()))) {
        macroValidPointer (operand_32525) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_32578 = operand_32525->mInstruction ;
        if (_temp_32578._isBuilt ()) {
          _temp_32578 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (967)) ;
        }
        var_cas_thenInstructionsLength = var_cas_thenInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (968)) ;
      }
    }
    GGS_uint  var_cas_elseInstructionsLength ;
    var_cas_elseInstructionsLength = GGS_uint (true, 0U) ;
    {
      GGS_instructionList::cEnumerator enumerator_32759 (operand_32241->mElseInstructionList, true) ;
      const GGS_instructionList::cElement * operand_32759 = NULL ;
      while (((operand_32759 = enumerator_32759.nextObject ()))) {
        macroValidPointer (operand_32759) ;
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_32812 = operand_32759->mInstruction ;
        if (_temp_32812._isBuilt ()) {
          _temp_32812 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (973)) ;
        }
        var_cas_elseInstructionsLength = var_cas_elseInstructionsLength._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (974)) ;
      }
    }
    GGS_uint  var_cas_conditionLength ;
    const GGS_structured_if_condition  _temp_32977 = operand_32241->mIfCondition ;
    if (_temp_32977._isBuilt ()) {
      _temp_32977 (HERE)->method_conditionLength (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }
    GGS_uint  var_cas_conditionalBranchDestination ;
    var_cas_conditionalBranchDestination = var_cas_inAddress._add_operation (_inLexique, var_cas_thenInstructionsLength COMMA_SOURCE_FILE_AT_LINE (980))._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (980)) ;
    if (((operand_32241->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (981)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      var_cas_conditionalBranchDestination = var_cas_conditionalBranchDestination._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (982)) ;
    }
    const GGS_structured_if_condition  _temp_33271 = operand_32241->mIfCondition ;
    if (_temp_33271._isBuilt ()) {
      typeCategoryMethod__structured_if_condition__emitInstruction _method = findCategoryMethod__structured_if_condition__emitInstruction (_temp_33271._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (_inLexique, _temp_33271 (HERE), var_cas_inCodeGenerationContext, var_cas_inAddress, var_cas_conditionalBranchDestination, operand_32241->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (984)) ;
      }
    }
    GGS_uint  var_cas_currentAddress ;
    var_cas_currentAddress = var_cas_inAddress._add_operation (_inLexique, var_cas_conditionLength COMMA_SOURCE_FILE_AT_LINE (991)) ;
    GGS_bool var_cas_continuesInSequence ;
    var_cas_continuesInSequence = GGS_bool (true, true) ;
    {
      GGS_instructionList::cEnumerator enumerator_33531 (operand_32241->mThenInstructionList, true) ;
      const GGS_instructionList::cElement * operand_33531 = NULL ;
      while (((operand_33531 = enumerator_33531.nextObject ()))) {
        macroValidPointer (operand_33531) ;
        const GGS_instruction  _temp_33573 = operand_33531->mInstruction ;
        if (_temp_33573._isBuilt ()) {
          typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_33573._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (_inLexique, _temp_33573 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (994)) ;
          }
        }
        GGS_uint  var_cas_lg ;
        const GGS_instruction  _temp_33713 = operand_33531->mInstruction ;
        if (_temp_33713._isBuilt ()) {
          _temp_33713 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (999)) ;
        }
        var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1000)) ;
      }
    }
    if (((operand_32241->mElseInstructionList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1003)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      ::routine_emitBRAinstruction (_inLexique,  var_cas_currentAddress,  var_cas_currentAddress._add_operation (_inLexique, var_cas_elseInstructionsLength COMMA_SOURCE_FILE_AT_LINE (1006))._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1006)),  operand_32241->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1003)) ;
      var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1009)) ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_34091 (operand_32241->mElseInstructionList, true) ;
        const GGS_instructionList::cElement * operand_34091 = NULL ;
        while (((operand_34091 = enumerator_34091.nextObject ()))) {
          macroValidPointer (operand_34091) ;
          const GGS_instruction  _temp_34135 = operand_34091->mInstruction ;
          if (_temp_34135._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_34135._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_34135 (HERE), var_cas_inCodeGenerationContext, var_cas_currentAddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1012)) ;
            }
          }
          GGS_uint  var_cas_lg ;
          const GGS_instruction  _temp_34285 = operand_34091->mInstruction ;
          if (_temp_34285._isBuilt ()) {
            _temp_34285 (HERE)->method_instructionLength (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1017)) ;
          }
          var_cas_currentAddress = var_cas_currentAddress._add_operation (_inLexique, var_cas_lg COMMA_SOURCE_FILE_AT_LINE (1018)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1032)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1032))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1033)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1037)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (1036)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_35520 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_35520 = NULL ;
    while (((operand_35520 = enumerator_35520.nextObject ()))) {
      macroValidPointer (operand_35520) ;
      if (((operand_35520->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1042)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_35520->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1044)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_35520->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1047)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_35520->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (1049)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_35520->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (1053)) ;
      }
    }
  }
  GGS_uint  var_cas_currentROMaddress ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  GGS_routineSymbolTable  var_cas_routineSymbolTable ;
  var_cas_routineSymbolTable = GGS_routineSymbolTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_36310 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_36310 = NULL ;
      while (((operand_36310 = enumerator_36310.nextObject ()))) {
        macroValidPointer (operand_36310) ;
        if (((operand_36310->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1062)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_36492 (operand_36310->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_36492 = NULL ;
            while (((operand_36492 = enumerator_36492.nextObject ()))) {
              macroValidPointer (operand_36492) ;
              const GGS_instruction  _temp_36536 = operand_36492->mInstruction ;
              if (_temp_36536._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_36536._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_36536 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1065)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_36672 = operand_36492->mInstruction ;
              if (_temp_36672._isBuilt ()) {
                _temp_36672 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1067)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1068)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_highInterruptStartAddress ;
  var_cas_highInterruptStartAddress = var_cas_currentROMaddress ;
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_37130 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1081)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_37130 = NULL ;
      while (((operand_37130 = enumerator_37130.nextObject ()))) {
        macroValidPointer (operand_37130) ;
        if (((operand_37130->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1082)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          GGS_uint  var_cas_currentlySelectedBank ;
          var_cas_currentlySelectedBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          {
            GGS_instructionList::cEnumerator enumerator_37313 (operand_37130->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_37313 = NULL ;
            while (((operand_37313 = enumerator_37313.nextObject ()))) {
              macroValidPointer (operand_37313) ;
              const GGS_instruction  _temp_37357 = operand_37313->mInstruction ;
              if (_temp_37357._isBuilt ()) {
                typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_37357._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_37357 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1085)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_37493 = operand_37313->mInstruction ;
              if (_temp_37493._isBuilt ()) {
                _temp_37493 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1087)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1088)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1091)) ;
        }
      }
    }
  }
  if ((((var_cas_hasHighInterrupt)._operator_not ())._operator_and ((var_cas_hasLowInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_37887 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1099)), true) ;
    const GGS_routineDefinitionList::cElement * operand_37887 = NULL ;
    while (((operand_37887 = enumerator_37887.nextObject ()))) {
      macroValidPointer (operand_37887) ;
      GGS_uint  var_cas_currentlySelectedBank ;
      var_cas_currentlySelectedBank = operand_37887->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      var_cas_routineSymbolTable.modifier_insertKey (_inLexique, operand_37887->mRoutineName, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      {
        GGS_instructionList::cEnumerator enumerator_38090 (operand_37887->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_38090 = NULL ;
        while (((operand_38090 = enumerator_38090.nextObject ()))) {
          macroValidPointer (operand_38090) ;
          const GGS_instruction  _temp_38130 = operand_38090->mInstruction ;
          if (_temp_38130._isBuilt ()) {
            typeCategoryMethod__instruction__enterLabelAtAddress _method = findCategoryMethod__instruction__enterLabelAtAddress (_temp_38130._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_38130 (HERE), var_cas_routineSymbolTable, var_cas_currentROMaddress, var_cas_currentlySelectedBank COMMA_SOURCE_FILE_AT_LINE (1103)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_38258 = operand_38090->mInstruction ;
          if (_temp_38258._isBuilt ()) {
            _temp_38258 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1105)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1106)) ;
        }
      }
    }
  }
  GGS_uint  var_cas_computedGoto4RoutineAddress ;
  var_cas_computedGoto4RoutineAddress = var_cas_currentROMaddress ;
  GGS_uint  var_cas_computedGoto2RoutineAddress ;
  var_cas_computedGoto2RoutineAddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1111)) ;
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1112))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 12U) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
  }else if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1114))).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1115)) ;
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1118)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (1119)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_38958 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1120)), true) ;
    const GGS_ramDefinitionList::cElement * operand_38958 = NULL ;
    while (((operand_38958 = enumerator_38958.nextObject ()))) {
      macroValidPointer (operand_38958) ;
      GGS_uint  var_cas_lastAddressPlusOne ;
      GGS_uint  var_cas_firstFreeAddress ;
      const GGS_ramBankTable  _temp_39091 = var_cas_ramBank ;
      if (_temp_39091._isBuilt ()) {
        _temp_39091 (HERE)->method_searchKey (_inLexique, operand_38958->mBankName, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }
      {
        GGS_declarationInRamList::cEnumerator enumerator_39165 (operand_38958->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_39165 = NULL ;
        while (((operand_39165 = enumerator_39165.nextObject ()))) {
          macroValidPointer (operand_39165) ;
          if (((operand_39165->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1126)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            operand_39165->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (1127)) ;
          }
          GGS_bitSliceTable  var_cas_bitSliceTable ;
          var_cas_bitSliceTable = GGS_bitSliceTable ::constructor_emptyMap (_inLexique COMMA_HERE) ;
          var_cas_registerTable.modifier_insertKey (_inLexique, operand_39165->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_39165->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1130)), var_cas_bitSliceTable COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_39165->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
          var_cas_ramBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, operand_38958->mBankName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1132)) COMMA_SOURCE_FILE_AT_LINE (1132)) ;
          if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
            operand_39165->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (operand_38958->mBankName))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_39165->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
          }
        }
      }
    }
  }
  GGS_uint  var_cas_programSize ;
  var_cas_programSize = var_cas_currentROMaddress ;
  if (GGS_uint (true, 0U)._isBuilt ()) {
    ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 0U) COMMA_SOURCE_FILE_AT_LINE (1139)) ;
  }
  if (((var_cas_routineSymbolTable.reader_hasKey (_inLexique, GGS_string (true, "main") COMMA_SOURCE_FILE_AT_LINE (1143)))._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "there is no 'main' routine") COMMA_SOURCE_FILE_AT_LINE (1144)) ;
  }else{
    GGS_uint  var_cas_mainRoutineAddress ;
    GGS_uint  automatic_var_7 ;
    const GGS_routineSymbolTable  _temp_40194 = var_cas_routineSymbolTable ;
    if (_temp_40194._isBuilt ()) {
      _temp_40194 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "main"), GGS_location (_inLexique) COMMA_HERE), var_cas_mainRoutineAddress, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (1147)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1148)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1148)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1147)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1149)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_mainRoutineAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1149))) COMMA_SOURCE_FILE_AT_LINE (1148)) ;
    }
  }
  if (((var_cas_hasHighInterrupt)._operator_and (var_cas_hasLowInterrupt)).isBuiltAndTrue ()) {
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1154)) ;
    }
    if ((GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1156)))._operator_and (GGS_uint (true, 255U)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61184U))._operator_or ((var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1156)))._operator_and (GGS_uint (true, 255U))) COMMA_SOURCE_FILE_AT_LINE (1155)) ;
    }
    if ((GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1157)))._isBuilt ()) {
      ::routine_emitCode (_inLexique,  (GGS_uint (true, 61440U))._operator_or (var_cas_highInterruptStartAddress._right_shift_operation (_inLexique, GGS_uint (true, 9U) COMMA_SOURCE_FILE_AT_LINE (1157))) COMMA_SOURCE_FILE_AT_LINE (1156)) ;
    }
  }
  GGS_codeGenerationContext var_cas_codeGenerationContext ;
  var_cas_codeGenerationContext = GGS_codeGenerationContext::constructor_new (var_cas_routineSymbolTable, var_cas_registerTable, GGS_uint (true, 0U), var_cas_computedGoto2RoutineAddress, var_cas_computedGoto4RoutineAddress) ;
  var_cas_currentROMaddress = GGS_uint (true, 24U) ;
  if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
    if (GGS_uint (true, 24U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (1169)) ;
    }
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_41182 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1171)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_41182 = NULL ;
      while (((operand_41182 = enumerator_41182.nextObject ()))) {
        macroValidPointer (operand_41182) ;
        if (((operand_41182->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1172)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_41413 (operand_41182->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_41413 = NULL ;
            while (((operand_41413 = enumerator_41413.nextObject ()))) {
              macroValidPointer (operand_41413) ;
              const GGS_instruction  _temp_41457 = operand_41413->mInstruction ;
              if (_temp_41457._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_41457._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_41457 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1176)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_41595 = operand_41413->mInstruction ;
              if (_temp_41595._isBuilt ()) {
                _temp_41595 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1178)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1179)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1179)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1183)) ;
        }
      }
    }
  }
  if (((var_cas_hasLowInterrupt)._operator_not ()).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 8U) ;
    if (GGS_uint (true, 8U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (1190)) ;
    }
  }
  if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
    {
      GGS_interruptDefinitionList::cEnumerator enumerator_42132 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1194)), true) ;
      const GGS_interruptDefinitionList::cElement * operand_42132 = NULL ;
      while (((operand_42132 = enumerator_42132.nextObject ()))) {
        macroValidPointer (operand_42132) ;
        if (((operand_42132->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1195)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
          var_cas_codeGenerationContext.mCurrentBank = GGS_uint ::constructor_max (_inLexique COMMA_HERE) ;
          GGS_bool var_cas_continuesInSequence ;
          var_cas_continuesInSequence = GGS_bool (true, true) ;
          {
            GGS_instructionList::cEnumerator enumerator_42364 (operand_42132->mInstructionList, true) ;
            const GGS_instructionList::cElement * operand_42364 = NULL ;
            while (((operand_42364 = enumerator_42364.nextObject ()))) {
              macroValidPointer (operand_42364) ;
              const GGS_instruction  _temp_42408 = operand_42364->mInstruction ;
              if (_temp_42408._isBuilt ()) {
                typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_42408._galgasObjectRunTimeInfo ()) ;
                if (_method != NULL) {
                  _method (_inLexique, _temp_42408 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1199)) ;
                }
              }
              GGS_uint  var_cas_length ;
              const GGS_instruction  _temp_42546 = operand_42364->mInstruction ;
              if (_temp_42546._isBuilt ()) {
                _temp_42546 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1201)) ;
              }
              var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1202)) ;
              ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1202)) ;
            }
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
          if (GGS_uint (true, 17U)._isBuilt ()) {
            ::routine_emitCode (_inLexique,  GGS_uint (true, 17U) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
          }
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1206)) ;
        }
      }
    }
  }
  if ((((var_cas_hasLowInterrupt)._operator_not ())._operator_and ((var_cas_hasHighInterrupt)._operator_not ())).isBuiltAndTrue ()) {
    var_cas_currentROMaddress = GGS_uint (true, 4U) ;
    if (GGS_uint (true, 4U)._isBuilt ()) {
      ::routine_setEmitAddress (_inLexique,  GGS_uint (true, 4U) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
    }
  }
  {
    GGS_routineDefinitionList::cEnumerator enumerator_43058 (var_cas_inPiccoloModel.reader_mRoutineDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (1216)), true) ;
    const GGS_routineDefinitionList::cElement * operand_43058 = NULL ;
    while (((operand_43058 = enumerator_43058.nextObject ()))) {
      macroValidPointer (operand_43058) ;
      var_cas_codeGenerationContext.mCurrentBank = operand_43058->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1217)) ;
      if ((((operand_43058->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1218)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_43058->mBanksel.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1218)))._operator_isNotEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
        operand_43058->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as PIC18 is started with BSR register set to 0, the 'main' routine requires the 'banksel 0' declaration") COMMA_SOURCE_FILE_AT_LINE (1219)) ;
      }
      if ((((operand_43058->mRoutineName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221)))._operator_isEqual (GGS_string (true, "main")))._operator_and ((operand_43058->mHasNoReturn)._operator_not ())).isBuiltAndTrue ()) {
        operand_43058->mRoutineName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "as the 'main' routine is an endless loop, it should be declared with 'noreturn' qualifier") COMMA_SOURCE_FILE_AT_LINE (1222)) ;
      }
      GGS_bool var_cas_continuesInSequence ;
      var_cas_continuesInSequence = GGS_bool (true, true) ;
      {
        GGS_instructionList::cEnumerator enumerator_43627 (operand_43058->mInstructionList, true) ;
        const GGS_instructionList::cElement * operand_43627 = NULL ;
        while (((operand_43627 = enumerator_43627.nextObject ()))) {
          macroValidPointer (operand_43627) ;
          const GGS_instruction  _temp_43667 = operand_43627->mInstruction ;
          if (_temp_43667._isBuilt ()) {
            typeCategoryMethod__instruction__generateCodeAtAddress _method = findCategoryMethod__instruction__generateCodeAtAddress (_temp_43667._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_43667 (HERE), var_cas_codeGenerationContext, var_cas_currentROMaddress, var_cas_continuesInSequence COMMA_SOURCE_FILE_AT_LINE (1226)) ;
            }
          }
          GGS_uint  var_cas_length ;
          const GGS_instruction  _temp_43797 = operand_43627->mInstruction ;
          if (_temp_43797._isBuilt ()) {
            _temp_43797 (HERE)->method_instructionLength (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1228)) ;
          }
          var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, var_cas_length COMMA_SOURCE_FILE_AT_LINE (1229)) ;
          ::routine_checkCurrentEmitAddress (_inLexique,  var_cas_currentROMaddress COMMA_SOURCE_FILE_AT_LINE (1229)) ;
        }
      }
    }
  }
  if ((var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1234))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 2U) COMMA_SOURCE_FILE_AT_LINE (1236)) ;
  }
  if (((var_cas_inPiccoloModel.reader_mNeedsComputedGoto2 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1238)))._operator_or (var_cas_inPiccoloModel.reader_mNeedsComputedGoto4 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1238)))).isBuiltAndTrue ()) {
    if (GGS_uint (true, 9448U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9448U) COMMA_SOURCE_FILE_AT_LINE (1238)) ;
    }
    if (GGS_uint (true, 9981U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 9981U) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
    }
    if (GGS_uint (true, 3584U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 3584U) COMMA_SOURCE_FILE_AT_LINE (1240)) ;
    }
    if (GGS_uint (true, 8958U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 8958U) COMMA_SOURCE_FILE_AT_LINE (1241)) ;
    }
    if (GGS_uint (true, 18U)._isBuilt ()) {
      ::routine_emitCode (_inLexique,  GGS_uint (true, 18U) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
    }
    var_cas_currentROMaddress = var_cas_currentROMaddress._add_operation (_inLexique, GGS_uint (true, 10U) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
  }
  if (((var_cas_programSize)._operator_isNotEqual (var_cas_currentROMaddress)).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "Internal second pass error: the last address gets "))._operator_concat (var_cas_currentROMaddress.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1248))))._operator_concat (GGS_string (true, " value in second pass, while it gets ")))._operator_concat (var_cas_programSize.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (1250))))._operator_concat (GGS_string (true, " in first pass")) COMMA_SOURCE_FILE_AT_LINE (1250)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_contents ;
    ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (1254)) ;
    GGS_string var_cas_destinationFile ;
    var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (1256)))._operator_concat (GGS_string (true, ".hex")) ;
    const GGS_string _temp_45080 = var_cas_contents ;
    if (_temp_45080._isBuilt ()) {
      _temp_45080 (HERE)->method_writeToFile (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__instruction__enterLabelAtAddress (category_method__instruction__enterLabelAtAddress, gClassInfoFor__instruction.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_LABEL__enterLabelAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_FOREVER__enterLabelAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__enterLabelAtAddress ((typeCategoryMethod__instruction__enterLabelAtAddress) category_method__instruction_structured_if__enterLabelAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddress (category_method__registerExpression__getRegisterAddress, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__registerExpression__getRegisterAddressingInformations (category_method__registerExpression__getRegisterAddressingInformations, gClassInfoFor__registerExpression.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FDA__generateCodeAtAddress, gClassInfoFor__instruction_FDA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FA__generateCodeAtAddress, gClassInfoFor__instruction_FA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVFF__generateCodeAtAddress, gClassInfoFor__instruction_MOVFF.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLiteralValue__getBitNumber, gClassInfoFor__bitNumberLiteralValue.slotID ()) ;
 enterCategoryMethod__bitNumberExpression__getBitNumber ((typeCategoryMethod__bitNumberExpression__getBitNumber) category_method__bitNumberLabelValue__getBitNumber, gClassInfoFor__bitNumberLabelValue.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FBA__generateCodeAtAddress, gClassInfoFor__instruction_FBA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_conditionalBranch__generateCodeAtAddress, gClassInfoFor__instruction_conditionalBranch.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_BRA__generateCodeAtAddress, gClassInfoFor__instruction_BRA.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_GOTO__generateCodeAtAddress, gClassInfoFor__instruction_GOTO.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CALL__generateCodeAtAddress, gClassInfoFor__instruction_CALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RCALL__generateCodeAtAddress, gClassInfoFor__instruction_RCALL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_CLRWDT__generateCodeAtAddress, gClassInfoFor__instruction_CLRWDT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_DAW__generateCodeAtAddress, gClassInfoFor__instruction_DAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_NOP__generateCodeAtAddress, gClassInfoFor__instruction_NOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_POP__generateCodeAtAddress, gClassInfoFor__instruction_POP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_PUSH__generateCodeAtAddress, gClassInfoFor__instruction_PUSH.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RESET__generateCodeAtAddress, gClassInfoFor__instruction_RESET.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_RETURN__generateCodeAtAddress, gClassInfoFor__instruction_RETURN.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_SLEEP__generateCodeAtAddress, gClassInfoFor__instruction_SLEEP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_literalOperation__generateCodeAtAddress, gClassInfoFor__instruction_literalOperation.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LFSR__generateCodeAtAddress, gClassInfoFor__instruction_LFSR.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVLB__generateCodeAtAddress, gClassInfoFor__instruction_MOVLB.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_LABEL__generateCodeAtAddress, gClassInfoFor__instruction_LABEL.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MOVAW__generateCodeAtAddress, gClassInfoFor__instruction_MOVAW.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLRD__generateCodeAtAddress, gClassInfoFor__instruction_TBLRD.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_TBLWT__generateCodeAtAddress, gClassInfoFor__instruction_TBLWT.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_MNOP__generateCodeAtAddress, gClassInfoFor__instruction_MNOP.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_FOREVER__generateCodeAtAddress, gClassInfoFor__instruction_FOREVER.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_SEMI_COLON__generateCodeAtAddress, gClassInfoFor__instruction_IF_SEMI_COLON.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_IF_BitTest__generateCodeAtAddress, gClassInfoFor__instruction_IF_BitTest.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_retlw__generateCodeAtAddress, gClassInfoFor__instruction_computed_retlw.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_bra__generateCodeAtAddress, gClassInfoFor__instruction_computed_bra.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_computed_goto__generateCodeAtAddress, gClassInfoFor__instruction_computed_goto.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bcc_in_structured_if_condition__emitInstruction, gClassInfoFor__bcc_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__structured_if_condition__emitInstruction ((typeCategoryMethod__structured_if_condition__emitInstruction) category_method__bitTest_in_structured_if_condition__emitInstruction, gClassInfoFor__bitTest_in_structured_if_condition.slotID ()) ;
 enterCategoryMethod__instruction__generateCodeAtAddress ((typeCategoryMethod__instruction__generateCodeAtAddress) category_method__instruction_structured_if__generateCodeAtAddress, gClassInfoFor__instruction_structured_if.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

