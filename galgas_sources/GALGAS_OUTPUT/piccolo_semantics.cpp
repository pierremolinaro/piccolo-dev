//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'piccolo_semantics.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 29th, 2008, at 21h56'9"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "piccolo_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "piccolo_semantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@declarationInRam.handleDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__declarationInRam__handleDeclaration> gDispatchTableFor__declarationInRam__handleDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__declarationInRam__handleDeclaration (typeCategoryMethod__declarationInRam__handleDeclaration inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__declarationInRam__handleDeclaration
findCategoryMethod__declarationInRam__handleDeclaration (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__declarationInRam__handleDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__declarationInRam__handleDeclaration.count ()) {
    result = gDispatchTableFor__declarationInRam__handleDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__declarationInRam__handleDeclaration (superClassPtr) ;
      gDispatchTableFor__declarationInRam__handleDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@commonDeclarationInRam.handleDeclaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__commonDeclarationInRam__handleDeclaration (C_Compiler & _inLexique,
                                const cPtr_commonDeclarationInRam * operand_1030,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1030 != NULL) {
    GGS_uint  var_cas_firstFreeAddressBeforeCommon ;
    GGS_uint  automatic_var_0 ;
    const GGS_ramBankTable  _temp_1194 = var_cas_ioRamBank ;
    if (_temp_1194._isBuilt ()) {
      _temp_1194 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_firstFreeAddressBeforeCommon, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (27)) ;
    }
    GGS_bool var_cas_firstFreeAddressDefined ;
    var_cas_firstFreeAddressDefined = GGS_bool (true, false) ;
    GGS_uint  var_cas_firstFreeAddress ;
    var_cas_firstFreeAddress = GGS_uint (true, 0U) ;
    {
      GGS_commonBranchList::cEnumerator enumerator_1343 (operand_1030->mBranchList, true) ;
      const GGS_commonBranchList::cElement * operand_1343 = NULL ;
      while (((operand_1343 = enumerator_1343.nextObject ()))) {
        macroValidPointer (operand_1343) ;
        GGS_ramBankTable  var_cas_ramBank ;
        var_cas_ramBank = var_cas_ioRamBank ;
        {
          GGS_declarationInRamList::cEnumerator enumerator_1411 (operand_1343->mDeclarations, true) ;
          const GGS_declarationInRamList::cElement * operand_1411 = NULL ;
          while (((operand_1411 = enumerator_1411.nextObject ()))) {
            macroValidPointer (operand_1411) ;
            const GGS_declarationInRam  _temp_1448 = operand_1411->mDeclaration ;
            if (_temp_1448._isBuilt ()) {
              typeCategoryMethod__declarationInRam__handleDeclaration _method = findCategoryMethod__declarationInRam__handleDeclaration (_temp_1448._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (_inLexique, _temp_1448 (HERE), var_cas_ramBank, var_cas_ioRegisterTable, var_cas_inCurrentRamBank COMMA_SOURCE_FILE_AT_LINE (33)) ;
              }
            }
          }
        }
        GGS_uint  var_cas_ffa ;
        GGS_uint  automatic_var_1 ;
        const GGS_ramBankTable  _temp_1562 = var_cas_ramBank ;
        if (_temp_1562._isBuilt ()) {
          _temp_1562 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_ffa, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (36)) ;
        }
        if (((var_cas_firstFreeAddressDefined)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_firstFreeAddress = var_cas_ffa ;
          var_cas_firstFreeAddressDefined = GGS_bool (true, true) ;
        }else if (((var_cas_ffa)._operator_isNotEqual (var_cas_firstFreeAddress)).isBuiltAndTrue ()) {
          operand_1343->mEndOfBranchLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "this branch allocates "))._operator_concat (var_cas_ffa._substract_operation (_inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (41)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (41))))._operator_concat (GGS_string (true, " byte(s), while the first branch allocates ")))._operator_concat (var_cas_firstFreeAddress._substract_operation (_inLexique, var_cas_firstFreeAddressBeforeCommon COMMA_SOURCE_FILE_AT_LINE (43)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43))))._operator_concat (GGS_string (true, " byte(s)")) COMMA_SOURCE_FILE_AT_LINE (43)) ;
        }
      }
    }
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (46)) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@byteDeclarationInRam.handleDeclaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__byteDeclarationInRam__handleDeclaration (C_Compiler & _inLexique,
                                const cPtr_byteDeclarationInRam * operand_2243,
                                GGS_ramBankTable  & var_cas_ioRamBank,
                                GGS_registerTable  & var_cas_ioRegisterTable,
                                const GGS_lstring   var_cas_inCurrentRamBank
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2243 != NULL) {
    GGS_uint  var_cas_lastAddressPlusOne ;
    GGS_uint  var_cas_firstFreeAddress ;
    const GGS_ramBankTable  _temp_2424 = var_cas_ioRamBank ;
    if (_temp_2424._isBuilt ()) {
      _temp_2424 (HERE)->method_searchKey (_inLexique, var_cas_inCurrentRamBank, var_cas_firstFreeAddress, var_cas_lastAddressPlusOne COMMA_SOURCE_FILE_AT_LINE (58)) ;
    }
    if (((operand_2243->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      operand_2243->mSize.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "zero size is not allowed") COMMA_SOURCE_FILE_AT_LINE (60)) ;
    }
    var_cas_ioRegisterTable.modifier_insertKey (_inLexique, operand_2243->mName, GGS_uintlist ::constructor_listWithValue (var_cas_firstFreeAddress), operand_2243->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)), operand_2243->mBitSliceTable COMMA_SOURCE_FILE_AT_LINE (62)) ;
    var_cas_firstFreeAddress = var_cas_firstFreeAddress._add_operation (_inLexique, operand_2243->mSize.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (63)) ;
    var_cas_ioRamBank.modifier_setMFirstFreeAddressForKey (_inLexique, var_cas_firstFreeAddress, var_cas_inCurrentRamBank.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)) COMMA_SOURCE_FILE_AT_LINE (64)) ;
    if (((var_cas_firstFreeAddress)._operator_strictSup (var_cas_lastAddressPlusOne)).isBuiltAndTrue ()) {
      operand_2243->mName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "overflow in '"))._operator_concat (var_cas_inCurrentRamBank))._operator_concat (GGS_string (true, "' ram bank for '")))._operator_concat (operand_2243->mName))._operator_concat (GGS_string (true, "' declaration")) COMMA_SOURCE_FILE_AT_LINE (66)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "analyze"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyze (C_Compiler & _inLexique,
                                const GGS_piccoloModel  var_cas_inPiccoloModel,
                                const GGS_string  var_cas_inSourceFileName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyze at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_sourceFileBaseName ;
  var_cas_sourceFileBaseName = var_cas_inSourceFileName.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ;
  if (((var_cas_sourceFileBaseName)._operator_isNotEqual (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)))).isBuiltAndTrue ()) {
    var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the program name ('"))._operator_concat (var_cas_inPiccoloModel.reader_mProgramName (_inLexique COMMA_SOURCE_FILE_AT_LINE (79))))._operator_concat (GGS_string (true, "') should be identical to the file base name '")))._operator_concat (var_cas_sourceFileBaseName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }
  GGS_piccoloDeviceModel var_cas_piccoloDeviceModel ;
  ::routine_parseDeviceDefinition (_inLexique,  var_cas_inPiccoloModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (84)),  var_cas_piccoloDeviceModel COMMA_SOURCE_FILE_AT_LINE (83)) ;
  GGS_bool var_cas_hasHighInterrupt ;
  var_cas_hasHighInterrupt = GGS_bool (true, false) ;
  GGS_bool var_cas_hasLowInterrupt ;
  var_cas_hasLowInterrupt = GGS_bool (true, false) ;
  {
    GGS_interruptDefinitionList::cEnumerator enumerator_4146 (var_cas_inPiccoloModel.reader_mInterruptDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (88)), true) ;
    const GGS_interruptDefinitionList::cElement * operand_4146 = NULL ;
    while (((operand_4146 = enumerator_4146.nextObject ()))) {
      macroValidPointer (operand_4146) ;
      if (((operand_4146->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)))._operator_isEqual (GGS_string (true, "high"))).isBuiltAndTrue ()) {
        if ((var_cas_hasHighInterrupt).isBuiltAndTrue ()) {
          operand_4146->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'high' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (91)) ;
        }
        var_cas_hasHighInterrupt = GGS_bool (true, true) ;
      }else if (((operand_4146->mInterruptName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)))._operator_isEqual (GGS_string (true, "low"))).isBuiltAndTrue ()) {
        if ((var_cas_hasLowInterrupt).isBuiltAndTrue ()) {
          operand_4146->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Only one 'low' interrupt routine is allowed") COMMA_SOURCE_FILE_AT_LINE (96)) ;
        }
        var_cas_hasLowInterrupt = GGS_bool (true, true) ;
      }else{
        operand_4146->mInterruptName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "An interrupt routine should be named 'low' or 'high'") COMMA_SOURCE_FILE_AT_LINE (100)) ;
      }
    }
  }
  GGS_ramBankTable  var_cas_ramBank ;
  var_cas_ramBank = var_cas_piccoloDeviceModel.reader_mRamBankTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
  GGS_registerTable  var_cas_registerTable ;
  var_cas_registerTable = var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (105)) ;
  {
    GGS_ramDefinitionList::cEnumerator enumerator_4916 (var_cas_inPiccoloModel.reader_mRamDefinitionList (_inLexique COMMA_SOURCE_FILE_AT_LINE (106)), true) ;
    const GGS_ramDefinitionList::cElement * operand_4916 = NULL ;
    while (((operand_4916 = enumerator_4916.nextObject ()))) {
      macroValidPointer (operand_4916) ;
      {
        GGS_declarationInRamList::cEnumerator enumerator_4967 (operand_4916->mDeclaration, true) ;
        const GGS_declarationInRamList::cElement * operand_4967 = NULL ;
        while (((operand_4967 = enumerator_4967.nextObject ()))) {
          macroValidPointer (operand_4967) ;
          const GGS_declarationInRam  _temp_5003 = operand_4967->mDeclaration ;
          if (_temp_5003._isBuilt ()) {
            typeCategoryMethod__declarationInRam__handleDeclaration _method = findCategoryMethod__declarationInRam__handleDeclaration (_temp_5003._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (_inLexique, _temp_5003 (HERE), var_cas_ramBank, var_cas_registerTable, operand_4916->mBankName COMMA_SOURCE_FILE_AT_LINE (108)) ;
            }
          }
        }
      }
    }
  }
  GGS_string var_cas_listFileContents ;
  var_cas_listFileContents = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (113)))).isBuiltAndTrue ()) {
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (114))) ;
    var_cas_listFileContents.writeString ("\n") ;
    var_cas_listFileContents.writeString ("*") ;
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "DECLARED VARIABLES").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 77U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (115))) ;
    var_cas_listFileContents.writeString ("*\n") ;
    var_cas_listFileContents._dotAssign_operation (GGS_string (true, "").reader_stringByLeftAndRightPadding (_inLexique, GGS_uint (true, 79U), GGS_char (true, '*') COMMA_SOURCE_FILE_AT_LINE (116))) ;
    var_cas_listFileContents.writeString ("\n"
      "\n") ;
    {
      GGS_registerTable::cEnumerator enumerator_5505 (var_cas_registerTable, true) ;
      const GGS_registerTable::cElement * operand_5505 = NULL ;
      while (((operand_5505 = enumerator_5505.nextObject ()))) {
        macroValidPointer (operand_5505) ;
        if (((var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)).reader_hasKey (_inLexique, operand_5505->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)))._operator_not ()).isBuiltAndTrue ()) {
          var_cas_listFileContents._dotAssign_operation (operand_5505->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119)).reader_stringByLeftPadding (_inLexique, GGS_uint (true, 40U), GGS_char (true, ' ') COMMA_SOURCE_FILE_AT_LINE (119))) ;
          var_cas_listFileContents.writeString (" ") ;
          GGS_uint  var_cas_address ;
          const GGS_uintlist  _temp_5725 = operand_5505->mInfo.mRegisterAddressList ;
          if (_temp_5725._isBuilt ()) {
            _temp_5725 (HERE)->method_first (_inLexique, var_cas_address COMMA_SOURCE_FILE_AT_LINE (120)) ;
          }
          var_cas_listFileContents._dotAssign_operation (var_cas_address.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (121))) ;
          var_cas_listFileContents.writeString ("\n") ;
        }
      }
    }
    var_cas_listFileContents.writeString ("\n") ;
  }
  GGS_uint  var_cas_accessBankSplitOffset ;
  switch (var_cas_piccoloDeviceModel.reader_mProcessorType (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)).enumValue ()) {
  case GGS_processorType::enum_pic18_60:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 96U) ;
    }
    break ;
  case GGS_processorType::enum_pic18_80:
    {
    var_cas_accessBankSplitOffset = GGS_uint (true, 128U) ;
    }
    break ;
  case GGS_processorType::kNotBuilt:
    break ;
  }
  GGS_ipic_instructionList  var_cas_generatedInstructionList ;
  ::routine_buildIPICAssemblyInstructionList (_inLexique,  var_cas_accessBankSplitOffset,  var_cas_registerTable,  var_cas_inPiccoloModel,  var_cas_hasHighInterrupt,  var_cas_hasLowInterrupt,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (132)) ;
  if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "doNotConvertRelative" COMMA_SOURCE_FILE_AT_LINE (143))))._operator_not ()).isBuiltAndTrue ()) {
    ::routine_convertRelativeBranchsToAbsoluteWhenNeeded (_inLexique,  var_cas_generatedInstructionList,  var_cas_listFileContents COMMA_SOURCE_FILE_AT_LINE (143)) ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "ouputListFile" COMMA_SOURCE_FILE_AT_LINE (147)))).isBuiltAndTrue ()) {
    GGS_string var_cas_listFile ;
    var_cas_listFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (148)))._operator_concat (GGS_string (true, ".list")) ;
    const GGS_string _temp_6850 = var_cas_listFileContents ;
    if (_temp_6850._isBuilt ()) {
      _temp_6850 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_listFile COMMA_SOURCE_FILE_AT_LINE (149)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("piccolo_options", "generateAssembly" COMMA_SOURCE_FILE_AT_LINE (153)))).isBuiltAndTrue ()) {
      GGS_string var_cas_assemblyCode ;
      ::routine_buildAssemblyCode (_inLexique,  var_cas_piccoloDeviceModel.reader_mDeviceName (_inLexique COMMA_SOURCE_FILE_AT_LINE (156)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (156)),  var_cas_piccoloDeviceModel.reader_mRegisterTable (_inLexique COMMA_SOURCE_FILE_AT_LINE (157)),  var_cas_registerTable,  var_cas_generatedInstructionList,  var_cas_assemblyCode COMMA_SOURCE_FILE_AT_LINE (154)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)))._operator_concat (GGS_string (true, ".asm")) ;
      const GGS_string _temp_7383 = var_cas_assemblyCode ;
      if (_temp_7383._isBuilt ()) {
        _temp_7383 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (163)) ;
      }
    }else{
      ::routine_buildBinaryCode (_inLexique,  var_cas_generatedInstructionList,  var_cas_piccoloDeviceModel.reader_mRomSize (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)) COMMA_SOURCE_FILE_AT_LINE (164)) ;
      GGS_string var_cas_contents ;
      ::routine_getGeneratedContents (_inLexique,  var_cas_contents COMMA_SOURCE_FILE_AT_LINE (169)) ;
      GGS_string var_cas_destinationFile ;
      var_cas_destinationFile = (var_cas_inSourceFileName.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)))._operator_concat (GGS_string (true, ".hex")) ;
      const GGS_string _temp_7728 = var_cas_contents ;
      if (_temp_7728._isBuilt ()) {
        _temp_7728 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_destinationFile COMMA_SOURCE_FILE_AT_LINE (172)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyze\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_piccolo_semantics (void) {
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__commonDeclarationInRam__handleDeclaration, gClassInfoFor__commonDeclarationInRam.slotID ()) ;
 enterCategoryMethod__declarationInRam__handleDeclaration ((typeCategoryMethod__declarationInRam__handleDeclaration) category_method__byteDeclarationInRam__handleDeclaration, gClassInfoFor__byteDeclarationInRam.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_piccolo_semantics (prologueRoutineFor_piccolo_semantics,
                                   NULL) ;

//---------------------------------------------------------------------------*

